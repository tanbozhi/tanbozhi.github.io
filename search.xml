<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Angular学习</title>
    <url>/2023/02/03/Angular%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>需要有<code>node cpm python</code>环境</p>
<h6 id="安装脚手架"><a href="#安装脚手架" class="headerlink" title="安装脚手架"></a>安装脚手架</h6><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i -g @angular/cli<br></code></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">ng --version  <span class="hljs-regexp">//</span>查看版本<br></code></pre></td></tr></table></figure>
<h6 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h6><figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe">ng <span class="hljs-keyword">new</span> <span class="hljs-type">angular</span>-demo  <span class="hljs-comment">//angular-demo是项目名</span><br></code></pre></td></tr></table></figure>
<h6 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h6><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">ng serve<br>或<br>npm <span class="hljs-built_in">start</span><br><br>指定端口打开：ng serve <span class="hljs-comment">--port 3000</span><br></code></pre></td></tr></table></figure>
<h4 id="导入全局样式"><a href="#导入全局样式" class="headerlink" title="导入全局样式"></a>导入全局样式</h4><p>在<code>src</code>下的<code>styles.css</code>导入</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><code class="hljs elm">@<span class="hljs-keyword">import</span> url(&#x27;bootstrap/dist/css/bootstrap.css&#x27;)<br></code></pre></td></tr></table></figure>
<h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>app.component.ts<br><br>@Component(&#123;    		<span class="hljs-regexp">//</span>组件装饰器<br>  selector: <span class="hljs-string">&#x27;app-root&#x27;</span>, 		<span class="hljs-regexp">//</span>用来定义组件渲染的标签名称，就是组件的名字 <br>  templateUrl: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,	<span class="hljs-regexp">//</span>用来 指定组件的模板文件<br>  styleUrls: [<span class="hljs-string">&#x27;./app.component.css&#x27;</span>]	<span class="hljs-regexp">//</span>组件的样式文件<br>&#125;)<br>export class AppComponent &#123;<br>  title = <span class="hljs-string">&#x27;angular-demo&#x27;</span>;	<span class="hljs-regexp">//</span>暴露出去的变量<br>  count = <span class="hljs-number">0</span>;<br>  add = functuion()&#123;	<span class="hljs-regexp">//</span>暴露出一个函数<br>  	this.count++<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="xml">//组件的模板文件</span><br><span class="xml">//app.component.html</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">title</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">count</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> (<span class="hljs-attr">click</span>) = <span class="hljs-string">&#x27;add()&#x27;</span> &gt;</span>加一<span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
<h6 id="创建组件"><a href="#创建组件" class="headerlink" title="创建组件"></a>创建组件</h6><figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">ng <span class="hljs-keyword">generate</span> component 组件名<br><br>ng <span class="hljs-keyword">generate</span> component footer <span class="hljs-comment">//创建footer组件</span><br><br><span class="hljs-comment">//简写</span><br>ng g component 组件名<br><br><span class="hljs-comment">//会自动创建四个文件css html spec.ts ts</span><br><span class="hljs-comment">//还会自动更新app.module.ts文件，自动注册该组件</span><br></code></pre></td></tr></table></figure>
<h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@NgModule</span>(&#123;  <span class="hljs-comment">//组装模块资源：组件，指令，服务</span><br>  <span class="hljs-attribute">declarations</span>: [<br>    AppComponent,<br>    FooComponent<br>  ],<br>  <span class="hljs-attribute">imports</span>: [ 	<span class="hljs-comment">//依赖模块</span><br>    BrowserModule,<br>    AppRoutingModule<br>  ],<br>  <span class="hljs-attribute">providers</span>: [],<br>  <span class="hljs-attribute">bootstrap</span>: [AppComponent]	/指定启动的跟组件<br>&#125;)<br>export class AppModule &#123; &#125;<br></code></pre></td></tr></table></figure>
<h5 id="创建一个自定义模块"><a href="#创建一个自定义模块" class="headerlink" title="创建一个自定义模块"></a>创建一个自定义模块</h5><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">ng g <span class="hljs-keyword">module</span> 模块名字<br></code></pre></td></tr></table></figure>
<h4 id="数据绑定与指令"><a href="#数据绑定与指令" class="headerlink" title="数据绑定与指令"></a>数据绑定与指令</h4><h5 id="html绑定"><a href="#html绑定" class="headerlink" title="html绑定"></a><code>html绑定</code></h5><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="xml">html绑定:	</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">js表达式</span>&#125;&#125;</span><span class="xml"> //算数，比较，逻辑，三目，调用函数，不可以json序列化</span><br></code></pre></td></tr></table></figure>
<h5 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h5><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-number">1</span>. title=<span class="hljs-string">&quot;&#123;&#123;msg&#125;&#125;&quot;</span>  <span class="hljs-regexp">//</span>直接在属性上使用&#123;&#123;&#125;&#125;<br><span class="hljs-number">2</span>. [title]=<span class="hljs-string">&quot;msg&quot;</span>  <span class="hljs-regexp">//</span>使用[]做属性绑定<br></code></pre></td></tr></table></figure>
<h5 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h5><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">(<span class="hljs-built_in">click</span>)=<span class="hljs-string">&quot;func()&quot;</span> <span class="hljs-comment">//()不能省略</span><br></code></pre></td></tr></table></figure>
<h5 id="指令绑定"><a href="#指令绑定" class="headerlink" title="指令绑定"></a>指令绑定</h5><h6 id="指令使用"><a href="#指令使用" class="headerlink" title="指令使用"></a>指令使用</h6><figure class="highlight nim"><table><tr><td class="code"><pre><code class="hljs nim">ngFor	&lt;<span class="hljs-keyword">div</span> *ngFor=<span class="hljs-string">&quot;let item of arr;let index = index&quot;</span> &gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>	<br>ngIf	&lt;<span class="hljs-keyword">div</span> *ngIf=<span class="hljs-string">&quot;true&quot;</span> &gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br><br>ngIF和<span class="hljs-keyword">else</span>一起使用  重点在于noMore<br>    &lt;<span class="hljs-keyword">div</span> *ngIf=<span class="hljs-string">&quot;true; else noMore&quot;</span> &gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>        &lt;ng-<span class="hljs-keyword">template</span> <span class="hljs-comment">#noMore &gt; //这个标签不会被渲染</span><br>        &lt;p&gt;我是<span class="hljs-keyword">else</span>&lt;/p&gt;<br>    &lt;/ng-<span class="hljs-keyword">template</span>&gt;<br>    <br>//tip //使用ng-<span class="hljs-keyword">template</span>时，ngIf需要用中括号包裹<br>&lt;ng-<span class="hljs-keyword">template</span> [ngIf]=<span class="hljs-string">&quot;todos.length&quot;</span> &gt;&lt;ng-<span class="hljs-keyword">template</span>&gt;<br></code></pre></td></tr></table></figure>
<h6 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h6><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//创建指令 </span><br>ng g directive 指令名<br><br><span class="hljs-comment">//会创建一个文件</span><br><span class="hljs-comment">//xu-yao-qiang-diao.directive.ts</span><br><span class="hljs-keyword">import</span> &#123; Directive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span><br><br><span class="hljs-meta">@Directive</span>(&#123;<br>	selector: <span class="hljs-string">&#x27;[appXuYaoQiangDiao]&#x27;</span><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XuYaoQiangDiaoDirective</span> </span>&#123;<br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">el:ElementRef</span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(el) <span class="hljs-comment">//原生元素</span><br>		el.nativeElement.style.background = <span class="hljs-string">&#x27;red&#x27;</span> <span class="hljs-comment">//修改元素样式</span><br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//使用 html</span><br>&lt;div appXuYaoQiangDiao&gt;<br>	这是用来练习指令的，在div上添加appXuYaoQiangDiao就可以了<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure>
<h5 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h5><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">ngStyle:</span>  [ngStyle] = <span class="hljs-string">&quot;&#123;&#x27;font-size&#x27;:&#x27;20px&#x27;&#125;&quot;</span><br><span class="hljs-symbol">ngClass:</span>  [ngClass]= <span class="hljs-string">&quot;&#123;btn:true,&#x27;btn-danger&#x27;:false&#125;&quot;</span><br><span class="hljs-symbol">ngSwitch:</span><br>    <span class="hljs-params">&lt;div [ngSwitch]=&quot;userLevel&quot;&gt;</span><br>        <span class="hljs-params">&lt;p *ngSwitchCase=&quot;&#x27;normal&#x27;&quot; &gt;</span> userLevel等于normal就显示 <span class="hljs-params">&lt;/p&gt;</span><br>        <span class="hljs-params">&lt;p *ngSwitchCase=&quot;&#x27;vip&#x27;&quot; &gt;</span> userLevel等于vip就显示 <span class="hljs-params">&lt;/p&gt;</span><br>        <span class="hljs-params">&lt;p *ngSwitchDfault &gt;</span> 都没有匹配上，显示这个 <span class="hljs-params">&lt;/p&gt;</span><br>    <span class="hljs-params">&lt;/div&gt;</span><br></code></pre></td></tr></table></figure>
<h5 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h5><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">[(ngModel)]=<span class="hljs-string">&quot;username&quot;</span><br><span class="hljs-regexp">//</span>需要在模块中先导入FormMoudle<br><span class="hljs-regexp">//</span>app.modules.ts<br>	import &#123; FormsModule &#125; from <span class="hljs-string">&#x27;@angular/forms&#x27;</span><br><span class="hljs-regexp">//</span>使用<br>    imports:[<br>        FormsModule，<br>    ]<br>	<br>(ngModelChonge)=<span class="hljs-string">&quot;=doUserName()&quot;</span>	 <span class="hljs-regexp">//</span>双向数据绑定改变了触发<br></code></pre></td></tr></table></figure>
<h5 id="get-set读取与修改"><a href="#get-set读取与修改" class="headerlink" title="get set读取与修改"></a><code>get set</code>读取与修改</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//toggleAll被读取时调用 //input上绑定 [checked]=&quot;toggleAll&quot;</span><br><span class="hljs-keyword">get</span> <span class="hljs-title">toggleAll</span>()&#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.todo.every(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span>t.done)<br>&#125;<br><br><span class="hljs-comment">//toggleAll被修改时调用 //input上触发(change)=&quot;toggleAll = $event,target.checked&quot;</span><br><span class="hljs-keyword">set</span> <span class="hljs-title">toggleAll</span>(<span class="hljs-params">val</span>)&#123;<br>	<span class="hljs-built_in">this</span>.todos.forEach(<span class="hljs-function"><span class="hljs-params">t</span> =&gt;</span> t.done = val)<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><h5 id="预定义管道"><a href="#预定义管道" class="headerlink" title="预定义管道"></a>预定义管道</h5><h5 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h5><h5 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h5><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">constrctor  <span class="hljs-regexp">//</span>组件被创建了<br>ngOnChanges	<span class="hljs-regexp">//</span>组件绑定的属性值发生改变<br>ngOnInit 	<span class="hljs-regexp">//</span>初始化的时候执行<br>ngDocheck	<span class="hljs-regexp">//</span>当组件数据发生改变时就会执行<br>ngAfterContentInit	<span class="hljs-regexp">//</span>组件的内容初始化完成<br>ngAfterContentChecked	<span class="hljs-regexp">//</span>组件的内容初始化完成<br>ngAfterViewInit	<span class="hljs-regexp">//</span>组件的视图初始化完成<br>ngAfterViewChecked	<span class="hljs-regexp">//</span>组件的视图初始化完成<br>ngOnDestroy		<span class="hljs-regexp">//</span>组件即将被销毁 清除定时器什么的<br></code></pre></td></tr></table></figure>
<h4 id="组件之间数据传递"><a href="#组件之间数据传递" class="headerlink" title="组件之间数据传递"></a>组件之间数据传递</h4><h5 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h5><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">//父组件 html<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>			//传递给子组件数据<br>	<span class="hljs-tag">&lt;<span class="hljs-name">app-child1</span> [<span class="hljs-attr">childName</span>]=<span class="hljs-string">&quot;username&quot;</span> [<span class="hljs-attr">age</span>]=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">app-child1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//子组件  app-child1 ts</span><br><br><span class="hljs-keyword">import</span> &#123; Input &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">child1</span></span>&#123;<br>	<span class="hljs-meta">@Input</span>()  <span class="hljs-comment">//输入型属性 //必须要加这个装饰器才能接受父亲传过来的属性 然后就可以使用了</span><br>	<span class="hljs-keyword">private</span> username:<span class="hljs-built_in">string</span> = <span class="hljs-literal">null</span><br>	<br>	<span class="hljs-meta">@Input</span>()  <span class="hljs-comment">//一个装饰器只能装饰一个属性</span><br>	<span class="hljs-keyword">private</span> age:<span class="hljs-built_in">number</span> = <span class="hljs-number">18</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//子组件  app-child1 ts</span><br><br><span class="hljs-keyword">import</span> &#123; EventEmitter, Output &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">child1</span></span>&#123;<br>	<span class="hljs-keyword">public</span> username:<span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;child&#x27;</span><br>	<span class="hljs-comment">//事件发射器</span><br>	<span class="hljs-meta">@Output</span>	  <span class="hljs-comment">//输出型属性 可以向父组件输出属性</span><br>	<span class="hljs-keyword">private</span> cryEvent = <span class="hljs-keyword">new</span> EventEmitter()<br>	<br>	<span class="hljs-comment">//触发事件 发射 </span><br>	<span class="hljs-function"><span class="hljs-title">clickEvent</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-comment">//向父组件发射数据</span><br>		<span class="hljs-built_in">this</span>.cryEvent.emit( <span class="hljs-built_in">this</span>.username )<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//父组件 html</span><br>&lt;div&gt;			<span class="hljs-comment">//接受子组件发射过来的数据</span><br>	&lt;app-child1 (cryEvent)=<span class="hljs-string">&quot;doCry($event)&quot;</span> &gt;&lt;/app-child1&gt;<br>&lt;/div&gt;<br><br><span class="hljs-comment">//父组件 ts</span><br><br><span class="hljs-function"><span class="hljs-title">doCry</span>(<span class="hljs-params">event</span>)</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(event)<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="兄弟间传递"><a href="#兄弟间传递" class="headerlink" title="兄弟间传递"></a>兄弟间传递</h5><figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">xia子传父 <span class="hljs-comment">-- 再父传子 </span><br></code></pre></td></tr></table></figure>
<h5 id="获取原生元素的所有属性"><a href="#获取原生元素的所有属性" class="headerlink" title="获取原生元素的所有属性"></a>获取原生元素的所有属性</h5><p><code>ng</code>元素识别符</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript">&lt;div #myDiv&gt;&lt;/div&gt;<br>					<span class="hljs-comment">//是否是静态元素，有v-if，v-for类似的就不是静态元素</span><br><span class="hljs-meta">@ViewChild</span>(<span class="hljs-string">&#x27;myDiv&#x27;</span>, &#123;<span class="hljs-attr">static</span>:<span class="hljs-literal">true</span>&#125;)<br><span class="hljs-keyword">private</span> myDiv;<br><br><span class="hljs-function"><span class="hljs-title">clickEvent</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.myDiv)<br>&#125;<br></code></pre></td></tr></table></figure>


<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>安装</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">ng generate module app-routing --flat --module=app<br><br><span class="hljs-regexp">//</span>会自动更新app.modules<br><br><span class="hljs-regexp">//</span>更新后<br><span class="hljs-regexp">//</span>app.modules<br><br>import &#123; RouterModule &#125; from <span class="hljs-string">&#x27;@angular/router&#x27;</span><br><br>@NgModule(&#123;  <span class="hljs-regexp">//</span>组装模块资源：组件，指令，服务<br>  declarations: [<br>    ...<br>  ],<br>  imports: [ 	<span class="hljs-regexp">//</span>依赖模块<br>    BrowserModule,<br>    RouterModule.forRoot(routes),	<span class="hljs-regexp">//</span>在根模块中使用<span class="hljs-regexp">//</span>routes是下面使用中定义的路由表<br>    <span class="hljs-regexp">//</span>RouterModule.forChild(routes),	<span class="hljs-regexp">//</span>在子模块中使用<span class="hljs-regexp">//</span>routes是下面使用中定义的路由表<br>  ],<br>  providers: [],<br>  bootstrap: [AppComponent]	/指定启动的跟组件<br>&#125;)<br>export class AppModule &#123; &#125;<br></code></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>app.roting.module.ts<br><br>import &#123;SinginComponent&#125; from <span class="hljs-string">&#x27;./signin/signin.component&#x27;</span>	<span class="hljs-regexp">//</span>导入登录组件<br>import &#123;SingupComponent&#125; from <span class="hljs-string">&#x27;./signup/signup.component&#x27;</span>	<span class="hljs-regexp">//</span>导入登出组件<br><br>const routes: Routes = [<br>	&#123;<br>		path:<span class="hljs-string">&#x27;&#x27;</span>,<br>		redirectTo: <span class="hljs-string">&#x27;/contacts&#x27;</span>, <span class="hljs-regexp">//</span>当请求跟路径时，跳转到contacts组件<br>		pathMatch: <span class="hljs-string">&#x27;full&#x27;</span> <span class="hljs-regexp">//</span>完全匹配到路径才会重新跳转 <span class="hljs-regexp">//</span>默认prefix前缀匹配<br>	&#125;,<br>	&#123;<br>		<span class="hljs-regexp">//</span>到我们访问contact的时候，会先渲染LayoutComponent组件<br>		<span class="hljs-regexp">//</span>然后再渲染children中path为空的组件<br>		path: <span class="hljs-string">&#x27;contacts&#x27;</span>,<br>		component: LayoutComponent,<br>		children: [			<span class="hljs-regexp">//</span>嵌套路由<br>			&#123;<br>				path: <span class="hljs-string">&#x27;&#x27;</span>,<br>				component: ContactsComponent<br>			&#125;<br>		]<br>	&#125;,<br>	&#123;	<br>		<span class="hljs-regexp">//</span>path的路径不能以/开头和结尾<br>		path: <span class="hljs-string">&#x27;signin&#x27;</span>,					<span class="hljs-regexp">//</span>配置路由表 登录<br>		component: SinginComponent<br>	&#125;,<br>	&#123;<br>		path: <span class="hljs-string">&#x27;signup&#x27;</span>,					<span class="hljs-regexp">//</span>配置路由表 登出<br>		component: SingupComponent<br>	&#125;,<br>	<span class="hljs-regexp">//</span> ** 代表匹配任意地址,只能放到最下面<br>	&#123;<br>		path: <span class="hljs-string">&#x27;**&#x27;</span>,<br>		component: NotFoundCompnent<br>	&#125;,<br>]<br></code></pre></td></tr></table></figure>
<p>设置路由导航出口</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">//app.component.html</span><br><span class="hljs-params">&lt;router-outlet&gt;</span><span class="hljs-params">&lt;/router-outlet&gt;</span><br></code></pre></td></tr></table></figure>
<p>在组件中使用(跳转有两种方法)</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//第一种 编程式导航</span><br><span class="hljs-keyword">import</span> &#123;Router&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span><br><br>constrctor(<br>	<span class="hljs-keyword">private</span> router: Router<br>)&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-title">signup</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">this</span>.router.navigateByUrl(<span class="hljs-string">&#x27;/signin&#x27;</span>)	<span class="hljs-comment">//跳转到登陆页</span><br>	<span class="hljs-comment">//或者</span><br>	<span class="hljs-built_in">this</span>.router.navigate([<span class="hljs-string">&#x27;/signin&#x27;</span>])	<span class="hljs-comment">//跳转到登陆页</span><br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">//第二种 标签跳转<br>//可以是任何标签，只要加上属性routerLink就行 记得加/<br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">routerLink</span>=<span class="hljs-string">&quot;/signin&quot;</span> &gt;</span>进入登陆页面<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">routerLink</span>=<span class="hljs-string">&quot;/signin&quot;</span> &gt;</span>进入登陆页面<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">routerLink</span>=<span class="hljs-string">&quot;/signin&quot;</span> &gt;</span>进入登陆页面<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h5 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h5><p>在路由表里面添加一个占位符</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//router</span><br><span class="hljs-keyword">const</span> routes: Routes = [<br>	&#123;	<br>		path: <span class="hljs-string">&#x27;signin/:id&#x27;</span>,		<span class="hljs-comment">//占位符:id</span><br>		component: SinginComponent<br>	&#125;,<br>]<br><br><span class="hljs-comment">//html</span><br><span class="hljs-comment">//使用跳转</span><br>&lt;button routerLink=<span class="hljs-string">&quot;/signin/22&quot;</span> &gt;进入登陆<span class="hljs-number">22</span>页面&lt;/button&gt;<br><br><span class="hljs-comment">//ts</span><br>获取路由里面传递的参数<br><span class="hljs-keyword">import</span> &#123; ActivatedRoute &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">siginUp</span></span>&#123;<br>	<span class="hljs-comment">//声明依赖，读取参数 当前的路由服务对象</span><br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> route: ActivatedRoute</span>)</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-title">ngOnInit</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-comment">//读取路由参数</span><br>		<span class="hljs-built_in">this</span>.route.params.subcribe(<span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span>&#123;<br>			<span class="hljs-built_in">console</span>.log(data)<br>		&#125;)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h5><p>本质是一种服务，需要注入</p>
<p>创建</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//login.guard.ts</span><br><br><span class="hljs-keyword">import</span> &#123; CanActivate, Router&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@angular/router&quot;</span><br><span class="hljs-keyword">import</span> &#123; Injectable &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@angular/core&quot;</span><br><br><span class="hljs-meta">@Injectable</span>(&#123;	<span class="hljs-comment">//路由守卫否是“可注入的”服务对象</span><br>	providedIn: <span class="hljs-string">&#x27;root&#x27;</span><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginGuard</span> <span class="hljs-title">implements</span> <span class="hljs-title">CanActivate</span> </span>&#123;<br>	<span class="hljs-keyword">private</span> isLogin = <span class="hljs-literal">true</span>  <span class="hljs-comment">//用户是否登录</span><br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> router: Router</span>)</span>&#123;&#125;<br>	<span class="hljs-function"><span class="hljs-title">CanActivate</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.isLogin)&#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">//可以激活后续组件</span><br>		&#125;<span class="hljs-keyword">else</span>&#123;<br>			<span class="hljs-built_in">this</span>.router.navigateByUrl(<span class="hljs-string">&#x27;/index&#x27;</span>)  <span class="hljs-comment">//页面跳转到首页</span><br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>  <span class="hljs-comment">//阻止激活后续组件</span><br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>在路由表中使用<br>const routes: Routes = [<br>	&#123;	<br>		path: <span class="hljs-string">&#x27;signin&#x27;</span>,	<br>		component: SinginComponent,<br>		canActivate: [LoginGuard, TimeGuard],  <span class="hljs-regexp">//</span>使用路由守卫，可添加多个守卫	<span class="hljs-regexp">//</span>需要导入<br>	&#125;,<br>	&#123;<br>		path: <span class="hljs-string">&#x27;signup&#x27;</span>,<br>		component: SingupComponent<br>	&#125;,<br>]<br></code></pre></td></tr></table></figure>
<p>快捷创建</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">ng g guard time <span class="hljs-regexp">//</span>创建一个守卫<br></code></pre></td></tr></table></figure>
<h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><h6 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//app.modules.ts</span><br><span class="hljs-keyword">import</span> &#123; HttpClientModule &#125; from <span class="hljs-string">&#x27;@angular/common/http&#x27;</span><br><br><span class="hljs-meta">@ngMoudle(&#123;</span><br><span class="hljs-meta">	imports: [</span><br><span class="hljs-meta">		HttpClientModule</span><br><span class="hljs-meta">	]</span><br><span class="hljs-meta">&#125;)</span><br></code></pre></td></tr></table></figure>
<h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//在需要发送请求的组件里面导入</span><br><span class="hljs-comment">//如果要在请求头中添加东西，则还要引入HttpHeaders</span><br>import &#123;HttpClient, HttpHeaders&#125; from <span class="hljs-string">&#x27;@angular/common/http&#x27;</span><br><br>constructor(<br>	private http: HttpClient <span class="hljs-comment">//angular会自动去实例化一个实力</span><br>)&#123;<br><br>&#125;<br><span class="hljs-comment">//调用</span><br><span class="hljs-function"><span class="hljs-title">signup</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-comment">//promise模式</span><br>	this<span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<span class="hljs-selector-class">.toPromise</span>()<span class="hljs-selector-class">.then</span>(data=&gt;&#123;<br>		console<span class="hljs-selector-class">.log</span>(data)<br>	&#125;)<br>	this<span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.post</span>(<span class="hljs-string">&#x27;url&#x27;</span>,body)<span class="hljs-selector-class">.toPromise</span>()<span class="hljs-selector-class">.then</span>(data=&gt;&#123;<br>		console<span class="hljs-selector-class">.log</span>(data)<br>	&#125;)<br>	<span class="hljs-comment">//或订阅模式</span><br>	this<span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<span class="hljs-selector-class">.subscribe</span>((res:any)=&gt;&#123;console<span class="hljs-selector-class">.log</span>(res)&#125;)<br>&#125;<br><span class="hljs-comment">//在请求头中添加token</span><br>const token = window<span class="hljs-selector-class">.localStorage</span><span class="hljs-selector-class">.getItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>)<br>this<span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;url&#x27;</span>, &#123;<br>	headers: new HttpHeaders()<span class="hljs-selector-class">.set</span>(<span class="hljs-string">&#x27;x-Access-token&#x27;</span>, token)<br>&#125;)<span class="hljs-selector-class">.toPromise</span>()<span class="hljs-selector-class">.then</span>(data=&gt;&#123;<br>	console<span class="hljs-selector-class">.log</span>(data)<br>&#125;)<br>this<span class="hljs-selector-class">.http</span><span class="hljs-selector-class">.post</span>(<span class="hljs-string">&#x27;url&#x27;</span>,<span class="hljs-selector-tag">body</span>,&#123;<br>	headers: new HttpHeaders()<span class="hljs-selector-class">.set</span>(<span class="hljs-string">&#x27;x-Access-token&#x27;</span>, token)<br>&#125;)<span class="hljs-selector-class">.toPromise</span>()<span class="hljs-selector-class">.then</span>(data=&gt;&#123;<br>	console<span class="hljs-selector-class">.log</span>(data)<br>&#125;)<br></code></pre></td></tr></table></figure>


<h4 id="TS"><a href="#TS" class="headerlink" title="TS"></a><code>TS</code></h4><p>搭建<code>TypeScript</code>开发环境</p>
<p>本地环境</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">安装：<br>npm i -g typescript<br><br>查看版本号：<br>tsc --<span class="hljs-keyword">version</span><br><br>查看帮助：<br>tsc --<span class="hljs-keyword">help</span><br><br>//将<span class="hljs-keyword">ts</span>文件转换成js文件 ,在命令行执行<br>tsc <span class="hljs-number">01</span>.<span class="hljs-keyword">ts</span><br></code></pre></td></tr></table></figure>
<p>在线测试编译环境</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.typescriptlang.org<span class="hljs-regexp">/play/i</span>ndex.html<br></code></pre></td></tr></table></figure>
<p><code>ts</code>类型</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">boolean	<span class="hljs-regexp">//</span>布尔值<br>string	<span class="hljs-regexp">//</span>字符串<br>number	<span class="hljs-regexp">//</span>数字<br>any		<span class="hljs-regexp">//</span>任何类型<br><span class="hljs-regexp">//</span>let str:string = <span class="hljs-string">&#x27;sdfds&#x27;</span>  <span class="hljs-regexp">//</span>定义的方式都一样<br></code></pre></td></tr></table></figure>
<p>数组的声明</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> arr: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]	<span class="hljs-comment">//	数组中只能是数字</span><br><span class="hljs-keyword">let</span> arr: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]			<span class="hljs-comment">// 	数组中只能是数字</span><br><span class="hljs-keyword">let</span> arr: <span class="hljs-built_in">string</span>[] = [<span class="hljs-string">&#x27;sd&#x27;</span>, <span class="hljs-string">&#x27;dsf&#x27;</span>]	<span class="hljs-comment">//  数组中只能是字符串</span><br></code></pre></td></tr></table></figure>
<p>元组</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> arr: [<span class="hljs-built_in">number</span>, <span class="hljs-built_in">string</span>] = [<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;jack&#x27;</span>]	<span class="hljs-comment">//第一个必须是数字，第二个必须是字符串</span><br></code></pre></td></tr></table></figure>
<p>对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs ,">let user: object &#x3D; &#123;<br>&#96;	name: &#39;jack&#39;,<br>	age: 18<br>&#125;<br>&#x2F;&#x2F;这样写，在调用某个属性的时候会没有提示，一般不这样写<br><br>let user: &#123;<br>	name: string,<br>	age: number<br>&#125; &#x3D; &#123;<br>	name: &#39;jack&#39;,<br>	age: 28<br>&#125;<br>&#x2F;&#x2F;一般这样写，有提示<br></code></pre></td></tr></table></figure>
<p>接口</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><code class="hljs xquery">//当这个对象会重复使用时，可以先定义一个接口<br>interface Person &#123;<br><span class="hljs-built_in">	name</span>:<span class="hljs-built_in"> string</span>,<br>	age:<span class="hljs-built_in"> number</span><br>&#125;<br><br><span class="hljs-keyword">let</span> jack: Person = &#123;<br><span class="hljs-built_in">	name</span>: <span class="hljs-string">&#x27;jack&#x27;</span>,<br>	age: <span class="hljs-number">14</span><br>&#125;<br><span class="hljs-keyword">let</span> zs: Person = &#123;<br><span class="hljs-built_in">	name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>	age: <span class="hljs-number">35</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>类型除了用于变量之后，还可以用于形参,函数返回值的类型也可以定义</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">x: <span class="hljs-built_in">number</span>, y:<span class="hljs-built_in">number</span></span>): <span class="hljs-title">number</span> </span>&#123;<br>	<span class="hljs-keyword">return</span> x + y<br>&#125;<br>add(<span class="hljs-number">10</span>, <span class="hljs-number">23</span>)<br><br><br><span class="hljs-comment">//当没有返回值的时候，最好定义为void</span><br><span class="hljs-comment">//void 只能定义函数的返回值</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>(<span class="hljs-params"></span>):<span class="hljs-title">viod</span> </span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h6><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> 开放的，默认为<span class="hljs-keyword">public</span><br><span class="hljs-keyword">private</span> 私有的 ,不能被外部访问，只能在内部使用,不会被继承<br><span class="hljs-keyword">protected</span> 受保护的，不能被外部访问，只能在内部使用，可以被继承<br><span class="hljs-keyword">readonly</span> 只读的，不可修改<br><span class="hljs-keyword">static</span> 静态成员，类的本身成员，只能通过类本身访问<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-nginx代理配置</title>
    <url>/2021/05/01/Linux-nginx%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Nginx代理模式</p>
<p>正向代理</p>
<p>比如我们使用的vpn，就是一种代理，通过vpn我们就可以一种特别的通道上网vpn的代理模式是正向代理，代理层是透明的，上网时感觉不到这一层代理</p>
<p>反向代理</p>
<p>在反向代理中，客户端只知道代理节点，将请求发给代理节点，由代理节点决定将请求发给哪个服务器节点，代理节点就是访问目标服务器</p>
<p>nginx作为web服务器使用时，可以看作是一个文件分发服务器</p>
<p>在反向代理模式下，用户将请求发送到nginx服务器，nginx决定将用户请求转发到节点的某一台服务器节点组成对用户来讲是不透明的，用户只知道nginx服务器的存在</p>
<p>当nginx代理请求时，它将请求发送到指定的代理服务器，获取响应，并将其发送回客户端。可以使用指定的协议将请求代理到HTTP服务器或非HTTP服务器。<br>1.代理到HTTP服务器使用Proxy协议<br>2.代理到非HTTP服务器支持的协议包括FastCGl，uwsgi，SCGI和memcached。</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo-快速搭建静态博客</title>
    <url>/2021/02/13/hexo-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>第一步 </p>
<p>​    1.注册一个github账号   github.com</p>
<p>​    2.创建公开代码仓库</p>
<p>第二步</p>
<p>​    1.安装 nodejs 与 npm</p>
<p>​        到node官方网站下载安装包,直接安装就行,node安装好后npm也就安装好了</p>
<p>​        官方网站: <a href="https://nodejs.org/">https://nodejs.org</a></p>
<p>​    2.安装hexo</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure>

<p>​    3.本地创建目录:github-blog</p>
<p>​    4.进入目录并初始化目录,执行以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> github-blog<br>hexo init<br>npm install<br></code></pre></td></tr></table></figure>
<p> 5.启动服务         执行以下代码</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure>
<p> 6.在浏览器中打开cmd返回的网址,这就是初始博客网页</p>
<p>第三步  上传第一篇文章</p>
<p>​    1.在github-blog目录中  执行以下代码</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">npm i <span class="hljs-comment">--save hexo-deployer-git</span><br></code></pre></td></tr></table></figure>
<p>​    2.编辑: _config.yml</p>
<p>​        在github-blog目录下找到 _config.yml 文件并打开</p>
<p>​        在这个文件末尾添加</p>
<p>​            </p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> https: <span class="hljs-comment">//github.com/username/username.github.io</span><br><span class="hljs-symbol">    branch:</span> master<br></code></pre></td></tr></table></figure>
<p>​        注意:  上面repo后面的网址填写github上自己创建个人公开仓库的网址</p>
<p>​    3.在github-blog目录中   </p>
<p>​                     执行:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d-g</span><br></code></pre></td></tr></table></figure>
<p>​        进入隐藏目录:  执行以下代码</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">.deploy_git</span><br></code></pre></td></tr></table></figure>
<p>​        声明github账号:  执行以下代码</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.email“youremail@github”<br>git config <span class="hljs-keyword">user</span>.name“yourname”<br></code></pre></td></tr></table></figure>
<p>​            注意: 上面yourname 和 youremail@github  填自己的用户名与邮箱</p>
<p>​        返回github-blog目录:</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">cd</span></span> ..<br>hexo d<br></code></pre></td></tr></table></figure>
<ol start="4">
<li><p>还是在github-blog目录中</p>
<p>   执行: hexo new “my-first-git”       # 引号里的是文章名</p>
<p>执行上面一步后,会得到一个路径</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">hexo new <span class="hljs-string">&quot;my-first-git&quot;</span>               # 执行这一句,得到下面两句<br><span class="hljs-builtin-name">INFO</span>  Validating config<br><span class="hljs-builtin-name">INFO</span>  Created: D:\python--start\github-blog\source\_posts\my-first-git.md<br></code></pre></td></tr></table></figure>
<p>到D:\python–start\github-blog\source_posts中打开  my-first-git.md文件 在这个文件中就可以写上自己的文章</p>
<p>5.git到远程仓库里</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d -g</span><br></code></pre></td></tr></table></figure>
<p>喝杯茶什么的就可以到远程仓库里看看了,这样就完成了上传文章.</p>
</li>
</ol>
<p>第四步  更换主题</p>
<p>​    1.到   <a href="https://hexo.io/themes/">https://hexo.io/themes/</a>   网站中找到自己需要的主题</p>
<p>​    2.按照文档说明操作就可以更换主题了</p>
<p>​        </p>
<p>hexo命令</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">hexo <span class="hljs-built_in">clean</span>  清除缓存<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-Electron</title>
    <url>/2023/03/11/%E5%89%8D%E7%AB%AF-Electron/</url>
    <content><![CDATA[<h4 id="Electron技术架构"><a href="#Electron技术架构" class="headerlink" title="Electron技术架构"></a><code>Electron</code>技术架构</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">Chromium    <span class="hljs-regexp">//</span>支持最新特性的浏览器<br>Node.js		<span class="hljs-regexp">//</span>js运行时，可以实现文件读写功能<br>Native apis	<span class="hljs-regexp">//</span>提供统一的原生界面能力<br>由这三个部分组成<br></code></pre></td></tr></table></figure>
<h4 id="Electron工作流程"><a href="#Electron工作流程" class="headerlink" title="Electron工作流程"></a><code>Electron</code>工作流程</h4><p>渲染进程与主进程进行通信，主进程再调用 <code>Native apis</code> 操作系统</p>
<h5 id="主进程："><a href="#主进程：" class="headerlink" title="主进程："></a>主进程：</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript">可以看作是<span class="hljs-keyword">package</span>.json中的 main 属性对应的文件<br>一个应用只会有一个主进程<br>只有主进程可以进行GUI的API操作<br></code></pre></td></tr></table></figure>
<h5 id="渲染进程："><a href="#渲染进程：" class="headerlink" title="渲染进程："></a>渲染进程：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">Windows中展示的界面通过渲染进程表现<br>一个应用可以有多个渲染进程 <br></code></pre></td></tr></table></figure>
<h4 id="Electron启动"><a href="#Electron启动" class="headerlink" title="Electron启动"></a><code>Electron</code>启动</h4><figure class="highlight erlang"><table><tr><td class="code"><pre><code class="hljs erlang">electron .<br></code></pre></td></tr></table></figure>
<h4 id="创建第一个Electron应用"><a href="#创建第一个Electron应用" class="headerlink" title="创建第一个Electron应用"></a>创建第一个<code>Electron</code>应用</h4><h6 id="初始化package-json文件"><a href="#初始化package-json文件" class="headerlink" title="初始化package.json文件"></a>初始化<code>package.json</code>文件</h6><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init -y<br></code></pre></td></tr></table></figure>
<h6 id="安装electron"><a href="#安装electron" class="headerlink" title="安装electron"></a>安装<code>electron</code></h6><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i electron -D<br></code></pre></td></tr></table></figure>
<h6 id="程序入口main-js"><a href="#程序入口main-js" class="headerlink" title="程序入口main.js"></a>程序入口<code>main.js</code></h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//main.js--------main.js</span><br><br><span class="hljs-comment">//app 代表当前这个应用 BrowserWindow用于创建窗口</span><br><span class="hljs-keyword">const</span> &#123;app, BrowserWindow &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br><span class="hljs-comment">//当 app 启动完成之后 创建窗口等操作</span><br>app.whenReady().then(<span class="hljs-function">()=&gt;</span>&#123;<br>	<span class="hljs-comment">//创建窗口 </span><br>	<span class="hljs-keyword">const</span> mainWin = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">BrowserWindow</span>(<span class="hljs-params"></span>)</span>&#123;<br>		width: <span class="hljs-number">600</span>, 	<span class="hljs-comment">//窗口宽度</span><br>		height: <span class="hljs-number">400</span>		<span class="hljs-comment">//窗口高度</span><br>	&#125;<br>	<span class="hljs-comment">//在当前窗口中加载指定的界面让他显示具体的内容 运行在渲染进程上</span><br>	mainWin.loadFile(<span class="hljs-string">&#x27;index.html&#x27;</span>) <span class="hljs-comment">//index.html里面是自己要展示的内容</span><br>	<br>	<span class="hljs-comment">//监听当前窗口关闭的事件</span><br>	mainWin.on(<span class="hljs-string">&#x27;close&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;当前窗口关闭了&#x27;</span>)<br>		mainWin = <span class="hljs-literal">null</span>	<span class="hljs-comment">//优化，释放掉</span><br>	&#125;)<br>&#125;)<br><br>app.on(<span class="hljs-string">&#x27;window-all-closed&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;所有窗口都关闭了&#x27;</span>)<br>	app.quit() <span class="hljs-comment">//退出应用</span><br>&#125;)<br></code></pre></td></tr></table></figure>
<p>修改<code>package.json</code>文件中<code>main</code>属性</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-string">&quot;main&quot;</span>: <span class="hljs-selector-tag">main</span>.js<br></code></pre></td></tr></table></figure>
<h4 id="生命周期事件"><a href="#生命周期事件" class="headerlink" title="生命周期事件"></a>生命周期事件</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">read 			<span class="hljs-regexp">//</span>app初始化完成<br><br><span class="hljs-regexp">//</span>这两个是窗口的webContents.on()调用，其他都是app.on()调用<br>dom-ready		<span class="hljs-regexp">//</span>一个窗口中的文本加载完成<br>did-finsh-load	<span class="hljs-regexp">//</span>导航完成时触发<br><br><span class="hljs-regexp">//</span>所有窗口都被关闭的时候触发<br><span class="hljs-regexp">//</span>如果没有监听这个事件，就会默认执行退出操作<br><span class="hljs-regexp">//</span>如果监听了，就需要自己来决定是否退出当前的应用  before-quit will-quit quit不会生效<br>window-all-closed<br><br>before-quit			<span class="hljs-regexp">//</span>在关闭窗口之前触发<br>will-quit			<span class="hljs-regexp">//</span>在窗口关闭并且应用退出时触发<br>quit				<span class="hljs-regexp">//</span>当所有窗口关闭时触发<br><br>closed		<span class="hljs-regexp">//</span>当窗口关闭时触发，此时应该删除窗口引用<br></code></pre></td></tr></table></figure>
<h4 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h4><h5 id="窗口尺寸与展示"><a href="#窗口尺寸与展示" class="headerlink" title="窗口尺寸与展示"></a>窗口尺寸与展示</h5><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//m</span>ain.js<br><span class="hljs-regexp">//</span>创建窗口 <br>const mainWin = new BrowserWindow()&#123;<br>	x: <span class="hljs-number">100</span>,		<span class="hljs-regexp">//</span>窗口位置<br>	y: <span class="hljs-number">100</span>,		<span class="hljs-regexp">//</span>窗口位置<br>	show: false, /先不展示窗口，等内容加载完成后再显示<br>    width: <span class="hljs-number">600</span>, 	<span class="hljs-regexp">//</span>窗口默认宽度<br>    height: <span class="hljs-number">400</span>,	<span class="hljs-regexp">//</span>窗口默认高度<br>    maxWidth: <span class="hljs-number">1000</span>,	<span class="hljs-regexp">//</span>窗口最大宽度<br>    maxHeight:<span class="hljs-number">600</span>,	<span class="hljs-regexp">//</span>窗口最大高度<br>    mixWidth: <span class="hljs-number">500</span>,	<span class="hljs-regexp">//</span>窗口最小宽度<br>    mixHeight:<span class="hljs-number">300</span>,	<span class="hljs-regexp">//</span>窗口最小高度<br>    resizable:false,	<span class="hljs-regexp">//</span>不允许缩放窗口大小，默认为true<br>    <br>    <span class="hljs-regexp">//</span>标题栏操作<br>    frame:false,	<span class="hljs-regexp">//</span>不显示标题栏<br>    icon: <span class="hljs-string">&#x27;lg.png&#x27;</span>,	<span class="hljs-regexp">//</span>标题栏图标<br>    title: <span class="hljs-string">&#x27;electron&#x27;</span>,	<span class="hljs-regexp">//</span>标题栏显示的标题 如果html里面的title有内容，就会显示html的标题<br>    transparent: true,	<span class="hljs-regexp">//</span>透明窗体<br>    autoHideMenuBar:true,	<span class="hljs-regexp">//</span>隐藏菜单栏<br>    <br>    <span class="hljs-regexp">//</span>设置渲染进程是否能调用node.js<br>    webPreferences:&#123;<br>    	nodeIntegration:true,<br>    	enableRemoteModule:true<br>    &#125;<br>&#125;<br><br>mainWin.on(<span class="hljs-string">&#x27;read-to-show&#x27;</span>,()=&gt;&#123;<br>	mainWin.show() <span class="hljs-regexp">//</span>显示窗口<br>&#125;)<br><br><span class="hljs-regexp">//i</span>ndex.js 渲染进程  <br><span class="hljs-regexp">//</span>渲染进程调用node.js 需在主进程中设置 webPreferences<br>const &#123;remote&#125; = require(<span class="hljs-string">&#x27;electron&#x27;</span>)<br>btn.onclick = ()=&gt;&#123;<br>	let indexWin = new remote.BrowserWindow(&#123;<br>		width:<span class="hljs-number">300</span>,<br>		height:<span class="hljs-number">300</span>，<br>	&#125;)<br>	indexWin.loadFile(<span class="hljs-string">&#x27;list.html&#x27;</span>)<br>	indexWin.on(<span class="hljs-string">&#x27;close&#x27;</span>,()=&gt;&#123;<br>	indexWin = null<br>	&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="窗口放大缩小关闭"><a href="#窗口放大缩小关闭" class="headerlink" title="窗口放大缩小关闭"></a>窗口放大缩小关闭</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//index.js 渲染进程  </span><br><span class="hljs-comment">//渲染进程调用node.js 需在主进程中设置 webPreferences</span><br>const &#123;remote&#125; = require(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br>let mainWin = remote<span class="hljs-selector-class">.getCurrentWindow</span>()<br>btn<span class="hljs-selector-class">.onclick</span> = ()=&gt;&#123;<br>	mainWin<span class="hljs-selector-class">.close</span>()  <span class="hljs-comment">//关闭窗口</span><br>&#125;<br>btn1<span class="hljs-selector-class">.onclick</span> = ()=&gt;&#123;<br>	<span class="hljs-keyword">if</span>(mainWin<span class="hljs-selector-class">.isMaximized</span>())&#123; <span class="hljs-comment">//判断是不是最大化窗口</span><br>		mainWin<span class="hljs-selector-class">.maximized</span>() <span class="hljs-comment">//最大化窗口</span><br>	&#125;<span class="hljs-keyword">else</span>&#123;<br>		mainWin<span class="hljs-selector-class">.restore</span>()	<span class="hljs-comment">//回到原始窗口状态</span><br>	&#125;<br>&#125;<br><br>btn2<span class="hljs-selector-class">.onclick</span> = ()=&gt;&#123;<br>	<span class="hljs-keyword">if</span>(!mainWin<span class="hljs-selector-class">.isMinimized</span>())&#123; <span class="hljs-comment">//判断是不是最小化窗口</span><br>		mainWin<span class="hljs-selector-class">.minimized</span>() <span class="hljs-comment">//最大化窗口</span><br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h5 id="监听窗口的关闭"><a href="#监听窗口的关闭" class="headerlink" title="监听窗口的关闭"></a>监听窗口的关闭</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onbeforeunload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">if</span>(yes)&#123;<br>		mainWin.destroy()<span class="hljs-comment">//销毁窗口</span><br>	&#125;<span class="hljs-keyword">else</span>&#123;<br>		<span class="hljs-comment">//关闭确认弹框</span><br>	&#125;<br>	<br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="父子及模态窗口"><a href="#父子及模态窗口" class="headerlink" title="父子及模态窗口"></a>父子及模态窗口</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;remote&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br>btn.onclick = <span class="hljs-function">()=&gt;</span>&#123;<br>	<span class="hljs-keyword">let</span> indexWin = <span class="hljs-keyword">new</span> remote.BrowserWindow(&#123;<br>		width:<span class="hljs-number">300</span>,<br>		height:<span class="hljs-number">300</span>，<br>		parent:remote.getCurrentWindow(),	  <span class="hljs-comment">//指定父窗口为当前的敞口</span><br>		modal:<span class="hljs-literal">true</span>,		<span class="hljs-comment">//是否为模态窗口</span><br>		<br>		<span class="hljs-comment">//指定父窗口为 这个 id 的窗口</span><br>		<span class="hljs-comment">// mainWinId = mainWin.id 得到窗口唯一id mainWinId设置为全局变量</span><br>		parent:BrowerWindow.formId(mainWinId),<br>		<br>	&#125;)<br>	indexWin.loadFile(<span class="hljs-string">&#x27;list.html&#x27;</span>)<br>	indexWin.on(<span class="hljs-string">&#x27;close&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>	indexWin = <span class="hljs-literal">null</span><br>	&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>


<h4 id="菜单（主进程）"><a href="#菜单（主进程）" class="headerlink" title="菜单（主进程）"></a>菜单（主进程）</h4><h6 id="基础创建菜单"><a href="#基础创建菜单" class="headerlink" title="基础创建菜单"></a>基础创建菜单</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>.创建窗口<br><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>.创建自定义菜单<br>let menuTemp = [<br>	&#123;<br>		lable:<span class="hljs-string">&#x27;文件&#x27;</span>，<br>		submenu:[<br>			&#123;<br>				lable:<span class="hljs-string">&#x27;打开文件&#x27;</span>，<br>				click()&#123;<br>					console.log(<span class="hljs-string">&#x27;做一些操作，比如打开一个具体的文件&#x27;</span>)<br>				&#125;<br>			&#125;,<br>			&#123;type:<span class="hljs-string">&#x27;separator&#x27;</span>&#125;, <span class="hljs-regexp">//</span>分割线<br>			&#123;<br>				lable:<span class="hljs-string">&#x27;关闭文件夹&#x27;</span><br>			&#125;,<br>		]<br>	&#125;，<br>	&#123;lable:<span class="hljs-string">&#x27;编辑&#x27;</span>&#125;,<br>	&#123;lable:<span class="hljs-string">&#x27;关于&#x27;</span>, role:<span class="hljs-string">&#x27;about&#x27;</span>&#125;  <span class="hljs-regexp">//</span>点击后会弹出关于该软件的弹框<br>]<br><span class="hljs-regexp">//</span><span class="hljs-number">3</span>.生成菜单，并添加<br>const menu = Menu.buildFromTemplate(menuTemp)<br>Menu.setApplicationMenu(menu)<br><br></code></pre></td></tr></table></figure>
<h6 id="角色与类型"><a href="#角色与类型" class="headerlink" title="角色与类型"></a>角色与类型</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">let menuTemp = [<br>	&#123;<br>		lable:<span class="hljs-string">&#x27;角色&#x27;</span>,<br>		submenu:[<br>			&#123;lable:<span class="hljs-string">&#x27;复制&#x27;</span>, <span class="hljs-keyword">role</span>:<span class="hljs-string">&#x27;copy&#x27;</span>&#125;,<br>            &#123;lable:<span class="hljs-string">&#x27;粘贴&#x27;</span>, <span class="hljs-keyword">role</span>:<span class="hljs-string">&#x27;paste&#x27;</span>&#125;,<br>            &#123;lable:<span class="hljs-string">&#x27;剪切&#x27;</span>, <span class="hljs-keyword">role</span>:<span class="hljs-string">&#x27;cut&#x27;</span>&#125;,<br>            &#123;lable:<span class="hljs-string">&#x27;最小化&#x27;</span>, <span class="hljs-keyword">role</span>:<span class="hljs-string">&#x27;minimize&#x27;</span>&#125;,<br>		]<br>	&#125;,<br>	&#123;<br>		lable:<span class="hljs-string">&#x27;类型&#x27;</span>,<br>		submenu:[<br>			&#123;lable:<span class="hljs-string">&#x27;多选一&#x27;</span>, <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;checkbox&#x27;</span>&#125;,<br>			&#123;lable:<span class="hljs-string">&#x27;多选二&#x27;</span>, <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;checkbox&#x27;</span>&#125;,<br>			&#123;lable:<span class="hljs-string">&#x27;多选三&#x27;</span>, <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;checkbox&#x27;</span>&#125;,<br>			&#123;<span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;separator&#x27;</span>&#125;, //分割线<br>			&#123;lable:<span class="hljs-string">&#x27;单选一&#x27;</span>, <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;radio&#x27;</span>&#125;,<br>			&#123;lable:<span class="hljs-string">&#x27;单选二&#x27;</span>, <span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;radio&#x27;</span>&#125;,<br>			&#123;<span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;separator&#x27;</span>&#125;, //分割线<br>			&#123;lable:<span class="hljs-string">&#x27;windows操作&#x27;</span>,<span class="hljs-keyword">type</span>:<span class="hljs-string">&#x27;submenu&#x27;</span>,roal:<span class="hljs-string">&#x27;windowMenu&#x27;</span>&#125;<br>		]<br>	&#125;,<br>	&#123;<br>		lable:<span class="hljs-string">&#x27;其他&#x27;</span>,<br>		submenu:[<br>			&#123;<br>				lable:<span class="hljs-string">&#x27;打开&#x27;</span>,<br>                icon:<span class="hljs-string">&#x27;./open.png&#x27;</span>&#125;, //图标<br>				accelerator:<span class="hljs-string">&#x27;ctrl+o&#x27;</span>,	//快捷键执行<br>				click()&#123;<br>					console.log(<span class="hljs-string">&#x27;执行了快捷键ctrl+o&#x27;</span>)<br>				&#125;<br>			&#125;<br>		]<br>	&#125;，<br>]<br></code></pre></td></tr></table></figure>
<h6 id="自定义菜单"><a href="#自定义菜单" class="headerlink" title="自定义菜单"></a>自定义菜单</h6><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">const &#123;remote&#125; = require(&#x27;electron&#x27;)<br>const Menu = remote.Menu<br>const MenuItem = remote.MenuItem<br><br><span class="hljs-comment">//定义一个变量存放自定义菜单</span><br><span class="hljs-keyword">let</span> menuItem = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MenuItem()</span><br><span class="hljs-comment">//生成自定义菜单</span><br>addMenu.onclick =<span class="hljs-function"> <span class="hljs-params">()</span>=&gt;</span>&#123;<br>	<span class="hljs-comment">//创建菜单</span><br>	<span class="hljs-keyword">let</span> menuFile = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MenuItem(&#123; <span class="hljs-params">lable</span>: &#x27;文件&#x27;, <span class="hljs-params">type</span>:&#x27;<span class="hljs-params">normal</span>&#x27;&#125;)</span><br>	<span class="hljs-keyword">let</span> menuEidt = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MenuItem(&#123; <span class="hljs-params">lable</span>: &#x27;编辑&#x27;, <span class="hljs-params">type</span>:&#x27;<span class="hljs-params">normal</span>&#x27;&#125;)</span><br>	<span class="hljs-keyword">let</span> customMenu = <span class="hljs-keyword">new</span> <span class="hljs-constructor">MenuItem(&#123; <span class="hljs-params">lable</span>: &#x27;自定义菜单&#x27;, <span class="hljs-params">submenu</span>: <span class="hljs-params">menuItem</span>&#125;)</span> <span class="hljs-comment">//设置自定义菜单</span><br>	<span class="hljs-comment">//将创建的菜单加入到 menu</span><br>	<span class="hljs-keyword">let</span> menu = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Menu()</span><br>	menu.append(menuFile)<br>	menu.append(menuEidt)<br>	menu.append(customMenu)	<span class="hljs-comment">//添加自定义菜单</span><br>	<span class="hljs-comment">//将menu放置于app中展示</span><br>	<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Menu</span>.</span></span>set<span class="hljs-constructor">ApplicationMenu(<span class="hljs-params">menu</span>)</span><br>&#125;<br><br><span class="hljs-comment">//添加自定义菜单</span><br>ipt.onclick =<span class="hljs-function"> <span class="hljs-params">()</span>=&gt;</span>&#123;<br>	menuItem.append( <span class="hljs-keyword">new</span> <span class="hljs-constructor">MenuItem(&#123;<span class="hljs-params">lable</span>:&#x27;大开发商&#x27;, <span class="hljs-params">type</span>:&#x27;<span class="hljs-params">normal</span>&#x27;&#125;)</span>)<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="右键菜单"><a href="#右键菜单" class="headerlink" title="右键菜单"></a>右键菜单</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;remote&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><span class="hljs-keyword">const</span> Menu = remote.Menu<br><br><span class="hljs-comment">//定义菜单内容</span><br><span class="hljs-keyword">let</span> contextTemp = [<br>	&#123;<span class="hljs-attr">lable</span>:<span class="hljs-string">&#x27;runcode&#x27;</span>&#125;,<br>	&#123;<span class="hljs-attr">lable</span>:<span class="hljs-string">&#x27;转到定义&#x27;</span>&#125;,<br>	&#123;<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;separator&#x27;</span>&#125;,<br>	&#123;<br>		lable:<span class="hljs-string">&#x27;其他功能&#x27;</span>,<br>		<span class="hljs-function"><span class="hljs-title">click</span>(<span class="hljs-params"></span>)</span>&#123;<br>			<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;其他功能被点击了&#x27;</span>)<br>		&#125;<br>	&#125;<br>]<br><span class="hljs-comment">//创建menu</span><br><span class="hljs-keyword">const</span> menu = Menu.buildFromTemplate(contextTemp)<br><br><span class="hljs-comment">//监听鼠标右击事件</span><br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;contextmenu&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>	event.preventDfault()	<span class="hljs-comment">//阻止默认事件</span><br>	menu.popup(&#123;<span class="hljs-attr">window</span>:remote.getCurrentWindow()&#125;) <span class="hljs-comment">//弹出右键菜单</span><br>&#125;,<span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure>
<h4 id="主进程与渲染进程之间通信"><a href="#主进程与渲染进程之间通信" class="headerlink" title="主进程与渲染进程之间通信"></a>主进程与渲染进程之间通信</h4><h6 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//index.js 渲染进程</span><br><span class="hljs-keyword">const</span> &#123;ipcRenderer&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	ipcRenderer.send(<span class="hljs-string">&#x27;msg1&#x27;</span>,<span class="hljs-string">&#x27; 异步 API 来自于渲染进程的一条异步消息&#x27;</span>)<br>&#125;<br><br><span class="hljs-comment">//接收主进程的消息</span><br>ipcRenderer.on(<span class="hljs-string">&#x27;msg1re&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">ev,data</span>)=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是接收到的消息-来自于主进程&#x27;</span>, data)<br>&#125;)<br></code></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//main.js 主进程</span><br><br><span class="hljs-keyword">const</span> &#123;ipcRenderer&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br><span class="hljs-comment">//接收消息</span><br>ipcMain.on(<span class="hljs-string">&#x27;msg1&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event,data</span>)=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是接收到的消息-来自于渲染进程&#x27;</span>, data)<br>	ev.sender.send(<span class="hljs-string">&#x27;msg1re&#x27;</span>,<span class="hljs-string">&#x27;这是一条来自于主进程的消息&#x27;</span>)<br>&#125;)<br><br></code></pre></td></tr></table></figure>
<h6 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//index.js 渲染进程</span><br><span class="hljs-keyword">const</span> &#123;ipcRenderer&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">const</span> val = ipcRenderer.sendSync(<span class="hljs-string">&#x27;msg1&#x27;</span>,<span class="hljs-string">&#x27;来自于渲染进程的一条异步消息&#x27;</span>)<br>	<span class="hljs-built_in">console</span>.log(val) <span class="hljs-comment">//这是一条来自于主进程的消息</span><br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//main.js 主进程</span><br><br><span class="hljs-keyword">const</span> &#123;ipcRenderer&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br><span class="hljs-comment">//接收消息 同步返回消息</span><br>ipcMain.on(<span class="hljs-string">&#x27;msg1&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">event,data</span>)=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是接收到的消息-来自于渲染进程&#x27;</span>, data)<br>	ev.returnValue = <span class="hljs-string">&#x27;这是一条来自于主进程的消息&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="主进程主动发送消息"><a href="#主进程主动发送消息" class="headerlink" title="主进程主动发送消息"></a>主进程主动发送消息</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//m</span>ain.js 主进程<br>const &#123;ipcRenderer&#125; = require(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br><span class="hljs-regexp">//</span>主动给渲染进程发消息<br><span class="hljs-regexp">//</span>创建一个菜单，用于点击<br>let temp = [<br>	&#123;<br>		lable: <span class="hljs-string">&#x27;send&#x27;</span>,<br>		click()&#123;<br>			<span class="hljs-regexp">//</span>BrowerWindow.formId(mainWinId)也能获取窗口<br>			<span class="hljs-regexp">//</span>获取当前焦点窗口							<span class="hljs-regexp">//</span>发送消息<br>			BrowerWindow.getFocusedWindow().webContents.send(<span class="hljs-string">&#x27;mtp&#x27;</span>,<span class="hljs-string">&#x27;来自于主进程的消息 &#x27;</span>)<br>		&#125;<br>	&#125;<br>]<br></code></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//index.js 渲染进程</span><br><span class="hljs-keyword">const</span> &#123;ipcRenderer&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br><span class="hljs-comment">//接收主进程主动发出的消息</span><br>ipcRenderer.on(<span class="hljs-string">&#x27;msg1re&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">ev,data</span>)=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是接收到的消息-来自于主进程&#x27;</span>, data)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="渲染进程之间通信"><a href="#渲染进程之间通信" class="headerlink" title="渲染进程之间通信"></a>渲染进程之间通信</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>.通过localStorge<br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>. 通过主进程为媒介 渲染<span class="hljs-number">1</span>--&gt; 主进程--&gt; 渲染二  反之亦然<br></code></pre></td></tr></table></figure>
<h4 id="dialog"><a href="#dialog" class="headerlink" title="dialog"></a><code>dialog</code></h4><p>弹框(很多类型,大同小异,详见官网)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//i</span>ndex.js<br>const &#123;remote&#125; = require(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br>btn.onclick = <span class="hljs-keyword">function</span>()&#123;<br>	remote.dialog.showOpenDialog(&#123;<br>		defaultPath: __dirname, <span class="hljs-regexp">//</span>设置弹框打开的路径<br>		buttonLabel:<span class="hljs-string">&#x27;请选择&#x27;</span>,	<span class="hljs-regexp">//</span>修改确认弹框按钮的文字<br>		title:<span class="hljs-string">&#x27;tbz&#x27;</span>,		<span class="hljs-regexp">//</span>弹框的标题<br>					<span class="hljs-regexp">//</span>选择文件  	选择目录       多选 			等等<br>		properties:[<span class="hljs-string">&#x27;openFile&#x27;</span>,openDirectory , multiSelections,],<br>		filters:[<br>			&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;代码文件&quot;</span>, extensions:[<span class="hljs-string">&#x27;js&#x27;</span>,<span class="hljs-string">&#x27;json&#x27;</span>, <span class="hljs-string">&#x27;html&#x27;</span>]&#125;,<br>			&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;图片文件&quot;</span>, extensions:[<span class="hljs-string">&#x27;ico&#x27;</span>,<span class="hljs-string">&#x27;jepg&#x27;</span>, <span class="hljs-string">&#x27;png&#x27;</span>]&#125;,<br>		]<br>	&#125;).then((res)=&gt;&#123; <span class="hljs-regexp">//</span>是一个promise，可以用then方法<br>		console.log(res)<br>	&#125;)<br>&#125;<br><br><span class="hljs-regexp">//</span>错误弹框<br>btn.onclick = <span class="hljs-keyword">function</span>()&#123;<br>	remote.dialog.showErrorBox(<span class="hljs-string">&#x27;自定义标题&#x27;</span>,<span class="hljs-string">&#x27;当前错误内容&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="shell与iframe"><a href="#shell与iframe" class="headerlink" title="shell与iframe"></a><code>shell</code>与<code>iframe</code></h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//i</span>ndex.js <br>const &#123;shell&#125; = require(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br>btn.onclick = <span class="hljs-keyword">function</span>(ev)&#123;<br>	ev.preventDefault()<br>	let urlPath = btn.getAttribute(<span class="hljs-string">&#x27;href&#x27;</span>)<br>	shell.openExternal(urlPath) <span class="hljs-regexp">//</span>用默认浏览器打开该地址<br>	<span class="hljs-regexp">//</span>shell.showIteminFolder(path.resolve(__filname)) <span class="hljs-regexp">//</span>打开当前文件所在的目录<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//html</span><br><br>&lt;<span class="hljs-selector-tag">iframe</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;https://baidu.com&quot;</span> &gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure>
<h4 id="消息——通知"><a href="#消息——通知" class="headerlink" title="消息——通知"></a>消息——通知</h4><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">//<span class="hljs-built_in">index</span>.js<br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;</span><br>	<span class="hljs-keyword">let</span> <span class="hljs-keyword">opt</span> = &#123;<br>		title:<span class="hljs-string">&#x27;electron消息通知&#x27;</span>,<br>		body:<span class="hljs-string">&#x27;electron消息通知测试&#x27;</span>,<br>		icon:<span class="hljs-string">&#x27;./msg.png&#x27;</span><br>	&#125;<br>	<span class="hljs-keyword">let</span> myNotification = <span class="hljs-keyword">new</span> window.Notification(<span class="hljs-keyword">opt</span>.title,<span class="hljs-keyword">opt</span>)<br>	myNotification.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;</span><br>		console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;点击了消息卡片&#x27;</span>)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="快捷键注册（主进程）"><a href="#快捷键注册（主进程）" class="headerlink" title="快捷键注册（主进程）"></a>快捷键注册（主进程）</h4><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript">const &#123; globalShortcut &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br><br>app.<span class="hljs-literal">on</span>(<span class="hljs-string">&#x27;ready&#x27;</span>,<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>	<span class="hljs-regexp">//</span>注册快捷键<br>	let ret = globalShortcut.register(<span class="hljs-string">&#x27;ctrl + q&#x27;</span>,<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;快捷键注册成功&#x27;</span>)<br>	&#125;)<br>	<span class="hljs-keyword">if</span>(!ret)&#123; <span class="hljs-regexp">//</span>返回的是一个bool值，用于判断是否注册成功<br>		<span class="hljs-built_in">console</span>.log(注册失败)<br>	&#125;<br>	<span class="hljs-built_in">console</span>.log(globalShortcut.isRegistered(<span class="hljs-string">&#x27;ctrl + q&#x27;</span>)) <span class="hljs-regexp">//</span>判断是否注册过此快捷键<br>	<br>&#125;)<br><br>app.<span class="hljs-literal">on</span>(<span class="hljs-string">&#x27;will-quit&#x27;</span>,<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>	<span class="hljs-regexp">//</span>取消单个快捷键<br>	globalShortcut.unregister(<span class="hljs-string">&#x27;ctrl + q&#x27;</span>)<br>	<span class="hljs-regexp">//</span>取消全部快捷键<br>	globalShortcut.unregisterAll()<br>&#125;)<br></code></pre></td></tr></table></figure>
<h4 id="剪切板"><a href="#剪切板" class="headerlink" title="剪切板"></a>剪切板</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">const &#123; clipboard, nativeImage &#125; = require(&#x27;electron&#x27;)<br>		<span class="hljs-comment">//剪切板  	//复制图片实例</span><br>		<br><span class="hljs-keyword">let</span> res = null<br>btn.onclick=<span class="hljs-keyword">function</span><span class="hljs-literal">()</span>&#123;<br>	<span class="hljs-comment">//复制内容			//文本</span><br>	res = clipboard.write<span class="hljs-constructor">Text(&#x27;这是复制的内容&#x27;)</span><br>&#125;<br><br>btn1.onclick=<span class="hljs-keyword">function</span><span class="hljs-literal">()</span>&#123;<br>	<span class="hljs-comment">//粘贴内容</span><br>	clipboard.read<span class="hljs-constructor">Text(<span class="hljs-params">res</span>)</span><br>&#125;<br><br><br>btn2.onclick=<span class="hljs-keyword">function</span><span class="hljs-literal">()</span>&#123;<br>	<span class="hljs-comment">//复制图片，图片必须是 nativeImage 实例才可以放到剪切板上</span><br>	<span class="hljs-keyword">let</span> oImage = nativeImage.create<span class="hljs-constructor">FormPath(&#x27;.<span class="hljs-operator">/</span><span class="hljs-params">msg</span>.<span class="hljs-params">png</span>&#x27;)</span><br>	clipboard.write<span class="hljs-constructor">Image(<span class="hljs-params">oImage</span>)</span><br>	<br>	<span class="hljs-comment">//将剪切板上的图片 作为 dom 元素放到界面上</span><br>	<span class="hljs-keyword">let</span> oImg = clipboard.read<span class="hljs-constructor">Image()</span> <span class="hljs-comment">//读取图片</span><br>	<span class="hljs-keyword">let</span> oImgDom = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Image()</span>	<span class="hljs-comment">//创建一个&lt;img/&gt;节点</span><br>	oImgDom.src = oImg.<span class="hljs-keyword">to</span><span class="hljs-constructor">DataURL()</span>	<span class="hljs-comment">//将图片转换成url</span><br>	document.body.append<span class="hljs-constructor">Child(<span class="hljs-params">oImgDom</span>)</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>安装 electron-store<br><br><span class="hljs-regexp">//</span>使用<br><span class="hljs-regexp">//m</span>ain.js  导入<br>const Store = require(<span class="hljs-string">&#x27;electron-store&#x27;</span>)<br>Stroe.initRenderer()		<span class="hljs-regexp">//</span>要执行一下这句话才能用<br><br><span class="hljs-regexp">//</span>渲染进程使用<br><span class="hljs-regexp">//i</span>ndex.js<br>const Store = window.require(<span class="hljs-string">&#x27;electron-store&#x27;</span>)<br>const fileStore = new Store(&#123;<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&#x27;filesInfo&#x27;</span>&#125;) <span class="hljs-regexp">//</span>实例化 <span class="hljs-regexp">//</span>会将数据保存到filesInfo.jspn这个文件里面<br><span class="hljs-regexp">//</span>设置数据<br>fileStore.set(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;学习electron&#x27;</span>)<br><span class="hljs-regexp">//</span>获取数据<br>fileStore.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br><span class="hljs-regexp">//</span>删除数据<br>fileStore.<span class="hljs-keyword">delete</span>(<span class="hljs-string">&#x27;name&#x27;</span>)<br></code></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//获取当前文件目录，会将持久化信息保存到这个目录下</span><br>const &#123; remote &#125; = window<span class="hljs-selector-class">.require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)<br> <br>remote<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.getPath</span>(<span class="hljs-string">&#x27;userData&#x27;</span>)	<span class="hljs-comment">//当前应用的目录 filesInfo.json文件在这个目录下</span><br></code></pre></td></tr></table></figure>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="区分操作系统"><a href="#区分操作系统" class="headerlink" title="区分操作系统"></a>区分操作系统</h5><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">process</span>.<span class="hljs-built_in">platform</span><br></code></pre></td></tr></table></figure>
<h5 id="控制台中文乱码"><a href="#控制台中文乱码" class="headerlink" title="控制台中文乱码"></a>控制台中文乱码</h5><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>在控制台输入<br>chcp <span class="hljs-number">65001</span><br></code></pre></td></tr></table></figure>
<h5 id="打开控制台"><a href="#打开控制台" class="headerlink" title="打开控制台"></a>打开控制台</h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">mainWin.webContents.<span class="hljs-keyword">open</span><span class="hljs-constructor">DevTools()</span>  <span class="hljs-comment">//有原生菜单的时候，可以用Ctrl+shift+i 打开</span><br></code></pre></td></tr></table></figure>
<h5 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h5><h6 id="判断是不是开发环境"><a href="#判断是不是开发环境" class="headerlink" title="判断是不是开发环境"></a>判断是不是开发环境</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>安装npm包 electron-is-dev<br><br>const isDev = require(<span class="hljs-string">&#x27;electron-is-dev&#x27;</span>)	<span class="hljs-regexp">//</span>返回一个bool值<br><br><span class="hljs-regexp">//</span>使用<br>const urlLocation =  isDev ? <span class="hljs-string">&quot;http://localhost:3000&quot;</span> : <span class="hljs-string">&#x27;myurl&#x27;</span><br></code></pre></td></tr></table></figure>
<h6 id="连接多个命令"><a href="#连接多个命令" class="headerlink" title="连接多个命令"></a>连接多个命令</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">//安装npm包 <span class="hljs-keyword">concurrently</span><br><br>//例子<br>&quot;dev&quot;: &quot;concurrently \&quot;npm <span class="hljs-keyword">start</span>\&quot; \&quot;electron .\&quot;&quot;<br></code></pre></td></tr></table></figure>
<h6 id="等待上一条命令结束"><a href="#等待上一条命令结束" class="headerlink" title="等待上一条命令结束"></a>等待上一条命令结束</h6><figure class="highlight swift"><table><tr><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">//安装npm包 wait-on</span><br><br><span class="hljs-comment">//例子</span><br><span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;concurrently <span class="hljs-subst">\&quot;</span>npm start<span class="hljs-subst">\&quot;</span> <span class="hljs-subst">\&quot;</span>wait-on http://localhost:3000 &amp;&amp; electron .<span class="hljs-subst">\&quot;</span>&quot;</span><br></code></pre></td></tr></table></figure>
<h6 id="跨平台的环境变量设置"><a href="#跨平台的环境变量设置" class="headerlink" title="跨平台的环境变量设置"></a>跨平台的环境变量设置</h6><p>关闭 运行项目后 浏览器自动打开</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">//安装npm包 cress-env<br><br>//例子<br>&quot;dev&quot;: &quot;concurrently \&quot;<span class="hljs-keyword">cross</span>-env BROWSER=<span class="hljs-keyword">none</span> npm <span class="hljs-keyword">start</span>\&quot; \&quot;wait-<span class="hljs-keyword">on</span> http://localhost:<span class="hljs-number">3000</span> &amp;&amp; electron .\&quot;&quot;<br></code></pre></td></tr></table></figure>
<h6 id="保存自动刷新"><a href="#保存自动刷新" class="headerlink" title="保存自动刷新"></a>保存自动刷新</h6><p>安装<code>nodemon</code></p>
<p>修改<code>package.json</code>中脚本命令</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>package.json<br><span class="hljs-string">&quot;script&quot;</span>:&#123;<br>	<span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;nodemon --watch main.js --exec npm run build&quot;</span>,<br>	<span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;electron .&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-echarts</title>
    <url>/2022/06/08/%E5%89%8D%E7%AB%AF-echarts/</url>
    <content><![CDATA[<h4 id="常见的数据可视化库"><a href="#常见的数据可视化库" class="headerlink" title="常见的数据可视化库"></a>常见的数据可视化库</h4><ul>
<li><code>D3.js </code>  目前 Web 端评价最高的 <code>Javascript </code>可视化工具库(入手难)  </li>
<li><code>ECharts.js</code>   百度出品的一个开源 <code>Javascript</code> 数据可视化库   </li>
<li><code>Highcharts.js</code>  国外的前端数据可视化库，非商用免费，被许多国外大公司所使用  </li>
<li><code>AntV</code>  蚂蚁金服全新一代数据可视化解决方案  等等</li>
<li><code>Highcharts 和 Echarts </code>就像是 <code>Office 和 WPS </code>的关系</li>
</ul>
<h4 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a><code>echarts</code></h4><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">npm install echarts <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure>
<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;echarts&#x27;</span>;<br></code></pre></td></tr></table></figure>
<h4 id="基本实例"><a href="#基本实例" class="headerlink" title="基本实例"></a>基本实例</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 基于准备好的dom，初始化echarts实例<br>var myChart = echarts.init(document.getElementById(<span class="hljs-string">&#x27;main&#x27;</span>));<br><br><span class="hljs-regexp">//</span>响应容器大小变化<br>window.onresize = <span class="hljs-keyword">function</span>() &#123;<br>    myChart.resize();<br>  &#125;;<br><br><span class="hljs-regexp">//</span>设置图表大小，不随容器变化<br>myChart.resize(&#123;<br>  width: <span class="hljs-number">800</span>,<br>  height: <span class="hljs-number">400</span><br>&#125;);<br><br><span class="hljs-regexp">//</span> 绘制图表 这个要写到最后面<br>myChart.setOption(&#123;<br>  title: &#123;<br>    text: <span class="hljs-string">&#x27;ECharts 入门示例&#x27;</span><br>  &#125;,<br>  tooltip: &#123;&#125;,<br>  xAxis: &#123;<br>    data: [<span class="hljs-string">&#x27;衬衫&#x27;</span>, <span class="hljs-string">&#x27;羊毛衫&#x27;</span>, <span class="hljs-string">&#x27;雪纺衫&#x27;</span>, <span class="hljs-string">&#x27;裤子&#x27;</span>, <span class="hljs-string">&#x27;高跟鞋&#x27;</span>, <span class="hljs-string">&#x27;袜子&#x27;</span>]<br>  &#125;,<br>  yAxis: &#123;&#125;,<br>  series: [<br>    &#123;<br>      name: <span class="hljs-string">&#x27;销量&#x27;</span>,<br>      type: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>      data: [<span class="hljs-number">5</span>, <span class="hljs-number">20</span>, <span class="hljs-number">36</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>]<br>    &#125;<br>  ]<br>&#125;);<br></code></pre></td></tr></table></figure>
<h4 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h4><blockquote>
<p>主要配置：<code>series</code> <code>xAxis</code> <code>yAxis</code> <code>grid</code> <code>tooltip</code> <code>title</code> <code>legend</code> <code>color</code> </p>
</blockquote>
<ul>
<li><p><code>series</code></p>
<ul>
<li>系列列表。每个系列通过 <code>type</code> 决定自己的图表类型</li>
<li>大白话：图标数据，指定什么类型的图标，可以多个图表重叠。</li>
</ul>
</li>
<li><p><code>xAxis</code>：直角坐标系 <code>grid</code> 中的 <code>x</code> 轴</p>
<ul>
<li><code>boundaryGap</code>: 坐标轴两边留白策略 <code>true</code>，这时候刻度只是作为分隔线，标签和数据点都会在两个刻度之间的带(<code>band</code>)中间。</li>
</ul>
</li>
<li><p><code>yAxis</code>：直角坐标系 <code>grid</code> 中的 <code>y</code> 轴</p>
</li>
<li><p><code>grid</code>：直角坐标系内绘图网格。 </p>
</li>
<li><p><code>title</code>：标题组件</p>
</li>
<li><p><code>tooltip</code>：提示框组件</p>
</li>
<li><p><code>legend</code>：图例组件</p>
</li>
<li><p><code>color</code>：调色盘颜色列表</p>
<p>数据堆叠，同个类目轴上系列配置相同的<code>stack</code>值后 后一个系列的值会在前一个系列的值上相加。</p>
</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">option = &#123;<br>    <span class="hljs-regexp">//</span> color设置我们线条的颜色 注意后面是个数组<br>    color: [<span class="hljs-string">&#x27;pink&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;skyblue&#x27;</span>],<br>    <span class="hljs-regexp">//</span> 设置图表的标题<br>    title: &#123;<br>        text: <span class="hljs-string">&#x27;折线图堆叠123&#x27;</span><br>    &#125;,<br>    <span class="hljs-regexp">//</span> 图表的提示框组件 <br>    tooltip: &#123;<br>        <span class="hljs-regexp">//</span> 触发方式<br>        trigger: <span class="hljs-string">&#x27;axis&#x27;</span><br>    &#125;,<br>    <span class="hljs-regexp">//</span> 图例组件<br>    legend: &#123;<br>       <span class="hljs-regexp">//</span> series里面有了 name值则 legend里面的data可以删掉<br>    &#125;,<br>    <span class="hljs-regexp">//</span> 网格配置  grid可以控制线形图 柱状图 图表大小<br>    grid: &#123;<br>        left: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>        right: <span class="hljs-string">&#x27;4%&#x27;</span>,<br>        bottom: <span class="hljs-string">&#x27;3%&#x27;</span>,<br>        <span class="hljs-regexp">//</span> 是否显示刻度标签 如果是true 就显示 否则反之<br>        containLabel: true<br>    &#125;,<br>    <span class="hljs-regexp">//</span> 工具箱组件  可以另存为图片等功能<br>    toolbox: &#123;<br>        feature: &#123;<br>            saveAsImage: &#123;&#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-regexp">//</span> 设置x轴的相关配置<br>    xAxis: &#123;<br>        type: <span class="hljs-string">&#x27;category&#x27;</span>,<br>        <span class="hljs-regexp">//</span> 是否让我们的线条和坐标轴有缝隙<br>        boundaryGap: false,<br>        data: [<span class="hljs-string">&#x27;星期一&#x27;</span>, <span class="hljs-string">&#x27;周二&#x27;</span>, <span class="hljs-string">&#x27;周三&#x27;</span>, <span class="hljs-string">&#x27;周四&#x27;</span>, <span class="hljs-string">&#x27;周五&#x27;</span>, <span class="hljs-string">&#x27;周六&#x27;</span>, <span class="hljs-string">&#x27;周日&#x27;</span>]<br>    &#125;,<br>     <span class="hljs-regexp">//</span> 设置y轴的相关配置<br>    yAxis: &#123;<br>        type: <span class="hljs-string">&#x27;value&#x27;</span><br>    &#125;,<br>    <span class="hljs-regexp">//</span> 系列图表配置 它决定着显示那种类型的图表<br>    series: [<br>        &#123;<br>            name: <span class="hljs-string">&#x27;邮件营销&#x27;</span>,<br>            type: <span class="hljs-string">&#x27;line&#x27;</span>,<br>           <br>            data: [<span class="hljs-number">120</span>, <span class="hljs-number">132</span>, <span class="hljs-number">101</span>, <span class="hljs-number">134</span>, <span class="hljs-number">90</span>, <span class="hljs-number">230</span>, <span class="hljs-number">210</span>]<br>        &#125;,<br>        &#123;<br>            name: <span class="hljs-string">&#x27;联盟广告&#x27;</span>,<br>            type: <span class="hljs-string">&#x27;line&#x27;</span>,<br><br>            data: [<span class="hljs-number">220</span>, <span class="hljs-number">182</span>, <span class="hljs-number">191</span>, <span class="hljs-number">234</span>, <span class="hljs-number">290</span>, <span class="hljs-number">330</span>, <span class="hljs-number">310</span>]<br>        &#125;,<br>    ]<br>&#125;;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/2022/05/22/%E5%89%8D%E7%AB%AF-webpack/</url>
    <content><![CDATA[<h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a><code>webpack</code></h4><p>开发时，我们会使用框架（<code>Vue,react</code>）,<code>Es6</code>语法，<code>less/sass</code>等<code>css</code>预处理器等语法进行开发。</p>
<p>这些代码想要在浏览器运行，必须编译成浏览器能够识别的代码。</p>
<h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>创建需要的文件</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm">webback<br>	<span class="hljs-meta">public</span>	放入一些静态文件，index<span class="hljs-number">.</span>html也放在里面<br>	src		所有东西都放到这里面<br>		main<span class="hljs-number">.</span><span class="hljs-keyword">js</span>	入口文件<br>		<span class="hljs-keyword">js</span>文件夹 写一些<span class="hljs-keyword">js</span>文件<br>		<br></code></pre></td></tr></table></figure>
<p>创建包描述文件</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init -y<br></code></pre></td></tr></table></figure>
<p>下载两个<code>webpack</code>包</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">npm i webpack webpack-<span class="hljs-keyword">cli</span> -D<br></code></pre></td></tr></table></figure>
<p>打包</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">npx webpack .<span class="hljs-regexp">/src/m</span>ain.js --mode=development<br>			<span class="hljs-regexp">//</span>地址是入口文件		开发模式打包<br>			<br>npx webpack .<span class="hljs-regexp">/src/m</span>ain.js --mode=production<br>								 生产模式打包<br></code></pre></td></tr></table></figure>
<h4 id="五大核心概念"><a href="#五大核心概念" class="headerlink" title="五大核心概念"></a>五大核心概念</h4><p><code>entry</code>(入口)    从哪个文件开始打包</p>
<p><code>output</code>(输出)    打包好的文件输出到哪里去，如何命名</p>
<p><code>loader</code>(加载器)    <code>webpack</code>本身只能处理<code>js,json</code>等资源，其他资需要借助loader才能解析</p>
<p><code>plugins</code>(插件)    扩展<code>webpack</code>的功能</p>
<p>mode(模式)    开发模式:development，生产模式:production</p>
<h4 id="Webpack-配置文件"><a href="#Webpack-配置文件" class="headerlink" title="Webpack 配置文件"></a><code>Webpack </code>配置文件</h4><p>在项目根目录下新建文件：<code>webpack.config.js</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> Node.js的核心模块，专门用来处理文件路径<br>const path = require(<span class="hljs-string">&quot;path&quot;</span>);<br><br>module.exports = &#123;<br>  <span class="hljs-regexp">//</span> 入口<br>  <span class="hljs-regexp">//</span> 相对路径和绝对路径都行<br>  entry: <span class="hljs-string">&quot;./src/main.js&quot;</span>,<br>  <span class="hljs-regexp">//</span> 输出<br>  output: &#123;<br>    <span class="hljs-regexp">//</span> path: 文件输出目录，必须是绝对路径<br>    <span class="hljs-regexp">//</span> path.resolve()方法返回一个绝对路径<br>    <span class="hljs-regexp">//</span> __dirname 当前文件的文件夹绝对路径<br>    path: path.resolve(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    <span class="hljs-regexp">//</span> filename: 输出文件名<br>    filename: <span class="hljs-string">&quot;main.js&quot;</span>,<br>  &#125;,<br>  <span class="hljs-regexp">//</span> 加载器<br>  module: &#123;<br>    rules: [],<br>  &#125;,<br>  <span class="hljs-regexp">//</span> 插件<br>  plugins: [],<br>  <span class="hljs-regexp">//</span> 模式<br>  mode: <span class="hljs-string">&quot;development&quot;</span>, <span class="hljs-regexp">//</span> 开发模式<br>&#125;;<br></code></pre></td></tr></table></figure>
<p>运行指令</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">npx webpack //配置文件里面指定了模式，就可以这样运行<br></code></pre></td></tr></table></figure>
<h4 id="处理-Css-资源"><a href="#处理-Css-资源" class="headerlink" title="处理 Css 资源"></a>处理 <code>Css </code>资源</h4><h6 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h6><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">npm i css-loader style-loader -D<br></code></pre></td></tr></table></figure>
<p>注意：需要下载两个 loader</p>
<h6 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h6><ul>
<li><code>css-loader</code>：负责将 <code>Css</code> 文件编译成 <code>Webpack </code>能识别的模块</li>
<li><code>style-loader</code>：会动态创建一个 Style 标签，里面放置 <code>Webpack </code>中 <code>Css </code>模块内容</li>
</ul>
<p>此时样式就会以 Style 标签的形式在页面上生效</p>
<h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  entry: <span class="hljs-string">&quot;./src/main.js&quot;</span>,<br>  output: &#123;<br>    path: path.resolve(__dirname, <span class="hljs-string">&quot;dist&quot;</span>),<br>    filename: <span class="hljs-string">&quot;main.js&quot;</span>,<br>  &#125;,<br>  <span class="hljs-built_in">module</span>: &#123;<br>    rules: [<br>      &#123;<br>        <span class="hljs-comment">// 用来匹配 .css 结尾的文件</span><br>        test: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-comment">// use 数组里面 Loader 执行顺序是从右到左</span><br>        use: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>  plugins: [],<br>  mode: <span class="hljs-string">&quot;development&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>
<h4 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h4><h5 id="热模块替换-HMR"><a href="#热模块替换-HMR" class="headerlink" title="热模块替换(HMR)"></a>热模块替换<code>(HMR)</code></h5><p>热模块替换：在程序运行中替换 、添加、删除模块，从而无需加载整个页面。</p>
<p>只能在开发模式使用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">webpack.dev.js<br>------------------------<br>devServer:&#123;<br>	host:<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-regexp">//</span>启动服务器域名<br>	port:<span class="hljs-string">&quot;3000&quot;</span>, <span class="hljs-regexp">//</span>启动服务器端口号<br>	open:true, <span class="hljs-regexp">//</span>是否自动打开浏览器<br>	hot:true, <span class="hljs-regexp">//</span>是否打开热模块替换(默认开启)<br>&#125;<br><br><span class="hljs-regexp">//</span>这个配置只支持css的热模块替换<br></code></pre></td></tr></table></figure>
<p>热模块替换（<code>js</code>）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">main.js<br>-----------------------------<br><span class="hljs-keyword">if</span>(mdule.hot)&#123; <span class="hljs-comment">//判断是否支持热模块替换功能</span><br>	<span class="hljs-built_in">module</span>.hot.accept(<span class="hljs-string">&quot;./js/count&quot;</span>); <span class="hljs-comment">//执行替换</span><br>	<span class="hljs-built_in">module</span>.hot.accept(<span class="hljs-string">&quot;./js/sum&quot;</span>，<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;当文件发生改变时，会执行这个回调函数 可选&quot;</span>)<br>	&#125;);<br>&#125;<br><br><span class="hljs-comment">//tip:只有写入的模块才会支持热模块替换</span><br>	  建议使用vue-loader,react-hot-loader来解决<br></code></pre></td></tr></table></figure>
<h5 id="oneOf"><a href="#oneOf" class="headerlink" title="oneOf"></a><code>oneOf</code></h5><p>让每个文件只能被其中一个loader配置处理</p>
<p>开发模式、生产模式都可以使用</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">module:</span>&#123;<br><span class="hljs-symbol">	rules:</span>[<br>		<span class="hljs-comment">//loader配置</span><br>		&#123;	<br>			<span class="hljs-comment">//让每个文件只能被其中一个loader配置处理</span><br><span class="hljs-symbol">			oneOf:</span>[<br>				&#123;&#125;,<br>				&#123;&#125;,<br>				&#123;&#125;,<br>			]<br>		&#125;<br>	]<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="include-exclude"><a href="#include-exclude" class="headerlink" title="include/exclude"></a><code>include/exclude</code></h5><p>只编译或者排除编译某些文件,只能选择一种方法使用</p>
<p><code>include</code>  包含，只处理某些文件</p>
<p><code>exclude</code> 排除，除了某些文件，其他文件都要处理</p>
<p>开发模式、生产模式都可以使用</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">加载器-处理js的loader下使用<br>---------------------------------<br>&#123;<br><span class="hljs-code">	test:/\.js$/,</span><br><span class="hljs-code">	//exclude:/node_modules/, //排除node_modules文件</span><br><span class="hljs-code">	include:path.resolve(__dirname,&quot;../src&quot;), //只处理src下的文件</span><br><span class="hljs-code">	loader:&quot;babel-loader&quot;, </span><br>&#125;<br><br>插件下的-eslint<br>-------------------------------<br>new EsLintPlugin(&#123;<br><span class="hljs-code">	context:path.resolve(__dirname,&quot;../src&quot;),</span><br><span class="hljs-code">	exclude:&quot;node_modules&quot;, //默认值 排除node_modules文件</span><br>&#125;)<br></code></pre></td></tr></table></figure>
<h5 id="eslint和bable缓存"><a href="#eslint和bable缓存" class="headerlink" title="eslint和bable缓存"></a><code>eslint</code>和<code>bable</code>缓存</h5><p>每次打包时js文件都要经过Eslint和Bable编译，速度较慢。</p>
<p>了我们可以缓存之前Eslint和Bable编译的结果，这样在第二次打包时速度就会更快了</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">加载器-处理js的loader下使用<br>---------------------------------<br>&#123;<br><span class="hljs-code">	test:/\.js$/,</span><br><span class="hljs-code">	include:path.resolve(__dirname,&quot;../src&quot;),</span><br><span class="hljs-code">	loader:&quot;babel-loader&quot;, </span><br><span class="hljs-code">	options:&#123;</span><br><span class="hljs-code">		cacheDirectory:true, //开启bable缓存</span><br><span class="hljs-code">		cachCompression:false, //关闭缓存文件压缩，压缩比较慢，所以关闭</span><br><span class="hljs-code">	&#125;</span><br>&#125;<br><br>插件下的-eslint<br>-------------------------------<br>new EsLintPlugin(&#123;<br><span class="hljs-code">	context:path.resolve(__dirname,&quot;../src&quot;),</span><br><span class="hljs-code">	exclude:&quot;node_modules&quot;,</span><br><span class="hljs-code">	cache:true, //开启缓存</span><br><span class="hljs-code">	cacheLocation:path.resolve(__dirname.&quot;../node_modules/.cache/.eslintcache&quot;) //指定缓存路径</span><br>&#125;)<br></code></pre></td></tr></table></figure>
<h5 id="多进程打包（thead）"><a href="#多进程打包（thead）" class="headerlink" title="多进程打包（thead）"></a>多进程打包（<code>thead</code>）</h5><p>提升打包速度，主要提升<code>js</code>的打包速度</p>
<p>而处理<code>js</code>文件的主要是<code>eslint/babel/terser</code>三个工具，所以要提升他们的运行速度</p>
<p>开发模式、生产模式都可以使用</p>
<p><strong>注意</strong>：需要在特别耗时的操作中使用，因为每个进程启动就需要<code>600ms</code>左右的时间</p>
<p>获取<code>cpu</code>的内核数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> os = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;os&#x27;</span>); <span class="hljs-comment">//nodejs的核心模块</span><br><span class="hljs-keyword">const</span> theads = os.cpus().length;	<span class="hljs-comment">//cpu核数</span><br></code></pre></td></tr></table></figure>
<p>下载依赖包</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">npm <span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">thead</span>-loader -D<br></code></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">加载器-处理js的loader的前面使用<br>---------------------------------<br>&#123;<br>	test:<span class="hljs-regexp">/\.js$/</span>,<br>	include:path.resolve(__dirname,<span class="hljs-string">&quot;../src&quot;</span>),<br>	use:[<br>		&#123;<br>			loader:<span class="hljs-string">&quot;thread-loader&quot;</span>, <span class="hljs-regexp">//</span>开启多进程<br>			options:&#123;<br>				workers:threads,	<span class="hljs-regexp">//</span>进程数量<br>			&#125;<br>		&#125;,<br>		&#123;<br>			loader:<span class="hljs-string">&quot;babel-loader&quot;</span>, <br>            options:&#123;<br>                cacheDirectory:true, <span class="hljs-regexp">//</span>开启bable缓存<br>                cachCompression:false, <span class="hljs-regexp">//</span>关闭缓存文件压缩，压缩比较慢，所以关闭<br>            &#125;<br>		&#125;<br>	]<br>	<br>&#125;<br><br>插件下的-eslint<br>-------------------------------<br>new EsLintPlugin(&#123;<br>	context:path.resolve(__dirname,<span class="hljs-string">&quot;../src&quot;</span>),<br>	exclude:<span class="hljs-string">&quot;node_modules&quot;</span>,<br>	cache:true, <span class="hljs-regexp">//</span>开启缓存<br>	cacheLocation:path.resolve(__dirname.<span class="hljs-string">&quot;../node_modules/.cache/.eslintcache&quot;</span>) <span class="hljs-regexp">//</span>指定缓存路径<br>	threads, <span class="hljs-regexp">//</span>开启多进程和设置进程数量<br>&#125;)<br><br>压缩js<br>---------------------------<br>const TerserWebpackPlugin =require(<span class="hljs-string">&#x27;terser-webpack-plugin&#x27;</span>)<br><br>plugins:[<br>	new CssMinimizerPligin(),<br>	new TerserWebpackPlugin(&#123;<br>		parallel:threads, <span class="hljs-regexp">//</span>开启多进程和设置进程数量<br>	&#125;),<br>]<br><br><span class="hljs-regexp">//</span>也可以放到外边写<br>optimization:&#123;<br>	minimizer:[<br>		<span class="hljs-regexp">//</span>压缩css<br>		new CssMinimizerPligin(),<br>		<span class="hljs-regexp">//</span>压缩js<br>        new TerserWebpackPlugin(&#123;<br>            parallel:threads, <span class="hljs-regexp">//</span>开启多进程和设置进程数量<br>        &#125;),<br>	],<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="减少代码体积Tree-Shaking"><a href="#减少代码体积Tree-Shaking" class="headerlink" title="减少代码体积Tree Shaking"></a>减少代码体积<code>Tree Shaking</code></h5><p>开发时我们定义了一些工具函数库，或者引用第三方工具函数库或组件库，而我们不可能用到所有东西，需要移除没有使用到的函数。</p>
<p><code>Webpack</code>默认开启了这个功能，无需其他配置。</p>
<h5 id="减少Babel生成文件的体积"><a href="#减少Babel生成文件的体积" class="headerlink" title="减少Babel生成文件的体积"></a>减少<code>Babel</code>生成文件的体积</h5><p><code>Babel</code>为编译的每个文件都插入了辅助代码，使代码体积过大</p>
<p>可以将辅助代码作为一个独立的模块，来避免重复引入</p>
<p>开发模式、生产模式都可以使用</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//下载包</span><br>npm <span class="hljs-selector-tag">i</span> @babel/plugin-<span class="hljs-attribute">transform</span>-runtime -D<br></code></pre></td></tr></table></figure>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">//配置</span><br>&#123;<br><span class="hljs-symbol">	loader:</span><span class="hljs-string">&quot;babel-loader&quot;</span>,<br><span class="hljs-symbol">	option:</span>&#123;<br><span class="hljs-symbol">		plugins:</span>[<span class="hljs-string">&quot;@babel/plugin-transform-runtime&quot;</span>],	<span class="hljs-comment">//减少代码体积</span><br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h5><p>压缩图片，减小体积</p>
<h6 id="下载包-1"><a href="#下载包-1" class="headerlink" title="下载包"></a>下载包</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>必须下载<br>npm i image-minimuzer-webpack-plugin imagemin -D<br><br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>选<span class="hljs-number">1</span><br><br><span class="hljs-regexp">//</span>无损压缩<br>npm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo -D<br><span class="hljs-regexp">//</span>有损压缩<br>npm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo -D<br></code></pre></td></tr></table></figure>
<p>配置</p>
<p>略</p>
<h5 id="代码分割（code-split）"><a href="#代码分割（code-split）" class="headerlink" title="代码分割（code split）"></a>代码分割（<code>code split</code>）</h5><p>打包代码时会将所有<code>js</code>文件打包到一个文件中，体积会太大。如果我们只加载首页，就应该只加载首页的<code>js</code>文件，其他文件不应该加载。所以我们要将打包生成的文件进行代码分割，生成多个<code>js</code>文件，渲染哪个页面就渲染哪个<code>js</code>文件，这样加载的资源就少，速度就更快。</p>
<h6 id="下载包-2"><a href="#下载包-2" class="headerlink" title="下载包"></a>下载包</h6><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">npm <span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">html</span>-webpack-plugin -D<br></code></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> webpack.config.js<br>const path = require(<span class="hljs-string">&quot;path&quot;</span>);<br>const HtmlWebpackPlugin = require(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><br>module.exports = &#123;<br>  <span class="hljs-regexp">//</span> 单入口<br>  <span class="hljs-regexp">//</span> entry: <span class="hljs-string">&#x27;./src/main.js&#x27;</span>,<br>  <span class="hljs-regexp">//</span> 多入口<br>  entry: &#123;<br>    main: <span class="hljs-string">&quot;./src/main.js&quot;</span>,<br>    app: <span class="hljs-string">&quot;./src/app.js&quot;</span>,<br>  &#125;,<br>  output: &#123;<br>    path: path.resolve(__dirname, <span class="hljs-string">&quot;./dist&quot;</span>),<br>    <span class="hljs-regexp">//</span> [name]是webpack命名规则，使用chunk的name作为输出的文件名。<br>    <span class="hljs-regexp">//</span> 什么是chunk？打包的资源就是chunk，输出出去叫bundle。<br>    <span class="hljs-regexp">//</span> chunk的name是啥呢？ 比如： entry中xxx: <span class="hljs-string">&quot;./src/xxx.js&quot;</span>, name就是xxx。注意是前面的xxx，和文件名无关。<br>    <span class="hljs-regexp">//</span> 为什么需要这样命名呢？如果还是之前写法main.js，那么打包生成两个js文件都会叫做main.js会发生覆盖。(实际上会直接报错的)<br>    filename: <span class="hljs-string">&quot;js/[name].js&quot;</span>,<br>    clear: true,<br>  &#125;,<br>  plugins: [<br>    new HtmlWebpackPlugin(&#123;<br>      template: <span class="hljs-string">&quot;./public/index.html&quot;</span>,<br>    &#125;),<br>  ],<br>  mode: <span class="hljs-string">&quot;production&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure>
<h5 id="提取重复代码"><a href="#提取重复代码" class="headerlink" title="提取重复代码"></a>提取重复代码</h5><h5 id="按需加载，动态导入（重命名）"><a href="#按需加载，动态导入（重命名）" class="headerlink" title="按需加载，动态导入（重命名）"></a>按需加载，动态导入（重命名）</h5><h5 id="Preload-Prefetch"><a href="#Preload-Prefetch" class="headerlink" title="Preload / Prefetch"></a><code>Preload / Prefetch</code></h5><p>我们前面已经做了代码分割，同时会使用 <code>import</code> 动态导入语法来进行代码按需加载（我们也叫懒加载，比如路由懒加载就是这样实现的）。</p>
<p>但是加载速度还不够好，比如：是用户点击按钮时才加载这个资源的，如果资源体积很大，那么用户会感觉到明显卡顿效果。</p>
<p>我们想在浏览器空闲时间，加载后续需要使用的资源。我们就需要用上 <code>Preload</code> 或 <code>Prefetch</code> 技术。</p>
<p><code>Preload</code>：告诉浏览器立即加载资源。</p>
<p><code>Prefetch</code>：告诉浏览器在空闲时才开始加载资源。</p>
<h5 id="Network-Cache"><a href="#Network-Cache" class="headerlink" title="Network Cache"></a><code>Network Cache</code></h5><p>将来开发时我们对静态资源会使用缓存来优化，这样浏览器第二次请求资源就能读取缓存了，速度很快。</p>
<p>但是这样的话就会有一个问题, 因为前后输出的文件名是一样的，都叫 <code>main.js</code>，一旦将来发布新版本，因为文件名没有变化导致浏览器会直接读取缓存，不会加载新资源，项目也就没法更新了。</p>
<p>所以我们从文件名入手，确保更新前后文件名不一样，这样就可以做缓存了。</p>
<p>它们都会生成一个唯一的 <code>hash </code>值。</p>
<ul>
<li><code>fullhash（webpack4 是 hash）</code></li>
</ul>
<p>每次修改任何一个文件，所有文件名的<code> hash</code> 至都将改变。所以一旦修改了任何一个文件，整个项目的文件缓存都将失效。</p>
<ul>
<li><code>chunkhash</code></li>
</ul>
<p>根据不同的入口文件<code>(Entry)</code>进行依赖文件解析、构建对应的 <code>chunk</code>，生成对应的哈希值。我们 <code>js </code>和 <code>css </code>是同一个引入，会共享一个 hash 值。</p>
<ul>
<li><code>contenthash</code></li>
</ul>
<p>根据文件内容生成 <code>hash </code>值，只有文件内容变化了，<code>hash</code>才会变化。所有文件 <code>hash</code> 值是独享且不同的。</p>
<h5 id="Core-js"><a href="#Core-js" class="headerlink" title="Core-js"></a><code>Core-js</code></h5><p>过去我们使用 <code>babel</code> 对 <code>js </code>代码进行了兼容性处理，其中使用<code>@babel/preset-env </code>智能预设来处理兼容性问题。</p>
<p>它能将<code>ES6</code>的一些语法进行编译转换，比如箭头函数、点点点运算符等。但是如果是 <code>async</code> 函数、<code>promise</code> 对象、数组的一些方法<code>（includes）</code>等，它没办法处理。</p>
<p>所以此时我们 <code>js </code>代码仍然存在兼容性问题，一旦遇到低版本浏览器会直接报错。所以我们想要将<code>js</code> 兼容性问题彻底解决</p>
<p><code>core-js</code> 是专门用来做 <code>ES6 </code>以及以上 <code>API </code>的 <code>polyfill</code>。</p>
<p><code>polyfill</code>翻译过来叫做垫片/补丁。就是用社区上提供的一段代码，让我们在不兼容某些新特性的浏览器上，使用该新特性。</p>
<h5 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a><code>PWA</code></h5><p>开发 <code>Web App </code>项目，项目一旦处于网络离线情况，就没法访问了。</p>
<p>我们希望给项目提供离线体验。</p>
<p>渐进式网络应用程序(<code>progressive web application - PWA</code>)：是一种可以提供类似于 <code>native app</code>(原生应用程序) 体验的 <code>Web App </code>的技术。</p>
<p>其中最重要的是，在 <strong>离线(<code>offline)</code></strong> 时应用程序能够继续运行功能。</p>
<p>内部通过 <code>Service Workers</code> 技术实现的。</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>我们从 4 个角度对<code> webpack</code> 和代码进行了优化：</p>
<ol>
<li>提升开发体验</li>
</ol>
<ul>
<li>使用 <code>Source Map</code> 让开发或上线时代码报错能有更加准确的错误提示。</li>
</ul>
<ol>
<li>提升 <code>webpack</code> 提升打包构建速度</li>
</ol>
<ul>
<li>使用 <code>HotModuleReplacement</code> 让开发时只重新编译打包更新变化了的代码，不变的代码使用缓存，从而使更新速度更快。</li>
<li>使用 <code>OneOf</code> 让资源文件一旦被某个<code>loader</code>处理了，就不会继续遍历了，打包速度更快。</li>
<li>使用 <code>Include/Exclude</code> 排除或只检测某些文件，处理的文件更少，速度更快。</li>
<li>使用 <code>Cache</code> 对 <code>eslint </code>和<code>babel</code>处理的结果进行缓存，让第二次打包速度更快。</li>
<li>使用 <code>Thead</code> 多进程处理 <code>eslint </code>和<code>babel</code>任务，速度更快。（需要注意的是，进程启动通信都有开销的，要在比较多代码处理时使用才有效果）</li>
</ul>
<ol>
<li>减少代码体积</li>
</ol>
<ul>
<li>使用 <code>Tree Shaking</code> 剔除了没有使用的多余代码，让代码体积更小。</li>
<li>使用 <code>@babel/plugin-transform-runtime</code> 插件对<code> babel</code> 进行处理，让辅助代码从中引入，而不是每个文件都生成辅助代码，从而体积更小。</li>
<li>使用 <code>Image Minimizer</code> 对项目中图片进行压缩，体积更小，请求速度更快。（需要注意的是，如果项目中图片都是在线链接，那么就不需要了。本地项目静态图片才需要进行压缩。）</li>
</ul>
<ol>
<li>优化代码运行性能</li>
</ol>
<ul>
<li>使用 <code>Code Split</code> 对代码进行分割成多个<code> js</code> 文件，从而使单个文件体积更小，并行加载<code>js</code>速度更快。并通过<code> import</code> 动态导入语法进行按需加载，从而达到需要使用时才加载该资源，不用时不加载资源。</li>
<li>使用 <code>Preload / Prefetch</code> 对代码进行提前加载，等未来需要使用时就能直接使用，从而用户体验更好。</li>
<li>使用 <code>Network Cache</code> 能对输出资源文件进行更好的命名，将来好做缓存，从而用户体验更好。</li>
<li>使用 <code>Core-js</code> 对<code> js</code> 进行兼容性处理，让我们代码能运行在低版本浏览器。</li>
<li>使用 <code>PWA</code> 能让代码离线也能访问，从而提升用户体验。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>前端-TypeScript</title>
    <url>/2022/05/29/%E5%89%8D%E7%AB%AF-TypeScript/</url>
    <content><![CDATA[<h4 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a><code>TypeScript</code></h4><h6 id="安装-需要node环境"><a href="#安装-需要node环境" class="headerlink" title="安装(需要node环境)"></a>安装(需要<code>node</code>环境)</h6><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i -g typescript<br></code></pre></td></tr></table></figure>
<h6 id="查看是否成功"><a href="#查看是否成功" class="headerlink" title="查看是否成功"></a>查看是否成功</h6><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">tsc</span><br></code></pre></td></tr></table></figure>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">tsc test.ts		<span class="hljs-regexp">//</span>将ts文件编译成js文件<br></code></pre></td></tr></table></figure>
<h5 id="编译选项"><a href="#编译选项" class="headerlink" title="编译选项"></a>编译选项</h5><h6 id="编译监视"><a href="#编译监视" class="headerlink" title="编译监视"></a>编译监视</h6><p>监视单个文件夹</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">tsc <span class="hljs-built_in">index</span>.<span class="hljs-keyword">ts</span> -<span class="hljs-keyword">w</span><br></code></pre></td></tr></table></figure>
<p>监视整个文件夹</p>
<p>①在文件夹下创建<code>tsconfig.json</code>文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>tsconfig.json文件写入以下代码,直接写一个大括号就行<br><span class="hljs-regexp">//</span>也可以写入一些编译配置，大括号里可以写注释<span class="hljs-regexp">/* */</span><br>** 代表任意目录  * 任意文件<br>&#123;<br>	<span class="hljs-string">&quot;include&quot;</span>:[<br>		<span class="hljs-string">&quot;./src/**/*&quot;</span>	<span class="hljs-regexp">//</span>编译src文件下的任意目录下的任意文件<br>	]，<br>	<span class="hljs-string">&quot;exclude&quot;</span>:[<br>		<span class="hljs-string">&quot;./src/hello/**/*&quot;</span>	<span class="hljs-regexp">//</span>不编译hello下的文件<br>		<span class="hljs-regexp">//</span>默认值：[<span class="hljs-string">&quot;node_modules&quot;</span>,<span class="hljs-string">&quot;bower_components&quot;</span>,<span class="hljs-string">&quot;jspm_packages&quot;</span>]这些都不会被编译<br>	]，<br>	<span class="hljs-string">&quot;extends&quot;</span>:<span class="hljs-string">&quot;被继承的配置文件&quot;</span>,<br>	<span class="hljs-string">&quot;files&quot;</span>:[	<span class="hljs-regexp">//</span>指定被编译的文件，文件少的时候使用<br>		<span class="hljs-string">&#x27;hello.ts&#x27;</span>,<br>		<span class="hljs-string">&#x27;sys.ts&#x27;</span><br>	]，<br>	<br>	<span class="hljs-regexp">//</span>编译器的选项 很重要<br>	<span class="hljs-string">&quot;compilerOptions&quot;</span>:&#123;<br>		<span class="hljs-string">&quot;target&quot;</span>:<span class="hljs-string">&quot;es6&quot;</span>	<span class="hljs-regexp">//</span>指定编译的版本，exnext(最新版本)<br>		<span class="hljs-string">&quot;module&quot;</span>:<span class="hljs-string">&quot;es6&quot;</span>	<span class="hljs-regexp">//</span>指定模块化的规范<span class="hljs-regexp">//</span>给一个错误的值编译，可以看到有哪些选项<br>		<span class="hljs-string">&quot;lib&quot;</span>:[<span class="hljs-string">&quot;dom&quot;</span>,<span class="hljs-string">&quot;es6&quot;</span>] <span class="hljs-regexp">//</span>指定项目中要使用的库，有默认值，一般不指定<br>        <span class="hljs-string">&quot;outDir&quot;</span>:<span class="hljs-string">&quot;./dist&quot;</span>  <span class="hljs-regexp">//</span>用来指定编译后的文件放在哪<br>        <span class="hljs-string">&quot;outFile&quot;</span>:<span class="hljs-string">&quot;./dist/app.js&quot;</span>	<span class="hljs-regexp">//</span>将代码合并到一个文件中，当文件中有模块引入时，module要选择system(一般不使用，交给打包工具)<br>        <span class="hljs-string">&quot;allowJs&quot;</span>:true	<span class="hljs-regexp">//</span>是否对js文件进行编译，默认是false<br>        <span class="hljs-string">&quot;checkJs&quot;</span>:true	<span class="hljs-regexp">//</span>是否检查js代码是否符合规范，默认为false<br>        <span class="hljs-string">&quot;removeComments&quot;</span>:true	<span class="hljs-regexp">//</span>是否移除注释，默认false<br>        <span class="hljs-string">&quot;noEmit&quot;</span>:true	<span class="hljs-regexp">//</span>不生成编译后的文件，默认false<br>        <span class="hljs-string">&quot;noEmitOnError&quot;</span>:true	<span class="hljs-regexp">//</span>出错不生成编译文件，默认false<br>        <span class="hljs-string">&quot;strict&quot;</span>:true	<span class="hljs-regexp">//</span>严格检查的总开关，默认false，写了这个，下面四个都不用写了，都开启<br>        <br>        <span class="hljs-string">&quot;alwaysStrict&quot;</span>:true		<span class="hljs-regexp">//</span>设置编译后的文件是否使用严格模式，默认false<br>        <span class="hljs-string">&quot;noImplicitAny&quot;</span>:true	<span class="hljs-regexp">//</span>不允许使用隐式的any,默认false<br>        <span class="hljs-string">&quot;noImplicitThis&quot;</span>:true	<span class="hljs-regexp">//</span>不允许不明确类型的this,默认false<br>        <span class="hljs-string">&quot;strictNullChecks&quot;</span>:true	<span class="hljs-regexp">//</span>严格检查空值。默认false<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>②命令行进入该文件夹执行<code>tsc -w</code></p>
<h4 id="TS类型声明"><a href="#TS类型声明" class="headerlink" title="TS类型声明"></a><code>TS</code>类型声明</h4><h6 id="可声明的类型"><a href="#可声明的类型" class="headerlink" title="可声明的类型"></a>可声明的类型</h6><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">例子</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">number</td>
<td align="center">1,-33,2.5</td>
<td align="center">任意数字</td>
</tr>
<tr>
<td align="center">string</td>
<td align="center">‘hi,”hi”,hi</td>
<td align="center">任意字符串</td>
</tr>
<tr>
<td align="center">boolean</td>
<td align="center">true、false</td>
<td align="center">布尔值true或false</td>
</tr>
<tr>
<td align="center">字面量</td>
<td align="center">其本身(不可修改)</td>
<td align="center">限制变显的值就是该字面量的值</td>
</tr>
<tr>
<td align="center">any</td>
<td align="center">★</td>
<td align="center">任意类型</td>
</tr>
<tr>
<td align="center">unknown</td>
<td align="center">★</td>
<td align="center">类型安全的any</td>
</tr>
<tr>
<td align="center">void</td>
<td align="center">空值(undefined)</td>
<td align="center">没有值（或undefined)</td>
</tr>
<tr>
<td align="center">never</td>
<td align="center">没有值</td>
<td align="center">不能是任何值</td>
</tr>
<tr>
<td align="center">object</td>
<td align="center">{name:’孙悟空}</td>
<td align="center">任意的S对象</td>
</tr>
<tr>
<td align="center">array</td>
<td align="center">[1,2,3]</td>
<td align="center">任意S数组</td>
</tr>
<tr>
<td align="center">tuple</td>
<td align="center">[4,5]</td>
<td align="center">元素，TS新增类型，固定长度数组</td>
</tr>
<tr>
<td align="center">enum</td>
<td align="center">enum(A,B)</td>
<td align="center">枚举，TS中新增类型</td>
</tr>
</tbody></table>
<h6 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h6><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">//第一种<br>let <span class="hljs-keyword">a</span>:<span class="hljs-built_in">number</span>;	<span class="hljs-comment">	//定义a的类型为数字，后面a就只能是数字</span><br><span class="hljs-keyword">a</span> = <span class="hljs-number">10</span><span class="hljs-comment">	//没问题</span><br><span class="hljs-keyword">a</span> = <span class="hljs-string">&#x27;hello&#x27;</span><span class="hljs-comment">	//报错</span><br><br>//第二种<br>let <span class="hljs-keyword">a</span>:<span class="hljs-built_in">number</span> = <span class="hljs-number">10</span>;<span class="hljs-comment">	//声明并赋值(一般不这样写)</span><br>或<br>let <span class="hljs-keyword">a</span> = <span class="hljs-number">10</span>	<span class="hljs-comment">	//声明并赋值后，ts会自动检测类型</span><br><br><span class="hljs-keyword">a</span> = <span class="hljs-string">&#x27;ss&#x27;</span><span class="hljs-comment">	//报错</span><br><br></code></pre></td></tr></table></figure>
<h6 id="在函数里声明"><a href="#在函数里声明" class="headerlink" title="在函数里声明"></a>在函数里声明</h6><figure class="highlight fortran"><table><tr><td class="code"><pre><code class="hljs fortran">finction <span class="hljs-built_in">sum</span>(a:<span class="hljs-keyword">number</span>,b:<span class="hljs-keyword">number</span>):<span class="hljs-keyword">number</span>&#123;<br>	<span class="hljs-keyword">return</span> a + b<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="联合类型（连接多个类型）字面量"><a href="#联合类型（连接多个类型）字面量" class="headerlink" title="联合类型（连接多个类型）字面量"></a>联合类型（连接多个类型）字面量</h6><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//只能是一个</span><br><span class="hljs-keyword">let</span> c : <span class="hljs-string">&quot;men&quot;</span>|<span class="hljs-string">&quot;women&quot;</span>	/c就只能是men,或者women<br>或<br><br><span class="hljs-keyword">let</span> c:<span class="hljs-built_in">number</span>|<span class="hljs-built_in">string</span>		/c就只能是数字,或者字符串<br><br>------------------------<br><span class="hljs-comment">//同时 都有</span><br><span class="hljs-keyword">let</span> i:&#123;<span class="hljs-attr">name</span>:<span class="hljs-built_in">string</span>&#125; &amp; &#123;<span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span>&#125;;<br>i = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;	<span class="hljs-comment">//两个属性都要满足</span><br></code></pre></td></tr></table></figure>
<h6 id="any与unknown"><a href="#any与unknown" class="headerlink" title="any与unknown"></a><code>any</code>与<code>unknown</code></h6><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">any</span>类型可以任意赋值，也可以把他赋给别人<br><br>unknown可以任意赋值，但是不可以直接赋给别人，需要进行类型的判断<br><br>类型断言<br>s = e <span class="hljs-keyword">as</span> <span class="hljs-keyword">string</span><br>s = &lt;<span class="hljs-keyword">string</span>&gt;e<br></code></pre></td></tr></table></figure>
<h6 id="object"><a href="#object" class="headerlink" title="object"></a><code>object</code></h6><p><code>object</code>表示一个对象</p>
<p>可以用<code>&#123;&#125;</code>来指定包含哪些属性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//第一种(不常用)</span><br><span class="hljs-keyword">let</span> a:<span class="hljs-built_in">object</span>;	<span class="hljs-comment">//a可以是任意对象</span><br>a = &#123;&#125;<br><br><span class="hljs-comment">//第二种 指定包含哪些属性</span><br><span class="hljs-keyword">let</span> a:&#123;<span class="hljs-attr">name</span>:strang,<span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span>&#125;	<span class="hljs-comment">//必须有name和age</span><br><span class="hljs-keyword">let</span> a:&#123;<span class="hljs-attr">name</span>:strang,age?:<span class="hljs-built_in">number</span>&#125;	<span class="hljs-comment">//必须有name，age可有可无</span><br><br><span class="hljs-comment">//定义对象</span><br><span class="hljs-keyword">let</span> a:&#123;<span class="hljs-attr">naem</span>:strang,[propName:<span class="hljs-built_in">string</span>]:<span class="hljs-built_in">any</span>&#125;	<span class="hljs-comment">//必须有name，其他任意属性都行</span><br><br><span class="hljs-comment">//定义函数</span><br><span class="hljs-keyword">let</span> a:<span class="hljs-function">(<span class="hljs-params">b:<span class="hljs-built_in">number</span>,c:<span class="hljs-built_in">number</span></span>)=&gt;</span><span class="hljs-built_in">number</span>	<span class="hljs-comment">//形参都是数字，返回值也是数字</span><br></code></pre></td></tr></table></figure>
<h6 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h6><p>数组里面放存放什么类型</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> arr: <span class="hljs-built_in">number</span>[]<br><br><span class="hljs-keyword">let</span> arr: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt;<br><br>这两种方法一样，只能存放<span class="hljs-built_in">number</span>的数组<br></code></pre></td></tr></table></figure>
<h6 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h6><p>固定长度的数组</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">let</span> arr:[<span class="hljs-built_in">string</span>,<span class="hljs-built_in">string</span>]<br></code></pre></td></tr></table></figure>
<h6 id="枚举（enum）"><a href="#枚举（enum）" class="headerlink" title="枚举（enum）"></a>枚举（<code>enum</code>）</h6><p>将可能的类列举出来</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-built_in">enum</span> propName&#123;<br>	Male	<span class="hljs-comment">//自动转为0,可以指定</span><br>	Female	<span class="hljs-comment">//自动转为1</span><br>&#125;<br><br><span class="hljs-keyword">let</span> i:&#123;name:<span class="hljs-built_in">string</span>, gender:propName&#125;<br>i = &#123;<br>	name:<span class="hljs-string">&#x27;sun&#x27;</span>,<br>	gender:propName.Male<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="类型的别名"><a href="#类型的别名" class="headerlink" title="类型的别名"></a>类型的别名</h6><p>简化书写</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">type</span> mytype = <span class="hljs-number">1</span>|<span class="hljs-number">2</span>|<span class="hljs-number">3</span>|<span class="hljs-number">4</span>|<span class="hljs-number">5</span>;<br><span class="hljs-attribute">let</span> k:mytype;<br><span class="hljs-attribute">k</span> = <span class="hljs-number">5</span>;	//没问题<br><span class="hljs-attribute">k</span> = <span class="hljs-number">10</span>	//报错<br></code></pre></td></tr></table></figure>
<h4 id="webpack打包ts代码"><a href="#webpack打包ts代码" class="headerlink" title="webpack打包ts代码"></a>webpack打包ts代码</h4><p>添加<code>package.json</code>文件</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> init -y<br></code></pre></td></tr></table></figure>
<p>下载相关包</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">npm i -D webpack webpack-<span class="hljs-keyword">cli</span> typescript ts-loader<br></code></pre></td></tr></table></figure>
<p>创建<code>webpack.config.js</code>配置文件(根文件创建)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>引入path包<br>const path = require(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-regexp">//</span>后面添加的<br><span class="hljs-regexp">//</span>引入html-webpack-plugin,自动生成index.html文件并引入js文件<br>const HTMLWebpackPlugin = require(<span class="hljs-string">&#x27;html-webpack-plugin&#x27;</span>)<br><br><span class="hljs-regexp">//</span>webpack中的所有的配置信息都应该写在module.exports里<br>module.exports = &#123;<br>	<span class="hljs-regexp">//</span>指定入口文件<br>	entry:<span class="hljs-string">&#x27;./src/index.ts&#x27;</span>,<br>	<br>	<span class="hljs-regexp">//</span>指定打包文件所在目录<br>	output:&#123;<br>		<span class="hljs-regexp">//</span>指定打包文件的目录<br>		path:path.resolve(__dirname,<span class="hljs-string">&#x27;dist&#x27;</span>),<br>		<span class="hljs-regexp">//</span>打包后的文件名<br>		filename:<span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>		<span class="hljs-regexp">//</span>告诉webpack不使用箭头函数，兼容ie老版本才会配置<br>		environment:&#123;<br>			arrowFunction:false<br>		&#125;<br>	&#125;,<br>	<span class="hljs-regexp">//</span>指定webpack打包时要使用的模块<br>	module:&#123;<br>		<span class="hljs-regexp">//</span>指定要加载的规则<br>		rules:[<br>			&#123;	<br>				<span class="hljs-regexp">//</span>指定规则生效的文件<br>				test:<span class="hljs-regexp">/\.ts$/</span>,<br>				<span class="hljs-regexp">//</span>要使用的loader<br>				use:<span class="hljs-string">&#x27;ts-loader&#x27;</span>,<br>				<span class="hljs-regexp">//</span>要排除的文件<br>				exclude:<span class="hljs-regexp">/node-modules/</span><br>			&#125;<br>		]<br>	&#125;，<br>	<span class="hljs-regexp">//</span>配置webpack插件<br>	plugins:[<br>		new HTMLWebpackPlugin(&#123;<br>			<span class="hljs-regexp">//</span>指定js插入的模板(根据这个模板生成网页)<br>			template:<span class="hljs-string">&quot;./src/index.html&quot;</span>	<br>		&#125;),<br>	],<br>	<span class="hljs-regexp">//</span>设置文件引用<br>	resolve:&#123;<br>		extensions:[<span class="hljs-string">&#x27;.ts&#x27;</span>,<span class="hljs-string">&#x27;.js&#x27;</span>]	<span class="hljs-regexp">//</span>ts,js文件可以被其他文件引用	<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>创建<code>tsconfig.json</code>文件</p>
<p>是对<code>ts</code>进行编译配置的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>	<span class="hljs-attr">&quot;compilerOptions&quot;</span>:&#123;<br>		<span class="hljs-attr">&quot;module&quot;</span>:<span class="hljs-string">&quot;ES2015&quot;</span>,<br>		<span class="hljs-attr">&quot;target&quot;</span>:<span class="hljs-string">&quot;ES2015&quot;</span>,<br>		<span class="hljs-attr">&quot;strict&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>		<span class="hljs-comment">//严格检查</span><br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在<code>package.json</code>中的<code>scripts</code>里添加<code>&quot;build&quot;:&quot;webpack&quot;</code></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;scripts&quot;</span>:&#123;<br>	<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-string">&quot;......&quot;</span>,<br>	<span class="hljs-string">&quot;build&quot;</span>:<span class="hljs-string">&quot;webpack&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="html转换插件-html-webpack-plugin"><a href="#html转换插件-html-webpack-plugin" class="headerlink" title="html转换插件(html-webpack-plugin)"></a><code>html</code>转换插件(<code>html-webpack-plugin</code>)</h5><p>自动创建<code>HTML</code>文件，并引入转换好的js文件</p>
<p>下载</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">npm <span class="hljs-selector-tag">i</span> -D <span class="hljs-selector-tag">html</span>-webpack-plugin<br></code></pre></td></tr></table></figure>
<p>相关配置在前面<code>webpack.config.js</code>中</p>
<h5 id="webpack开发服务器"><a href="#webpack开发服务器" class="headerlink" title="webpack开发服务器"></a><code>webpack</code>开发服务器</h5><p>与webpack相关联的，会根据项目的改变自动刷新。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i -D webpack-dev-serve<br></code></pre></td></tr></table></figure>
<p>需要在<code>package.json</code>里的<code>scripts</code>配置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;scripts&quot;</span>:&#123;<br>	<span class="hljs-regexp">//</span>配置这一句命令，可以自动打开谷歌浏览器与本地网页<br>	<span class="hljs-string">&quot;start&quot;</span>:<span class="hljs-string">&quot;webpack serve --open chrome.exe&quot;</span>	<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="清除dist文件插件"><a href="#清除dist文件插件" class="headerlink" title="清除dist文件插件"></a>清除dist文件插件</h5><p>在生成新的dist文件前会删除原来的dist文件，避免存在旧文件的情况。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i -D clean-webpack-plugin<br></code></pre></td></tr></table></figure>
<h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><p>与<code>html-webpack-plugin</code>插件一样</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>webpack.config.js<br><span class="hljs-regexp">//</span>引入<br>cosnt &#123;CleanWebpackPlugin&#125; = require(<span class="hljs-string">&#x27;clean-webpack-plugin&#x27;</span>)<br><br>plugins:[<br>	new	CleanWebpackPlugin(),	<span class="hljs-regexp">//</span>配置插件<br>]<br></code></pre></td></tr></table></figure>
<h5 id="设置引用模块"><a href="#设置引用模块" class="headerlink" title="设置引用模块"></a>设置引用模块</h5><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">resolve</span>:&#123;<br>	extension<span class="hljs-variable">s:</span>[<span class="hljs-string">&#x27;.ts&#x27;</span>,<span class="hljs-string">&#x27;.js&#x27;</span>]	//<span class="hljs-keyword">ts</span>,js文件可以被其他文件引用	<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="语法转换兼容各个浏览器-babel"><a href="#语法转换兼容各个浏览器-babel" class="headerlink" title="语法转换兼容各个浏览器(babel)"></a>语法转换兼容各个浏览器(babel)</h5><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">npm i -D @babel<span class="hljs-regexp">/core @babel/</span>preset-env babel-loader core-js<br><br><span class="hljs-regexp">//</span>@babel/core bable的核心工具<br><span class="hljs-regexp">//</span>@babel/preset-env	预置各种环境，可以让代码兼容到各个浏览器<br><span class="hljs-regexp">//</span>babel-loader	让babe与webpack结合<br><span class="hljs-regexp">//</span>core-js	模拟js运行环境，让老版本浏览器也能执行新浏览器代码<br></code></pre></td></tr></table></figure>
<p>在rules里需要配置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">rules:[<br>	&#123;	<span class="hljs-regexp">//</span>这里的loader是从前往后执行的，所以babel要写在前边<br>		<span class="hljs-regexp">//</span>要使用的loader<br>		use:[<br>			<span class="hljs-regexp">//</span>配置babel<br>			&#123;<br>				<span class="hljs-regexp">//</span>指定加载器<br>				loader:<span class="hljs-string">&quot;babel-loader&quot;</span>,<br>				<span class="hljs-regexp">//</span>设置babel<br>				options:&#123;<br>					<span class="hljs-regexp">//</span>设置预定义的环境<br>					presets:[<br>						[<br>							<span class="hljs-string">&quot;@babel/presert-env&quot;</span>,	<span class="hljs-regexp">//</span>指定环境的插件<br>							&#123;	<span class="hljs-regexp">//</span>配置信息<br>								target:&#123;<br>									<span class="hljs-string">&quot;chrome&quot;</span>:<span class="hljs-string">&quot;88&quot;</span>	<span class="hljs-regexp">//</span>兼容到chrome88版本<br>									<br>								&#125;,<br>								<span class="hljs-string">&quot;corejs&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>,	<span class="hljs-regexp">//</span>指定codejs的版本<br>								<span class="hljs-string">&quot;useBuiltIns&quot;</span>:<span class="hljs-string">&quot;usage&quot;</span>	<span class="hljs-regexp">//</span>使用corejs的方式 usage表示按需加载	<br>							&#125;<br>						]<br>					]<br>				&#125;<br>			&#125;,	<span class="hljs-regexp">//</span>复杂配置<br>			<span class="hljs-string">&#x27;ts-loader&#x27;</span>	<span class="hljs-regexp">//</span>简化配置<br>		]<br>	&#125;<br>]<br></code></pre></td></tr></table></figure>


<h4 id="类的简介"><a href="#类的简介" class="headerlink" title="类的简介"></a>类的简介</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>	<span class="hljs-comment">//定义实例属性，需要创建实例后才可以调用</span><br>	name:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;张三&quot;</span>;<br>	<br>	<span class="hljs-comment">//readonly开头的属性是只读属性,修改会报错</span><br>	<span class="hljs-keyword">readonly</span> name:<span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;张三&quot;</span><br>	<span class="hljs-comment">//静态属性也可以添加readonly属性</span><br>	<span class="hljs-keyword">static</span> <span class="hljs-keyword">readonly</span> age:<span class="hljs-built_in">number</span> = <span class="hljs-number">18</span>;<br>	<br>	<span class="hljs-comment">//静态属性，可以直接通过类调用</span><br>	<span class="hljs-comment">//Person.age &gt;&gt;&gt;18</span><br>	<span class="hljs-keyword">static</span> age:<span class="hljs-built_in">number</span> = <span class="hljs-number">18</span>;<br>	<br>	<span class="hljs-comment">//定义方法,也可以加static</span><br>	<span class="hljs-function"><span class="hljs-title">sayhello</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;您好&#x27;</span>)&#125;<br>	<span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">sayhello</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;您好&#x27;</span>)&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="构造函数与this"><a href="#构造函数与this" class="headerlink" title="构造函数与this"></a>构造函数与this</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span></span>&#123;<br>	name:<span class="hljs-built_in">string</span>;<br>	age:<span class="hljs-built_in">number</span>;<br>	<br>	<span class="hljs-comment">//constructor构造函数，会在对象创建时调用</span><br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span>, age:<span class="hljs-built_in">number</span></span>)</span>&#123;<br>		<span class="hljs-comment">//在实例方法中，this就表示当前的实例</span><br>		<span class="hljs-comment">//在构造函数中当前对象就是当前新建的那个对象</span><br>		<span class="hljs-comment">//可以通过this向新建对象中添加属性</span><br>		<span class="hljs-built_in">this</span>.name = name;<br>		<span class="hljs-built_in">this</span>.age = age;<br>	&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> dog = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;小黑&#x27;</span>,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">const</span> dog1 = <span class="hljs-keyword">new</span> Dog(<span class="hljs-string">&#x27;小白&#x27;</span>,<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure>
<h5 id="继承与重写"><a href="#继承与重写" class="headerlink" title="继承与重写"></a>继承与重写</h5><figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>	name:string;<br>	age:number;<br>	constructor(name:string,age:number)&#123;<br>		<span class="hljs-keyword">this</span>.name = name;<br>		<span class="hljs-keyword">this</span>.age = age;<br>	&#125;<br>	sayHello()&#123;<br>		console.log(&#x27;动物在叫~&#x27;)<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//继承Animal</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>	<span class="hljs-comment">//重写父类方法</span><br>	sayHello()&#123;<br>		console.log(&#x27;汪汪汪&#x27;)<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//继承Animal</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span></span>&#123;<br>	<span class="hljs-comment">//重写父类方法</span><br>	sayHello()&#123;<br>		console.log(&#x27;喵喵喵&#x27;)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h5><p>可以调用父级的方法</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi">sayHello()<span class="hljs-comment">&#123;</span><br><span class="hljs-comment">	super.sayHello()	//调用父级的sayhello</span><br><span class="hljs-comment">&#125;</span><br><br><span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">(<span class="hljs-keyword">name</span>:staring,age:number)</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-function"><span class="hljs-comment">	super(name);//如果在子类中写了构造函数，则必须写上super()</span></span><br><span class="hljs-function"><span class="hljs-comment">	this.age = age;</span></span><br><span class="hljs-function"><span class="hljs-comment">&#125;</span></span><br></code></pre></td></tr></table></figure>
<h5 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类(abstract)"></a>抽象类(abstract)</h5><p>以abstract开头的类是抽象类</p>
<p>抽象类<strong>不能用来创建对象</strong></p>
<p>抽象类是专门用来继承的类</p>
<p>抽象类中可以添加抽象类的方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ANimal</span></span>&#123;<br>	name:<span class="hljs-built_in">string</span>;<br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span></span>)</span>&#123;<br>		<span class="hljs-built_in">this</span>.name = name;<br>	&#125;<br>	<br>	<span class="hljs-comment">//定义一个抽象方法，使用abstract开头，没有方法体。</span><br>	<span class="hljs-comment">//子类必须对抽象方法重写</span><br>	<span class="hljs-keyword">abstract</span> sayhello():<span class="hljs-built_in">void</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-title">extents</span> <span class="hljs-title">Animal</span></span>&#123;<br>	<span class="hljs-comment">//这儿必须重写sayhello方法</span><br>	<span class="hljs-function"><span class="hljs-title">sayhello</span>(<span class="hljs-params"></span>)</span>&#123;<br>		coonsole,log(<span class="hljs-string">&#x27;汪汪汪&#x27;</span>)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="接口-inteface"><a href="#接口-inteface" class="headerlink" title="接口(inteface)"></a>接口(<code>inteface</code>)</h5><p>接口可以定义一个类结构，用来定义一个类包含哪些属性和方法</p>
<p>同时接口也可以当成类型去使用</p>
<p>接口中的所有属性都不能有实际值</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//描述一个对象的类型</span><br><span class="hljs-keyword">type</span> myType = &#123;<br>	name:<span class="hljs-built_in">string</span>,<br>	age:<span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-comment">//接口</span><br>inteface myInteface&#123;<br>	name:<span class="hljs-built_in">string</span>,<br>	age:<span class="hljs-built_in">number</span><br>&#125;<br><br><span class="hljs-keyword">const</span> obj:myInteface = &#123;<br>	name:<span class="hljs-string">&#x27;张三&#x27;</span>,	<span class="hljs-comment">//这儿必须只有name和age,不能多也不能少</span><br>	age:<span class="hljs-number">18</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>定义类时，可以使类去实现一个接口</p>
<p>就是使类满足接口的要求</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">interface</span> myInter&#123;<br>	name:<span class="hljs-built_in">string</span>;<br>	sayhello():<span class="hljs-built_in">void</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Myclass</span> <span class="hljs-title">implements</span> <span class="hljs-title">myInter</span></span>&#123;<br>	name:<span class="hljs-built_in">string</span>;<br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span></span>)</span>&#123;<br>		<span class="hljs-built_in">this</span>.name = name;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-title">sayhello</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;大家好&#x27;</span>)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="属性的封装"><a href="#属性的封装" class="headerlink" title="属性的封装"></a>属性的封装</h5><p><code>ts</code>可以在属性前添加属性的修饰符</p>
<p><code>public</code>修饰的属性可以在任意位置访问(修改) 默认值</p>
<p><code>private</code>私有属性，私有属性只能在类内部进行访问(修改)，可以在外部调用类里面的方法来修改私有属性</p>
<p><code>protected</code>受保护的属性，只能在当前类和当前类的子类中访问</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>	<span class="hljs-keyword">private</span> _name:<span class="hljs-built_in">string</span>;<br>	<span class="hljs-keyword">private</span> _age:<span class="hljs-built_in">number</span>;<br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span>,age:<span class="hljs-built_in">number</span></span>)</span>&#123;<br>		<span class="hljs-built_in">this</span>._name = name;<br>		<span class="hljs-built_in">this</span>._age = age;<br>	&#125;<br>	<span class="hljs-comment">//这两个可以用getter和setter来替代</span><br>	<span class="hljs-function"><span class="hljs-title">getname</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._name;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-title">setname</span>(<span class="hljs-params">value:<span class="hljs-built_in">string</span></span>)</span>&#123;<br>		<span class="hljs-built_in">this</span>._name = value<br>	&#125;<br>	<br>	<span class="hljs-comment">//getter 在外边直接用anm.name 来访问</span><br>	<span class="hljs-keyword">get</span> <span class="hljs-title">name</span>()&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>._name;<br>	&#125;<br>	<span class="hljs-comment">//srtter 在外边直接用anm.name = &#x27;李四&#x27; 来修改</span><br>	<span class="hljs-keyword">set</span> <span class="hljs-title">name</span>(<span class="hljs-params">value:<span class="hljs-built_in">string</span></span>)&#123;<br>        <span class="hljs-keyword">if</span>(value&gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">this</span>._name = value<br>        &#125;<br>	&#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> anm = <span class="hljs-keyword">new</span> Animal(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-string">&#x27;12&#x27;</span>)<br><br>anm._name = <span class="hljs-string">&#x27;李四&#x27;</span>	<span class="hljs-comment">//会报错，不能在这修改</span><br></code></pre></td></tr></table></figure>
<h6 id="class简写"><a href="#class简写" class="headerlink" title="class简写"></a>class简写</h6><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c</span></span>&#123;<br>	name:<span class="hljs-built_in">string</span>;<br>	age:<span class="hljs-built_in">number</span>;<br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span>,age:<span class="hljs-built_in">number</span></span>)</span>&#123;<br>		<span class="hljs-built_in">this</span>.name = name;<br>		<span class="hljs-built_in">this</span>.age = age;<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//简写 与上面的效果一样</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c</span></span>&#123;<br>	<span class="hljs-comment">//直接将属性定义到对象中</span><br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">public</span> name:<span class="hljs-built_in">string</span>, <span class="hljs-keyword">public</span> age:<span class="hljs-built_in">number</span></span>)</span>&#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h5><p>在定义函数或是类时，如果遇到类型不明确就可以用泛型 </p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//指定一个泛型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params">a:T</span>):<span class="hljs-title">T</span></span>&#123;	<span class="hljs-comment">//T是泛型的名字，可以随意定义</span><br>	<span class="hljs-keyword">return</span> a;<br>&#125;<br><br>fn(<span class="hljs-number">10</span>)	<span class="hljs-comment">//不指定泛型，ts会自动推断</span><br><br>fn&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;hello&#x27;</span>)	<span class="hljs-comment">//也可以指定泛型</span><br><br><span class="hljs-comment">//指定多个泛型</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn</span>&lt;<span class="hljs-title">T</span>,<span class="hljs-title">K</span>&gt;(<span class="hljs-params">a:T,b:K</span>):<span class="hljs-title">T</span></span>&#123;	<span class="hljs-comment">//T是泛型的名字，可以随意定义</span><br>	<span class="hljs-built_in">console</span>.log(b)<br>	<span class="hljs-keyword">return</span> a;<br>&#125;<br>fn&lt;<span class="hljs-built_in">number</span>,<span class="hljs-built_in">string</span>&gt;(<span class="hljs-number">123</span>,<span class="hljs-string">&#x27;hello&#x27;</span>)<br><br><span class="hljs-comment">//泛型T必须是 inter 的实现类</span><br><span class="hljs-keyword">interface</span> Inter&#123;<br>	length:<span class="hljs-built_in">number</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn3</span>&lt;<span class="hljs-title">T</span> <span class="hljs-title">extends</span> <span class="hljs-title">Inter</span>&gt;(<span class="hljs-params">a:T</span>):<span class="hljs-title">number</span></span>&#123;<br>	<span class="hljs-keyword">return</span> a.length;<br>&#125;<br><br><span class="hljs-comment">//也可以在class中写泛型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>	name:T;<br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name:T</span>)</span>&#123;<br>		<span class="hljs-built_in">this</span>.name = name;<br>	&#125;<br>&#125;<br><span class="hljs-keyword">const</span> mc = <span class="hljs-keyword">new</span> MyClass&lt;<span class="hljs-built_in">string</span>&gt;(<span class="hljs-string">&#x27;孙悟空&#x27;</span>);<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>ts</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题总结</title>
    <url>/2022/03/29/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode">id选择器<span class="hljs-comment">(id)</span> 类选择器<span class="hljs-comment">(.)</span> 标签选择器<span class="hljs-comment">(div)</span> 通配符选择器<span class="hljs-comment">(*)</span><br>后代选择器<span class="hljs-comment">(空格)</span> 并集选择器<span class="hljs-comment">(,)</span> 交集选择器<span class="hljs-comment">(div.p)</span><br>子代选择器<span class="hljs-comment">(&gt;)</span> 兄弟选择器<span class="hljs-comment">(+ ~)</span>	<br></code></pre></td></tr></table></figure>
<p>权重：id&gt;class&gt;标签&gt;通用</p>
<h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less">!<span class="hljs-selector-tag">important</span>&gt;行内样式 &gt; 内嵌样式 (style)&gt; 外部样式 (link)&gt;外部样式 (<span class="hljs-variable">@import</span> link)<br></code></pre></td></tr></table></figure>
<h4 id="display属性"><a href="#display属性" class="headerlink" title="display属性"></a>display属性</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">none<span class="hljs-regexp">/block/i</span>nline<span class="hljs-regexp">/inline-block/</span>flex/table<br></code></pre></td></tr></table></figure>
<h4 id="css-sprites"><a href="#css-sprites" class="headerlink" title="css sprites"></a>css sprites</h4><p>把很多的小图片按照规律排列成一张大图，通过css的背景图片和背景定位来在指定的地方显示</p>
<p>优点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">提高页面下载速度<br>减少HTTP请求<br>省流量<br></code></pre></td></tr></table></figure>
<h4 id="Display-none和visibility-hidden的区别"><a href="#Display-none和visibility-hidden的区别" class="headerlink" title="Display:none和visibility:hidden的区别"></a><code>Display:none</code>和<code>visibility:hidden</code>的区别</h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Display:</span>none<br>隐藏元素，不占页面的布局<br>其子类元素不具有继承属性<br>影响计数器的计数，计数器重新排列<br><span class="hljs-symbol">visibility:</span>hidden<br>隐藏元素，仍会影响布局<br>其子类元素具有继承性<br>不会影响计数器的计数，其计数器仍在运行<br></code></pre></td></tr></table></figure>
<h4 id="Px和rem区别"><a href="#Px和rem区别" class="headerlink" title="Px和rem区别"></a>Px和rem区别</h4><figure class="highlight dos"><table><tr><td class="code"><pre><code class="hljs dos">px<br>绝对大小单位。像素px是相对于显示器屏幕分辨率而言的<br><span class="hljs-comment">rem</span><br>相对大小单位,根据根元素的字体大小来调整所有字体的大小<br></code></pre></td></tr></table></figure>
<h4 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h4><p>即块级格式化上下文，它是一个独立的渲染区域</p>
<p>这个独立盒子里的布局不受外部影响，当然它也不会影响到外面的元素</p>
<h4 id="什么是外边距重叠？重叠的结果是什么？"><a href="#什么是外边距重叠？重叠的结果是什么？" class="headerlink" title="什么是外边距重叠？重叠的结果是什么？"></a>什么是外边距重叠？重叠的结果是什么？</h4><p>当两个垂直外边距相遇时，它们将形成一个外边距。 合并后的外边距的高度等于两个发生合并的外边距的高度中的绝对值较大者。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss">处理外边距重叠方案：<br>1.浮动元素、inline-block 元素、绝对定位元素的 <span class="hljs-attribute">margin</span> 不会和垂直方向上其他元素的 <span class="hljs-attribute">margin</span> 折叠（注意这里指的是上下相邻的元素）<br>2.外层元素<span class="hljs-attribute">padding</span>代替<br>3.内层元素透明边框 <span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid transparent;<br>4.用同一方向的<span class="hljs-attribute">margin</span>，都设置为<span class="hljs-attribute">top</span>或者<span class="hljs-attribute">bottom</span>。<br>5.内层元素绝对定位 postion:absolute:<br><span class="hljs-number">6</span>.外层元素 overflow:hidden;<br>7.内层元素<span class="hljs-attribute">padding</span>:<span class="hljs-number">1px</span>;<br></code></pre></td></tr></table></figure>
<h4 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h4><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span><span class="hljs-selector-class">.opacity</span>:<span class="hljs-number">0</span>;<br><span class="hljs-number">2</span><span class="hljs-selector-class">.display</span>:none;<br><span class="hljs-number">3</span><span class="hljs-selector-class">.visiblity</span>:hidden;<br><span class="hljs-number">4</span><span class="hljs-selector-class">.position</span>:absolute;(<span class="hljs-attribute">top</span>:-<span class="hljs-number">200vh</span>,width:-<span class="hljs-number">200vw</span>;将元素定位到可是区域外)<br></code></pre></td></tr></table></figure>
<h4 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h4><p>1.w3c盒子模型(标准盒模型)</p>
<p>盒子大小 = content(设置的宽高) + border + padding +margin</p>
<p>2.IE盒子模型(怪异盒模型)</p>
<p>盒子大小 = width(包含content,border,padding) +margin</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">box-sizing</span>: content-box;	<span class="hljs-comment">//w3c模型</span><br><span class="hljs-attribute">box-sizing</span>: border-box;	<span class="hljs-comment">//ie盒子模型</span><br><span class="hljs-attribute">box-sizing</span>: inherit;	<span class="hljs-comment">//继承父元素盒子模型</span><br></code></pre></td></tr></table></figure>
<h4 id="css3新特性"><a href="#css3新特性" class="headerlink" title="css3新特性"></a>css3新特性</h4><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span>. <span class="hljs-selector-tag">CSS3</span>实现圆角（<span class="hljs-selector-tag">border-radius</span>），阴影（<span class="hljs-selector-tag">box-shadow</span>），边框图片<span class="hljs-selector-tag">border-image</span><br><span class="hljs-selector-tag">2</span>. 对文字加特效（<span class="hljs-selector-tag">text-shadow</span>、），强制文本换行（<span class="hljs-selector-tag">word-wrap</span>），线性渐变（<span class="hljs-selector-tag">linear-gradient</span>）<br><span class="hljs-selector-tag">3</span>.旋转,缩放,定位,倾斜：<span class="hljs-selector-tag">transform</span>:<span class="hljs-selector-tag">rotate</span>(<span class="hljs-number">90deg</span>) <span class="hljs-selector-tag">scale</span>(<span class="hljs-number">0.85</span>,<span class="hljs-number">0.90</span>) <span class="hljs-selector-tag">translate</span>(<span class="hljs-number">0px</span>,-<span class="hljs-number">30px</span>) <span class="hljs-selector-tag">skew</span>(-<span class="hljs-number">9deg</span>,<span class="hljs-number">0deg</span>);<br><span class="hljs-selector-tag">4</span>. 增加了更多的<span class="hljs-selector-tag">CSS</span>选择器、多背景、<span class="hljs-selector-tag">rgba</span>()；<br><span class="hljs-selector-tag">5</span>. 在<span class="hljs-selector-tag">CSS3</span>中唯一引入的伪元素是 <span class="hljs-selector-pseudo">::selection</span> ；<br><span class="hljs-selector-tag">6</span>. 媒体查询(<span class="hljs-variable">@media</span>)，多栏布局（<span class="hljs-selector-tag">flex</span>） <br></code></pre></td></tr></table></figure>
<h4 id="css3新增伪类"><a href="#css3新增伪类" class="headerlink" title="css3新增伪类"></a>css3新增伪类</h4><figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir">伪类<br><span class="hljs-symbol">:empty</span>	选择空标签<br><span class="hljs-symbol">:focus</span>	选择当前获取焦点的表单元素<br><span class="hljs-symbol">:enabled</span>	选择当前没有禁用的表单元素<br><span class="hljs-symbol">:disabled</span>	选择禁用的表单元素<br><span class="hljs-symbol">:checked</span>	选择当前已经勾选的单选按钮或者复选框<br><span class="hljs-symbol">:root</span>	选择根元素，即&lt;html&gt;标签<br><br>新增选择器：<br><span class="hljs-symbol">:nth-of-type</span>()	参数：数字，odd,even,<span class="hljs-number">3</span>n,<span class="hljs-number">3</span>n+<span class="hljs-number">1</span><br><span class="hljs-symbol">:nth-child</span>()	参数：数字，odd,even,<span class="hljs-number">3</span>n,<span class="hljs-number">3</span>n+<span class="hljs-number">1</span><br>区别：<br><span class="hljs-symbol">:nth-of-type</span>是父元素下该类型的第一个<br><span class="hljs-symbol">:nth-child</span>是父元素下第一个元素(如果第一个元素与指定元素不同，则选取不到)<br><br>--------------------------------<br>伪元素<br><span class="hljs-symbol">:before</span>		<br><span class="hljs-symbol">:after</span><br><br>文字选择<br><span class="hljs-symbol">:first-letter</span>	选择第一行第一个字母<br><span class="hljs-symbol">:first-line</span>		选择第一行全部文字<br><br>::selection		鼠标选择，高亮显示<br></code></pre></td></tr></table></figure>
<h4 id="css3动画优缺点"><a href="#css3动画优缺点" class="headerlink" title="css3动画优缺点"></a>css3动画优缺点</h4><p>优点：<br>1、浏览器可以对动画进行优化<br>2、代码比较简单</p>
<p>缺点：<br>1、兼容性不好。<br>2、在动画控制上不够灵活，运行过程较弱，无法附加绑定回调函数，不能在特定的位置上添加回调函数或是绑定回放事件，无进度报告。</p>
<h4 id="文本换行"><a href="#文本换行" class="headerlink" title="文本换行"></a>文本换行</h4><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">word</span>-wrap:<span class="hljs-keyword">break</span>-<span class="hljs-keyword">word</span>;	换行，分割最长的单词<br><br><span class="hljs-keyword">word</span>-<span class="hljs-keyword">break</span>:<span class="hljs-keyword">break</span>-all;	都换行，接触边界的单词都分割<br><span class="hljs-keyword">word</span>-<span class="hljs-keyword">break</span>:keep-all;	保持原样<br><br>white-space:nowrap;		文本不换行<br></code></pre></td></tr></table></figure>
<h4 id="文本超出省略号"><a href="#文本超出省略号" class="headerlink" title="文本超出省略号"></a>文本超出省略号</h4><figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">text-overflow</span>:ellipsis;	文本超出省略号<br><br><span class="hljs-comment">//三者必须一起写，才有省略号的效果</span><br><span class="hljs-comment">//分别代表：文本超出省略号 隐藏超出内容 文本不换行</span><br><span class="hljs-attribute">text-overflow</span>: ellipsis;<span class="hljs-attribute">overflow</span>: hidden;<span class="hljs-attribute">white-space</span>: nowrap;<br></code></pre></td></tr></table></figure>
<h4 id="添加蒙版-淡入淡出"><a href="#添加蒙版-淡入淡出" class="headerlink" title="添加蒙版/淡入淡出"></a>添加蒙版/淡入淡出</h4><figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss">蒙版：<span class="hljs-attribute">position</span> + <span class="hljs-attribute">opacity</span><br>淡入淡出：<span class="hljs-attribute">transition</span> + <span class="hljs-attribute">opacity</span> + hover(点击事件也可以)<br></code></pre></td></tr></table></figure>
<h4 id="文本-边框阴影"><a href="#文本-边框阴影" class="headerlink" title="文本/边框阴影"></a>文本/边框阴影</h4><figure class="highlight processing"><table><tr><td class="code"><pre><code class="hljs processing">文本<br><span class="hljs-comment">//text-shadow:水平偏移  垂直偏移  模糊程度 颜色</span><br><span class="hljs-built_in">text</span>-shadow:<span class="hljs-number">5</span>px <span class="hljs-number">0</span>px <span class="hljs-number">0</span>px rgb(<span class="hljs-number">42</span>, <span class="hljs-number">134</span>, <span class="hljs-number">30</span>); <br><br>边框<br><span class="hljs-built_in">box</span>-shadow:水平偏移  垂直偏移  阴影所占区域的大小 模糊程度 颜色 内侧阴影(参数同前面五个)<br><span class="hljs-built_in">box</span>-shadow: h-shadow v-shadow blur spread <span class="hljs-built_in">color</span> ,inset;<br><span class="hljs-built_in">box</span>-shadow:<span class="hljs-number">10</span>px <span class="hljs-number">10</span>px <span class="hljs-number">10</span>px <span class="hljs-number">2</span>px <span class="hljs-built_in">red</span> ,inset <span class="hljs-number">10</span>px <span class="hljs-number">10</span>px <span class="hljs-number">10</span>px <span class="hljs-number">2</span>px <span class="hljs-built_in">red</span><br></code></pre></td></tr></table></figure>


<h4 id="float"><a href="#float" class="headerlink" title="float"></a>float</h4><h5 id="float原理及清除浮动"><a href="#float原理及清除浮动" class="headerlink" title="float原理及清除浮动"></a>float原理及清除浮动</h5><figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss">浮动原理：<br>浮动的框可以左右移动，直至它的外边缘遇到包含框或者另一个浮动框的边缘。浮动框脱离了文档流，当一个元素浮动之后，不会影响到块级框的布局而只会影响内联框（通常是文本）的排列，文档中的普通流就会表现得和浮动框不存在一样，当浮动框高度超出包含框的时候，也就会出现包含框不会 自动伸高来闭合浮动元素（“高度塌陷”现象）<br><br>清除浮动：<br>①在浮动元素末尾加一个空<span class="hljs-selector-tag">div</span>，空<span class="hljs-selector-tag">div</span>样式<span class="hljs-attribute">clear</span>:both;<br>②给父元素添加<span class="hljs-attribute">overflow</span>:hidden;(属性任意)<br>③添加伪元素(:after,:before)<br><span class="hljs-selector-class">.clearfix</span>:after &#123;content:<span class="hljs-string">&quot;.&quot;</span>; <span class="hljs-attribute">display</span>:block; <span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">visibility</span>:hidden; <span class="hljs-attribute">clear</span>:both; &#125; <br><span class="hljs-selector-class">.clearfix</span> &#123; *zoom:<span class="hljs-number">1</span>; &#125; <span class="hljs-comment">//为了适配ie6</span><br></code></pre></td></tr></table></figure>
<h5 id="position-absolute与float的异同"><a href="#position-absolute与float的异同" class="headerlink" title="position:absolute与float的异同"></a><code>position:absolute</code>与float的异同</h5><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">同：都能让元素脱离文档流，可以设置高宽<br>异：<span class="hljs-keyword">float</span>会占据位置，<span class="hljs-built_in">position</span>会覆盖其他元素，<br></code></pre></td></tr></table></figure>
<h4 id="css语义化标签"><a href="#css语义化标签" class="headerlink" title="css语义化标签"></a>css语义化标签</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span> 头部		<span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span> 尾部<br><span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span> 导航		<span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span> 主题内容<br><span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span> 一个片段	<span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span> 侧边栏<br></code></pre></td></tr></table></figure>
<h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><h4 id="js垃圾回收机制"><a href="#js垃圾回收机制" class="headerlink" title="js垃圾回收机制"></a>js垃圾回收机制</h4><p>原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。</p>
<h5 id="①标记清除"><a href="#①标记清除" class="headerlink" title="①标记清除"></a>①标记清除</h5><p> 在函数声明一个变量的时候，就将这个变量标记为“进入环境”。从逻辑上讲，永远都不能释放进入环境的变量作占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。垃圾回收器在运行时候会给存储在内存中中的所有变量都加上标记。然后它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。在此之后再被标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾回收器完成内存清楚工作，销毁那些带标记的值并回收他们所占用的内存空间。</p>
<h5 id="②引用计数法"><a href="#②引用计数法" class="headerlink" title="②引用计数法"></a>②引用计数法</h5><p>引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。</p>
<p>但是很重要的一点是当遇到循环引用的时候，函数的引用次数就不会为0，所以不会被垃圾回收器回收内存，会造成内存泄露。</p>
<h5 id="垃圾回收-GC-缺陷"><a href="#垃圾回收-GC-缺陷" class="headerlink" title="垃圾回收(GC)缺陷"></a>垃圾回收(GC)缺陷</h5><p>GC时，停止响应其他操作，这是为了安全考虑。而Javascript的GC在100ms甚至以上，对一般的应用还好，但对于JS游戏，动画对连贯性要求比较高的应用，就麻烦了。这就是新引擎需要优化的点：避免GC造成的长时间停止响应。</p>
<h5 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h5><h6 id="分代回收（Generation-GC）"><a href="#分代回收（Generation-GC）" class="headerlink" title="分代回收（Generation GC）"></a>分代回收（Generation GC）</h6><p>目的是通过区分“临时”与“持久”对象；多回收“临时对象”区（young generation），少回收“持久对象”区（tenured generation），减少每次需遍历的对象，从而减少每次GC的耗时 </p>
<h6 id="增量GC"><a href="#增量GC" class="headerlink" title="增量GC"></a>增量GC</h6><p> 这个方案的思想很简单，就是“每次处理一点，下次再处理一点，如此类推”。</p>
<pre><code class="hljs">这种方案，虽然耗时短，但中断较多，带来了上下文切换频繁的问题。 
</code></pre>
<p>因此：低 (对象/s) 比率时，中断执行GC的频率，simple GC更低些；如果大量对象都是长期“存活”，则分代处理优势也不大</p>
<h4 id="Script标签中defer和anysc属性的区别"><a href="#Script标签中defer和anysc属性的区别" class="headerlink" title="Script标签中defer和anysc属性的区别"></a>Script标签中defer和anysc属性的区别</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">//同步加载并执行<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;example.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>	<br><br>//异步加载，加载完成后，立即执行<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;example.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>//异步加载，等待文档所有元素解析完成后执行<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;example.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>defer 和 async 的共同点是都是可以并行加载JS文件，不会阻塞页面的加载，不同点是 defer的加载完成之后，JS会等待整个页面全部加载完成了再执行，而async是加载完成之后，会马上执行JS，所以假如对JS的执行有严格顺序的话，那么建议用 defer加载。</p>
<h4 id="常见的js数组函数"><a href="#常见的js数组函数" class="headerlink" title="常见的js数组函数"></a>常见的js数组函数</h4><p>我用#CSDN#这个app发现了有技术含量的博客，小伙伴们求同去《最全的JavaScript常见的操作数组的函数方法宝典，不收藏绝对后悔》, 一起来围观吧 <a href="https://blog.csdn.net/l_ppp/article/details/107326510">https://blog.csdn.net/l_ppp/article/details/107326510</a></p>
<h4 id="encodeURI和decodeURI的区别是什么"><a href="#encodeURI和decodeURI的区别是什么" class="headerlink" title="encodeURI和decodeURI的区别是什么"></a><code>encodeURI</code>和<code>decodeURI</code>的区别是什么</h4><h5 id="encodeURI与decodeURI"><a href="#encodeURI与decodeURI" class="headerlink" title="encodeURI与decodeURI"></a><code>encodeURI</code>与<code>decodeURI</code></h5><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//该方法不会对 ASCII 字母和数字进行编码</span><br><span class="hljs-comment">//也不会对这些 ASCII 标点符号进行编码： - _ . ! ~ * ’ ( ) 。</span><br><span class="hljs-function"><span class="hljs-title">encodeURI</span><span class="hljs-params">()</span></span>:把字符串作为 URI 进行编码<br><span class="hljs-function"><span class="hljs-title">decodeURI</span><span class="hljs-params">()</span></span>:对 encodeURI() 函数编码过的 URI 进行解码<br></code></pre></td></tr></table></figure>
<h5 id="encodeURIComponent和decodeURIComponent"><a href="#encodeURIComponent和decodeURIComponent" class="headerlink" title="encodeURIComponent和decodeURIComponent"></a><code>encodeURIComponent</code>和<code>decodeURIComponent</code></h5><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//可以编码和解码URI特殊字符（如#，/，￥等），而decodeURI则不能。</span><br><span class="hljs-function"><span class="hljs-title">encodeURIComponent</span><span class="hljs-params">()</span></span>	编码<br><span class="hljs-function"><span class="hljs-title">decodeURIComponent</span><span class="hljs-params">()</span></span>	解码<br></code></pre></td></tr></table></figure>
<h4 id="Null和undefined的区别"><a href="#Null和undefined的区别" class="headerlink" title="Null和undefined的区别"></a><code>Null</code>和<code>undefined</code>的区别</h4><p>null是空，undefined是未定义</p>
<p>undefined是访问一个未初始化的变量时返回的值，而null是访问一个尚未存在的对象时所返回的值。</p>
<h5 id="null"><a href="#null" class="headerlink" title="null"></a>null</h5><p>表示”没有对象”，即该处不应该有值</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit"><span class="hljs-number">1</span>，作为函数的参数，表示该函数的参数不是对象，需要传递参数，但是我们暂时不想传递或者不需要传递，那么我们可以传一个空对象<span class="hljs-literal">null</span>，例如：对象名（<span class="hljs-literal">null</span>，<span class="hljs-literal">null</span>）<br>ajax有个方法<span class="hljs-built_in">send</span>(),<span class="hljs-built_in">send</span>方法参数是你要向服务器传递的值，但是get方法是在地址栏拼接值，所以不需要<span class="hljs-built_in">send</span>传递，所以我们在<span class="hljs-built_in">send</span>中写一个参数<span class="hljs-literal">null</span>，告诉他我不想在这里传递<br><span class="hljs-number">2</span>，作为对象原型链的终点<br>比如：“<span class="hljs-number">123</span>”—&gt;<span class="hljs-built_in">String</span>—&gt;Object—&gt;<span class="hljs-literal">null</span>（一级一级往上）<br><span class="hljs-number">3</span>，如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为<span class="hljs-literal">null</span>而不是其他值<br></code></pre></td></tr></table></figure>
<h5 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h5><p>表示”缺少值”，就是此处应该有一个值，但是还没有定义</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-number">1</span>，变量被声明了，但没有赋值时，就等于<span class="hljs-literal">undefined</span><br><span class="hljs-number">2</span>，调用函数时，应该提供的参数没有提供，该参数等于<span class="hljs-literal">undefined</span><br><span class="hljs-number">3</span>，对象没有赋值的属性，该属性的值为<span class="hljs-literal">undefined</span>。<br><span class="hljs-number">4</span>，函数没有返回值时，默认返回<span class="hljs-literal">undefined</span><br></code></pre></td></tr></table></figure>
<h4 id="call，apply和bind的区别"><a href="#call，apply和bind的区别" class="headerlink" title="call，apply和bind的区别"></a>call，apply和bind的区别</h4><p>一、相同点 这三个函数都可以改变函数里的this指向。在这三个函数的第一个参数就是this对象。<br>二、不同点<br>1、bind： 调用bind时，并不会执行原函数，而会产生新的函数。新的函数调用时，才会执行原函数的代码。<br>2、call和apply 相同点： 调用call和apply时，会执行原函数，不会产生新的函数。<br>不同点<br>1)、apply: 第二个参数是数组，数组是原函数的参数<br>2)、call: 从第二个参数开始朝后的所有参数，是原函数的参数</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">person<span class="hljs-selector-class">.sayHobby</span><span class="hljs-selector-class">.call</span>(person1, <span class="hljs-string">&#x27;swimming&#x27;</span>, <span class="hljs-string">&#x27;hiking&#x27;</span>)<br>person<span class="hljs-selector-class">.sayHobby</span><span class="hljs-selector-class">.apply</span>(person1, <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;swimming&#x27;</span>, <span class="hljs-string">&#x27;hiking&#x27;</span>]</span>)<br></code></pre></td></tr></table></figure>
<p>————————————————<br>版权声明：本文为CSDN博主「·港岛妹妹」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_44417271/article/details/112852684">https://blog.csdn.net/qq_44417271/article/details/112852684</a></p>
<h4 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h4><p>1.意外的全局变量引起的内存泄露，一个未声明变量的引用会在全局对象中创建一个新的变量。在浏览器的环境下，全局对象就是 window，也就是说：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">arg</span>) </span>&#123;<br>    bar = <span class="hljs-string">&quot;aaaaa&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 实际上等价于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params">arg</span>) </span>&#123;<br>    <span class="hljs-built_in">window</span>.bar = <span class="hljs-string">&quot;aaaaa&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 类似的</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">this</span>.variable = <span class="hljs-string">&quot;qqqqq&quot;</span>;<br>&#125;<br><span class="hljs-comment">//this 指向全局对象（window）</span><br>foo();<br><span class="hljs-number">123456789101112131415</span><br></code></pre></td></tr></table></figure>
<p>2.闭包引起的内存泄露</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn1</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">var</span> n=<span class="hljs-number">1</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fn2</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//在加一个fn2当他的子集</span><br>        alert(n);<br>    &#125;<br><span class="hljs-keyword">return</span> fn2(); <br><span class="hljs-comment">//return出来后 他就给 window了所以一直存在内存中。因为一直在内存中，在IE里容易造成内存泄漏</span><br>&#125;<br>fn1();<br><span class="hljs-number">123456789</span><br></code></pre></td></tr></table></figure>
<p>3.dom清空或删除时，事件未清除导致的内存泄漏</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> elements=&#123;<br>    button: <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;button&quot;</span>),<br>    image: <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;image&quot;</span>),<br>    text: <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;text&quot;</span>)<br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doStuff</span>(<span class="hljs-params"></span>)</span>&#123;<br>    image.src=<span class="hljs-string">&quot;http://some.url/image&quot;</span>;<br>    button.click():<br>    <span class="hljs-built_in">console</span>.log(text.innerHTML)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">removeButton</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">document</span>.body.removeChild(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;button&#x27;</span>))<br>&#125;<br><span class="hljs-number">12345678910111213</span><br></code></pre></td></tr></table></figure>
<p>4.循环引用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leakMemory</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;el&#x27;</span>);<br>    <span class="hljs-keyword">var</span> o = &#123; <span class="hljs-string">&#x27;el&#x27;</span>: el &#125;;<br>    el.o = o;<br>&#125;<br><span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure>
<p>5.定时器setTimeout和setInterval：当不需要setInterval或者setTimeout时，定时器没有被clear，定时器的回调函数以及内部依赖的变量都不能被回收，造成内存泄漏。比如：vue使用了定时器，需要在beforeDestroy 中做对应销毁处理。js也是一样的。</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi">clearTimeout<span class="hljs-comment">(***)</span><br>clearInterval<span class="hljs-comment">(***)</span><br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure>
<p>6.如果在mounted/created<br>钩子中使用了o n ， 需 要 在 b e f o r e D e s t r o y 中 做 对 应 解 绑 ( on，需要在beforeDestroy 中做对应解绑(<em>o**n</em>，需要在<em>b<strong>e</strong>f<strong>o</strong>r<strong>e</strong>D<strong>e</strong>s<strong>t</strong>r<strong>o</strong>y</em>中做对应解绑(off)处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">beforeDestroy</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-built_in">this</span>.bus.$off(<span class="hljs-string">&#x27;****&#x27;</span>);<br>&#125;<br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure>
<p>7.死循环</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    a++;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure>
<p>8.给DOM对象添加的属性是一个对象的引用</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">var testObject = &#123;&#125;;<br>document.getElementById(<span class="hljs-emphasis">&#x27;idname&#x27;</span>).property = testObject;  //如果DOM不被消除，则testObject会一直存在，造成内存泄漏<br>~~<br></code></pre></td></tr></table></figure>
<h4 id="如何实现异步编程"><a href="#如何实现异步编程" class="headerlink" title="如何实现异步编程"></a>如何实现异步编程</h4><p>转载自阮一峰</p>
<p><a href="http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html">http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html</a></p>
<h4 id="在JavaScript中，为什么说函数是第一类对象、"><a href="#在JavaScript中，为什么说函数是第一类对象、" class="headerlink" title="在JavaScript中，为什么说函数是第一类对象、"></a>在JavaScript中，为什么说函数是第一类对象、</h4><p>第一类对象就是一个能够动态创建，销毁，传递，返回的实体，和编程语言中的其他变量拥有同等地位</p>
<p>函数是第一类对象：</p>
<ul>
<li>函数可以在运行时动态创建，还可以在程序执行过程中创建。</li>
<li>函数可以分配变量，可以将它们的引用复制到其他变量，可以被扩展，此外，除少数特殊情况外，函数还可以被删除。</li>
<li>可以作为参数传递给其他函数，并且还可以有其他函数返回。</li>
<li>函数可以有自己的属性和方法。</li>
</ul>
<h4 id="函数声明和函数表达式的区别"><a href="#函数声明和函数表达式的区别" class="headerlink" title="函数声明和函数表达式的区别"></a>函数声明和函数表达式的区别</h4><p>以函数声明的方法定义的函数,函数名是必须的,而函数<a href="https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&spm=1001.2101.3001.7020">表达式</a>的函数名是可选的。（函数声明整体会被提升到当前作用域的顶部，函数表达式也提升到顶部但是只有其变量名提升）</p>
<p>以函数声明的方法定义的函数,函数可以在函数声明之前调用,而函数表达式的函数只能在声明之后调用。</p>
<p>以函数声明的方法定义的函数并不是真正的声明,它们仅仅可以出现在全局中,或者嵌套在其他的函数中,但是它们不能出现在循环,条件或者try/catch/finally中,而函数表达式可以在任何地方声明。换句话说，函数声明不是一个完整的语句，所以不能出现在if-else,for循环，finally，try catch语句以及with语句中。</p>
<h4 id="如何删除一个cookie"><a href="#如何删除一个cookie" class="headerlink" title="如何删除一个cookie"></a>如何删除一个cookie</h4><figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe">cookie删除<br><span class="hljs-comment">// 删除cookie 没有具体的删除方法，只能通过设置过期时间来删除</span><br>    let <span class="hljs-keyword">new</span><span class="hljs-type">Date</span> = <span class="hljs-keyword">new</span> <span class="hljs-type">Date</span>(<span class="hljs-string">&#x27;1970-01-01 00:00:00&#x27;</span>).toUTCString();<br>    document.cookie = <span class="hljs-string">&#x27;searchHistory=;expires=&#x27;</span> + <span class="hljs-keyword">new</span><span class="hljs-type">Date</span> + <span class="hljs-string">&#x27;;&#x27;</span>;<br></code></pre></td></tr></table></figure>
<p>————————————————<br>版权声明：本文为CSDN博主「chenjinyu_lxl」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/chenjinyu_lxl/article/details/105393619">https://blog.csdn.net/chenjinyu_lxl/article/details/105393619</a></p>
<h4 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h4><p>闭包是变量作用域的特殊情况</p>
<p>以下情况会产生闭包</p>
<ul>
<li>函数作为参数被传递</li>
<li>函数作为返回值被传递</li>
</ul>
<h6 id="闭包的作用："><a href="#闭包的作用：" class="headerlink" title="闭包的作用："></a><strong>闭包的作用：</strong></h6><ul>
<li>被闭包引用的变量，不会被销毁</li>
<li>闭包可以实现局部变量，避免全局变量污染</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br>	<span class="hljs-keyword">return</span> function f()&#123;<br>		console.log(a)<br>	&#125;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">var</span> f = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br>f(); <span class="hljs-comment">//打印出a的值为100</span><br>————————————————<br>版权声明：本文为CSDN博主「头秃了才凉快」的原创文章，遵循CC <span class="hljs-number">4.0</span> BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https:<span class="hljs-comment">//blog.csdn.net/weixin_48179599/article/details/106854863</span><br></code></pre></td></tr></table></figure>
<h4 id="如何判断一个对象是否属于某一个类"><a href="#如何判断一个对象是否属于某一个类" class="headerlink" title="如何判断一个对象是否属于某一个类"></a>如何判断一个对象是否属于某一个类</h4><h6 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h6><h6 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h6><h6 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h6><h6 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call"></a><code>Object.prototype.toString.call</code></h6><p><a href="https://blog.csdn.net/weixin_47450807/article/details/122661456">https://blog.csdn.net/weixin_47450807/article/details/122661456</a></p>
<h4 id="数组合并与去重"><a href="#数组合并与去重" class="headerlink" title="数组合并与去重"></a>数组合并与去重</h4><h6 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h6><p>concat、循环遍历</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> list1 = <span class="hljs-selector-attr">[1,2,3]</span><br><span class="hljs-selector-tag">var</span> list2 = <span class="hljs-selector-attr">[4,5,6]</span><br><br>list1<span class="hljs-selector-class">.concat</span>(list2)<br><br><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(var i=<span class="hljs-number">0</span>;i&lt;list2.length;i++)</span></span>&#123;<br>	list1<span class="hljs-selector-class">.push</span>(list2<span class="hljs-selector-attr">[i]</span>)<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h6><p>indexof、splice 、includes、<code>new Set()</code></p>
<p><a href="https://blog.csdn.net/qq_43432158/article/details/120179967">https://blog.csdn.net/qq_43432158/article/details/120179967</a></p>
<h4 id="什么是事件代理"><a href="#什么是事件代理" class="headerlink" title="什么是事件代理"></a>什么是事件代理</h4><p>就是把一个元素响应事件（<code>click</code>、<code>keydown</code>……）的函数委托到另一个元素</p>
<p>事件委托就是在冒泡阶段完成事件委托，会把一个或者一组元素的事件委托到它的父层或者更外层元素上，真正绑定事件的是外层元素，而不是目标元素当事件响应到目标元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数</p>
<h4 id="js里函数参数arguments"><a href="#js里函数参数arguments" class="headerlink" title="js里函数参数arguments"></a>js里函数参数arguments</h4><p>arguments参数是传递给函数的所有参数的集合。无论是否有明确定义对应的形参，通过它我们可以访问到函数的所有参数。</p>
<h4 id="如何阻止事件冒泡"><a href="#如何阻止事件冒泡" class="headerlink" title="如何阻止事件冒泡"></a>如何阻止事件冒泡</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">阻止冒泡<br><span class="hljs-keyword">event</span>.stopPropagation()		<span class="hljs-comment">//IE不支持</span><br><span class="hljs-keyword">event</span>.cancelBubble = <span class="hljs-literal">true</span>;	<span class="hljs-comment">//都支持</span><br><br>阻止默认事件<br><span class="hljs-keyword">event</span>.preventDefault()		<span class="hljs-comment">//IE不支持</span><br><span class="hljs-keyword">event</span>.returnValue = <span class="hljs-literal">false</span>	<span class="hljs-comment">//都支持</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>	同时阻止冒泡和默认事件<br></code></pre></td></tr></table></figure>
<h4 id="什么是事件捕获和事件冒泡"><a href="#什么是事件捕获和事件冒泡" class="headerlink" title="什么是事件捕获和事件冒泡"></a>什么是事件捕获和事件冒泡</h4><h6 id="事件冒泡："><a href="#事件冒泡：" class="headerlink" title="事件冒泡："></a>事件冒泡：</h6><p>从事件源朝父级一直到根元素（HTML）。当某个元素的某类型事件被触发时，那么它的父元素同类型的事件也会被触发，一直触发到根源上；<br>从具体的元素到不确定的元素。</p>
<h6 id="事件捕获："><a href="#事件捕获：" class="headerlink" title="事件捕获："></a>事件捕获：</h6><p>从根元素（HTML）到事件源，当某个元素的某类型事件被触发时，先触发根元素的同类型事件，朝子一级触发，一直触发到事件源。<br>从不确定的元素到具体的元素；</p>
<h4 id="Js原型链的理解"><a href="#Js原型链的理解" class="headerlink" title="Js原型链的理解"></a>Js原型链的理解</h4><p><a href="https://blog.csdn.net/qq_36996271/article/details/82527256">https://blog.csdn.net/qq_36996271/article/details/82527256</a></p>
<h4 id="0-1-0-2会输出什么，为什么"><a href="#0-1-0-2会输出什么，为什么" class="headerlink" title="0.1+0.2会输出什么，为什么"></a>0.1+0.2会输出什么，为什么</h4><p><em>0.30000000000000004</em> </p>
<p>当 0.1 转化为二进制是无限循环小数，存储的时候发生了精度丢失，当我们用浮点数进行运算的时候，使用的其实是精度丢失后的数</p>
<h4 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h4><p>出于浏览器的同源策略限制</p>
<p>当一个请求url的<strong>协议、域名、端口</strong>三者之间任意一个与当前页面url不同即为跨域</p>
<h4 id="什么是ajax，如何实现"><a href="#什么是ajax，如何实现" class="headerlink" title="什么是ajax，如何实现"></a>什么是ajax，如何实现</h4><p>通过XmlHttpRequest对象来向服务器发送异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">&lt;script&gt;<br>	var ajax = <span class="hljs-built_in">new</span> XMLHttpRequest();	<span class="hljs-comment">#创建Ajax对象</span><br>	ajax.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;接口地址&#x27;</span>);		 <span class="hljs-comment"># 请求类型，请求接口地址</span><br>	ajax.<span class="hljs-built_in">send</span>();						<span class="hljs-comment">#对地址进行请求</span><br>	ajax.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>()&#123;</span><br>		console.<span class="hljs-built_in">log</span>(ajax.responseText);	<span class="hljs-comment">#请求结果</span><br>	&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<h4 id="数组转化成JSON，如何转化回来"><a href="#数组转化成JSON，如何转化回来" class="headerlink" title="数组转化成JSON，如何转化回来"></a>数组转化成JSON，如何转化回来</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>stringify<span class="hljs-literal">()</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure>


<h4 id="sessionStorage、localStorage和cookie的区别"><a href="#sessionStorage、localStorage和cookie的区别" class="headerlink" title="sessionStorage、localStorage和cookie的区别"></a>sessionStorage、localStorage和cookie的区别</h4><p>1）相同点是都是保存在浏览器端、且同源的<br>2）cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下<br>3）存储大小限制也不同，cookie数据不能超过4K，同时因为每次http请求都会携带cookie、所以cookie只适合保存很小的数据，如会话标识。sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大<br>4）数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭之前有效；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭<br>5）作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的<br>6）web Storage支持事件通知机制，可以将数据更新的通知发送给监听者<br>7）web Storage的api接口使用更方便<br>————————————————<br>版权声明：本文为CSDN博主「浮生离梦」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_42614080/article/details/90706499">https://blog.csdn.net/weixin_42614080/article/details/90706499</a></p>
<h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><h4 id="jQuery优化方法"><a href="#jQuery优化方法" class="headerlink" title="jQuery优化方法"></a>jQuery优化方法</h4><p><a href="http://t.csdn.cn/F4xpn">http://t.csdn.cn/F4xpn</a></p>
<p><a href="http://t.csdn.cn/hIuK5">http://t.csdn.cn/hIuK5</a></p>
<h4 id="jQuery中-的作用"><a href="#jQuery中-的作用" class="headerlink" title="jQuery中$的作用"></a>jQuery中$的作用</h4><figure class="highlight nim"><table><tr><td class="code"><pre><code class="hljs nim">作为jQuery包装器，利用选择器来选择<span class="hljs-type">DOM</span>元素（这个也是最强大的功能）<br>例如：$(<span class="hljs-string">&quot;table tr:nth-child(even)&quot;</span>)<br><br>实用工具函数，作为几个通用的实用工具函数的命名空间的前缀<br>例如：$.trim(someString)<br><br>文档就绪处理程序，相当于$(document).ready(...)<br>例如：$(function()<span class="hljs-meta">&#123;...&#125;</span>); 里面的函数会在<span class="hljs-type">DOM</span>树加载完之后执行<br><br>创建<span class="hljs-type">DOM</span>元素<br>例如：$(<span class="hljs-string">&quot;&lt;p&gt;how are you?&lt;/p&gt;&quot;</span>)<br><br>扩展jQuery<br>例如：$.fn.disable = function()<span class="hljs-meta">&#123;...&#125;</span><br><br>使用jQuery和其他库<br>例如：<span class="hljs-type">Prototype</span>库也是使用$符号，jQuery提供noConflict函数避免冲突，jQuery.noConflict();把$符号还原到非jQuery库定义的含义。<br>————————————————<br>版权声明：本文为<span class="hljs-type">CSDN</span>博主「communicate_」的原创文章，遵循<span class="hljs-type">CC</span> <span class="hljs-number">4</span>.<span class="hljs-number">0</span> <span class="hljs-type">BY</span>-<span class="hljs-type">SA</span>版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https://blog.csdn.net/communicate_/article/details/<span class="hljs-number">8170546</span><br></code></pre></td></tr></table></figure>


<h4 id="Body中的onload和jQuery中的ready的区别"><a href="#Body中的onload和jQuery中的ready的区别" class="headerlink" title="Body中的onload和jQuery中的ready的区别"></a>Body中的onload和jQuery中的ready的区别</h4><p>1.执行时间不同</p>
<pre><code class="hljs">window.onload必须等到页面内包括图片的所有元素加载完毕后才能执行。 
$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。 
</code></pre>
<p>2.编写个数不同 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload不能同时编写多个，如果有多个<span class="hljs-built_in">window</span>.onload方法，只会执行一个（结果显示最后一个<br>$(<span class="hljs-built_in">document</span>).ready()可以同时编写多个，并且都可以得到执行 <br></code></pre></td></tr></table></figure>
<p>3.简化写法 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload没有简化写法 <br>$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;)可以简写成$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;);<br></code></pre></td></tr></table></figure>


<h4 id="jQuery有那些常见选择器"><a href="#jQuery有那些常见选择器" class="headerlink" title="jQuery有那些常见选择器"></a>jQuery有那些常见选择器</h4><p>基本选择器、层次选择器、过滤选择器</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">1、基本选择器：<br>#id 、element 、.class 、* 、selector1,selector2,selectorN<br>2、层次选择器：<br>ancestor descendant 、parent &gt; child 、prev + next 、prev ~ siblings<br>3、基本过滤器选择器<br><span class="hljs-meta">:first 、:last</span> 、:not 、:even 、:odd 、:eq 、:gt 、:lt 、:header 、<br>:animated<br>4、内容过滤器选择器<br><span class="hljs-meta">:contains 、:empty</span> 、:has 、:parent<br>5、可见性过滤器选择器<br><span class="hljs-meta">:hidden 、:visible</span><br><span class="hljs-meta">6、属性过滤器选择器</span><br><span class="hljs-meta">[attribute]</span> 、[attribute=value] 、[attribute!=value] 、[attribute^=value] 、[attribute$=value] 、[attribute*=value] 、[attrSel1][attrSel2][attrSelN]<br>7、子元素过滤器选择器<br><span class="hljs-meta">:nth-child 、:first-child</span> 、:last-child 、:only-child<br>8、表单选择器<br><span class="hljs-meta">:input 、:text</span> 、:password 、:radio 、:checkbox 、:submit 、:image 、:reset 、:button<br>、:file 、:hidden<br>9、表单过滤器选择器<br><span class="hljs-meta">:enabled 、:disabled</span> 、:checked 、:selected<br>————————————————<br>版权声明：本文为CSDN博主「weixin_45490208」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：https://blog.csdn.net/weixin_45490208/article/details/103712213<br></code></pre></td></tr></table></figure>
<p>详细链接(使用)</p>
<p><a href="http://t.csdn.cn/3HUTr">http://t.csdn.cn/3HUTr</a></p>
<h4 id="Jquery页面中所有的边框设置"><a href="#Jquery页面中所有的边框设置" class="headerlink" title="Jquery页面中所有的边框设置"></a>Jquery页面中所有的边框设置</h4><figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&quot;*&quot;</span>).css(<span class="hljs-string">&quot;border&quot;</span>, <span class="hljs-string">&quot;2px dashed red&quot;</span>)<br></code></pre></td></tr></table></figure>


<h4 id="jQuery中id选择器和类选择器的区别"><a href="#jQuery中id选择器和类选择器的区别" class="headerlink" title="jQuery中id选择器和类选择器的区别"></a>jQuery中id选择器和类选择器的区别</h4><p>id只被引用一次，class可以被引用多次</p>
<p>一个标签可以使用多个类选择器，但只能使用一个ID选择器</p>
<h4 id="document-ready-的作用是什么，为什么要用它"><a href="#document-ready-的作用是什么，为什么要用它" class="headerlink" title="$(document).ready()的作用是什么，为什么要用它"></a><code>$(document).ready()</code>的作用是什么，为什么要用它</h4><p>当DOM载入就绪可以查询及操纵时绑定一个要执行的函数。这是事件模块中最重要的一个函数，因为它可以极大地提高web应用程序的响应速度。</p>
<h4 id="全选与全不选"><a href="#全选与全不选" class="headerlink" title="全选与全不选"></a>全选与全不选</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//checkbox 全选/取消全选  </span><br>	<span class="hljs-keyword">var</span> isCheckAll = <span class="hljs-literal">false</span>;<br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swapCheck</span>(<span class="hljs-params"></span>) </span>&#123;<br>		<span class="hljs-keyword">if</span> (isCheckAll) &#123;<br>			$(<span class="hljs-string">&quot;input[type=&#x27;checkbox&#x27;]&quot;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>				<span class="hljs-keyword">if</span>(!$(<span class="hljs-built_in">this</span>).is(<span class="hljs-string">&#x27;:disabled&#x27;</span>))&#123;<br>				<span class="hljs-built_in">this</span>.checked = <span class="hljs-literal">false</span>;<br>				&#125;<br>			&#125;);<br>			isCheckAll = <span class="hljs-literal">false</span>;<br>		&#125; <span class="hljs-keyword">else</span> &#123;<br>			$(<span class="hljs-string">&quot;input[type=&#x27;checkbox&#x27;]&quot;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>				<span class="hljs-keyword">if</span>(!$(<span class="hljs-built_in">this</span>).is(<span class="hljs-string">&#x27;:disabled&#x27;</span>))&#123;<br>				<span class="hljs-built_in">this</span>.checked = <span class="hljs-literal">true</span>;<br>				&#125;<br>			&#125;);<br>			isCheckAll = <span class="hljs-literal">true</span>;<br>		&#125;<br>	&#125;<br></code></pre></td></tr></table></figure>
<pre><code class="hljs">function checkOne(obj)&#123;//当下面的复选框全部被选中时，全选复选框自动被选中
      if(!obj.checked)&#123;
        document.forms[1].selectAllCK.checked = obj.checked; //forms[1]代表页面中的第二个form表单,如果是一个form则是forms[0]
      &#125;
      var flag = true;
      var arr = document.getElementsByName(obj.name);
      for(var i=0;i&lt;arr.length;i++)&#123;
         if(!arr[i].checked)&#123;
             flag=false; 
             break;
             &#125;
      &#125;
      document.forms[1].selectAllCK.checked = flag;
</code></pre>
<p>————————————————<br>版权声明：本文为CSDN博主「Messiah-」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/koso10201/article/details/72962914">https://blog.csdn.net/koso10201/article/details/72962914</a></p>
<h4 id="jQuery中each-的作用"><a href="#jQuery中each-的作用" class="headerlink" title="jQuery中each()的作用"></a>jQuery中<code>each()</code>的作用</h4><p>each() 方法用于遍历匹配的元素信息。以每一个匹配的元素作为上下文来执行一个函数。每次执行传递进来的函数时，函数中的 this 关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）。而且，在每次执行函数时，都会给函数传递一个表示作为执行环境的元素在匹配的元素集合中所处位置的数字值作为参数（从零开始的整型）。 返回 ‘false’ 将停止循环（就像在普通的循环中使用 ‘break’）。返回 ‘true’ 跳至下一个循环（就像在普通的循环中使用’continue’）。<br>————————————————<br>版权声明：本文为CSDN博主「pan_junbiao」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/pan_junbiao/article/details/107682956">https://blog.csdn.net/pan_junbiao/article/details/107682956</a></p>
<h4 id="Jquery中修改元素的属性值"><a href="#Jquery中修改元素的属性值" class="headerlink" title="Jquery中修改元素的属性值"></a>Jquery中修改元素的属性值</h4><h6 id="内置属性"><a href="#内置属性" class="headerlink" title="内置属性"></a>内置属性</h6><figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;.checkall &#x27;</span>).prop(<span class="hljs-string">&#x27;checked&#x27;</span>)<span class="hljs-comment">//获取值</span><br>$(<span class="hljs-string">&#x27;.checkall &#x27;</span>).prop(<span class="hljs-string">&#x27;checked&#x27;</span>,<span class="hljs-literal">true</span>)<span class="hljs-comment">//修改值</span><br></code></pre></td></tr></table></figure>
<h6 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h6><figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;.checkall &#x27;</span>).attr(<span class="hljs-string">&#x27;indexx&#x27;</span>)<span class="hljs-comment">//获取值</span><br>$(<span class="hljs-string">&#x27;.checkall &#x27;</span>).attr(<span class="hljs-string">&#x27;indexx&#x27;</span>,<span class="hljs-literal">true</span>)<span class="hljs-comment">//修改值</span><br></code></pre></td></tr></table></figure>


<h4 id="jQuery中detach-和remove-的区别"><a href="#jQuery中detach-和remove-的区别" class="headerlink" title="jQuery中detach()和remove()的区别"></a><code>jQuery中detach()</code>和<code>remove()</code>的区别</h4><p>remove:移除筛选出的节点以及该节点的内部的所有节点，包括节点上事件与数据</p>
<p>detach:与remove不同的是，所有绑定的事件、附加的数据等都会保留下来</p>
<h4 id="Jquery中ajax使用"><a href="#Jquery中ajax使用" class="headerlink" title="Jquery中ajax使用"></a>Jquery中ajax使用</h4><p><a href="http://t.csdn.cn/JNqoZ">http://t.csdn.cn/JNqoZ</a></p>
<h4 id="jquery动画"><a href="#jquery动画" class="headerlink" title="jquery动画"></a>jquery动画</h4><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">https</span>://tanbozhi.github.io/<span class="hljs-number">2022</span>/<span class="hljs-number">03</span>/<span class="hljs-number">03</span>/%E<span class="hljs-number">7</span>%BD%<span class="hljs-number">91</span>%E<span class="hljs-number">6</span>%<span class="hljs-number">98</span>%<span class="hljs-number">93</span>-jQuery/#jQuery动画效果<br></code></pre></td></tr></table></figure>
<h4 id="map-和-each-的区别"><a href="#map-和-each-的区别" class="headerlink" title="$.map()和$.each()的区别"></a><code>$.map()和$.each()</code>的区别</h4><p><a href="https://www.cnblogs.com/jinxing-tc/p/9568832.html">https://www.cnblogs.com/jinxing-tc/p/9568832.html</a></p>
<h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><h4 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">Flex是将盒子变成弹性容器，在容器上的属性有<br>    <span class="hljs-attribute">flex-direction</span>，控制主轴的排列方向<br>    <span class="hljs-attribute">flex-wrap</span>:控制是否换行<br>    <span class="hljs-attribute">flex-flow</span>:排列方向和是否换行的简写<br>    <span class="hljs-attribute">justify-content</span>和align-items：控制主轴和交叉轴的对齐方式<br>    <span class="hljs-attribute">align-content</span>：定义多个轴线的对齐方式<br><br>    项目的属性有<br>    <span class="hljs-attribute">flex-grow</span>	：项目的放大比例，<br>    <span class="hljs-attribute">flex-shrink</span>	：项目的缩小比例<br>    <span class="hljs-attribute">flex-basis</span>	：定义项目的初始大小<br>    <span class="hljs-attribute">flex</span>	：flex-grow，flex-shrink，flex-basis的简写 默认值<span class="hljs-number">0</span>,<span class="hljs-number">1</span>，auto<br>    <span class="hljs-attribute">order</span>	:定义项目的排列顺序，数值越小，排列越靠前<br>    <span class="hljs-attribute">align-self</span>	：自定义对齐方式<br></code></pre></td></tr></table></figure>
<h4 id="组件之间的传值"><a href="#组件之间的传值" class="headerlink" title="组件之间的传值"></a>组件之间的传值</h4><p>常用的有props,$emit,vuex,全局事件总线，其中props是父组件给子组件传值，$emit是子组件给父组件传值，vuex和全局事件总线是任意组件之间都能传值，vuex适用于大型项目,而全局事件总线适用于小项目，其他的传值方式还有ref,slot,消息订阅与发布</p>
<h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p>​    Promise遵循es6语法规范，解决了地狱回调的问题，支持链式调用<br>​    它有3中状态 pending ,fullfilled，rejected<br>​    调用Resolve函数和reject函数可以改变promise状态<br>​    当状态改变时，会执行then方法，then方法里面可以写两个回调函数，第一个是成功的回调，第二个是失败的回调。还可以直接用.catch来执行失败后的回调。<br>​    Promise还有all方法和race方法，这两个方法里面都可以放入多个promise实例，all方法是所有promiose实例都成功才会返回一个成功的promise，race方法是有一个promise实例返回成功就会返回一个成功的promise。</p>
<h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><p>axios是基于promise再次封装的库，支持promise所有的API<br>常用的方法有get，post，put，delete。</p>
<p>axios可以进行全局配置，将一些需要重复书写的内容配置成默认配置，然后每个组件中都可以直接使用</p>
<p>Axios可以设置请求拦截器和响应拦截器，可以对请求的参数和内容进行处理，还可以对请求的结果和内容进行处理</p>
<h4 id="简述vuex"><a href="#简述vuex" class="headerlink" title="简述vuex"></a>简述vuex</h4><p>vuex是一个集中式状态管理的插件，他可以让任意组件间之间进行通信</p>
<p>它有5个属性，state,actions,mutations,gettes,modules</p>
<p>state是用于存放数据的</p>
<p>actions是专门用来异步请求的，它不能直接改变state中的状态，只能通过commit来调用mutations里面的方法来改变state里的数据</p>
<p>mutations:修改state数据的唯一方法</p>
<p>getters:专门来计算state中的数据,相当于computed</p>
<p>module:将store模块化，每个模块拥有自己的state,actions,mutations,getters</p>
<p>读取数据用：$store.state</p>
<p>修改数据：this.$store.dispach或者this.$store.commit</p>
<p>另外我还了解mapState,mapactions,mapmutations,mapgetters这四个方法，它可以简化我们的书写</p>
<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>beforeCreate,created,beforemount,mounted,beforeupdate,updated,beforedestory,destoryed</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><code class="hljs oxygene">beforecreate：创建之前		数据代理，数据监测还未开始创建<br>created：创建完成		 数据代理，数据监测已经创建完成，可以访问data，和<span class="hljs-function"><span class="hljs-keyword">method</span></span><br><span class="hljs-function"><span class="hljs-title">beforemount</span>:</span>挂载之前		虚拟dom还未编译成真实dom<br>mounted：挂在完成			虚拟dom转换成真实dom,且已经插入页面<br>一般在这个地方，发送ajax请求，启动定时器，绑定自定义事件，订阅消息（初始化操作）<br><br>beforeupdate:			更新数据之前<br>updated:				更新数据完成<br>beforedistroy:			销毁之前<br>在这个阶段，我们一般会清除定时器，解绑自定义事件，取消订阅消息（收尾工作）<br><br>destroyed:				销毁完成<br></code></pre></td></tr></table></figure>
<p>除此之外，组件里面还有两个生命周期，activated，deactivated，他们是在组件激活和销毁是触发</p>
<h4 id="computed和watch的区别"><a href="#computed和watch的区别" class="headerlink" title="computed和watch的区别"></a>computed和watch的区别</h4><p>computed支持缓存，当依赖的数据发生变化，才会重新进行计算，而watch属性是没有缓存的，数据改变，就会执行相应的操作</p>
<p>computed里面是不能写异步操作，异步操作不能监听数据的变化，而watch支持异步操作</p>
<p>computed在挂载时会执行一次，而watch需要添加immediate才会在挂载时执行一次</p>
<p>使用场景：computed适合多个数据影响一个数据，例如购物车计算金额，watch适合一个数据影响多个数据，例如搜索框</p>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>常用的方法：push,pop,shift,unshift,join,slice,splice,reverse</p>
<p>​                        filter,forEach,indexOf,inclueds,reduce,map</p>
<h4 id="var-let-const的区别"><a href="#var-let-const的区别" class="headerlink" title="var ,let,const的区别"></a>var ,let,const的区别</h4><p>var 有变量提升 ，let const 没有</p>
<p>var定义的变量可以重复定义，let const有块级作用域的特征，在作用域内，let，const不能重复定义，且const必须有初始值</p>
<p>var 和 let 的变量可以被修改，const 不能被修改</p>
<h4 id="active-class的作用"><a href="#active-class的作用" class="headerlink" title="active-class的作用"></a>active-class的作用</h4><p>active-class是<code>router-link</code>组件中的属性，用于选中样式的切换</p>
<h4 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h4><p>用于缓存路由组件，让不展示的路由组件保持挂载，不被销毁</p>
<p>可以用include属性指定需要缓存的组件</p>
<p>exclude可以指定不需要缓存的组件</p>
<p>max可以设置最多缓存多少个组件</p>
<p>设置了keep-alive缓存的组件会多出两个生命周期(activated与deactivated)，当组件激活和失活的时候会被触发</p>
<h4 id="v-if与v-for优先级"><a href="#v-if与v-for优先级" class="headerlink" title="v-if与v-for优先级"></a>v-if与v-for优先级</h4><p>当v-if与v-for一起使用时，v-for的优先级更高，会先运行v-for的循环，然后在每个循环中进行v-if 的条件对比，会造成性能的问题，影响速度</p>
<h4 id="v-if与v-show的区别"><a href="#v-if与v-show的区别" class="headerlink" title="v-if与v-show的区别"></a>v-if与v-show的区别</h4><p>v-if在条件切换时，会对标签进行销毁和创建，v-show只是对display的属性进行切换</p>
<p>v-show仅在初始化时加载一次，而v-if在初始化时会判断条件是否为真，为真会渲染，不为真就不渲染</p>
<p>所以v-if有更高的切换消耗，而v-show有更高的初始渲染消耗</p>
<p>v-if适用于不频繁切换的场景，而v-show适用于需要频繁切换的场景</p>
<h4 id="mvvm"><a href="#mvvm" class="headerlink" title="mvvm"></a>mvvm</h4><p>Model:数据模型</p>
<p>View:视图</p>
<p>ViewModel:视图模型：view和model连接的桥梁</p>
<p>mvvm的核心是VM的双向数据绑定，vm能够监听数据变化，当数据变化时，vm会通知视图更新，反之亦然，当用户操作视图时，数据也会自动更新。双向数据绑定是通过<code>Object.defineProperty </code>的<code>getter</code>和 <code>setter</code>，并结合观察者模式来实现的。因此开发者不需要手动操作DOM，只需专注于数据的维护操作与业务逻辑。</p>
<h4 id="路由导航守卫-导航钩子"><a href="#路由导航守卫-导航钩子" class="headerlink" title="路由导航守卫(导航钩子)"></a>路由导航守卫(导航钩子)</h4><h6 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h6><figure class="highlight vbnet"><table><tr><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">to</span> 进入目标的路由对象<br><span class="hljs-keyword">from</span> 离开目标的路由对象<br><span class="hljs-keyword">next</span> 放行<br></code></pre></td></tr></table></figure>
<h6 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h6><p>beforeEach、beforeResovle、afterEach</p>
<h6 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h6><p>beforeEnter</p>
<h6 id="组件内路由守卫"><a href="#组件内路由守卫" class="headerlink" title="组件内路由守卫"></a>组件内路由守卫</h6><p>beforeRouterEnter、beforeRouterUpdata、beforeRouterLeave</p>
<p>执行顺序：beforeRouteLeave&gt;beforeEach&gt;beforeRouteUpdate&gt;beforeEnter&gt;</p>
<p>beforeRouterEnter&gt;beforeResolve&gt;afterEach&gt;beforeRouteEnter</p>
<h4 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h4><p><code>diff</code>整体策略为：深度优先，同层比较</p>
<p>在<code>diff</code>比较的过程中，循环从两边向中间比较</p>
<p>1.当新老节点的 开始节点相同时，直接复用，同时新老节点的开始节点都移动到下一位</p>
<p>2.当新老节点的 尾结点相同时，同样直接复用，同时新老节点的尾结点都向前移动一位。<br>3.当老节点的 开始节点和新 节点的 尾结点相同时，这时候在 复用后，还需要将当前真实 dom 节点移动到 旧节点的的最后面，同时老 节点的开始节点向后移动一位，新节点的尾结点相前移动一位。<br>4.当老节点的 尾结点 和 新节点的 开始节点 相同时，这时候在 复用后，还需要将当前真实 dom 节点移动到 旧节点的的最前面，同时老 节点结束节点向前移动一位，新节点的开始节点向后移动一位</p>
<h4 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h4><p>路由参数有两种，分别是<code>query</code>和<code>params</code>。</p>
<p>query传参是直接在to属性后边直接加上？,?后面跟参数，可以写成一个对象，对象里必须写上<code>path</code>和<code>query</code>属性，通过<code>this.$route.query</code>接收参数</p>
<p>params传参需要在路由配置中占位声明要接收params参数，然后在to属性后面添加需要传递的参数，也可以写成一个对象，对象里必须写上name和params属性,通过<code>this.$route.params</code>接收参数</p>
<h4 id="vue-中v-model双向绑定的原理"><a href="#vue-中v-model双向绑定的原理" class="headerlink" title="vue 中v-model双向绑定的原理"></a>vue 中<code>v-model</code>双向绑定的原理</h4><p>主要是用到了<code>v-bind</code>和<code>input</code>事件，在输入框上用<code>v-bind</code>绑定一个响应式数据，在添加一个<code>input</code>事件，<code>input</code>事件可以监听输入框内容的改变，当内容改变后，将<code>event.targer.value</code>的值赋给响应式数据 ，就实现了双向绑定。</p>
<h4 id="vue的原理"><a href="#vue的原理" class="headerlink" title="vue的原理"></a>vue的原理</h4><p>当一个Vue实例创建时，Vue会遍历data中的属性，用 Object.defineProperty（vue3.0使用proxy ）将每一个属性身上绑定一个 getter和setter，并且在内部追踪相关依赖，在属性被访问和修改时通知变化。 每个组件实例都有相应的 watcher 程序实例，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的setter被调用时，会通知watcher重新计算，从而致使它关联的组件得以更新。</p>
<h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><p>插槽就是在子组件中写一个<code>slot</code>标签作为占位符，父组件可以在这个占位符中填写DOM结构</p>
<p>插槽有三种，分别是默认插槽，具名插槽，作用域插槽</p>
<p>默认插槽</p>
<p>子组件用<code>slot</code>标签来确定渲染的位置，父组件直接在子组件的标签内写入内容即可</p>
<p>具名插槽</p>
<p>子组件用name属性来表示插槽的名字，父组件可以根据名字在子组件相应的地方插入内容</p>
<p>作用域插槽</p>
<p>子组件通过在作用域上绑定属性的方法将信息传给父组件使用，父组件根据这些数据生成需要的内容，然后再给子组件使用</p>
<h4 id="动态添加类"><a href="#动态添加类" class="headerlink" title="动态添加类"></a>动态添加类</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">v-bind:<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure>
<p>绑定的值可以是数组和对象，可以通过对数组的添加和删除来添加类和删除类</p>
<p>当绑定的值是一个对象时，通过判断对象属性的值决定是否添加</p>
<p>还可以用三元表达式来实现动态添加</p>
<h4 id="0-1-0-2-0-3"><a href="#0-1-0-2-0-3" class="headerlink" title="0.1+0.2 == 0.3"></a>0.1+0.2 == 0.3</h4><p>0.1+0.2是不等于0.3的，是由于在计算过程中，会先将数据转换成二进制进行存储，但是0.1转换成二进制是无限循环小数，只会截取部分进行存储，这会造成精度缺失，导致计算结果有误差</p>
<h4 id="判断一个数据类型是一个数组"><a href="#判断一个数据类型是一个数组" class="headerlink" title="判断一个数据类型是一个数组"></a>判断一个数据类型是一个数组</h4><p><code>instanceof</code></p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript">arr <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>  <span class="hljs-regexp">//</span>返回<span class="hljs-literal">true</span>或者<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>
<p><code>constructor</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">arr.constructor</span> === Array 	//返回<span class="hljs-literal">true</span>或者<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>
<p><code>isArray</code></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Array</span>.</span></span>is<span class="hljs-constructor">Array(<span class="hljs-params">arr</span>)</span>	<span class="hljs-comment">//返回true或者false</span><br></code></pre></td></tr></table></figure>
<p><code>Object.prototype.toString.call()</code></p>
<figure class="highlight elm"><table><tr><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Object</span>.proto<span class="hljs-keyword">type</span>.toString.call(undefined) ;		 //[object <span class="hljs-type">Undefined</span>]<br><span class="hljs-type">Object</span>.proto<span class="hljs-keyword">type</span>.toString.call(1) ; 			//[object <span class="hljs-type">Number</span>]<br></code></pre></td></tr></table></figure>
<h4 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h4><p>每个构造函数都有一个显示原型对象（<code>prototype</code>）,这个原型对象中有一个<code>constructor</code>属性，这个属性指向了函数本身，构造函数的实例对象都有一个隐式原型（<code>__proto__</code>）,他是指向原型对象的</p>
<p>原型链：每个对象都有一个<code>__proto__</code>属性，这个属性指向它的原型对象，原型对象也是一个对象，也有<code>__proto__</code>属性，它也会指向它自己的原型对象，这样一层一层形成的链式结构称为原型链。</p>
<h4 id="es6-class"><a href="#es6-class" class="headerlink" title="es6 class"></a><code>es6 class</code></h4><p>通过 class 关键字，可以定义类。基本上，ES6 的 class 可以看作只是 一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象 原型的写法更加清晰、更像面向对象编程的语法而已。</p>
<p>它的属性有，constructor 定义构造函数初始化 ，extends 继承父类 ，super 调用父级构造方法 ，static 定义静态方法和属性</p>
<h4 id="es6-set-map"><a href="#es6-set-map" class="headerlink" title="es6 set map"></a><code>es6 set map</code></h4><p><code>Set</code>是一种叫做集合的数据结构，集合里面的值是不可以重复的，可以用for-of和forEach进行遍历，set的实例有一些方法,比如add增加，delete删除，has检测集合中是否包含某个元素，clear清除所有元素，size返回集合中元素的个数。</p>
<p><code>Map</code>是一种叫做字典的数据结构，是以键值对的形式存储， 字典里面的键是不可以重复的，他可以用扩展运算符或者for-of进行遍历，它的方法和属性有，size：返回个数 ,set：增加元素,get：返回一个键的值,has：检测是否包含某个元素，delete:删除,clear：清空所有键值对</p>
<h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><p>数组，对象，字符串都支持解构赋值，解构赋值就是从数组或者对象中提取元素，给对应的变量进行赋值。解构赋值的目的是为了简化数据的提取过程，增强代码的可读性。</p>
<h4 id="animation与transition的区别"><a href="#animation与transition的区别" class="headerlink" title="animation与transition的区别"></a><code>animation</code>与<code>transition</code>的区别</h4><p><code>transition </code>需要去触发比如：点击事件、鼠标移入事件；而 <code>animation </code>可以配合<code> @keyframe</code> 可以不触发事件就触发这个动画</p>
<p><code>transition</code> 触发一次播放一次；而<code> animation</code> 则是可以设置很多的属性，比如循环次数，动画结束的状态等等；</p>
<p><code>transition</code>关注的是样式属性的变化，属性值和时间的关系是一个三次贝塞尔曲线；而<code>animation</code>作用于元素本身而不是样式属性，可以使用关键帧的概念，可以实现更自由的动画效果；</p>
<p>在性能方面：浏览器有一个主线程和排版线程；主线程一般是对 js 运行的、页面布局、生成位图等等，然后把生成好的位图传递给排版线程，而排版线程会通过 <code>GPU</code> 将位图绘制到页面上，也会向主线程请求位图等等；我们在用使用 <code>aniamtion</code> 的时候这样就可以改变很多属性，像我们改变了<code>width、height、postion</code>等等这些改变文档流的属性的时候就会引起，页面的回流和重绘，对性能影响就比较大，但是我们用 <code>transition </code>的时候一般会结合 <code>tansfrom </code>来进行旋转和缩放等不会生成新的位图，当然也就不会引起页面的重排了。</p>
<h4 id="animation"><a href="#animation" class="headerlink" title="animation"></a><code>animation</code></h4><p>属性：<br>可以设置动画时间，动画曲线，步进，控制动画方向，动画延时时间，无限循环，动画停留在哪一帧，动画播放(running)与暂停(paused)</p>
<p>帧动画：    用<code>@keyframes</code>设置帧动画，里面可以用to设置起始状态和from设置最终状态，也可以用百分比来设置。</p>
<h4 id="transition"><a href="#transition" class="headerlink" title="transition"></a><code>transition</code></h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">transition:</span>过渡名称，过渡时间，过渡类型，延时时间<br></code></pre></td></tr></table></figure>
<p>变形：<code>transform</code></p>
<figure class="highlight processing"><table><tr><td class="code"><pre><code class="hljs processing">缩放：<span class="hljs-built_in">scale</span>、平移:<span class="hljs-built_in">translate</span>、旋转<span class="hljs-built_in">rotate</span>、倾斜skew、景深<span class="hljs-built_in">perspective</span>、<span class="hljs-number">3</span>D空间preserve<span class="hljs-number">-3</span>d<br></code></pre></td></tr></table></figure>
<h4 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h4><p>响应式布局就是在同一页面下，在不同尺寸下 ，有不同的布局。</p>
<p>百分比，<code>rem</code>,媒体查询，<code>vw</code>,<code>flex</code>布局，<code>grid</code>栅格，都可以实现响应式布局，我们一般都会将他们搭配使用</p>
<p>用<code>rem</code>来做字体的适配，宽度可以用<code>rem</code>，<code>flex</code>，栅格系统等来实现响应式,，然后媒体查询来作为响应式布局的基础,</p>
<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>闭包就是在函数外部读能够读取其他函数内部的变量的函数。</p>
<p>当函数作为参数被传递或者作为返回值被传递就会产生闭包。常见的闭包就是在函数内部return一个函数，被返回的函数是可以使用外层函数里面的参数和变量。闭包引用的变量不会被销毁，可以实现局部变量，避免全局变量污染。但是闭包会造成内存泄露</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br>	<span class="hljs-keyword">return</span> function f()&#123;<br>		console.log(a)<br>	&#125;<br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">var</span> f = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br>f(); <span class="hljs-comment">//打印出a的值为100</span><br></code></pre></td></tr></table></figure>
<h4 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h4><p>防抖: n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p>
<p>节流: n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</p>
<h4 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h4><p>浅拷贝和深拷贝在拷贝时都会创建一个新的对象</p>
<p>浅拷贝时，只会拷贝第一层，如果是基本类型，直接拷贝值，如果是引用类型，则拷贝内存地址。如果对象里有引用类型，修改新对象，原对象也会被修改。</p>
<p>深拷贝时，会开辟一个新的栈，两个对象属完成相同，但是对应两个不同的地址。修改新对象，不会影响原对象。</p>
<p>浅拷贝直接用一个for循环遍历一次就可以实现，深拷贝则需要用到循环递归才能实现。</p>
<p>浅拷贝的方法有：<code>Object.assign、concat、扩展运算符、lodash.clone</code></p>
<p>深拷贝方法有：<code>jQuery.extend()、JSON.stringify()、lodash里面的cloneDeep()</code></p>
<h4 id="JSON-stringify-的缺陷"><a href="#JSON-stringify-的缺陷" class="headerlink" title="JSON.stringify()的缺陷"></a><code>JSON.stringify()</code>的缺陷</h4><p>会忽略<code>undefined</code>，函数，<code>symbol</code></p>
<h4 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h4><p>在js中，在进行运算时，如果两边的数据类型不统一就会发生隐式转换。</p>
<p>+-*/% 关系运算符 都会触发</p>
<p>减/乘/除  都会将非number类型转换成number类型</p>
<p>加     如果是数字与字符串相加，数字会被转化成字符串</p>
<p>true false null undefined在运算时都会转化成数字，</p>
<h4 id="自定义指令-directive"><a href="#自定义指令-directive" class="headerlink" title="自定义指令(directive)"></a>自定义指令(directive)</h4><h4 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h4><h4 id="vue加载优化方法"><a href="#vue加载优化方法" class="headerlink" title="vue加载优化方法"></a>vue加载优化方法</h4><p>路由懒加载、图片懒加载、插件按需引入、 开启gzip压缩，</p>
<p>对代码进行优化，合理使用v-if/v-show,还有computed和watch</p>
<h4 id="vue3的了解"><a href="#vue3的了解" class="headerlink" title="vue3的了解"></a><code>vue3</code>的了解</h4><p>vue3是支持大多数vue2的特性</p>
<p>vue3设计了一套强大的组合式<code>API(setup)</code>，复用性更强</p>
<p>最主要的是<code>vue3</code>的响应式原理是通过<code>proxy与reflect</code>结合起来实现的</p>
<p>重写了虚拟dom,速度更快。</p>
<p>有了一些新的组件Fragment(片段)，Teleport(传送)，Suspense(异步组件)</p>
<p>祖孙间的传值<code>provide,inject</code></p>
<p>设计了一个新的脚手架工具vite</p>
<p>Fragment:template不用写根标签</p>
<p>Teleport：传送,将当前组件的内容传送到指定的地方</p>
<p>Suspense：异步组件，等待异步组件时,渲染一些额外的内容</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>尚硅谷-ES6</title>
    <url>/2022/03/12/%E5%B0%9A%E7%A1%85%E8%B0%B7-ES6/</url>
    <content><![CDATA[<h4 id="模块化引入"><a href="#模块化引入" class="headerlink" title="模块化引入"></a>模块化引入</h4><h6 id="导入方式"><a href="#导入方式" class="headerlink" title="导入方式"></a>导入方式</h6><p>1.通用导入方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span>  写导入语句 <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>或<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;./app.js&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span>  写导入语句 <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>app.js文件里写入导入语句<br></code></pre></td></tr></table></figure>


<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">引入全部内容<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ls/my1.js&#x27;</span><br><br>引入全部内容并存到my变量中<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> my <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ls/my2.js&#x27;</span>		<span class="hljs-comment">//as 设置别名</span><br></code></pre></td></tr></table></figure>
<p>2.解构赋值方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;school,teacher&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./my1.js&#x27;</span><br><span class="hljs-keyword">import</span> &#123;school <span class="hljs-keyword">as</span> sch,teacher&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./my2.js&#x27;</span><br><span class="hljs-keyword">import</span> &#123;<span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> mm&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./my3.js&#x27;</span>  <span class="hljs-comment">//默认暴露引入</span><br></code></pre></td></tr></table></figure>
<p>3.简便形式（针对默认暴露）</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> mm <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./my3.js&#x27;</span><br></code></pre></td></tr></table></figure>


<h6 id="暴露方式"><a href="#暴露方式" class="headerlink" title="暴露方式"></a>暴露方式</h6><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">my1.js<br>--------<br>分别暴露<br>export let schoool = <span class="hljs-emphasis">&#x27;尚硅谷&#x27;</span><br>export function teacher()&#123;<br><span class="hljs-code">	console.log(&#x27;加上export就可以引入我了&#x27;)</span><br>&#125;<br><br><br>my2.js<br>-----------<br><br>统一暴露<br>let schoool = <span class="hljs-emphasis">&#x27;尚硅谷&#x27;</span><br>function teacher()&#123;<br><span class="hljs-code">	console.log(&#x27;快来引入我吧&#x27;)</span><br>&#125;<br><br>export &#123;school,teacher&#125;<br><br><br>my3.js<br>---------<br><br>默认暴露<br>export default&#123;<br><span class="hljs-code">	school:&#x27;qwewq&#x27;,</span><br><span class="hljs-code">	change:function()&#123;</span><br><span class="hljs-code">		.....</span><br><span class="hljs-code">	&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure>


<h4 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h4><h5 id="let"><a href="#let" class="headerlink" title="let"></a>let</h5><p>不能重复声明，只在块级作用域内有效</p>
<p>不存在变量提升，不影响作用域链，可以被修改</p>
<h5 id="const"><a href="#const" class="headerlink" title="const"></a>const</h5><p>要有初始值，不能被修改，只在块级作用域内有效</p>
<p>对于数组 和对象的元素修改，不算做对常量的修改</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><code class="hljs lasso">arr = &#123;<span class="hljs-string">&#x27;tan&#x27;</span>:<span class="hljs-number">12</span>,<span class="hljs-string">&#x27;bo&#x27;</span>:<span class="hljs-number">67</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>:<span class="hljs-number">87</span>&#125;<br>arr2 = &#123;<span class="hljs-string">&#x27;tan&#x27;</span>:<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;bo&#x27;</span>:<span class="hljs-number">77</span>&#125;<br><br>arr3 = &#123;<span class="hljs-params">...</span>arr,<span class="hljs-params">...</span>arr2&#125;		<span class="hljs-comment">//后面对象会覆盖前面对象属性的值，后面没有的属性，会保留前面的属性</span><br>&gt;&gt;&gt;&#123;<span class="hljs-string">&#x27;tan&#x27;</span>:<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;bo&#x27;</span>:<span class="hljs-number">77</span>,<span class="hljs-string">&#x27;zhi&#x27;</span>:<span class="hljs-number">87</span>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h5><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>数组<br><br>const list = [<span class="hljs-string">&#x27;电脑&#x27;</span>,<span class="hljs-string">&#x27;键盘&#x27;</span>,<span class="hljs-string">&#x27;鼠标&#x27;</span>]<br>let [a,b,c] = list<br><br>console.log(a,b,c)	&gt;&gt;&gt; 电脑，键盘，鼠标<br><br><span class="hljs-regexp">//</span>对象<br>const zhao = &#123;<br>	name:<span class="hljs-string">&#x27;赵四&#x27;</span>,<br>	age:<span class="hljs-string">&#x27;23&#x27;</span>,<br>	todo:<span class="hljs-keyword">function</span>()&#123;<br>		console.log(<span class="hljs-string">&#x27;调用我了&#x27;</span>)<br>	&#125;<br>&#125;;<br><br><span class="hljs-regexp">//</span>let &#123;name,age,todo&#125; = zhao;<br><span class="hljs-regexp">//</span>console.log(name,age,todo)	&gt;&gt;&gt;赵四，<span class="hljs-number">23</span>，<span class="hljs-keyword">function</span>()<br><br><span class="hljs-regexp">//</span>let &#123;todo&#125; = zhao<br><span class="hljs-regexp">//</span>console.log(todo)	&gt;&gt;&gt;<span class="hljs-keyword">function</span>()&#123;&#125;<br><span class="hljs-regexp">//</span>todo()	&gt;&gt;&gt;调用我了<br></code></pre></td></tr></table></figure>


<h5 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h5><p>1.可以换行写</p>
<p>2.变量拼接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> str = <span class="hljs-string">`我是可以换</span><br><span class="hljs-string">			行的！！</span><br><span class="hljs-string">			`</span><br><br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;张三&#x27;</span><br><span class="hljs-keyword">let</span> age = <span class="hljs-string">&#x27;28&#x27;</span><br><br><span class="hljs-keyword">let</span> prt = <span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>今年<span class="hljs-subst">$&#123;age+<span class="hljs-number">1</span>&#125;</span>岁了`</span><br><span class="hljs-built_in">console</span>.log(prt)	&gt;&gt;&gt;张三今年<span class="hljs-number">29</span>岁了<br></code></pre></td></tr></table></figure>


<h5 id="对象的简化写法"><a href="#对象的简化写法" class="headerlink" title="对象的简化写法"></a>对象的简化写法</h5><p>在对象里，当方法名和变量名一样时，可以简写，只写一次就行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;小明&#x27;</span><br><span class="hljs-keyword">let</span> change = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;我来了&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> school = &#123;<br>	name,		<span class="hljs-comment">//初始： name:name,</span><br>	change,		<span class="hljs-comment">//初始： change:change,</span><br>	<span class="hljs-function"><span class="hljs-title">haha</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;可以将=和function省略了&#x27;</span>)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><p>箭头函数的this是静态的，this始终指向函数声明时所在作用域this的值</p>
<p>不能作为构造函数实例化对象</p>
<p>不能使用arguments变量</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">原始函数<br><span class="hljs-keyword">var</span> name = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	cosnole.log(<span class="hljs-string">&#x27;我是原始函数&#x27;</span>)<br>&#125;<br><br>箭头函数<br><span class="hljs-keyword">var</span> name = <span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> &#123;<span class="hljs-keyword">return</span> x+<span class="hljs-number">1</span>&#125;<br>或<br><span class="hljs-comment">//当只有一个参数时，()可以省略，只有一句执行语句是&#123;&#125;和return也可以省略</span><br><span class="hljs-keyword">var</span> name = <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>


<h5 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h5><p>1、允许给函数参数赋值初始值</p>
<p>形参初始值具有默认值参数，一般要靠后</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">function <span class="hljs-builtin-name">add</span>(a,b,<span class="hljs-attribute">c</span>=3)&#123;<br>	return a+b+c<br>&#125;<br>console.log(<span class="hljs-builtin-name">add</span>(1,2)) &gt;&gt;&gt;6<br></code></pre></td></tr></table></figure>
<p>2、与解构赋值结合</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi"><span class="hljs-comment">//原始</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span><span class="hljs-params">(obj)</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-function"><span class="hljs-comment">	var a = obj.a;</span></span><br><span class="hljs-function"><span class="hljs-comment">	var b = obj.b</span></span><br><span class="hljs-function"><span class="hljs-comment">	var c = obj.c;</span></span><br><span class="hljs-function"><span class="hljs-comment">	</span></span><br><span class="hljs-function"><span class="hljs-comment">	return a+b+c</span></span><br><span class="hljs-function"><span class="hljs-comment">&#125;</span></span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-comment">&#123;</span></span></span><br><span class="hljs-function"><span class="hljs-params"><span class="hljs-comment">	a:1,</span></span></span><br><span class="hljs-function"><span class="hljs-params"><span class="hljs-comment">	b:2,</span></span></span><br><span class="hljs-function"><span class="hljs-params"><span class="hljs-comment">	c:3</span></span></span><br><span class="hljs-function"><span class="hljs-params"><span class="hljs-comment">&#125;</span>)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">//结合</span></span><br><span class="hljs-function"><span class="hljs-title">function</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-comment">&#123;a,b,c=2&#125;</span>)</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-function"><span class="hljs-comment">	return a+b+c</span></span><br><span class="hljs-function"><span class="hljs-comment">&#125;</span></span><br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-comment">&#123;</span></span></span><br><span class="hljs-function"><span class="hljs-params"><span class="hljs-comment">	a:1,</span></span></span><br><span class="hljs-function"><span class="hljs-params"><span class="hljs-comment">	b:2,</span></span></span><br><span class="hljs-function"><span class="hljs-params"><span class="hljs-comment">&#125;</span>)</span></span><br></code></pre></td></tr></table></figure>


<h5 id="res参数（…args）"><a href="#res参数（…args）" class="headerlink" title="res参数（…args）"></a>res参数（…args）</h5><h6 id="es5-arguments"><a href="#es5-arguments" class="headerlink" title="es5(arguments)"></a>es5(arguments)</h6><p>得到的是一个对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs ,">function data()&#123;<br>	console.log(arguments)	&gt;&gt;&gt;	&#123;&#39;小明&#39;,&#39;小红&#39;,&#39;小刚&#39;&#125;是一个对象类型的<br>&#125;<br>data(&#39;小明&#39;,&#39;小红&#39;,&#39;小刚&#39;)<br></code></pre></td></tr></table></figure>
<h6 id="es6-rest参数"><a href="#es6-rest参数" class="headerlink" title="es6(rest参数)"></a>es6(rest参数)</h6><p>es9中对象也支持这个方法</p>
<p>得到的是一个数组，可以使用数组的方法</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">data</span><span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span></span>&#123;<br>	console.log(args)	&gt;&gt;&gt;	[<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-string">&#x27;小红&#x27;</span>,<span class="hljs-string">&#x27;小刚&#x27;</span>]是一个数组类型的<br>&#125;<br>data(<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-string">&#x27;小红&#x27;</span>,<span class="hljs-string">&#x27;小刚&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">data</span><span class="hljs-params">(a,b,<span class="hljs-rest_arg">...args</span>)</span></span>&#123;	<span class="hljs-comment">//...args要放到其它参数后面</span><br>	console.log(args)	&gt;&gt;&gt;	[<span class="hljs-string">&#x27;小刚&#x27;</span>]接收多于的参数<br>&#125;<br>data(<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-string">&#x27;小红&#x27;</span>,<span class="hljs-string">&#x27;小刚&#x27;</span>)<br></code></pre></td></tr></table></figure>


<h5 id="扩展运算符（…）"><a href="#扩展运算符（…）" class="headerlink" title="扩展运算符（…）"></a>扩展运算符（…）</h5><p>es9中对象也支持这个方法</p>
<h6 id="将数组转换为逗号分隔符的参数序列"><a href="#将数组转换为逗号分隔符的参数序列" class="headerlink" title="将数组转换为逗号分隔符的参数序列"></a>将数组转换为逗号分隔符的参数序列</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> list = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)<br>&#125;<br>add(...list)	<span class="hljs-comment">//相当于add(a,b,c)</span><br></code></pre></td></tr></table></figure>
<h6 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h6><p>1.数组合并</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">list1 = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]</span><br>list2 = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]</span><br><br>list3 = <span class="hljs-selector-attr">[...list1,...list2]</span><br>console<span class="hljs-selector-class">.log</span>(list3)	&gt;&gt;&gt;<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>]</span><br></code></pre></td></tr></table></figure>
<p>2.数组克隆</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">list1 = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]</span><br>list2 = <span class="hljs-selector-attr">[...list1]</span><br><br>console<span class="hljs-selector-class">.log</span>(list2)	&gt;&gt;&gt;<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]</span><br></code></pre></td></tr></table></figure>
<p>3.将伪数组转为真正的数组</p>
<p>将类似于数组的东西用扩展运算符也可转换成数组</p>
<h5 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h5><h6 id="symbo介绍"><a href="#symbo介绍" class="headerlink" title="symbo介绍"></a><code>symbo</code>介绍</h6><p>js的第7种数据类型，表示独一无二的值，类似于字符串的一种类型</p>
<p>1.唯一，2不能与其他数据运算</p>
<p>3.<code>symbol</code>定义的对象不能使用for…in循环遍历，可以使用<code>Reflect.ownKeys</code>来获取对象的所有键名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建symbol</span><br><span class="hljs-keyword">let</span> s = <span class="hljs-built_in">Symbol</span>()<br><br><span class="hljs-comment">//添加标识的Symbol	添加的标识可以重复</span><br><span class="hljs-keyword">let</span> s2 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;这是描述&#x27;</span>)<br><br><span class="hljs-comment">//Symbol.for创建的是一个对象	s3===s4</span><br><span class="hljs-keyword">let</span> s3 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&#x27;这是描述&#x27;</span>)<br><span class="hljs-keyword">let</span> s4 = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&#x27;这是描述4&#x27;</span>)<br><br><span class="hljs-comment">//获取描述（es10）</span><br>s4.description	<span class="hljs-comment">//这是描述4</span><br></code></pre></td></tr></table></figure>
<h6 id="对象添加symbol类型的属性"><a href="#对象添加symbol类型的属性" class="headerlink" title="对象添加symbol类型的属性"></a>对象添加<code>symbol</code>类型的属性</h6><p>第一种添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> game = &#123;<br>	up:<span class="hljs-string">&#x27;普通的up&#x27;</span>,<br>	down:<span class="hljs-string">&#x27;普通的down&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">let</span> methods = &#123;<br>	up:<span class="hljs-built_in">Symbol</span>(),<br>	down:Symal()<br>&#125;;<br><br>game[methods.up] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;111&#x27;</span>)<br>&#125;<br>game[methods.down] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;222&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>第二种添加方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> yy = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;yy&#x27;</span>)<br><span class="hljs-keyword">let</span> game = &#123;<br>	name:<span class="hljs-string">&#x27;游戏&#x27;</span>,<br>	[<span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;say&#x27;</span>)]:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;123&#x27;</span>)<br>	&#125;,<br>	[<span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)]:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;222&#x27;</span>)<br>	&#125;,<br>	yy:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;.....&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h6><p>略</p>
<h5 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h5><p>for in 遍历索引</p>
<p>for of 遍历内容（有Symbol.iterator属性就能遍历）</p>
<h6 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h6><p>a)创建一个指针对象，指向当前数据结构的起始位置</p>
<p>b)第一次调用对象的next方法，指针自动指向数据结构的第一个成员</p>
<p>c)接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员</p>
<p>d)每调用next方法返回一个包含value和 doné属性的对象<br>需要自定义遍历数据的时候，要想到迭代器。</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><code class="hljs vbnet">创建一个指针对象<br><span class="hljs-keyword">let</span> <span class="hljs-keyword">iterator</span> = youxi[Symbol.<span class="hljs-keyword">iterator</span>]()<br><br>调用<span class="hljs-keyword">next</span>方法<br><span class="hljs-keyword">iterator</span>.<span class="hljs-keyword">next</span>()<br></code></pre></td></tr></table></figure>
<h6 id="自定义遍历"><a href="#自定义遍历" class="headerlink" title="自定义遍历"></a>自定义遍历</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> youxi = &#123;<br>       name:<span class="hljs-string">&#x27;游戏&#x27;</span>,<br>       obj1:[<br>           <span class="hljs-string">&#x27;王者荣耀&#x27;</span>,<br>           <span class="hljs-string">&#x27;刺激战场&#x27;</span>,<br>           <span class="hljs-string">&#x27;明日之子&#x27;</span>,<br>           <span class="hljs-string">&#x27;原神&#x27;</span><br>       ],<br>       [<span class="hljs-built_in">Symbol</span>.iterator]()&#123;<br>           <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">let</span> done=<span class="hljs-literal">false</span>;<br>           <span class="hljs-keyword">let</span> len = <span class="hljs-built_in">this</span>.obj1.length<br>           <span class="hljs-keyword">return</span>&#123;  <br>               next:<span class="hljs-function">()=&gt;</span>&#123;<br>                   <span class="hljs-keyword">if</span> (index&gt;=len) done = <span class="hljs-literal">true</span><br>                   index++<br>                   <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">value</span>:<span class="hljs-built_in">this</span>.obj1[index-<span class="hljs-number">1</span>],done&#125;<br>               &#125;<br>           &#125; <br>       &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">for</span>(i <span class="hljs-keyword">of</span> youxi)&#123;<br>       <span class="hljs-built_in">console</span>.log(i)<br>   &#125;<br></code></pre></td></tr></table></figure>
<h5 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h5><p>生成器是一个特殊的函数</p>
<p>异步编程</p>
<p>函数代码的分隔符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> * <span class="hljs-title">gen</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;第一次返回&#x27;</span>;<br>	<span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;第二次返回&#x27;</span>;<br>	<span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;第三次返回&#x27;</span>;	<br>&#125;<br><br>let <span class="hljs-built_in">iterator</span> = gen()<br><br><span class="hljs-built_in">iterator</span>.next()	<span class="hljs-comment">//调用几次,就输出几个</span><br><span class="hljs-built_in">iterator</span>.next()<br><span class="hljs-built_in">iterator</span>.next()<br>console.log(<span class="hljs-built_in">iterator</span>.next())<br><br><span class="hljs-comment">//或者遍历</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i of gen())&#123;<br>	console.log(i)<br>&#125;<br></code></pre></td></tr></table></figure>


<h5 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h5><p>略</p>
<h5 id="集合（Set）"><a href="#集合（Set）" class="headerlink" title="集合（Set）"></a>集合（Set）</h5><p>set和map都是类数组</p>
<p><code>Array.from</code>转化成数组,第一个参数是一个类数组，第二个参数是一个箭头函数，可以对每一项进行处理</p>
<p><code>Array.of</code>可以将一组值转化成数组，没有值时，返回空数组，当只有一个值时，是指定数组的长度，多于两个值是，返回一个数组</p>
<p><code>new Set()</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();<br><br>可以放入一个参数，通常是数组<br>放入数组，可以去重<br><span class="hljs-keyword">let</span> s1 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br></code></pre></td></tr></table></figure>
<p>方法</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">let s1 = new Set(<span class="hljs-selector-attr">[1,2,3,4,1,3,4]</span>)<br><br>s1<span class="hljs-selector-class">.add</span>(<span class="hljs-string">&#x27;5&#x27;</span>)		<span class="hljs-comment">//添加</span><br>s1<span class="hljs-selector-class">.delete</span>(<span class="hljs-string">&#x27;4&#x27;</span>)	<span class="hljs-comment">//删除</span><br>s1<span class="hljs-selector-class">.has</span>(<span class="hljs-string">&#x27;5&#x27;</span>)		<span class="hljs-comment">//检测有没有 返回true和false</span><br>s1<span class="hljs-selector-class">.clear</span>()		<span class="hljs-comment">//清空</span><br>s1<span class="hljs-selector-class">.size</span>()	<span class="hljs-comment">//长度</span><br><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(let v of s1)</span></span>&#123;console<span class="hljs-selector-class">.log</span>(v)&#125;	<span class="hljs-comment">//循环s1</span><br><br><br>可以求数组的 去重，交集，并集，差集（交集的取反）<br></code></pre></td></tr></table></figure>
<h5 id="键值对集合-map"><a href="#键值对集合-map" class="headerlink" title="键值对集合(map)"></a>键值对集合(map)</h5><p>键和值可以是任意对象</p>
<p>可以使用扩展运算符和<code>for...of</code>进行遍历</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">let m = new Map();<br><br>m.set(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;tan&#x27;</span>);	<span class="hljs-regexp">//</span>添加元素<br>m.set(<span class="hljs-string">&#x27;&#123;school:&#x27;</span>atguig<span class="hljs-string">u&#x27;&#125;&#x27;</span>,<span class="hljs-string">&#x27;[1,2,3,4]&#x27;</span>)	键和值可以是任意东西<br><br>m.size();		<span class="hljs-regexp">//</span>长度<br>m.<span class="hljs-keyword">delete</span>(<span class="hljs-string">&#x27;name&#x27;</span>);		<span class="hljs-regexp">//</span>删除元素<br>m.get(<span class="hljs-string">&#x27;name&#x27;</span>)	<span class="hljs-regexp">//</span>获取元素<br>m.has(<span class="hljs-string">&#x27;name&#x27;</span>)		<span class="hljs-regexp">//</span>判断有没有<br>m.clear()	<span class="hljs-regexp">//</span>清空<br></code></pre></td></tr></table></figure>


<h5 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span></span>&#123;<br>	<span class="hljs-comment">//构造函数方法，名字不能改</span><br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">brand,price</span>)</span>&#123;<br>		<span class="hljs-built_in">this</span>.brand = brand;<br>		<span class="hljs-built_in">this</span>.#price = price;	<span class="hljs-comment">//设置为私有属性，只能在内部调用(本例可以在call中调用)</span><br>	&#125;<br>	<span class="hljs-comment">//不能写function，只能用()</span><br>	<span class="hljs-function"><span class="hljs-title">call</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;123&#x27;</span>)<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.#price)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="类的静态成员（static）"><a href="#类的静态成员（static）" class="headerlink" title="类的静态成员（static）"></a>类的静态成员（static）</h6><p>static声明的方法属于类，不属于实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span></span>&#123;<br>	<span class="hljs-keyword">static</span> name = <span class="hljs-string">&#x27;手机&#x27;</span><br>	<span class="hljs-keyword">static</span> fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;123&#x27;</span>)&#125;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(phone.name)		<span class="hljs-comment">//手机 可以直接得到</span><br><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Phone()<br><span class="hljs-built_in">console</span>.log(p.name)		<span class="hljs-comment">//的undfined</span><br></code></pre></td></tr></table></figure>
<h6 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">brand,price</span>)</span>&#123;<br>		<span class="hljs-built_in">this</span>.brand = brand;<br>		<span class="hljs-built_in">this</span>.price = price<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-title">call</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;123&#x27;</span>)<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//子类 要加上 extends Phone</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SmartPhone</span>　<span class="hljs-keyword">extends</span> <span class="hljs-title">Phone</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">brand,price,color,size</span>)</span>&#123;<br>		<span class="hljs-built_in">super</span>(brand,price);	<span class="hljs-comment">//相当于phone.call(this,brand,price)</span><br>		<span class="hljs-built_in">this</span>.brand = brand;<br>		<span class="hljs-built_in">this</span>.price = price<br>	&#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> SmartPhone(<span class="hljs-string">&#x27;xiaomi&#x27;</span>,<span class="hljs-number">1999</span>,<span class="hljs-string">&#x27;红色&#x27;</span>,<span class="hljs-string">&#x27;5.5英寸&#x27;</span>)<br><br>p.call() <span class="hljs-comment">//123</span><br></code></pre></td></tr></table></figure>
<h6 id="类方法重写"><a href="#类方法重写" class="headerlink" title="类方法重写"></a>类方法重写</h6><p>在子类中定义重名方法</p>
<h6 id="类的getter和setter"><a href="#类的getter和setter" class="headerlink" title="类的getter和setter"></a>类的getter和setter</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Phone</span></span>&#123;<br>	<span class="hljs-keyword">get</span> <span class="hljs-title">price</span>()&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;被读取了&#x27;</span>)<br>		<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;getter&#x27;</span><br>	&#125;<br>	<span class="hljs-keyword">set</span> <span class="hljs-title">price</span>(<span class="hljs-params">newvalue</span>)&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;被修改了&#x27;</span>)<br>	&#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> Phone()<br><span class="hljs-built_in">console</span>.log(p.price) <span class="hljs-comment">//被读取了 getter</span><br>p.price = <span class="hljs-string">&#x27;1000&#x27;</span>	<span class="hljs-comment">//被修改了</span><br></code></pre></td></tr></table></figure>


<h5 id="数值方法扩展"><a href="#数值方法扩展" class="headerlink" title="数值方法扩展"></a>数值方法扩展</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">Number</span>.EPSILON <span class="hljs-comment">//js表示的最小精度</span><br><br>当两个数相差小于EPSILON时，我们认为他们相等<br><br>例：<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">equal</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">Math</span>.abs(a-b)&lt;<span class="hljs-built_in">Number</span>.EPSILON)&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>	&#125;<span class="hljs-keyword">else</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>	&#125;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(equal(<span class="hljs-number">0.1</span>+<span class="hljs-number">0.2</span>,<span class="hljs-number">0.3</span>)) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>is<span class="hljs-constructor">Finite(&#x27;<span class="hljs-params">num</span>&#x27;)</span> <span class="hljs-comment">//判断是否为有限数</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>is<span class="hljs-constructor">NaN(&#x27;<span class="hljs-params">num</span>&#x27;)</span>	<span class="hljs-comment">//判断是否为NaN</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>is<span class="hljs-constructor">Integer(&#x27;<span class="hljs-params">num</span>&#x27;)</span>	<span class="hljs-comment">//判断是否为整数</span><br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">NUmber</span>.</span></span>parse<span class="hljs-constructor">Int(&#x27;<span class="hljs-params">num</span>&#x27;)</span>	<span class="hljs-comment">//字符串取整</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Number</span>.</span></span>parse<span class="hljs-constructor">Float(&#x27;<span class="hljs-params">num</span>&#x27;)</span>	<span class="hljs-comment">//字符串取浮点数</span><br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>trunc(&#x27;num&#x27;) 	<span class="hljs-comment">//去掉数字小数部分</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>sign(&#x27;num&#x27;)		<span class="hljs-comment">//判断一个数的正负 返回值 正(1) 负(-1) 零(0)</span><br></code></pre></td></tr></table></figure>


<h5 id="对象方法扩展"><a href="#对象方法扩展" class="headerlink" title="对象方法扩展"></a>对象方法扩展</h5><h6 id="判断两个值是否相等"><a href="#判断两个值是否相等" class="headerlink" title="判断两个值是否相等"></a>判断两个值是否相等</h6><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">Object</span>.<span class="hljs-keyword">is</span>(<span class="hljs-number">120</span>,<span class="hljs-number">120</span>)	//rue<br><span class="hljs-built_in">Object</span>.<span class="hljs-keyword">is</span>(<span class="hljs-literal">NaN</span>,<span class="hljs-literal">NaN</span>)	//<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>
<h6 id="对象合并"><a href="#对象合并" class="headerlink" title="对象合并"></a>对象合并</h6><figure class="highlight dart"><table><tr><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> obj1 = &#123;name:<span class="hljs-string">&#x27;xiaoxiao&#x27;</span>,age:<span class="hljs-string">&#x27;12&#x27;</span>&#125;<br><span class="hljs-keyword">const</span> obj2 = &#123;name:<span class="hljs-string">&#x27;xiaoming&#x27;</span>&#125;<br><br><span class="hljs-built_in">Object</span>.assign(obj1,obj2)	<span class="hljs-comment">//相同的属性以obj2为准</span><br><br>&gt;&gt;&gt;&#123;name:<span class="hljs-string">&#x27;xiaoming&#x27;</span>,age:<span class="hljs-string">&#x27;12&#x27;</span>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="设置-获取对象原型"><a href="#设置-获取对象原型" class="headerlink" title="设置/获取对象原型"></a>设置/获取对象原型</h6><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>setPrototypeOf	<span class="hljs-comment">//设置</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>getPrototypeOf	<span class="hljs-comment">//获取</span><br><br>const school = &#123;name:&#x27;小明&#x27;&#125;<br>const city = &#123;habby:<span class="hljs-literal">[&#x27;打篮球&#x27;,踢足球,&#x27;跑步&#x27;]</span>&#125;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>set<span class="hljs-constructor">PrototypeOf(<span class="hljs-params">school</span>,<span class="hljs-params">city</span>)</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">PrototypeOf(<span class="hljs-params">school</span>)</span><br></code></pre></td></tr></table></figure>
<h6 id="es8对象扩展"><a href="#es8对象扩展" class="headerlink" title="es8对象扩展"></a>es8对象扩展</h6><p>获取对象的键和值</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> school=&#123;<br>	name:<span class="hljs-string">&#x27;小明&#x27;</span>,<br>	age:<span class="hljs-string">&#x27;23&#x27;</span>,<br>	hobby:<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;篮球&#x27;</span>,<span class="hljs-string">&#x27;足球&#x27;</span>,<span class="hljs-string">&#x27;乒乓球&#x27;</span>]</span><br>&#125;<br><br><span class="hljs-comment">//获取对象所有的键</span><br>Object<span class="hljs-selector-class">.keys</span>(school)<br><span class="hljs-comment">//获取对象所有的值</span><br>Object<span class="hljs-selector-class">.values</span>(school)<br><span class="hljs-comment">//获取对象所有的键值对，并以二维数组的形式返回</span><br>Object<span class="hljs-selector-class">.entries</span>(school)<br></code></pre></td></tr></table></figure>
<p>获取对象属性的描述对象</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Object</span>.</span></span>get<span class="hljs-constructor">OwnPropertyDescriptors(<span class="hljs-params">school</span>)</span><br><br>描述对象：writeable,configurable,enumerable<br></code></pre></td></tr></table></figure>
<h6 id="es10对象扩展"><a href="#es10对象扩展" class="headerlink" title="es10对象扩展"></a>es10对象扩展</h6><p>fromEnteries 将二维数组转为对象</p>
<p>与Enteries为逆操作</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">const res = <span class="hljs-keyword">Object</span>.fromEnteries([<br>	[<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;小明&#x27;</span>],<br>	[<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-string">&#x27;18&#x27;</span>]<br>])<br><br>console.log(res)	//&#123;<span class="hljs-type">name</span>:<span class="hljs-string">&#x27;小明&#x27;</span>,age:<span class="hljs-string">&#x27;18&#x27;</span>&#125;<br></code></pre></td></tr></table></figure>


<h4 id="es7"><a href="#es7" class="headerlink" title="es7"></a>es7</h4><h5 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h5><p>includes判断内容是否在数组中 </p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">const mingzhu = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;西游记&#x27;</span>,<span class="hljs-string">&#x27;红楼梦&#x27;</span>,<span class="hljs-string">&#x27;三国演义&#x27;</span>,<span class="hljs-string">&#x27;水浒传&#x27;</span>]</span><br><br>console<span class="hljs-selector-class">.log</span>(mingzhu<span class="hljs-selector-class">.includes</span>(<span class="hljs-string">&#x27;西游记&#x27;</span>))	<span class="hljs-comment">//true</span><br>console<span class="hljs-selector-class">.log</span>(mingzhu<span class="hljs-selector-class">.includes</span>(<span class="hljs-string">&#x27;金瓶梅&#x27;</span>))	<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure>
<h5 id="幂运算符"><a href="#幂运算符" class="headerlink" title="幂运算符(**)"></a>幂运算符(**)</h5><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log(<span class="hljs-number">2</span>**<span class="hljs-number">3</span>)	//<span class="hljs-number">8</span> 相当于Math.pow(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure>


<h4 id="es9正则扩展"><a href="#es9正则扩展" class="headerlink" title="es9正则扩展"></a>es9正则扩展</h4><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">原：<br>let str = <span class="hljs-string">&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;</span><br><br>const reg = /&lt;<span class="hljs-keyword">a</span> href=<span class="hljs-string">&quot;(.*)&quot;</span>&gt;(.*)&lt;\/<span class="hljs-keyword">a</span>&gt;/<br>const <span class="hljs-built_in">result</span> = reg.exec(str)<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">result</span>.groups.url)<br><br>新：<br>let str = <span class="hljs-string">&#x27;&lt;a href=&quot;https://www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;</span><br><br>const reg = /&lt;<span class="hljs-keyword">a</span> href=<span class="hljs-string">&quot;(?&lt;url&gt;.*)&quot;</span>&gt;(?&lt;<span class="hljs-keyword">text</span>&gt;.*)&lt;\/<span class="hljs-keyword">a</span>&gt;/<br>const <span class="hljs-built_in">result</span> = reg.exec(str)<br><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-built_in">result</span>.groups.url)<br></code></pre></td></tr></table></figure>


<h6 id="正则反向断言"><a href="#正则反向断言" class="headerlink" title="正则反向断言"></a>正则反向断言</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//正向断言</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;tan12345谭谭520博博&#x27;</span><br><br><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/\d+(?=博)/</span><br><span class="hljs-keyword">const</span> result = reg.exec(str)<br><span class="hljs-built_in">console</span>.log(result)	<span class="hljs-comment">//520</span><br><br><span class="hljs-comment">//反向断言</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;tan12345谭谭520博博&#x27;</span><br><br><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/(?&lt;=谭)\d+/</span><br><span class="hljs-keyword">const</span> result = reg.exec(str)<br><span class="hljs-built_in">console</span>.log(result)	<span class="hljs-comment">//520</span><br></code></pre></td></tr></table></figure>
<h6 id="正则dotall模式"><a href="#正则dotall模式" class="headerlink" title="正则dotall模式"></a>正则dotall模式</h6><p>dot  . 元字符  除换行符外的任意单个字符</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">let str = `<br>	<span class="hljs-params">&lt;ul&gt;</span><br>		<span class="hljs-params">&lt;li&gt;</span><br>			<span class="hljs-params">&lt;a&gt;</span>西游记<span class="hljs-params">&lt;/a&gt;</span><br>			<span class="hljs-params">&lt;p&gt;</span>四大名著之一<span class="hljs-params">&lt;/p&gt;</span><br>		<span class="hljs-params">&lt;li&gt;</span><br>		<span class="hljs-params">&lt;li&gt;</span><br>			<span class="hljs-params">&lt;a&gt;</span>水浒传<span class="hljs-params">&lt;/a&gt;</span><br>			<span class="hljs-params">&lt;p&gt;</span>四大名著之一<span class="hljs-params">&lt;/p&gt;</span><br>		<span class="hljs-params">&lt;li&gt;</span><br>	<span class="hljs-params">&lt;/ul&gt;</span><br>`<br><br><span class="hljs-comment">//原：</span><br>const reg = /<span class="hljs-params">&lt;li&gt;</span>\s+<span class="hljs-params">&lt;a&gt;</span>(.*?)<span class="hljs-params">&lt;\/a&gt;</span>\s+<span class="hljs-params">&lt;p&gt;</span>(.*?)<span class="hljs-params">&lt;\/p&gt;</span>/<br><br><span class="hljs-comment">//新	g全部匹配，s:开启dot模式，点可以匹配任意字符</span><br>const reg = /<span class="hljs-params">&lt;li&gt;</span>.*?<span class="hljs-params">&lt;a&gt;</span>(.*?)<span class="hljs-params">&lt;\/a&gt;</span>.*?<span class="hljs-params">&lt;p&gt;</span>(.*?)<span class="hljs-params">&lt;\/p&gt;</span>/gs<br><br>const result = reg.exec(str)<br><br>console.log(result)<br></code></pre></td></tr></table></figure>
<p>matchAll</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">let str = `<br>	<span class="hljs-params">&lt;ul&gt;</span><br>		<span class="hljs-params">&lt;li&gt;</span><br>			<span class="hljs-params">&lt;a&gt;</span>西游记<span class="hljs-params">&lt;/a&gt;</span><br>			<span class="hljs-params">&lt;p&gt;</span>四大名著之一<span class="hljs-params">&lt;/p&gt;</span><br>		<span class="hljs-params">&lt;li&gt;</span><br>		<span class="hljs-params">&lt;li&gt;</span><br>			<span class="hljs-params">&lt;a&gt;</span>水浒传<span class="hljs-params">&lt;/a&gt;</span><br>			<span class="hljs-params">&lt;p&gt;</span>四大名著之一<span class="hljs-params">&lt;/p&gt;</span><br>		<span class="hljs-params">&lt;li&gt;</span><br>	<span class="hljs-params">&lt;/ul&gt;</span><br>`<br>const reg = /<span class="hljs-params">&lt;li&gt;</span>.*?<span class="hljs-params">&lt;a&gt;</span>(.*?)<span class="hljs-params">&lt;\/a&gt;</span>.*?<span class="hljs-params">&lt;p&gt;</span>(.*?)<span class="hljs-params">&lt;\/p&gt;</span>/gs<br>const result = str.mathAll(reg);	<span class="hljs-comment">//可以迭代、可以用扩展运算符</span><br><br><span class="hljs-comment">//循环</span><br>for(let v of result)&#123; conaole.log(v)&#125;<br><br><span class="hljs-comment">//扩展运算符</span><br>const arr = [...result]<br></code></pre></td></tr></table></figure>


<h4 id="es10"><a href="#es10" class="headerlink" title="es10"></a>es10</h4><h6 id="清除左右空格"><a href="#清除左右空格" class="headerlink" title="清除左右空格"></a>清除左右空格</h6><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">let <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;   iloveyou   &#x27;</span><br><br><span class="hljs-built_in">str</span>.trimStart()	<span class="hljs-comment">//清除左边空格</span><br><span class="hljs-built_in">str</span>.trimEnd()	<span class="hljs-comment">//清除右边空格</span><br></code></pre></td></tr></table></figure>
<h6 id="数组方法扩展"><a href="#数组方法扩展" class="headerlink" title="数组方法扩展"></a>数组方法扩展</h6><p>flat:将多维数组转为低维数组</p>
<p>flatMap：map与flat的结合</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">const arr = <span class="hljs-comment">[1,2,3,<span class="hljs-comment">[4,5]</span>]</span><br>const arr1 = <span class="hljs-comment">[1,2,3,4<span class="hljs-comment">[5,6,<span class="hljs-comment">[7,8]</span>]</span>]</span><br><br>//参数代表深度，默认是1<br>arr.flat() //<span class="hljs-comment">[1,2,3,4,5]</span><br>arr1.flat()	//<span class="hljs-comment">[1,2,3,4,5,6<span class="hljs-comment">[7,8]</span>]</span><br>arr1.flat(2)	//<span class="hljs-comment">[1,2,3,4,5,6,7,8]</span><br><br>-------------------------------------------<br>var arr = <span class="hljs-comment">[1,2,3]</span><br>const res = arr.Map(item =&gt; <span class="hljs-comment">[item*2]</span>)	//<span class="hljs-comment">[<span class="hljs-comment">[2]</span>,<span class="hljs-comment">[4]</span>,<span class="hljs-comment">[6]</span>]</span><br>const res1 = arr.flatMap(item =&gt; <span class="hljs-comment">[item*2]</span>)	//<span class="hljs-comment">[2,4,6]</span><br></code></pre></td></tr></table></figure>


<h4 id="es11"><a href="#es11" class="headerlink" title="es11"></a>es11</h4><h5 id="可选链操作符（？-）"><a href="#可选链操作符（？-）" class="headerlink" title="可选链操作符（？.）"></a>可选链操作符（？.）</h5><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">//先判断<span class="hljs-keyword">user</span>有没有，有就执行，再判断username有没有，继续<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">user</span> = <span class="hljs-keyword">user</span>?.username?.password<br></code></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">function</span> main(config)&#123;<br>	<span class="hljs-regexp">//</span>原始写法<br>	<span class="hljs-regexp">//</span>const dbHost = config &amp;&amp; config.db &amp;&amp; config.db.host<br>	<span class="hljs-regexp">//</span>新写法<br>	const dbHost = config?.db?.host;<br>&#125;<br>main(&#123;<br>	db:&#123;<br>		host:<span class="hljs-string">&#x27;192.168.1.100&#x27;</span><br>	&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<h5 id="动态import"><a href="#动态import" class="headerlink" title="动态import"></a>动态import</h5><p>实现按需加载</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./hello.js&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">module</span> =&gt;</span> &#123;<br>		<span class="hljs-built_in">module</span>.hello()<br>	&#125;)<br>&#125;<br><br>---------------------<br>hello.js<br><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-title">hello</span>(<span class="hljs-params"></span>)</span>&#123;<br>	alert(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="BigInt-大整形"><a href="#BigInt-大整形" class="headerlink" title="BigInt(大整形)"></a>BigInt(大整形)</h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> n = <span class="hljs-number">520n</span> <span class="hljs-comment">//创建一个大整形</span><br>console.log(typeof(n))	<span class="hljs-comment">//bigint</span><br>---------------------------------<br><br><span class="hljs-keyword">let</span> n = <span class="hljs-number">123</span>;<br><span class="hljs-constructor">BigInt(<span class="hljs-params">n</span>)</span>		<span class="hljs-comment">//123n</span><br><br>---------------------------------<br><br>大整形运算<br><span class="hljs-keyword">let</span> max = Number.MAX_SAFE_INTEGER<br><br><span class="hljs-constructor">BigInt(<span class="hljs-params">max</span>)</span>+<span class="hljs-constructor">BigInt(1)</span>	<span class="hljs-comment">//都是大整形才能运算</span><br><span class="hljs-constructor">BigInt(<span class="hljs-params">max</span>)</span>+<span class="hljs-constructor">BigInt(2)</span><br></code></pre></td></tr></table></figure>
<h5 id="globalThis"><a href="#globalThis" class="headerlink" title="globalThis"></a>globalThis</h5><p>全局this，始终指向全局对象(每个语言全局对象不一样)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">console.<span class="hljs-built_in">log</span>(globalThis)		<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-keyword">window</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端(尚硅谷)</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>尚硅谷-JAVA</title>
    <url>/2022/07/08/%E5%B0%9A%E7%A1%85%E8%B0%B7-JAVA/</url>
    <content><![CDATA[<h3 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h3><h6 id="cmd基础命令（Windows）"><a href="#cmd基础命令（Windows）" class="headerlink" title="cmd基础命令（Windows）"></a>cmd基础命令（Windows）</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">dir 列出当前目录下的文件与文件夹<br>md 文件夹名 创建文件夹<br>rd 文件夹名 删除目录<br>cd 目录名 		进入指定目录<br>cd ..		返回上一级目录<br>cd/			退回到根目录<br><br>del 文件名		删除文件 <br>del *.txt 删除.txt文件结尾的文件<br>del 文件夹名 删除该文件夹下的所有文件<br><br><span class="hljs-keyword">exit</span> 		退出dos命令行<br><br>Java -version 在安装目录下，查看java版本<br></code></pre></td></tr></table></figure>
<h6 id="java语言环境搭建"><a href="#java语言环境搭建" class="headerlink" title="java语言环境搭建"></a><code>java</code>语言环境搭建</h6><p><code>JDk</code>:包含了开发工具也包括了JRE</p>
<p><code>JRE</code>:<code>java</code>运行环境，他包括了虚拟机<code>(JVM)</code></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">JDK</span>=JRE+JVM	开发环境+运行环境<br></code></pre></td></tr></table></figure>
<p>配置<code>path</code>(让<code>java</code>命令无论在哪都能运行)</p>
<p>高级系统设置&gt; 环境变量&gt;新建[变量名：<code>JAVA_HOME</code>，变量值：安装目录(有<code>bin</code>的那个目录)]&gt;在<code>path</code>里面添加一个<code>%JAVA_HOME%\bin</code>&gt;确定</p>
<h6 id="打印hello-world"><a href="#打印hello-world" class="headerlink" title="打印hello world"></a>打印<code>hello world</code></h6><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">java</span>&#123;</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br>		System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="文档注释（java特有的）"><a href="#文档注释（java特有的）" class="headerlink" title="文档注释（java特有的）"></a>文档注释（<code>java</code>特有的）</h6><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/**</span><br><span class="hljs-comment">这是文档注释 会被jdk提供的javadoc所解析</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>
<h6 id="pulic声明"><a href="#pulic声明" class="headerlink" title="pulic声明"></a><code>pulic</code>声明</h6><p>在一个<code>java</code>原文件中可以声明多个<code>class</code>，但是，只能有一个类声明为<code>public</code>,而且声明的类名与源文件名相同</p>
<p>程序的入口是<code>main()</code>方法，格式是固定的</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//hello.java</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">hello</span>&#123;</span>  <span class="hljs-comment">//只有都为hello才能加public</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;		<span class="hljs-comment">//入口 main</span><br>		System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;hello world&quot;</span>);		<span class="hljs-comment">//输出并换行</span><br>		System.out.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>);		<span class="hljs-comment">//只输出，不换行</span><br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h6 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h6><p>包名：都小写 <code>xxyy</code></p>
<p>类名 接口名：大驼峰命名<code>XxxYyy</code></p>
<p>变量名、方法名：小驼峰命名<code>xxYyyZzz</code></p>
<p>常量名：都大写，下划线连接<code>XXX_YYY</code></p>
<h6 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h6><p>先声明并赋值再使用</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//数据类型 变量名=变量值</span><br><br><span class="hljs-built_in">int</span> age = <span class="hljs-number">12</span><br><br><span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span>;<br><span class="hljs-keyword">sum</span> = <span class="hljs-number">1001</span><br></code></pre></td></tr></table></figure>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><figure class="highlight d"><table><tr><td class="code"><pre><code class="hljs d">基本类型：<br>	数值：<br>		整数：<span class="hljs-keyword">byte</span>,<span class="hljs-built_in">short</span>,<span class="hljs-keyword">int</span>,<span class="hljs-built_in">long</span><br>		浮点：<span class="hljs-built_in">float</span>,<span class="hljs-built_in">double</span><br>	字符：<span class="hljs-built_in">char</span><br>	布尔：boolean<br>引用类型：<br>	类：<span class="hljs-keyword">class</span> <span class="hljs-built_in">string</span>是一个类<br>	接口：<span class="hljs-keyword">interface</span><br>	数组：[]<br></code></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用存储空间</th>
<th align="center">表数范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">1字节= 8bit位</td>
<td align="center">-128~127</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">2字节</td>
<td align="center">-2^15~2^15-1</td>
</tr>
<tr>
<td align="center">int（最常使用）</td>
<td align="center">4字节</td>
<td align="center">-2^31~2^31-1(约21亿)</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">8字节</td>
<td align="center">-2^63~2^63-1</td>
</tr>
<tr>
<td align="center">单精度float</td>
<td align="center">4字节</td>
<td align="center">-3.403E38~3.403E38</td>
</tr>
<tr>
<td align="center">双精度double(常使用)</td>
<td align="center">8字节</td>
<td align="center">-1.798E308~1.798E308</td>
</tr>
<tr>
<td align="center">char(字符型)</td>
<td align="center">2字节</td>
<td align="center">char a = ‘中’  //只能一个字符,单引号</td>
</tr>
<tr>
<td align="center">boolean(布尔值)</td>
<td align="center"></td>
<td align="center">boolean = true 常用于条件判断</td>
</tr>
</tbody></table>
<p><code>long</code>定义时要加L</p>
<p><code>float</code>定义时要加F或f</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">long</span> aa = <span class="hljs-number">1342334</span>L<br><span class="hljs-attribute">float</span> bb = <span class="hljs-number">8958778</span>F<br></code></pre></td></tr></table></figure>
<h6 id="运算规则"><a href="#运算规则" class="headerlink" title="运算规则"></a>运算规则</h6><p>1.自动类型提升</p>
<p>当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为 容量大的数据类型</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">byte</span>、<span class="hljs-keyword">char</span>、<span class="hljs-keyword">short</span>&gt;<span class="hljs-keyword">int</span>&gt;<span class="hljs-keyword">long</span>&gt;<span class="hljs-keyword">float</span>&gt;<span class="hljs-keyword">double</span><br><br><span class="hljs-comment">//byte、char、short相互运算时，都为int类型</span><br></code></pre></td></tr></table></figure>
<p>2.强制类型转换</p>
<p>强制类型转换，可能造成精度缺失</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//有精度损失</span><br><span class="hljs-keyword">double</span> d1 = <span class="hljs-number">12.9</span><br><span class="hljs-keyword">int</span> i1 = (<span class="hljs-keyword">int</span>)d1 <span class="hljs-comment">//截断操作 // 12</span><br><br><span class="hljs-keyword">int</span> i2 = <span class="hljs-number">128</span><br><span class="hljs-keyword">byte</span> b = (<span class="hljs-keyword">byte</span>)i2 <span class="hljs-comment">// -127</span><br><br><span class="hljs-comment">//没有精度损失</span><br><span class="hljs-keyword">long</span> l1 = <span class="hljs-number">123</span><br><span class="hljs-keyword">short</span> s2 = (<span class="hljs-keyword">short</span>)l1	<span class="hljs-comment">//123</span><br><br></code></pre></td></tr></table></figure>
<h6 id="string"><a href="#string" class="headerlink" title="string"></a><code>string</code></h6><p><code>string</code>属于引用数据类型，翻译为字符串</p>
<p>声明时用一对引号<code>&quot;&quot;</code></p>
<p><code>string</code>可以和8种基本数据类型变量做运算且只能做连接运算<code>+</code></p>
<p>运算的结果也是<code>string</code>类型</p>
<p><code>string </code>转换成数字(不能强制转换)</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><code class="hljs processing">string 转换成数字<br><span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;123&#x27;</span> <br><span class="hljs-built_in">int</span> num = Integer.parseInt(<span class="hljs-built_in">str</span>)  <span class="hljs-comment">//123 正确</span><br><br><span class="hljs-built_in">int</span> num = (<span class="hljs-built_in">int</span>)<span class="hljs-built_in">str</span> <span class="hljs-comment">//报错</span><br></code></pre></td></tr></table></figure>


<h6 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h6><table>
<thead>
<tr>
<th align="center">转义字符</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\b</td>
<td align="center">退格符</td>
</tr>
<tr>
<td align="center">\ n</td>
<td align="center">换行符</td>
</tr>
<tr>
<td align="center">\r</td>
<td align="center">回车符</td>
</tr>
<tr>
<td align="center">\t</td>
<td align="center">制表符</td>
</tr>
<tr>
<td align="center">\“</td>
<td align="center">双引号</td>
</tr>
<tr>
<td align="center">\‘</td>
<td align="center">单引号</td>
</tr>
<tr>
<td align="center">\\</td>
<td align="center">反斜线</td>
</tr>
</tbody></table>
<h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>算术运算符</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">+</span> <span class="hljs-literal">-</span> <span class="hljs-comment">*</span> <span class="hljs-comment">/</span> <span class="hljs-comment">%</span><br><span class="hljs-comment"></span>++ -- <br></code></pre></td></tr></table></figure>
<p>赋值运算符</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">=  +=  -=   *=  /=  %=</span><br></code></pre></td></tr></table></figure>
<p>比较运算符</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">== != &lt; &gt; &lt;= &gt;= instanceof</span><br><span class="hljs-comment">//比较结果都是boolean类型</span><br></code></pre></td></tr></table></figure>
<p>逻辑运算符</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">&amp; 逻辑与 &amp;&amp; 短路与</span><br><span class="hljs-string">| 逻辑或 || 短路或</span><br>!逻辑非 ^逻辑异或（两边是否相同）<br></code></pre></td></tr></table></figure>
<p>位运算符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">&lt;&lt; 左移  在一定范围内，每移动i位，相当于 *2^i 2&lt;&lt;<span class="hljs-string">3 等于 2*2^3</span> = 16<br>&gt;&gt; 右移	在一定范围内，每移动i位，相当于 /2^i<br>&gt;&gt;&gt; 无符号右移 最高位都拿0来补<br>&amp; 与运算<br>| 或运算<br>^ 异或运算<br>~ 取反运算<br></code></pre></td></tr></table></figure>
<p>三元运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">（条件表达式）？表达式1：表达式2<br>条件为真时，执行表达式1<br>条件为假时，执行表达式2<br></code></pre></td></tr></table></figure>
<h6 id="交换两个变量的方式"><a href="#交换两个变量的方式" class="headerlink" title="交换两个变量的方式"></a>交换两个变量的方式</h6><figure class="highlight nix"><table><tr><td class="code"><pre><code class="hljs nix">//推荐的方法<br>int <span class="hljs-attr">temp</span> = num1<br><span class="hljs-attr">num1</span> = num2<br><span class="hljs-attr">num2</span> = temp<br></code></pre></td></tr></table></figure>
<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">//不用定义临时变量，相加可能超出范围，只适用于数字</span><br><span class="hljs-symbol">num1</span> = <span class="hljs-symbol">num1</span>+<span class="hljs-symbol">num2</span><br><span class="hljs-symbol">num2</span> = <span class="hljs-symbol">num1</span> - <span class="hljs-symbol">num2</span><br><span class="hljs-symbol">num1</span> = <span class="hljs-symbol">num1</span> - <span class="hljs-symbol">num2</span><br></code></pre></td></tr></table></figure>
<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><h6 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h6><p><code>if else</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">()</span></span>&#123;<br><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>()&#123;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="键盘输入"><a href="#键盘输入" class="headerlink" title="键盘输入"></a>键盘输入</h6><p>1.导包<code>import java.util.Scanner</code></p>
<p>2.<code>Scanner</code>的实例化：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">Scanner scan = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Scanner(System.<span class="hljs-params">in</span>)</span>;<br></code></pre></td></tr></table></figure>
<p>3.调用Scanner类的相关方法，来获取指定类型的变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScannerTest</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>		Scanner scan = <span class="hljs-keyword">new</span> Scanner(System.in);<br>		<span class="hljs-keyword">int</span> num = scan.nextInt();<br>		System.outprintln(num)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>相关方法</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">String</span> name = scan.next()	<span class="hljs-comment">//string类型</span><br><span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span> = scan.nextInt();	<span class="hljs-comment">//int类型</span><br><span class="hljs-built_in">double</span> <span class="hljs-built_in">num</span> = scan.nextDouble();	<span class="hljs-comment">//double类型</span><br>boolean <span class="hljs-built_in">num</span> = scan.nextBoolean();	<span class="hljs-comment">//boolean类型</span><br><br>除了<span class="hljs-built_in">String</span>是next(),其他都是nextXxx()<br></code></pre></td></tr></table></figure>
<h6 id="获取索引为0的字符"><a href="#获取索引为0的字符" class="headerlink" title="获取索引为0的字符"></a>获取索引为0的字符</h6><figure class="highlight processing"><table><tr><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">String</span> gender = <span class="hljs-string">&#x27;asds&#x27;</span><br><span class="hljs-built_in">char</span> genderChar = gender.charAt(<span class="hljs-number">0</span>) <span class="hljs-comment">//a</span><br></code></pre></td></tr></table></figure>
<h6 id="switch"><a href="#switch" class="headerlink" title="switch"></a><code>switch</code></h6><p><code>switch</code>结构中的表达式，只能是如下的6种类型</p>
<p><code>byte,short,char,int,</code></p>
<p><code>枚举类型(JDK5.0新增),string类型(JDK7.0新增)</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">swich</span>(<span class="hljs-params">表达式</span>)</span>&#123;<br>	<span class="hljs-keyword">case</span> 常量<span class="hljs-number">1</span>：<br>		执行语句<span class="hljs-number">1</span><br>		<span class="hljs-keyword">break</span>; <span class="hljs-comment">//跳出swich</span><br>	<span class="hljs-keyword">case</span> 常量<span class="hljs-number">2</span>：<br>		执行语句<span class="hljs-number">2</span><br>		<span class="hljs-keyword">break</span><br>	<span class="hljs-keyword">default</span>:&#123;<br>		以上都没有匹配上就执行这一句<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a><code>for</code>循环</h6><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(初始化条件;循环条件;迭代条件)</span></span>&#123;<br>	循环体<br>&#125;<br><br><span class="hljs-comment">//例：</span><br><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(int i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">5</span> ; i++)</span></span>&#123;<br>	System<span class="hljs-selector-class">.out</span><span class="hljs-selector-class">.println</span>(i)<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a><code>while</code>循环</h6><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(条件)</span></span>&#123;<br>	循环语句<br>&#125;<br>例<br><br>int <span class="hljs-selector-tag">i</span> = <span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(i&lt;=<span class="hljs-number">5</span>)</span></span>&#123;<br>	i++<br>&#125;<br></code></pre></td></tr></table></figure>
<p><code>do while</code>循环</p>
<p>会先执行一下循环语句，在判断条件</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode"><span class="hljs-keyword">do</span>&#123;<br>	循环语句<br>&#125;<span class="hljs-keyword">while</span><span class="hljs-comment">(条件)</span><br></code></pre></td></tr></table></figure>
<h6 id="当前时间的毫秒数"><a href="#当前时间的毫秒数" class="headerlink" title="当前时间的毫秒数"></a>当前时间的毫秒数</h6><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">long</span> end = System.curentTimeMillis() //<span class="hljs-number">1970</span>-<span class="hljs-number">1</span>-<span class="hljs-number">1</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> 的现在的毫秒数<br></code></pre></td></tr></table></figure>
<h6 id="结束指定循环"><a href="#结束指定循环" class="headerlink" title="结束指定循环"></a>结束指定循环</h6><p>正常情况下只会跳出离自己最近的循环</p>
<p>加上指定标识可以指定跳出循环</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">lable:<span class="hljs-keyword">for</span>(int i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>	<span class="hljs-keyword">for</span>(int j+<span class="hljs-number">1</span>;j&lt;=<span class="hljs-number">4</span>;j++)&#123;<br>		<span class="hljs-keyword">break</span> lable <span class="hljs-regexp">//</span>跳出第一个<span class="hljs-keyword">for</span>循环 <span class="hljs-keyword">break</span>与<span class="hljs-keyword">continue</span>都可以用<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组的理解：<code>Array</code>是多个相同类型数据按一定的顺序排列的集合，并使用一个名字命名</p>
<p>数组属于引用类型</p>
<p>数组的元素可以是引用类型也可以是基本类型</p>
<p>数组的<strong>长度</strong>一旦确定<strong>不能修改</strong></p>
<p>数组的分类：</p>
<p>​    ①一维数组、二维数组</p>
<p>​    ②按照数组元素的类型：基本类型元素的数组，引用数据类型元素的数组</p>
<h5 id="一维数组数组的使用"><a href="#一维数组数组的使用" class="headerlink" title="一维数组数组的使用"></a>一维数组数组的使用</h5><h6 id="声明和初始化"><a href="#声明和初始化" class="headerlink" title="声明和初始化"></a>声明和初始化</h6><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayTest</span>&#123;</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br>		<span class="hljs-comment">//静态初始化:初始化与元素的赋值同时进行</span><br>		<span class="hljs-keyword">int</span>[] ids = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">100</span>,<span class="hljs-number">200</span>,<span class="hljs-number">300</span>,<span class="hljs-number">400</span>&#125;;<br>		<span class="hljs-comment">//动态初始化：初始化与元素的赋值分开进行</span><br>		<span class="hljs-keyword">String</span>[] names = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>[<span class="hljs-number">5</span>];<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="如何调用数组的指定位置的元素"><a href="#如何调用数组的指定位置的元素" class="headerlink" title="如何调用数组的指定位置的元素"></a>如何调用数组的指定位置的元素</h6><p>角标从0开始</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">names</span>[<span class="hljs-number">0</span>] = &#x27;<span class="hljs-number">11</span>&#x27;<br><span class="hljs-attribute">names</span>[<span class="hljs-number">1</span>] = &#x27;<span class="hljs-number">22</span>&#x27;<br><span class="hljs-attribute">names</span>[<span class="hljs-number">2</span>] = &#x27;<span class="hljs-number">33</span>&#x27;<br></code></pre></td></tr></table></figure>
<h6 id="如何获取数组的长度"><a href="#如何获取数组的长度" class="headerlink" title="如何获取数组的长度"></a>如何获取数组的长度</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">names.length  <span class="hljs-regexp">//</span>数组的长度<br></code></pre></td></tr></table></figure>
<h6 id="如何遍历数组"><a href="#如何遍历数组" class="headerlink" title="如何遍历数组"></a>如何遍历数组</h6><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;names.length; i++)&#123;<br>	<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.print<span class="hljs-constructor">Ln(<span class="hljs-params">names</span>.<span class="hljs-params">length</span>[<span class="hljs-params">i</span>   ])</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="数组元素的默认初始化值"><a href="#数组元素的默认初始化值" class="headerlink" title="数组元素的默认初始化值"></a>数组元素的默认初始化值</h6><figure class="highlight aspectj"><table><tr><td class="code"><pre><code class="hljs aspectj">整型：<span class="hljs-number">0</span>,<br>浮点型：<span class="hljs-number">0.0</span>,<br><span class="hljs-keyword">char</span>型：<span class="hljs-number">0</span>或<span class="hljs-string">&#x27;\u0000&#x27;</span>,<br><span class="hljs-keyword">boolean</span>型：<span class="hljs-keyword">false</span>，<br>引用类型：<span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure>
<h6 id="数组的内存解析"><a href="#数组的内存解析" class="headerlink" title="数组的内存解析"></a>数组的内存解析</h6><figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe">内存中包含了栈、堆、方法区<br><br>栈中存放局部变量（方法中的变量）<br><br>堆中存放<span class="hljs-keyword">new</span><span class="hljs-type"></span>出来的结构（数组，对象）<br><br>方法区中有常量池、静态域等<br></code></pre></td></tr></table></figure>
<h5 id="二维数组数组的使用"><a href="#二维数组数组的使用" class="headerlink" title="二维数组数组的使用"></a>二维数组数组的使用</h5><h6 id="声明和初始化-1"><a href="#声明和初始化-1" class="headerlink" title="声明和初始化"></a>声明和初始化</h6><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayTest</span>&#123;</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br>		<span class="hljs-comment">//静态初始化:初始化与元素的赋值同时进行</span><br>		<span class="hljs-keyword">int</span>[] ids = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;&#125;;<br>		<span class="hljs-comment">//动态初始化1：初始化与元素的赋值分开进行</span><br>		<span class="hljs-keyword">String</span>[][] names = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br>		<span class="hljs-comment">//动态初始化2：初始化与元素的赋值分开进行</span><br>		<span class="hljs-keyword">String</span>[][] names = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>[<span class="hljs-number">3</span>][];<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="如何调用数组的指定位置的元素-1"><a href="#如何调用数组的指定位置的元素-1" class="headerlink" title="如何调用数组的指定位置的元素"></a>如何调用数组的指定位置的元素</h6><p>角标从0开始</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">names</span>[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = &#x27;<span class="hljs-number">11</span>&#x27;<br></code></pre></td></tr></table></figure>
<h6 id="如何获取数组的长度-1"><a href="#如何获取数组的长度-1" class="headerlink" title="如何获取数组的长度"></a>如何获取数组的长度</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">names.length  <span class="hljs-regexp">//</span>数组的长度<br></code></pre></td></tr></table></figure>
<h6 id="如何遍历二维数组"><a href="#如何遍历二维数组" class="headerlink" title="如何遍历二维数组"></a>如何遍历二维数组</h6><p>嵌套<code>for</code>循环</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;names.length; i++)&#123;<br>	<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.print<span class="hljs-constructor">Ln(<span class="hljs-params">names</span>.<span class="hljs-params">length</span>[<span class="hljs-params">i</span>   ])</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="二维数组元素的默认初始化值"><a href="#二维数组元素的默认初始化值" class="headerlink" title="二维数组元素的默认初始化值"></a>二维数组元素的默认初始化值</h6><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">arr</span><span class="hljs-selector-attr">[0]</span>  <span class="hljs-comment">//是一个地址</span><br><span class="hljs-selector-tag">arr</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-attr">[0]</span> <span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure>
<h6 id="Arrays工具类"><a href="#Arrays工具类" class="headerlink" title="Arrays工具类"></a><code>Arrays</code>工具类</h6><p>常用方法</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><code class="hljs processing"><span class="hljs-built_in">boolean</span> equals(<span class="hljs-built_in">int</span>[] a,<span class="hljs-built_in">int</span>[] b) <span class="hljs-comment">//判断两个数组是否相等</span><br><span class="hljs-keyword">String</span> toString(<span class="hljs-built_in">int</span>[] a)		<span class="hljs-comment">//输出数组信息</span><br><span class="hljs-keyword">void</span> <span class="hljs-built_in">fill</span>(<span class="hljs-built_in">int</span>[] a,<span class="hljs-built_in">int</span> val)		<span class="hljs-comment">//将指定值填充到数组中</span><br><span class="hljs-keyword">void</span> <span class="hljs-built_in">sort</span>(<span class="hljs-built_in">int</span>[] a)				<span class="hljs-comment">//对数组进行排序</span><br><span class="hljs-built_in">int</span> binarySearch(<span class="hljs-built_in">int</span>[] a,<span class="hljs-built_in">int</span> <span class="hljs-built_in">key</span>)<span class="hljs-comment">//对排序后的数组进行二分法检索指定的值</span><br></code></pre></td></tr></table></figure>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span>&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>&#125;<br>stou(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">arr</span>)</span>)<br></code></pre></td></tr></table></figure>
<h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><p>三条主线</p>
<p>1.<code>java</code>类及类的成员：属性、方法、构造器；代码块、内部类</p>
<p>2.面向对象的三大特征：封装性、继承性、多态性、（抽象性）</p>
<p>3.其他关键字：<code>this/super/static/final/abstract/interface/package/import</code></p>
<h6 id="面向过程："><a href="#面向过程：" class="headerlink" title="面向过程："></a>面向过程：</h6><p>强调的是功能行为，以函数为最小单位，考虑怎么做。</p>
<h6 id="面向对象："><a href="#面向对象：" class="headerlink" title="面向对象："></a>面向对象：</h6><p>强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</p>
<h5 id="类和对象的使用"><a href="#类和对象的使用" class="headerlink" title="类和对象的使用"></a>类和对象的使用</h5><h6 id="1-创建类，设计类的成员"><a href="#1-创建类，设计类的成员" class="headerlink" title="1.创建类，设计类的成员"></a>1.创建类，设计类的成员</h6><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;</span><br>	<span class="hljs-comment">//属性</span><br>	<span class="hljs-keyword">String</span> name;<br>	<span class="hljs-keyword">int</span> age = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">boolean</span> isMale;<br>	<br>	<span class="hljs-comment">//方法</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>		System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span></span>&#123;<br>		System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">public</span> viod <span class="hljs-title">talk</span><span class="hljs-params">(<span class="hljs-keyword">String</span> language)</span></span>&#123;<br>		System.out.pringln(<span class="hljs-string">&quot;使用&quot;</span>+language+<span class="hljs-string">&quot;说话&quot;</span>);<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="2-创建类的对象-创建实例"><a href="#2-创建类的对象-创建实例" class="headerlink" title="2.创建类的对象(创建实例)"></a>2.创建类的对象(创建实例)</h6><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonTest</span> </span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span>&#123;<br>		<span class="hljs-comment">//创建Person类的对象（实例）</span><br>		Person p1 = <span class="hljs-keyword">new</span> Person();<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="3-通过“对象-属性”或“对象-方法”调用对象的结构"><a href="#3-通过“对象-属性”或“对象-方法”调用对象的结构" class="headerlink" title="3.通过“对象.属性”或“对象.方法”调用对象的结构"></a>3.通过“对象.属性”或“对象.方法”调用对象的结构</h6><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonTest</span> </span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span>&#123;<br>		<span class="hljs-comment">//创建Person类的对象（实例）</span><br>		Person p1 = <span class="hljs-keyword">new</span> Person();<br>		<span class="hljs-comment">//调用对象的结构</span><br>		p1.name = <span class="hljs-string">&quot;tom&quot;</span>;<br>		p1.eat();<br>		p1.sleep();<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="内存解析"><a href="#内存解析" class="headerlink" title="内存解析"></a>内存解析</h6><p>堆：存放对象实例</p>
<p>栈：存储局部变量</p>
<p>方法区：存储类信息、常量、静态变量 </p>
<h5 id="属性-成员变量-与局部变量"><a href="#属性-成员变量-与局部变量" class="headerlink" title="属性(成员变量)与局部变量"></a>属性(成员变量)与局部变量</h5><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">相同：<br><br>定义变量的格式<br>先声明，后使用<br>变量有其对应的作用域<br><br>不相同：<br>在类中声明的位置不同（属性：直接定义在一对&#123;&#125;内，局部变量：声明在方法内，方法形参、代码块内、构造器形参、构造器内部的变量）<br>关于权限修饰符的不同（属性：可以在声明属性时，指明其权限，使用权限修饰符。常用的权限修饰符：`<span class="hljs-keyword">private</span><span class="hljs-regexp">/public/</span>缺省/<span class="hljs-keyword">protected</span>`。局部变量：不可以使用权限修饰符）<br>默认初始化值的不同（属性：类的属性，根据其类型，都有默认初始化值【整型：`<span class="hljs-keyword">byte</span><span class="hljs-regexp">/short/i</span>nt<span class="hljs-regexp">/long:0`】,浮点型：【`float/</span><span class="hljs-keyword">double</span>:<span class="hljs-number">0.0</span>`】,字符型：【`<span class="hljs-keyword">char</span>:<span class="hljs-number">0</span>或‘\u000’`】,布尔型：【`<span class="hljs-keyword">boolean</span>:<span class="hljs-keyword">false</span>`】,引用数据类型【类、数组、接口】:`<span class="hljs-keyword">null</span>`，局部变量：没有默认初始化值，意味着在调用变量之前一定要赋值，形参在调用时赋值即可。）<br>在内存中加载的位置不同（属性：加载到堆空间中（非`<span class="hljs-keyword">static</span>`）,局部变量：加载到栈空间）<br></code></pre></td></tr></table></figure>
<h5 id="方法的分类"><a href="#方法的分类" class="headerlink" title="方法的分类"></a>方法的分类</h5><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">无返回值</th>
<th align="center">有返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">无形参</td>
<td align="center">void 方法名(){}</td>
<td align="center">返回值的类型 方法名(){}</td>
</tr>
<tr>
<td align="center">有形参</td>
<td align="center">void 方法名(形参列表){}</td>
<td align="center">返回值的类型 方法名(形参列表){}</td>
</tr>
</tbody></table>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">eat</span>(<span class="hljs-params"></span>)</span>&#123;&#125; <span class="hljs-comment">//没有返回值</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span>&#123;&#125; <span class="hljs-comment">//返回一个字符类型</span><br></code></pre></td></tr></table></figure>
<h5 id="方法的声明"><a href="#方法的声明" class="headerlink" title="方法的声明"></a>方法的声明</h5><p>格式：<code>权限修饰符 返回值类型 方法名(形参列表)&#123;方法体&#125;</code></p>
<p><code>static/final/abstract</code>也是用于修饰的(不是必要的)</p>
<p>关于权限修饰符<code>private/public/缺省/protected</code></p>
<p>有返回值则必须返回一个相应的值</p>
<p>方法里面不能在定义方法</p>
<h5 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h5><figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">new</span> <span class="hljs-type">Person</span>().hello()	<span class="hljs-comment">//直接调用hello方法</span><br></code></pre></td></tr></table></figure>
<h5 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h5><p>定义：在同一个类中，允许存在一个以上的同名方法，只要他们的参数个数或者参数类型不同即可；</p>
<h5 id="可变形参"><a href="#可变形参" class="headerlink" title="可变形参"></a>可变形参</h5><p>可变形参必须放到最后</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span>&#123;<br>	test.show(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>	test.show(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;sad&#x27;</span>); <span class="hljs-comment">//都会调用下面的show方法</span><br>	test.show();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> ...strs</span>)</span>&#123;<br>	System.out.println(<span class="hljs-string">&quot;调用了&quot;</span>)<br>	<span class="hljs-comment">//用for循环可以获取strs中的参数</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h5><p>值传递机制</p>
<p>如果变量是基本数据类型，此时赋值的是变量所保存的数据值</p>
<p>如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值</p>
<h5 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h5><table>
<thead>
<tr>
<th align="center">修饰符</th>
<th align="center">类内部</th>
<th align="center">同一个包</th>
<th align="center">不同包的子类</th>
<th align="center">同一个工程</th>
</tr>
</thead>
<tbody><tr>
<td align="center">private</td>
<td align="center">yes</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">（缺省）</td>
<td align="center">yes</td>
<td align="center">yes</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">protected</td>
<td align="center">yes</td>
<td align="center">yes</td>
<td align="center">yes</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">public</td>
<td align="center">yes</td>
<td align="center">yes</td>
<td align="center">yes</td>
<td align="center">yes</td>
</tr>
</tbody></table>
<p>1.可以修饰类及类的内部结构：属性，方法，构造器，内部类</p>
<p>2.对于<code>class</code>类的权限修饰只可以用<code>public</code>和<code>default(缺省)</code></p>
<p><code>public</code>可以在任意地方被访问</p>
<p><code>default</code>类只可以被同一个包内部的类访问</p>
<h6 id="private私有的"><a href="#private私有的" class="headerlink" title="private私有的"></a><code>private</code>私有的</h6><p>修饰后只能由类中自己的方法调用，在类外面不能调用。</p>
<p>修饰后应该写一个修改(<code>set</code>)和读取(<code>get</code>)的公共方法</p>
<h5 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h5><p>作用：创建对象，初始化对象信息</p>
<p>说明：</p>
<p>1.如果没有显式的定义类的构造器的话，则系统默认提供一个空参的构造器</p>
<p>2.定义构造器的格式：<code>权限修饰符 类名(形参列表)&#123;&#125;</code></p>
<p>3.构造器是可以定义多个构造器，称为构造器重载</p>
<p>4.一旦定义了类的构造器，系统则不提供空的构造器了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonTest</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span>&#123;<br>		<span class="hljs-comment">//创建类的对象：new + 构造器</span><br>		Person p = <span class="hljs-keyword">new</span> Person()<br>	&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>	<span class="hljs-comment">//构造器</span><br>	<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>        System.out.println(<span class="hljs-string">&#x27;构造器运行了&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="javaBean"><a href="#javaBean" class="headerlink" title="javaBean"></a><code>javaBean</code></h5><p><code>java</code>写成的可重用的组件</p>
<p>符合如下标准</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript">类是公共的<br>有一个无参的公共的构造器<br>有属性，且有对应的<span class="hljs-keyword">get</span>,<span class="hljs-keyword">set</span>方法<br></code></pre></td></tr></table></figure>
<h5 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a><code>this</code>关键字</h5><p>代表当前类</p>
<h6 id="调用构造器"><a href="#调用构造器" class="headerlink" title="调用构造器"></a>调用构造器</h6><p>可以使用<code>this(形参列表)</code>的方式调用本类中的其他构造器，</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>&#123;<br>	<span class="hljs-comment">//构造器</span><br>	<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"></span>)</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&#x27;构造器1运行了&#x27;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age</span>)</span>&#123;<br>    	<span class="hljs-keyword">this</span>();	调用构造器<span class="hljs-number">1</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&#x27;构造器2运行了&#x27;</span>)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> age,String name</span>)</span>&#123;<br>    	<span class="hljs-keyword">this</span>(age);		<span class="hljs-comment">//调用构造器2</span><br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&#x27;构造器3运行了&#x27;</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="package关键字"><a href="#package关键字" class="headerlink" title="package关键字"></a><code>package</code>关键字</h5><p>为了更好的管理项目中的类，提供包的概念。</p>
<p>使用<code>package</code>声明类或接口所属的包，声明在源文件的首行</p>
<p>属于标识符，遵循标识符的命名规则</p>
<p>每“<code>.</code>”一次代表一层文件目录</p>
<h5 id="import关键字"><a href="#import关键字" class="headerlink" title="import关键字"></a><code>import</code>关键字</h5><figure class="highlight elm"><table><tr><td class="code"><pre><code class="hljs elm"><span class="hljs-number">1.</span>在源文件中使用<span class="hljs-keyword">import</span>显式的导入指定包下的类或接口2.声明在包的声明和类的声明之间。<br><span class="hljs-number">3.</span>如果需要导入多个类或接口，那么就并列显式多个<span class="hljs-keyword">import</span>语句即可<br><span class="hljs-number">4.</span>举例:可以使用java.util.*的方式，一次性导入util包下所有的类或接口。<br><span class="hljs-number">5.</span>如果导入的类或接口是java.lang包下的，或者是当前包下的，则可以省略此<span class="hljs-keyword">import</span>语句。<br><span class="hljs-number">6.</span>如果在代码中使用不同包下的同名的类。那么就需要使用类的全类名的方式指明调用的是哪个类。<br><span class="hljs-number">7.</span>如果已经导入java.a包下的类。那么如果需要使用a包的子包下的类的话，仍然需要导入。<br><span class="hljs-number">8.</span> <span class="hljs-keyword">import</span> static组合的使用:调用指定类或接口下的静态的属性或方法<br></code></pre></td></tr></table></figure>
<h5 id="继承（extends）"><a href="#继承（extends）" class="headerlink" title="继承（extends）"></a>继承（<code>extends</code>）</h5><p>好处：</p>
<p>减少了代码的冗余，提高了代码的复用性</p>
<p>便于功能的扩展</p>
<p>位置后多态性的使用，提供了前提</p>
<p>格式：</p>
<p><code>class A extends B&#123;&#125;</code></p>
<p>​    A:子类/派生类/<code>subclass</code></p>
<p>​    B:父类/超类/基类/<code>superclass</code></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>	<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">重写的规定:<br>方法的声明:权限修饰符返回值类型方法名(形参列表) throws异常的类型&#123;<br>//方法体<br>&#125;<br>约定俗称:子类中的叫重写的方法，父类中的叫被重写的方法<br>子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符<br>&gt;特殊情况:子类不能重写父类中声明为private权限的方法返回值类型:<br>&gt;父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void<br>&gt;父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类<br>&gt;父类被重写的方法的返回值类型是基本数据类型(比如:double)，则子类重写的方法的返回值类型必须是相F子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型（具体放到异常处理时候讲)<br><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-strong">**</span><br><span class="hljs-strong">子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写），要么都声明为static的。</span><br><span class="hljs-strong"></span><br></code></pre></td></tr></table></figure>
<h5 id="super"><a href="#super" class="headerlink" title="super"></a>super</h5><p>使用super可以调用父类里的属性和方法</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">super</span>.父类属性<br><span class="hljs-keyword">super</span>.父类方法   <span class="hljs-comment">//通常省略super.</span><br><br><span class="hljs-comment">//当子类与父类有重名属性时</span><br>子类用 <span class="hljs-keyword">this</span>.属性<br>父类用 <span class="hljs-keyword">super</span>.属性<br></code></pre></td></tr></table></figure>
<p>调用父类的构造器</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss">super(name,age) <span class="hljs-comment">//参数须要与夫类构造器相同</span><br><br>1.我们可以在子类的构造器中使用super(形参列表)的方式,调用父类的构造器<br>2<span class="hljs-selector-class">.super</span>(形参列表)必须在子类构造器的首行<br>3.在类的构造器中，this(形参)与super(形参列表)只能写一个<br>4.没有写this(形参)与super(形参列表)时，默认调用super()<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>尚硅谷-git</title>
    <url>/2022/04/21/%E5%B0%9A%E7%A1%85%E8%B0%B7-git/</url>
    <content><![CDATA[<h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><h6 id="命令行常用命令"><a href="#命令行常用命令" class="headerlink" title="命令行常用命令"></a>命令行常用命令</h6><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span>/<span class="hljs-keyword">ll</span> 查看目录/隐藏目录也能查看<br><span class="hljs-keyword">cat</span> 查看文件内容<br>touch 创建文件<br><span class="hljs-keyword">vi</span> <span class="hljs-keyword">vi</span>编辑器<br></code></pre></td></tr></table></figure>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">git init	<span class="hljs-regexp">//</span>在目录中初始化仓库<br></code></pre></td></tr></table></figure>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>工作区&gt;暂存区&gt;仓库</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">git add . 	<span class="hljs-regexp">//</span>添加到暂存区<br>git commit -m <span class="hljs-string">&#x27;首次提交&#x27;</span>	<span class="hljs-regexp">//</span>提交到仓库并添加说明<br><br>git status	<span class="hljs-regexp">//</span>查看状态<br>git log	<span class="hljs-regexp">//</span>查看提交记录<br>git reset commitid --hard	<span class="hljs-regexp">//</span>版本回退<br><br>git branch	<span class="hljs-regexp">//</span>查看分支<br>git branch 分支名	<span class="hljs-regexp">//</span>创建分支<br>git checkout -b 分支名	<span class="hljs-regexp">//</span>创建并切换分支<br>git merge 分支名	<span class="hljs-regexp">//</span>分支合并，合并后记得push<br><br>git branch -d 分支名	<span class="hljs-regexp">//</span>删除分支，需要做各种检查<br>git branch -D 分支名	<span class="hljs-regexp">//</span>强制删除，不做检查<br></code></pre></td></tr></table></figure>


<h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p>创建&gt;配置ssh秘钥</p>
<h5 id="创建仓库："><a href="#创建仓库：" class="headerlink" title="创建仓库："></a>创建仓库：</h5><p>就填写仓库名，其他什么都不要选。</p>
<h5 id="配置秘钥："><a href="#配置秘钥：" class="headerlink" title="配置秘钥："></a>配置秘钥：</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript">gitbash命令行执行以下代码<br><br>①生成秘钥，执行后一直回车<br>ssh-keygen -t rsa<br><br>②查看秘钥<br>cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub<br><br>③复制秘钥到码云上ssh私钥验证<br><br>④验证是否配置成功<br>ssh -T git<span class="hljs-meta">@gitee</span>.com<br><br></code></pre></td></tr></table></figure>


<h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><p>添加</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">git remote <span class="hljs-keyword">add</span> origin git<span class="hljs-title">@gitee.com</span>:tanbozhi/git-test.git<br>               设置名字  远程仓库地址(选择ssh地址)<br></code></pre></td></tr></table></figure>
<p>查看</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git remote</span><br></code></pre></td></tr></table></figure>
<p>推送</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">git push origin <span class="hljs-literal">master</span><br>	 前面设置的名字 推送到<span class="hljs-literal">master</span>分支上<br></code></pre></td></tr></table></figure>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">命令：git <span class="hljs-keyword">push</span> [-f] [--<span class="hljs-keyword">set</span>-upstream] [远端名称 [本地分支名][:远端分支名] ]<br>如果远程分支名和本地分支名称相同，则可以只写本地分支<br>git <span class="hljs-keyword">push</span> origin master<br>-f 表示强制覆盖<br>--<span class="hljs-keyword">set</span>-upstream 推送到远端的同时并且建立起和远端分支的关联关系。<br>git <span class="hljs-keyword">push</span> --<span class="hljs-keyword">set</span>-upstream origin master<br>如果当前分支已经和远端分支关联，则可以省略分支名和远端名。<br>git <span class="hljs-keyword">push</span> 将master分支推送到已关联的远端分支<br></code></pre></td></tr></table></figure>
<h4 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">&lt;仓库路径&gt; [本地目录]</span><br></code></pre></td></tr></table></figure>
<h4 id="抓取"><a href="#抓取" class="headerlink" title="抓取"></a>抓取</h4><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi">抓取 命令：git fetch [remote <span class="hljs-keyword">name</span>] [branch <span class="hljs-keyword">name</span>]	<span class="hljs-comment">//</span><br>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并<br>如果不指定远端名称(remote <span class="hljs-keyword">name</span>)和分支名(branch <span class="hljs-keyword">name</span>)，则抓取所有分支。<br></code></pre></td></tr></table></figure>
<h4 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h4><figure class="highlight fortran"><table><tr><td class="code"><pre><code class="hljs fortran">拉取 命令：git pull [remote <span class="hljs-keyword">name</span>] [branch <span class="hljs-keyword">name</span>]<br>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于fetch+<span class="hljs-built_in">merge</span><br>如果不指定远端名称和分支名，则抓取所有并更新当前分支。<br></code></pre></td></tr></table></figure>
<h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一步 查看需要回退的版本号(简单输出)<br>git log --pretty=oneline<br><br><span class="hljs-regexp">//</span>第二步 回退<br>git reset --hard 版本号<br><br><span class="hljs-regexp">//</span>第三步 查看当前分支<br>git branch<br><br><span class="hljs-regexp">//</span>第四步 强制推送<br>git push -f --set-upstream origin 分支名称<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>尚硅谷-Vue2</title>
    <url>/2022/03/08/%E5%B0%9A%E7%A1%85%E8%B0%B7-Vue2/</url>
    <content><![CDATA[<p>[TOC]</p>
<h4 id="Vue2基础"><a href="#Vue2基础" class="headerlink" title="Vue2基础"></a>Vue2基础</h4><p>1.想要Vue工作，就必须创建Vue实例，传入配置对象</p>
<p>2.在指定的容器里写入特殊的vue语法</p>
<p>3.指定容器被称为【Vue模板】</p>
<p>4.中要写js表达式，且xxx可以读取到data里的属性</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;<br>	&#123;&#123;<span class="hljs-built_in">name</span>&#125;&#125;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><br>new Vue(&#123;<br>	el:&#x27;<span class="hljs-comment">#box&#x27;,</span><br>	data:&#123;<br>		<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;hello Vue&quot;</span><br>	&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>


<h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><h5 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h5><figure class="highlight clojure"><table><tr><td class="code"><pre><code class="hljs clojure">&#123;&#123;&#125;&#125;<br></code></pre></td></tr></table></figure>
<p>vm实例属性都能放到插值语法里面</p>
<h5 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h5><p>单向数据绑定</p>
<p>v-bind    简写    ：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&#x27;url&#x27;</span>&gt;</span>点击<span class="hljs-tag">&lt;/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&#x27;url&#x27;</span>&gt;</span>点击<span class="hljs-tag">&lt;/&gt;</span><br></code></pre></td></tr></table></figure>
<p>双向数据绑定(只能用于有value值的元素)</p>
<p>v-modle</p>
<p>v-modle:value可以写成v-modle</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;input v-modle:value&gt;</span><br></code></pre></td></tr></table></figure>


<h5 id="el和data两种写法"><a href="#el和data两种写法" class="headerlink" title="el和data两种写法"></a>el和data两种写法</h5><h6 id="el-data"><a href="#el-data" class="headerlink" title="el data"></a>el data</h6><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">第一种<br><span class="hljs-keyword">new</span> Vue(&#123;<br>	<span class="hljs-keyword">e</span><span class="hljs-variable">l:</span><span class="hljs-string">&#x27;#box&#x27;</span>,<br>	dat<span class="hljs-variable">a:</span>&#123;<br>		<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;hello Vue&quot;</span><br>	&#125;<br>&#125;)<br><br>第二种<br>const <span class="hljs-keyword">vm</span> = <span class="hljs-keyword">new</span> Vue(&#123;<br>	data()&#123;<br>		<span class="hljs-keyword">return</span> &#123;<br>			<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;hello Vue&quot;</span><br>		&#125;<br>	&#125;<br>&#125;)<br><span class="hljs-keyword">vm</span>.$mount(<span class="hljs-string">&#x27;#box&#x27;</span>)<br></code></pre></td></tr></table></figure>


<h5 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h5><p>v-show        变化频率高使用它</p>
<p>v-if（v-if,v-else-if,v-else）变化频率低使用它</p>
<p>template    可以用来包裹标签，不改变结构，此标签只能加v-if</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&#x27;true&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&#x27;true&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&#x27;true&#x27;</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h5 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h5><h6 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h6><p>可以循环数组，对象，字符串</p>
<p>还可以指定次数 v-for=’p in 5        ‘</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&#x27;(p,index) in persons&#x27;</span> :key=<span class="hljs-string">&#x27;index&#x27;</span> &gt;<br>	&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><br>data()&#123;<br>	persons:[<br>		&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;23&quot;</span>,<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>		&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;25&quot;</span>,<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>&#125;,<br>		&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;王麻子&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-string">&quot;19&quot;</span>,<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>&#125;<br>	]<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="key的作用与原理"><a href="#key的作用与原理" class="headerlink" title="key的作用与原理"></a>key的作用与原理</h6><p>1.当数据改变时，会生成新的虚拟dom，并与旧的虚拟dom比较，</p>
<p>2.在比较的过程中会找到新旧dom的key,key相同时</p>
<p>内容没有改变，则复用</p>
<p>内容改变，生成新dom并替换</p>
<p>3.用index当做key会引发问题，当数据进行逆序添加，逆序删除的时候会出现问题</p>
<p>4.最好使用唯一标识作为key。</p>
<h5 id="收集表单数据v-modle"><a href="#收集表单数据v-modle" class="headerlink" title="收集表单数据v-modle"></a>收集表单数据v-modle</h5><p>text:v-modle收集value值</p>
<p>radio:收集value需要给标签配置value值</p>
<p>checkbox:①没有配置value则收集checked(布尔值)②若配置value，value为费数组，收集checked。value为数组，收集到的value会组成数组</p>
<h5 id="v-指令"><a href="#v-指令" class="headerlink" title="v-指令"></a>v-指令</h5><p>v-text、v-html、v-once</p>
<p>v-cloak、v-pre</p>
<h6 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h6><p>1.没有值，vue实例创建完毕后，会删除v-cloak属性</p>
<p>2.使用css配合可以解决网速缓慢时页面展示双大括号问题</p>
<h6 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h6><p>跳过其所在节点的编译</p>
<p>利用它跳过没有使用指令语法的节点，加快编译</p>
<h5 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h5><p>1.局部指令：new Vue({directives:{指令名：配置对象}})</p>
<p>2.全局配置：Vue.directive(指令名，配置对象)</p>
<p>3.配置对象中常用的3个回调</p>
<p>①.bind:指令与元素成功绑定时调用</p>
<p>②.inserted:指令所在元素被插入页面时调用</p>
<p>③.update:指令所在模板结构被重新解析时调用</p>
<p>4.指令定义时不用加V-,但使用时要加。多个单词命名时要用    user-name形式命名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//第一种写法</span><br>directive:&#123;<br>	<span class="hljs-function"><span class="hljs-title">big</span>(<span class="hljs-params">element,binding</span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(element,binding)<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//第二种写法</span><br>directive:&#123;<br>	big:&#123;<br>		<span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">element,binding</span>)</span>&#123;<br>			<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功绑定时&#x27;</span>)<br>		&#125;，<br>		<span class="hljs-function"><span class="hljs-title">inserted</span>(<span class="hljs-params">element,binding</span>)</span>&#123;<br>			<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;元素被插入页面&#x27;</span>)<br>		&#125;，<br>		<span class="hljs-function"><span class="hljs-title">update</span>(<span class="hljs-params">element,binding</span>)</span>&#123;<br>			<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;模板被重新解析&#x27;</span>)<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h5 id="绑定class样式"><a href="#绑定class样式" class="headerlink" title="绑定class样式"></a>绑定class样式</h5><p>字符串写法:适用于类名不确定，需动态指定</p>
<p>数组写法：要绑定的样式个数不确定，名字也不确定</p>
<p>对象写法：样式个数确定，名字确定，需要动态决定用不用</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir">data()&#123;<br>	<span class="hljs-symbol">str:</span><span class="hljs-string">&#x27;blue&#x27;</span>,<br>	<span class="hljs-symbol">arr:</span>[<span class="hljs-string">&#x27;blue&#x27;</span>,<span class="hljs-string">&#x27;red&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>],<br>	<span class="hljs-symbol">obj:</span>&#123;<span class="hljs-symbol">blue:</span><span class="hljs-keyword">true</span>,<span class="hljs-symbol">red:</span><span class="hljs-keyword">false</span>,<span class="hljs-symbol">green:</span><span class="hljs-keyword">true</span>&#125;<br>&#125;<br><br>&lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&#x27;str&#x27;</span>&gt;&lt;/div&gt;</span><br>&lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&#x27;arr&#x27;</span>&gt;&lt;/div&gt;</span><br>&lt;div <span class="hljs-symbol">:class=<span class="hljs-string">&#x27;obj&#x27;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure>
<p>style样式的写法和class样式一样，但是key不能写错,例（fontSIze）</p>
<h4 id="回顾-数据代理"><a href="#回顾-数据代理" class="headerlink" title="回顾  数据代理"></a>回顾  数据代理</h4><h5 id="什么是数据代理？"><a href="#什么是数据代理？" class="headerlink" title="什么是数据代理？"></a>什么是数据代理？</h5><p>通过一个对象代理对另一个对象中属性的操作（使用setter和getter）</p>
<p>原理：通过object.defineProperty把data对象中的所有属性添加到VM上，为每一个添加到VM上的属性，都指定一个getter、setter属性，在getter、setter内部去操作data中对应的属性</p>
<h5 id="defineProperty"><a href="#defineProperty" class="headerlink" title="defineProperty"></a>defineProperty</h5><h6 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h6><p>object.defineProperty(‘添加属性的对象’，’添加的属性’，{配置项})</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-built_in">number</span> =<span class="hljs-number">18</span>;<br><span class="hljs-keyword">let</span> person = &#123;<br>	name:<span class="hljs-string">&quot;张三&quot;</span>,<br>	sex:<span class="hljs-string">&quot;男&quot;</span><br>&#125;<br><br><span class="hljs-built_in">object</span>.defineProperty(person,<span class="hljs-string">&#x27;age&#x27;</span>,&#123;<br>	value:<span class="hljs-number">18</span>,<br>	enumerable:<span class="hljs-literal">true</span>,	<span class="hljs-comment">//控制属性是否被枚举 默认false</span><br>	writable:<span class="hljs-literal">true</span>,		<span class="hljs-comment">//控制属性是否被修改 默认false</span><br>	configurable:<span class="hljs-literal">true</span>	<span class="hljs-comment">//控制属性是否可以被删除 默认false</span><br>	<br>	<span class="hljs-comment">//当age被读取时，get()被调用(称为getter)</span><br>	<span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-built_in">number</span><br>	&#125;,<br>	<br>	<span class="hljs-comment">//当age被修改时，set()被调用(称为setter)</span><br>	<span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;<br>		<span class="hljs-built_in">number</span> = value;<br>	&#125;<br>	<br>&#125;)<br></code></pre></td></tr></table></figure>


<h4 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h4><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>1.使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名</p>
<p>2.事件的回调需配置到methods对象中，最终会显示到vm上</p>
<p>3.methods配置中不要使用箭头函数，否则this就不是vm了</p>
<p>4.@click=’demo‘ 和@click=’demo($event)’ 效果一样，后者可以传参</p>
<h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p>prevent:阻止默认事件</p>
<p>stop:阻止冒泡事件</p>
<p>once:事件只触发一次</p>
<p>capture:使用事件的捕获模式</p>
<p>self:只有event.target是当前操作元素时才触发</p>
<p>passive:事件的默认行为立即执行，无需事件回调完成</p>
<p>lazy:失去焦点在收集数据</p>
<p>number:输入字符串转入有效的数字</p>
<p>trim:输入首尾空格过滤</p>
<p>修饰符可以连续写</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">&lt;<span class="hljs-keyword">a</span> @click.<span class="hljs-built_in">stop</span>.prevent=<span class="hljs-string">&#x27;cli&#x27;</span>&gt;&lt;/<span class="hljs-keyword">a</span>&gt;<span class="hljs-comment">	//阻止冒泡和默认事件</span><br></code></pre></td></tr></table></figure>


<h5 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h5><p>1.常用</p>
<p>enter =&gt; 回车</p>
<p>delete =&gt;删除</p>
<p>esc =&gt;退出</p>
<p>space =&gt;空格</p>
<p>tab =&gt;换行</p>
<p>up down left right 上下左右</p>
<p>2.Vue没有提供别名的按键，可以使用按键原始的key值去绑定</p>
<p>3.系统修饰键</p>
<p>ctrl shift alt meta 可以配合keyup和keydown使用</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">指定ctrl+y触发，也可以不加Y<br><br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-string">&#x27;请输入&#x27;</span> @keyup.ctrl.<span class="hljs-attribute">y</span>=<span class="hljs-string">&#x27;函数名&#x27;</span>&gt; <br></code></pre></td></tr></table></figure>


<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><h5 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h5><p>定义：通过已有属性计算的到的新属性</p>
<p>原理：借用了getter和setter属性</p>
<p>执行时机：1.初次读取时2.当依赖属性改变时</p>
<p>优势：与methods相比，内部有缓存机制，效率高</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">完整写法<br>computed:&#123;<br>	fullname:&#123;<br>		<span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<br>		&#125;,<br>		<span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;<br>		<br>		&#125;<br>	&#125;<br>&#125;<br><br>简写（不需要set属性时）<br>computed:&#123;<br>	<span class="hljs-function"><span class="hljs-title">fullname</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h5 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h5><h6 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h6><p>1.当监视属性变化时，回调函数自动调用，进行相关操作</p>
<p>2.两种写法 </p>
<p>在在vm中写入watch配置</p>
<p>通过vm.$watch监视</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">watch:&#123;<br>	ishot:&#123;<br>        deep:<span class="hljs-literal">true</span>	深度监听，监听多层次下的改变，默认<span class="hljs-literal">false</span><br>        immediate:<span class="hljs-literal">true</span>,	<span class="hljs-comment">//是否初始化时调用一下handler	默认false</span><br>        <span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newvalue,oldvalue</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(newvalue+oldvalue)<br>        &#125;<br>    &#125;<br>&#125;<br><br>简写<br>watch:&#123;<br>	<span class="hljs-function"><span class="hljs-title">ishot</span>(<span class="hljs-params">newvalue,oldvalue</span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>	&#125;<br>&#125;<br><br>第二种方法<br>正常写<br>vm.$watch(<span class="hljs-string">&#x27;ishot&#x27;</span>,&#123;<br>	deep:<span class="hljs-literal">true</span>	深度监听，监听多层次下的改变，默认<span class="hljs-literal">false</span><br>	immediate:<span class="hljs-literal">true</span>,	<span class="hljs-comment">//是否初始化时调用一下handler	默认false</span><br>	ishot:&#123;<br>		<span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newvalue,oldvalue</span>)</span>&#123;<br>			<span class="hljs-built_in">console</span>.log(newvalue+oldvalue)<br>		&#125;<br>	&#125;<br>&#125;)<br><br>简写<br>vm.$watch(<span class="hljs-string">&#x27;ishot&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newvalue,oldvalue</span>)</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>


<h5 id="computed与watch-的区别"><a href="#computed与watch-的区别" class="headerlink" title="computed与watch 的区别"></a>computed与watch 的区别</h5><p>1.computed能完成的功能，watch都可以完成。</p>
<p>2.watch能完成的功能，computed不一定能完成，例如watch可以进行异步操作</p>
<p>原则1：被vue管理的函数，写成普通函数，this才可以指向vm</p>
<p>原则2：所有不被vue管理的函数（定时器的回调函数、ajax的回调函数、promise的回调函数），最好写成箭头函数，这样this指向才是vm</p>
<h5 id="数据监测的原理"><a href="#数据监测的原理" class="headerlink" title="数据监测的原理"></a>数据监测的原理</h5><p>1.vue会监视data中所有层次的数据</p>
<p>2.通过setter实现监视，且要在new vue时传入数据</p>
<p>3.后期添加响应式数据</p>
<p>(1).Vue.set(target,propertyname/index,value)</p>
<p>(2).vm.$set(target,propertyname/index,value)</p>
<p>4.如何监视数组中的数据？</p>
<p>通过包裹数组更新元素的方法</p>
<p>本质：先调用原生对应的方法对数组进行更新，在重新解析模板，刷新页面</p>
<p>5.修改元素要用以下方法</p>
<p>1.push(),pop(),shift(),unshift(),splice(),sort(),reverse()</p>
<p>2.Vue.set()或vm.$set()，这两个方法不能给vm和vm的data添加属性</p>
<h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><p>定义：对要展示的数据特定格式化后在显示（适用简单的逻辑）</p>
<p>1：注册过滤器</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Vue</span>.</span></span>filter(name,calback)<br>或<br><span class="hljs-keyword">new</span> <span class="hljs-constructor">Vue(<span class="hljs-params">filters</span>:&#123;&#125;)</span><br><br><span class="hljs-number">2.</span>使用&#123;&#123;xxx <span class="hljs-pattern-match">| 过滤器名&#125;&#125; 或 v-bind:属性=&#x27;xxx | 过滤器名&#x27;</span><br></code></pre></td></tr></table></figure>
<p>2.使用：看上面代码中的2</p>
<p>3.可以接收额外参数，可以串联，不会改变原数据，只是对数据进行处理，返回新数据</p>
<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">beforecreate：创建之前		数据代理，数据监测还未开始创建<br>created：创建完成		 数据代理，数据监测已经创建完成<br><span class="hljs-symbol">beforemount:</span>挂载之前		虚拟dom还未编译成真实dom<br>mounted：挂在完成			虚拟dom转换成真实dom,且已经插入页面<br>发送ajax请求，启动定时器，绑定自定义事件，订阅消息（初始化操作）<br><br><span class="hljs-symbol">beforeupdate:</span>			更新数据之前<br><span class="hljs-symbol">updated:</span>				更新数据完成<br><span class="hljs-symbol">beforedistroy:</span>			销毁之前（vm.$destroy()）<br>不要在这儿操作数据，可以清除定时器，解绑自定义事件，取消订阅消息（收尾工作）<br><br><span class="hljs-symbol">destroyed:</span>				销毁完成<br></code></pre></td></tr></table></figure>


<h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><h5 id="如何使用组件"><a href="#如何使用组件" class="headerlink" title="如何使用组件"></a>如何使用组件</h5><p>1.定义组件 2.注册组件 3.使用组件</p>
<p>定义：</p>
<p>使用Vue.extend(options)创建</p>
<p>不要写el ,data要写成函数，template配置组件结构</p>
<p>注册：</p>
<p>局部：new Vue时传入components选项</p>
<p>全局：Vue.component(‘组件名’,组件)</p>
<p>使用：&lt;组件名&gt;&lt;/组件名&gt;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">创建组件<br><span class="hljs-keyword">const</span> school = Vue.extend(&#123;			<span class="hljs-comment">//Vue.extend可省略 school = &#123; ....&#125;</span><br>	<span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;		<span class="hljs-comment">//要写成函数，不需要el</span><br>		name:<span class="hljs-string">&#x27;张三&#x27;</span><br>	&#125;,<br>	template:<span class="hljs-string">`		//结构,外面要包裹一个div</span><br><span class="hljs-string">		&lt;div&gt;</span><br><span class="hljs-string">			&lt;h1&gt;我是school组件&lt;/h1&gt;</span><br><span class="hljs-string">		&lt;/div&gt;</span><br><span class="hljs-string">	`</span><br>&#125;)<br><br>注册组件（局部）<br><span class="hljs-keyword">new</span> Vue(&#123;<br>	el:<span class="hljs-string">&#x27;.box&#x27;</span>,<br>	components:&#123;<br>		school:school,		<span class="hljs-comment">//前面是真正的组件名，后面是一个中转变量，如果一样就可以简写成一个</span><br>	&#125;<br>&#125;)<br>注册组件（全局）<br>Vue.component(<span class="hljs-string">&#x27;hello&#x27;</span>,hello)	<span class="hljs-comment">//前面是组件名，后面是创建组件的变量名</span><br><br>使用组件<br>&lt;body&gt;<br>	&lt;school&gt;&lt;/school&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>


<h5 id="组件注意点"><a href="#组件注意点" class="headerlink" title="组件注意点"></a>组件注意点</h5><h6 id="组件命名"><a href="#组件命名" class="headerlink" title="组件命名"></a>组件命名</h6><p>一个单词：全小写，首字母大写</p>
<p>多个单词：’my-name’ ,MyName(脚手架里才可以)</p>
<p>不要使用HTML的标签名当组件名</p>
<p>可以使用name配置项指定组件在开发者工具中的名字</p>
<h6 id="组件标签"><a href="#组件标签" class="headerlink" title="组件标签"></a>组件标签</h6><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">第一种：<span class="hljs-tag">&lt;<span class="hljs-name">school</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">school</span>&gt;</span><br>第二种：<span class="hljs-tag">&lt;<span class="hljs-name">school</span>/&gt;</span>		这种只能在脚手架里使用<br></code></pre></td></tr></table></figure>


<h6 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h6><p>1.是一个构造函数，是Vue.ectend生成的</p>
<p>2.每次调用组件时，都会创建一个组件的实例对象，都会返回一个全新的Vue.Component</p>
<p>3.组件中的this都指向VueComponent实例对象，简称vc, Vue的this称为vm</p>
<h5 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h5><p>快捷键：&lt;v</p>
<p>school.vue</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>	写HTML<br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">	<span class="hljs-comment">//写js ,vue</span></span><br>	<br><span class="javascript">	<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">		name:<span class="hljs-string">&#x27;school&#x27;</span>,	<span class="hljs-comment">//name后面写组件名，不写也可以，最好与文件名一致</span></span><br><span class="javascript">		<span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br>			...<br>		&#125;,<br>		methods:&#123;<br>			.....<br>		&#125;<br>	&#125;<br>	<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>	写css<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">app<span class="hljs-selector-class">.vue</span>		汇总组件<br><span class="hljs-selector-tag">main</span><span class="hljs-selector-class">.js</span>		入口文件<br>index.html<br><br>school<span class="hljs-selector-class">.vue</span>	子组件<br>student<span class="hljs-selector-class">.vue</span>	子组件<br></code></pre></td></tr></table></figure>


<h4 id="脚手架vue-cli"><a href="#脚手架vue-cli" class="headerlink" title="脚手架vue-cli"></a>脚手架vue-cli</h4><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript">下载<br><span class="hljs-built_in">npm</span> install -g @vue/cli<br>创建项目<br>vue create XXX<br>运行<br><span class="hljs-built_in">npm</span> run serve<br></code></pre></td></tr></table></figure>


<p>render</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params">createElement</span>)</span>&#123;<br>	<span class="hljs-keyword">return</span> crenteElement(<span class="hljs-string">&#x27;h1&#x27;</span>,<span class="hljs-string">&#x27;你好&#x27;</span>)<br>&#125;<br>简写箭头函数<br>render:<span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span>h(app)<br></code></pre></td></tr></table></figure>


<h5 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h5><p>1.被用来给元素或子组件注册引用信息（id的替代者）</p>
<p>2.应用在HTML标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（VC）</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">&lt;h1 <span class="hljs-attribute">ref</span>=<span class="hljs-string">&#x27;xxx&#x27;</span>&gt;&lt;/h1&gt;<br>&lt;School <span class="hljs-attribute">ref</span>=<span class="hljs-string">&#x27;xxx&#x27;</span>&gt;&lt;/School&gt;<br><br>获取：<br>this.<span class="hljs-variable">$refs</span>.xxx<br></code></pre></td></tr></table></figure>


<h5 id="props"><a href="#props" class="headerlink" title="props"></a>props</h5><p>让组件接收外部传过来的数据</p>
<p>props传输的数据不可以修改，可以中转变量到data中修改</p>
<p>1.传递数据</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">&lt;School <span class="hljs-attribute">name</span>=<span class="hljs-string">&#x27;xxx&#x27;</span> <span class="hljs-attribute">age</span>=<span class="hljs-string">&#x27;xxx&#x27;</span>&gt;<br></code></pre></td></tr></table></figure>
<p>2.接收数据</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><code class="hljs sqf">一、只接收<br>props:[<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>]<br>二、限制类型<br>props:&#123;<br>	<span class="hljs-built_in">name</span>:<span class="hljs-string">&#x27;String&#x27;</span>,<br>	age:<span class="hljs-string">&#x27;Number&#x27;</span><br>&#125;<br>三、限制类型，限制必要性，指定默认值<br>props:&#123;<br>	<span class="hljs-built_in">name</span>:&#123;<br>		<span class="hljs-built_in">type</span>:String,		<span class="hljs-comment">//类型</span><br>		required:<span class="hljs-literal">true</span>,		<span class="hljs-comment">//必须传入name</span><br>		<span class="hljs-keyword">default</span>:<span class="hljs-string">&#x27;默认值&#x27;</span>		<span class="hljs-comment">//默认值</span><br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h5 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h5><p>功能：把多个组件共用的配置提取成一个混入对象</p>
<p>定义混入：</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><code class="hljs nim">&#123;<br>	data()<span class="hljs-meta">&#123;...&#125;</span>,<br>&#125;<br></code></pre></td></tr></table></figure>
<p>使用混入：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">全局混入：Vue.<span class="hljs-keyword">mixin</span>(xxx)<br>局部混入：mixins:[<span class="hljs-string">&#x27;xxx&#x27;</span>]<br></code></pre></td></tr></table></figure>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">mixin.js<br>---------<br>export const hunhe = &#123;<br><span class="hljs-code">	data()&#123;</span><br><span class="hljs-code">		return&#123;</span><br><span class="hljs-code">			x:2,</span><br><span class="hljs-code">			y:5</span><br><span class="hljs-code">		&#125;</span><br><span class="hljs-code">	&#125;</span><br>&#125;<br><br><br><br>School.vue<br>-----------<br>&lt;script&gt;<br><span class="hljs-code">	import &#123;&#125; from &#x27;./mixin.js&#x27;</span><br><span class="hljs-code">	</span><br><span class="hljs-code">	export default &#123;</span><br><span class="hljs-code">		data()&#123;</span><br><span class="hljs-code">			name:&#x27;尚硅谷&#x27;,</span><br><span class="hljs-code">			address:&#x27;北京&#x27;</span><br><span class="hljs-code">		&#125;,</span><br><span class="hljs-code">		mixins:[]</span><br><span class="hljs-code">	&#125;</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>


<h5 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h5><p>功能：用于增强vue</p>
<p>本质：包含install方法的一个对象，第一个参数是Vue，后面就是传递的参数数据</p>
<p>定义：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">plugins.js<br>----------------------------<br>export default&#123;<br><span class="hljs-code">	install = function(Vue,options)&#123;</span><br><span class="hljs-code">        1.添加全局过滤器</span><br><span class="hljs-code">        Vue.filter(....)</span><br><span class="hljs-code">        2.添加全局指令</span><br><span class="hljs-code">        Vue.directive(....)</span><br><span class="hljs-code">        3.配置全局混入</span><br><span class="hljs-code">        Vue.mixin(....)</span><br><span class="hljs-code">        4.添加实例方法</span><br><span class="hljs-code">        Vue.prototype.$myMethod = function()</span><br><span class="hljs-code">        Vue.prototype.$myProperty = xxx</span><br><span class="hljs-code">	&#125;</span><br>&#125;<br><br><br>Student.vue<br>-----------------<br>引入插件<br>import plugins from <span class="hljs-emphasis">&#x27;./plugins.js&#x27;</span><br><br>使用插件：Vue.use(plugins)<br><br>创建实例。。。。。<br></code></pre></td></tr></table></figure>


<h5 id="scoped"><a href="#scoped" class="headerlink" title="scoped"></a>scoped</h5><p>作用：让样式局部生效</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h4 id="案例总结"><a href="#案例总结" class="headerlink" title="案例总结"></a>案例总结</h4><h5 id="1-组件化编码流程"><a href="#1-组件化编码流程" class="headerlink" title="1.组件化编码流程"></a>1.组件化编码流程</h5><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">拆分静态组件：按功能点拆分，命名不要与<span class="hljs-selector-tag">HTML</span>元素冲突<br>实现动态组件：考虑好数据存放的位置，数据是一个组件用还是多个组件用<br>		一个：放在自身<br>		多个：放到共同父组件上（状态提升）<br>实现交互：从绑定事件开始<br></code></pre></td></tr></table></figure>
<h5 id="2-props适用于"><a href="#2-props适用于" class="headerlink" title="2.props适用于"></a>2.props适用于</h5><figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada"><span class="hljs-number">1</span>.父组件<span class="hljs-comment">----&gt;&gt;&gt;子组件	通信</span><br><span class="hljs-number">2</span>.子组件<span class="hljs-comment">----&gt;&gt;&gt;父组件 通信(要求父组件先给子组件一个函数)</span><br></code></pre></td></tr></table></figure>
<h5 id="3-v-modle与props注意事项"><a href="#3-v-modle与props注意事项" class="headerlink" title="3.v-modle与props注意事项"></a>3.v-modle与props注意事项</h5><p>v-modle绑定的值不能通过props来传递，props的值是不可以被修改的</p>
<p>props传过来的若是对象类型的值，修改对象中的属性不会报错，但不推荐。</p>
<h5 id="webStorage浏览器缓存"><a href="#webStorage浏览器缓存" class="headerlink" title="webStorage浏览器缓存"></a>webStorage浏览器缓存</h5><p>Window.localStorage</p>
<p>关闭浏览器缓存还在</p>
<p>Window.sessionStorage</p>
<p>关闭浏览器，缓存消失</p>
<p>相关API(两个通用)</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">xxxStorage.set<span class="hljs-constructor">Item(&#x27;<span class="hljs-params">key</span>&#x27;,&#x27;<span class="hljs-params">value</span>&#x27;)</span>	<span class="hljs-comment">//添加</span><br>xxxStorage.get<span class="hljs-constructor">Item(&#x27;<span class="hljs-params">key</span>&#x27;)</span>	<span class="hljs-comment">//获取	获取不到，返回null</span><br>xxxStorage.remove<span class="hljs-constructor">Item(&#x27;<span class="hljs-params">key</span>&#x27;)</span>	<span class="hljs-comment">//删除</span><br>xxxStorage.clear<span class="hljs-literal">()</span>	<span class="hljs-comment">//清空</span><br><br>json字符串互相转换<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>stringify(json对象)<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse(字符串)<br></code></pre></td></tr></table></figure>


<h4 id="自定义事件（子传父）"><a href="#自定义事件（子传父）" class="headerlink" title="自定义事件（子传父）"></a>自定义事件（子传父）</h4><h5 id="函数，-emit，ref"><a href="#函数，-emit，ref" class="headerlink" title="函数，$emit，ref"></a>函数，$emit，ref</h5><h6 id="第一种：通过父组件给子组件传递函数类型的props实现"><a href="#第一种：通过父组件给子组件传递函数类型的props实现" class="headerlink" title="第一种：通过父组件给子组件传递函数类型的props实现"></a>第一种：通过父组件给子组件传递函数类型的props实现</h6><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">app.vue<br>----------<br>&lt;School :getchildvalue= <span class="hljs-emphasis">&#x27;getchildvalue&#x27;</span>   /&gt;<br><br>methods:&#123;<br><span class="hljs-code">	getchildvalue(value)&#123;</span><br><span class="hljs-code">		console.log(&#x27;父组件得到了：&#x27;,value)</span><br><span class="hljs-code">	&#125;</span><br>&#125;<br><br>school.vue<br>---------------<br>&lt;button @click=<span class="hljs-emphasis">&#x27;sendStudentName&#x27;</span>&gt;给父组件传递参数&lt;/button&gt;<br><br>props:[<span class="hljs-emphasis">&#x27;getchildvalue&#x27;</span>]<br>data()&#123;<br><span class="hljs-code">	value:&#x27;练习&#x27;</span><br>&#125;,<br>methods:&#123;<br><span class="hljs-code">	sendStudentName()&#123;</span><br><span class="hljs-code">		this.getchildvalue(this.value)</span><br><span class="hljs-code">	&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="第二种-：-emit-通过父组件给子组件绑定一个自定义事件"><a href="#第二种-：-emit-通过父组件给子组件绑定一个自定义事件" class="headerlink" title="第二种 ：$emit 通过父组件给子组件绑定一个自定义事件"></a>第二种 ：$emit 通过父组件给子组件绑定一个自定义事件</h6><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">app.vue<br>----------<br>&lt;School @getvalue= <span class="hljs-emphasis">&#x27;getchildvalue&#x27;</span>   /&gt;<br><br>methods:&#123;<br><span class="hljs-code">	getchildvalue(value,...params)&#123;			//...params 接收剩余的参数</span><br><span class="hljs-code">		console.log(&#x27;父组件得到了：&#x27;,value)</span><br><span class="hljs-code">	&#125;</span><br>&#125;<br><br>school.vue<br>---------------<br>&lt;button @click=<span class="hljs-emphasis">&#x27;sendStudentName&#x27;</span>&gt;给父组件传递参数&lt;/button&gt;<br><br>methods:&#123;<br><span class="hljs-code">	sendStudentName()&#123;</span><br><span class="hljs-code">		this.$emit(&#x27;getvalue&#x27;,this.name)</span><br><span class="hljs-code">	&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="第三种：ref"><a href="#第三种：ref" class="headerlink" title="第三种：ref"></a>第三种：ref</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">app.vue<br>----------<br>&lt;School ref=<span class="hljs-string">&#x27;student&#x27;</span> /&gt;<br><br><br>methods:&#123;<br>	<span class="hljs-function"><span class="hljs-title">getchildvalue</span>(<span class="hljs-params">value,...params</span>)</span>&#123;			<span class="hljs-comment">//...params 接收剩余的参数</span><br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;父组件得到了：&#x27;</span>,value)<br>	&#125;<br>&#125;，<br><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">this</span>.$refs.student.$on(<span class="hljs-string">&#x27;seton&#x27;</span>,<span class="hljs-built_in">this</span>.getchildvalue)	<span class="hljs-comment">//设置事件名，和回调函数</span><br>	<span class="hljs-comment">//this.$refs.student.$once(&#x27;getvalue&#x27;,this.getchildvalue)  执行一次</span><br>&#125;<br><br>school.vue<br>---------------<br><br>&lt;button @click=<span class="hljs-string">&#x27;sendStudentName&#x27;</span>&gt;给父组件传递参数&lt;/button&gt;<br><br>methods:&#123;<br>	<span class="hljs-function"><span class="hljs-title">sendStudentName</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-built_in">this</span>.$emit(<span class="hljs-string">&#x27;seton&#x27;</span>,<span class="hljs-built_in">this</span>.name)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h5 id="全局事件总线（建议使用）"><a href="#全局事件总线（建议使用）" class="headerlink" title="全局事件总线（建议使用）"></a>全局事件总线（建议使用）</h5><figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$bus</span></span><br></code></pre></td></tr></table></figure>
<p>1.一种组件间的通信方式，适用于任意组件间通信</p>
<p>2.安装全局事件总线</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><code class="hljs lasso"><span class="hljs-literal">new</span> Vue(&#123;<br>	<span class="hljs-params">...</span>..<br>	beforeCreated()&#123;<br>		Vue.prototype.$bus = this<br>	&#125;,<br>	<span class="hljs-params">...</span><span class="hljs-params">...</span><br>&#125;)<br></code></pre></td></tr></table></figure>
<p>3.使用事件总线</p>
<p>①接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件回调在A组件自身</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">methods</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-function"><span class="hljs-title">demo</span>(<span class="hljs-params">data</span>)</span>&#123;<br>		<span class="hljs-built_in">this</span>.message = data		<span class="hljs-comment">//使用数据</span><br>	&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">this</span>.$bus.$on(<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-built_in">this</span>.demo)	<span class="hljs-comment">//接收数据</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>②提供数据：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">this.<span class="hljs-variable">$bus</span>.<span class="hljs-variable">$emit</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>,数据)	<span class="hljs-regexp">//</span>发送数据<br></code></pre></td></tr></table></figure>
<p>4.最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件。</p>
<h5 id="消息订阅与发布-不建议使用"><a href="#消息订阅与发布-不建议使用" class="headerlink" title="消息订阅与发布(不建议使用)"></a>消息订阅与发布(不建议使用)</h5><p>1.安装pubsub.js库</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i pubsub-js<br></code></pre></td></tr></table></figure>
<p>引入pubsub.js库</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> pubsub <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pubsub-js&#x27;</span><br></code></pre></td></tr></table></figure>
<p>2.接收数据：A接收，在A中订阅</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">methods</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-function"><span class="hljs-title">demo</span>(<span class="hljs-params">pubname,data</span>)</span>&#123;....&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">this</span>.pubid = pubsub.subscribe(<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-built_in">this</span>.demo)	<span class="hljs-comment">//订阅消息</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>3.提供数据</p>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">pubsub</span><span class="hljs-selector-class">.publish</span>(<span class="hljs-string">&#x27;xxx&#x27;</span>,数据)<br></code></pre></td></tr></table></figure>
<p>4.最好在beforeDstory中取消订阅</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">pubsub.unsubscribe(<span class="hljs-keyword">this</span>.pubid)<br></code></pre></td></tr></table></figure>


<h5 id="nextTick-生命周期"><a href="#nextTick-生命周期" class="headerlink" title="nextTick(生命周期)"></a>nextTick(生命周期)</h5><p>下一次渲染执行</p>
<p>1.语法</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">this</span>.$nextTick(回调函数)<br></code></pre></td></tr></table></figure>
<p>2.在下一次DOM更新结束后执行其指定的回调</p>
<p>3.当数据改变后，要基于更新后的新DOM进行操作时，要在nextTick指定的回调函数中执行</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">this</span>.$nextTick(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">this</span>.$refs.inputTitle.focus()<br>&#125;)<br></code></pre></td></tr></table></figure>


<h4 id="Vue封装的过渡与动画"><a href="#Vue封装的过渡与动画" class="headerlink" title="Vue封装的过渡与动画"></a>Vue封装的过渡与动画</h4><h6 id="进入："><a href="#进入：" class="headerlink" title="进入："></a>进入：</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">v-enter	<span class="hljs-regexp">//</span>进入的起点<br>v-enter-active <span class="hljs-regexp">//</span>进入过程中<br>v-enter-to	<span class="hljs-regexp">//</span>进入的终点<br></code></pre></td></tr></table></figure>
<h6 id="离开："><a href="#离开：" class="headerlink" title="离开："></a>离开：</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">v-leave	<span class="hljs-regexp">//</span>离开的起点<br>v-leave-active <span class="hljs-regexp">//</span>离开过程中<br>v-leave-to	<span class="hljs-regexp">//</span>离开的终点<br></code></pre></td></tr></table></figure>


<p>使用transition包裹的过渡元素,要配置name属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;hello&#x27;</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好啊<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure>


<p>若有多个元素过渡需要用transition-group,且每个元素要有key值</p>
<p>安装animate.css</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> install animate.css<br><br>引入<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;animate.css&#x27;</span><br></code></pre></td></tr></table></figure>


<h4 id="配置代理和请求-ajax"><a href="#配置代理和请求-ajax" class="headerlink" title="配置代理和请求(ajax)"></a>配置代理和请求(ajax)</h4><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i axios<br></code></pre></td></tr></table></figure>
<h6 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h6><p>优点：配置简单，请求资源时直接发给前端(8080)即可。</p>
<p>缺点：只能配置一个代理</p>
<p>工作方式：若按照上述配置，当请求前端不存在时，才会发给服务器，优先匹配前端资源</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">vue.config.js<br>------------------<br>devServer:&#123;<br><span class="hljs-code">	proxy: &#x27;http://localhost:5000&#x27;	//被请求的端口</span><br>&#125;<br><br>axios里面的端口写实际发起请求的端口<br></code></pre></td></tr></table></figure>
<h6 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h6><p>可以配置多个代理，且可以灵活控制请求是否走代理</p>
<p>请求资源时必须加前缀</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">modle.exports = &#123;<br>	devServer:&#123;<br>		proxy:&#123;<br>			<span class="hljs-string">&#x27;/api1&#x27;</span>:&#123;<br>				target:<span class="hljs-string">&#x27;https://localhost:5000&#x27;</span>,	<span class="hljs-regexp">//</span>被请求的端口<br>				pathRewrite:&#123;<span class="hljs-string">&#x27;^/api1&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125;,	重写路径<br>				ws:true, <span class="hljs-regexp">//</span>默认true，用于支持websocket<br>				changeOrigin:true	<span class="hljs-regexp">//</span>默认为true，用于改变请求头host(true：服务器是多少就是多少，false：原始请求头)<br>			&#125;,<br>			<span class="hljs-string">&#x27;/api2&#x27;</span>:&#123;<br>				target:<span class="hljs-string">&#x27;https://localhost:5000/api2/student&#x27;</span>,<br>				pathRewrite:&#123;<span class="hljs-string">&#x27;^/api2&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>&#125;,<br>				changeOrigin:true	<br>			&#125;,<br>		&#125;<br>	&#125;<br>&#125;<br><br>axios里面的接口地址:<span class="hljs-string">&#x27;https://localhost:5000/api1/student&#x27;</span>	<span class="hljs-regexp">//</span>api1写到端口号后面(见下面)<br></code></pre></td></tr></table></figure>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">app.vue<br>--------------<br>methods:&#123;<br><span class="hljs-code">	demo()&#123;</span><br><span class="hljs-code">		axios.get(&#x27;https://localhost:8080/api1/student&#x27;).then(	//发送请求的端口</span><br><span class="hljs-code">			response =&gt; &#123;console.log(&#x27;请求成功&#x27;,response.data)&#125;,</span><br><span class="hljs-code">			error =&gt; &#123;console.log(&#x27;请求失败&#x27;,error.message)&#125;</span><br><span class="hljs-code">		)</span><br><span class="hljs-code">	&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure>


<h4 id="插槽（slot）"><a href="#插槽（slot）" class="headerlink" title="插槽（slot）"></a>插槽（slot）</h4><p>1.作用：让父组件可以向子组件指定位置插入HTML结构，也是一种组件间通信的方式，适用于父组件–&gt;子组件</p>
<p>2.分类：默认插槽、具名插槽、作用域插槽</p>
<h6 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h6><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">父组件：<br><span class="hljs-tag">&lt;<span class="hljs-name">School</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>HTML结构<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">School</span>&gt;</span><br><br>school组件：<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>插槽默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h6 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h6><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">父组件：<br><span class="hljs-tag">&lt;<span class="hljs-name">School</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&#x27;center&#x27;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>HTML结构1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>	<br>	<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>HTML结构2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">School</span>&gt;</span><br><br>子组件：<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name:center</span>&gt;</span>插槽内容<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name:footer</span>&gt;</span>插槽内容<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h6 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h6><p>数据在组件自身，但根据数据生成的结构需要组件的使用者来决定</p>
<p>也能自己起名字</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="xml">父组件：</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">School</span>&gt;</span></span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&#x27;scopedata&#x27;</span>&gt;</span>	//scope接收slot传过来的数据</span><br><span class="xml">		<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">			<span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;i in scopedata.games&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;i&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>	//生成li</span><br><span class="xml">		<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">	<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">	</span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">scope</span>=<span class="hljs-string">&#x27;scopedata&#x27;</span>&gt;</span>	//scope接收slot传过来的数据</span><br><span class="xml">		<span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;i in scopedata.games&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&#x27;i&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">i</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span>		//生成h4</span><br><span class="xml">	<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">School</span>&gt;</span></span><br><br><span class="xml">子组件：</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">		<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:games</span>=<span class="hljs-string">&#x27;games&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span><br><span class="xml">	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml">data()&#123;</span><br><span class="xml">	return&#123;</span><br><span class="xml">		games:[&#x27;tan&#x27;,&#x27;bo&#x27;,&#x27;zhi&#x27;]</span><br><span class="xml">	&#125;</span><br><span class="xml">&#125;</span><br></code></pre></td></tr></table></figure>


<h4 id="VueX"><a href="#VueX" class="headerlink" title="VueX"></a>VueX</h4><p>专门在Vue中实现集中式状态管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式管理</p>
<p>store →Actions/Mutations/State</p>
<h6 id="安装vuex"><a href="#安装vuex" class="headerlink" title="安装vuex"></a>安装vuex</h6><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> i vuex@<span class="hljs-number">3</span>		//添加@<span class="hljs-number">3</span>就是指定<span class="hljs-number">3</span>版本<br><br><span class="hljs-attribute">vue2</span>  &gt;&gt;&gt;  vuex<span class="hljs-number">3</span><br><span class="hljs-attribute">vue3</span>  &gt;&gt;&gt;	vuex<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>
<p>引入与使用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">import Vuex from <span class="hljs-string">&#x27;vuex&#x27;</span>	<span class="hljs-regexp">//</span>引入<br>Vue.use(Vuex)		<span class="hljs-regexp">//</span>使用<br></code></pre></td></tr></table></figure>
<h6 id="创建store"><a href="#创建store" class="headerlink" title="创建store"></a>创建store</h6><p>最好在src目录下创建:vuex/store.js或store/index.js</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">index.js<br>----------------------<br>import Vue <span class="hljs-keyword">from</span> &#x27;vue&#x27;	//引入vue<br>import Vuex <span class="hljs-keyword">from</span> &#x27;vuex&#x27;	//引入vuex<br><br>Vue.use(Vuex)	//应用插件 必须在new Vuex.Store前应用<br><br>//准备数据，actions(响应动作) mutations(修改数据) <span class="hljs-keyword">state</span>(保存数据)<br><span class="hljs-keyword">const</span> actions =&#123;<br>	add(context,value)&#123;	//context上下文，value传过来的值<br>		context.commit(&#x27;ADD&#x27;,value)		//add最好大写，便于区分<br>	&#125;<br>&#125;<br><span class="hljs-keyword">const</span> mutations =&#123;<br>	ADD(<span class="hljs-keyword">state</span>,value)&#123;<br>		<span class="hljs-keyword">state</span>.sum += value<br>	&#125;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">state</span> =&#123;<br>	sum:<span class="hljs-number">0</span><br>&#125;<br><br>//用于对数据加工，读取<span class="hljs-variable">$store</span>.getters.bigsum<br><span class="hljs-keyword">const</span> getters =&#123;<br>	bigsum(<span class="hljs-keyword">state</span>)&#123;<br>		return <span class="hljs-keyword">state</span>.sum*<span class="hljs-number">10</span><br>	&#125;<br>&#125;<br><br>//创建并暴露store<br>export <span class="hljs-keyword">default</span> new Vuex.Store(&#123;<br>	actions,<br>	mutations,<br>	<span class="hljs-keyword">state</span><br>&#125;)<br></code></pre></td></tr></table></figure>


<p>在main.js中创建vm时传入store配置项</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">main.js<br>-------------------<br><br>import store from <span class="hljs-emphasis">&#x27;./store&#x27;</span>		//引入store<br><br><span class="hljs-comment">//创建VM</span><br>new Vue(&#123;<br><span class="hljs-code">	store,</span><br>&#125;)<br></code></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">组件中读取数据：<span class="hljs-variable">$store</span><span class="hljs-selector-class">.state</span>.sum<br>组件中修改数据：<span class="hljs-variable">$store</span><span class="hljs-selector-class">.dispatch</span>(<span class="hljs-string">&#x27;action方法名&#x27;</span>,数据)或<span class="hljs-variable">$store</span><span class="hljs-selector-class">.commit</span>(<span class="hljs-string">&#x27;mutations方法名&#x27;</span>,数据)<br></code></pre></td></tr></table></figure>


<h5 id="四个map方法"><a href="#四个map方法" class="headerlink" title="四个map方法"></a>四个map方法</h5><p>引入</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123;mapState,mapGetters,mapMutations,mapActions&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></td></tr></table></figure>
<p>1.mapState：用于映射state中的属性</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">computed:&#123;<br>	...map<span class="hljs-constructor">State(&#123;<span class="hljs-params">sum</span>:&#x27;<span class="hljs-params">sum</span>&#x27;,<span class="hljs-params">school</span>:&#x27;<span class="hljs-params">school</span>&#x27;&#125;)</span>,<br>	<br>	或者<br>	...map<span class="hljs-constructor">State([&#x27;<span class="hljs-params">sum</span>&#x27;,&#x27;<span class="hljs-params">school</span>&#x27;])</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>2.mapGetter:映射getters中的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain">用法和mapState一样<br></code></pre></td></tr></table></figure>
<p>3.mapMutations:用于帮助生成mutations对话方法</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss">即包含<span class="hljs-variable">$store</span><span class="hljs-selector-class">.commit</span>(xxx)的函数<br>用法和mapState一样<br></code></pre></td></tr></table></figure>
<p>4.mapActions:用于帮助生成actions对话方法</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss">即包含<span class="hljs-variable">$store</span><span class="hljs-selector-class">.aispatch</span>(xxx)的函数<br></code></pre></td></tr></table></figure>
<p>mapMutations,mapActions使用时，若需要传递参数，需要在模板中绑定事件时传递好参数</p>
<h5 id="vuex模块化-nameSpace"><a href="#vuex模块化-nameSpace" class="headerlink" title="vuex模块化+nameSpace"></a>vuex模块化+nameSpace</h5><h6 id="目的：让代码更好维护，数据分类更加明确"><a href="#目的：让代码更好维护，数据分类更加明确" class="headerlink" title="目的：让代码更好维护，数据分类更加明确"></a>目的：让代码更好维护，数据分类更加明确</h6><h6 id="修改store-js"><a href="#修改store-js" class="headerlink" title="修改store.js"></a>修改store.js</h6><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">const <span class="hljs-built_in">tan</span> = &#123;<br>	namespaced:true,	//开启命名空间<br>	state:&#123;&#125;,<br>	mutation<span class="hljs-variable">s:</span>&#123;&#125;,<br>	action<span class="hljs-variable">s:</span>&#123;&#125;,<br>	getter<span class="hljs-variable">s:</span>&#123;&#125;<br>&#125;<br><br>const <span class="hljs-keyword">bo</span> = &#123;<br>	namespaced:true,	//开启命名空间<br>	state:&#123;&#125;,<br>	mutation<span class="hljs-variable">s:</span>&#123;&#125;,<br>	action<span class="hljs-variable">s:</span>&#123;&#125;,<br>	getter<span class="hljs-variable">s:</span>&#123;&#125;<br>&#125;<br><br>const store = <span class="hljs-keyword">new</span> Vuex.Store(&#123;<br>	modul<span class="hljs-variable">s:</span>&#123;<br>		<span class="hljs-built_in">tan</span>,		//原始：<span class="hljs-built_in">tan</span>:<span class="hljs-built_in">tan</span><br>		<span class="hljs-keyword">bo</span>			//原始: <span class="hljs-keyword">bo</span>:<span class="hljs-keyword">bo</span><br>	&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>


<h6 id="开启命名空间后，组件读取state数据"><a href="#开启命名空间后，组件读取state数据" class="headerlink" title="开启命名空间后，组件读取state数据"></a>开启命名空间后，组件读取state数据</h6><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">方式一：<br>this.<span class="hljs-variable">$store</span><span class="hljs-selector-class">.state</span><span class="hljs-selector-class">.tan</span>.list<br>方拾二：<br>..<span class="hljs-selector-class">.mapState</span>(<span class="hljs-string">&#x27;tan&#x27;</span>,<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>]</span>),<br></code></pre></td></tr></table></figure>
<h6 id="开启命名空间后，组件读取state数据-1"><a href="#开启命名空间后，组件读取state数据-1" class="headerlink" title="开启命名空间后，组件读取state数据"></a>开启命名空间后，组件读取state数据</h6><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">方式一：<br>this.<span class="hljs-variable">$store</span><span class="hljs-selector-class">.getters</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;tan/first&#x27;</span>]</span><br>方式二：<br>..<span class="hljs-selector-class">.mapGetters</span>(<span class="hljs-string">&#x27;tan&#x27;</span>,<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;bigSum&#x27;</span>]</span>)<br></code></pre></td></tr></table></figure>
<h6 id="开启命名空间后，组件调用dispatch"><a href="#开启命名空间后，组件调用dispatch" class="headerlink" title="开启命名空间后，组件调用dispatch"></a><strong>开启命名空间后，组件调用dispatch</strong></h6><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">方式一：<br>this.<span class="hljs-variable">$store</span><span class="hljs-selector-class">.dispatch</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;tan/first&#x27;</span>,person]</span><br>方式二：<br>..<span class="hljs-selector-class">.mapActions</span>(<span class="hljs-string">&#x27;tan&#x27;</span>,&#123;incrementOdd:<span class="hljs-string">&#x27;jiaOdd&#x27;</span>,&#125;incrementWait:<span class="hljs-string">&#x27;jiaWait&#x27;</span>)<br></code></pre></td></tr></table></figure>


<h6 id="开启命名空间后，组件调用commit"><a href="#开启命名空间后，组件调用commit" class="headerlink" title="开启命名空间后，组件调用commit"></a>开启命名空间后，组件调用commit</h6><p>mapAutations  与mapActions一样</p>
<h4 id="Route-路由"><a href="#Route-路由" class="headerlink" title="Route(路由)"></a>Route(路由)</h4><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">1</span>.理解：一个路由(route)就是一个映射关系(key-value)，多个路由需要路由器(router)管理。<br><span class="hljs-selector-tag">2</span>.前端路由：<span class="hljs-selector-tag">key</span>是路径，<span class="hljs-selector-tag">value</span>是组件<br><span class="hljs-selector-tag">3</span>.路由组件放到<span class="hljs-selector-tag">src</span>/<span class="hljs-selector-tag">pages</span>下面,普通组件放到<span class="hljs-selector-tag">src</span>/<span class="hljs-selector-tag">components</span>里<br></code></pre></td></tr></table></figure>


<h5 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h5><p>①安装vue-router，命令：<code>npm i vue-router@3</code></p>
<p>②应用插件：<code>Vue.use(VueRouter)</code></p>
<p>③编写router配置项</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">src<span class="hljs-regexp">/router/i</span>ndex.js 	<span class="hljs-comment">//路由配置文件路径，相关的路由组件放到src/pages里</span><br>==================================================<br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>	<span class="hljs-comment">//引入路由</span><br><br><span class="hljs-keyword">import</span> luyou1 <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/luyou1&#x27;</span>	<span class="hljs-comment">//引入需要配置路由的组件</span><br><br><span class="hljs-comment">//创建router实例</span><br>const router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>	routes:[<br>		&#123;<br>			path:<span class="hljs-string">&#x27;/about&#x27;</span>,<br>			component:luyou1<br>		&#125;,<br>		&#123;<br>			path:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>			component:luyou2<br>		&#125;,<br>		<br>	]<br>&#125;)<br><br>export <span class="hljs-keyword">default</span> router	<span class="hljs-comment">//暴露router</span><br></code></pre></td></tr></table></figure>
<p>④实现切换（active-class可配置高亮样式）</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">&lt;router-link <span class="hljs-attribute">active-class</span>=<span class="hljs-string">&quot;active&quot;</span> <span class="hljs-attribute">to</span>=<span class="hljs-string">&#x27;/luyou1&#x27;</span>&gt;About&lt;/router-link&gt;<br></code></pre></td></tr></table></figure>
<p>⑤指定展示的位置</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;router-view&gt;</span><span class="hljs-section">&lt;/router-view&gt;</span><br></code></pre></td></tr></table></figure>


<p>路由切换时，隐藏了的路由组件，默认是被销毁的，需要时在挂载</p>
<p>每个组件都有$route属性，里面存储着自己的路由信息</p>
<p>整个应用只有一个router，可以通过组件的$router属性获取到</p>
<h5 id="多级路由-嵌套路由"><a href="#多级路由-嵌套路由" class="headerlink" title="多级路由(嵌套路由)"></a>多级路由(嵌套路由)</h5><p>配置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">const router = new VueRouter(&#123;<br>	routes:[<br>		&#123;<br>			name:<span class="hljs-string">&#x27;test&#x27;</span>,	<span class="hljs-regexp">//</span>给路由命名，在模板中：	:to=<span class="hljs-string">&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;</span><br>			path:<span class="hljs-string">&#x27;/about&#x27;</span>,<br>			commponent:luyou1<br>		&#125;,<br>		&#123;<br>			path:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>			commponent:luyou2，<br>			children:[	<span class="hljs-regexp">//</span>通过children配置子级路由<br>				&#123;<br>					path:<span class="hljs-string">&#x27;news&#x27;</span>,	<span class="hljs-regexp">//</span>一定不要加/<br>					component:News<br>				&#125;,<br>				&#123;<br>					path:<span class="hljs-string">&#x27;message&#x27;</span>,	<span class="hljs-regexp">//</span>一定不要加/<br>					component:Message<br>				&#125;<br>			]<br>		&#125;,<br>		<br>	]<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>跳转（要写完整路径）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/news&quot;</span>&gt;</span>News<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h5 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h5><p>1.传递参数</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir">方法一：<br>&lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;m in messageList&quot;</span> <span class="hljs-symbol">:key=<span class="hljs-string">&quot;m.id&quot;</span>&gt;</span><br>	&lt;<span class="hljs-regexp">/router-link :to=&quot;/home</span><span class="hljs-regexp">/message/detail</span>?id=<span class="hljs-number">666</span>&amp;title=你好<span class="hljs-string">&quot;&gt;&lt;/router-link&gt;</span><br><span class="hljs-string">	或</span><br><span class="hljs-string">	&lt;/router-link :to=&quot;</span>`/home/detail?<span class="hljs-variable">$(</span>m.id)&amp;title=<span class="hljs-variable">$(</span>m.title)`<span class="hljs-string">&quot;&gt;&lt;/router-link&gt;</span><br><span class="hljs-string">&lt;/li&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">方法二：建议</span><br><span class="hljs-string">&lt;router-link</span><br><span class="hljs-string">	:to=&quot;</span>&#123;<br>		<span class="hljs-symbol">path:</span><span class="hljs-string">&#x27;/home/message/detail&#x27;</span>,<br>		<span class="hljs-symbol">query:</span>&#123;<br>			<span class="hljs-symbol">id:</span><span class="hljs-number">666</span>,<br>			<span class="hljs-symbol">title:</span><span class="hljs-string">&#x27;你好&#x27;</span><br>		&#125;<br>	&#125;<span class="hljs-string">&quot;</span><br><span class="hljs-string">&gt;跳转&lt;/router-link&gt;</span><br></code></pre></td></tr></table></figure>
<p>2.接收参数：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-variable">$route</span><span class="hljs-selector-class">.query</span>.id<br><span class="hljs-variable">$route</span><span class="hljs-selector-class">.query</span>.title<br><br>tips:route  没有 r 没有 r<br></code></pre></td></tr></table></figure>


<h5 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h5><p>1.配置路由，声明params参数</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">&#123;	<br>	name:<span class="hljs-string">&#x27;zhuye&#x27;</span>,		<span class="hljs-regexp">//</span>params传参必须有name<br>	path:<span class="hljs-string">&#x27;/home/:id/:title&#x27;</span>,	<span class="hljs-regexp">//</span>使用占位符声明接收params参数<br>	component:Home,<br>&#125;<br></code></pre></td></tr></table></figure>
<p>2.传递参数</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir">方法一：<br>&lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;m in messageList&quot;</span> <span class="hljs-symbol">:key=<span class="hljs-string">&quot;m.id&quot;</span>&gt;</span><br>	&lt;<span class="hljs-regexp">/router-link :to=&quot;/home</span><span class="hljs-regexp">/message/detail</span><span class="hljs-regexp">/666/</span>你好<span class="hljs-string">&quot;&gt;&lt;/router-link&gt;</span><br><span class="hljs-string">	或</span><br><span class="hljs-string">	&lt;/router-link :to=&quot;</span>`/home/detail/<span class="hljs-variable">$(</span>m.id)/<span class="hljs-variable">$(</span>m.title)`<span class="hljs-string">&quot;&gt;&lt;/router-link&gt;</span><br><span class="hljs-string">&lt;/li&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">方法二：建议</span><br><span class="hljs-string">&lt;router-link</span><br><span class="hljs-string">	:to=&quot;</span>&#123;<br>		<span class="hljs-symbol">name:</span><span class="hljs-string">&#x27;xiangxi&#x27;</span>,		<span class="hljs-regexp">//</span>必须用name<br>		<span class="hljs-symbol">params:</span>&#123;			<span class="hljs-regexp">//</span>用params<br>			<span class="hljs-symbol">id:</span><span class="hljs-number">666</span>,<br>			<span class="hljs-symbol">title:</span><span class="hljs-string">&#x27;你好&#x27;</span><br>		&#125;<br>	&#125;<span class="hljs-string">&quot;</span><br><span class="hljs-string">&gt;跳转&lt;/router-link&gt;</span><br></code></pre></td></tr></table></figure>
<p>3.接收参数</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">detail.vue	子组件<br>--------------<br>&lt;div&gt;<br><span class="hljs-code">	&#123;&#123;$route.params.id&#125;&#125;-&#123;&#123;$route.params.title&#125;&#125;</span><br>&lt;/div&gt;<br><br>tips:route  没有 r 没有 r<br></code></pre></td></tr></table></figure>


<h5 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h5><p>目的：让子组件接收的参数书写简单</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">配置到路由中，然后要在子组件中接收<br>&#123;<br>	name:<span class="hljs-string">&#x27;xiangxi&#x27;</span>,<br>	path:<span class="hljs-string">&#x27;detail/:id&#x27;</span>,<br>	component:Detail,<br>	<br>	props:&#123;<span class="hljs-selector-tag">a</span>:<span class="hljs-number">666</span>&#125;	<span class="hljs-comment">//第一种写法，只能传递括号里的内容,一般不使用</span><br>	props:true		<span class="hljs-comment">//第二种写法，为true时，路由收到的所有params参数传给组件(不能接收query参数)</span><br>	props(<span class="hljs-variable">$route</span>)&#123;	<span class="hljs-comment">//该函数会把对象中的每一组key-value都会传给组件</span><br>		return&#123;<br>			id:<span class="hljs-variable">$route</span><span class="hljs-selector-class">.query</span><span class="hljs-selector-class">.id</span>,<br>			title:route<span class="hljs-selector-class">.query</span>.title<br>		&#125;<br>	&#125;<br><br>&#125;<br><br>子组件接收<br>props:<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;title&#x27;</span>]</span><br></code></pre></td></tr></table></figure>


<h5 id="push与replace属性-history模式"><a href="#push与replace属性-history模式" class="headerlink" title="push与replace属性(history模式)"></a>push与replace属性(history模式)</h5><p>1.作用：用于控制路由跳转时操作浏览器历史记录模式</p>
<p>2.记录模式：push(默认)/replace</p>
<p>3.开启replace：</p>
<p>开启后，每次点击会替换前一条历史记录</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><code class="hljs sas">&lt;router-<span class="hljs-meta">link</span> <span class="hljs-meta">replace</span>&gt;&lt;/router-<span class="hljs-meta">link</span>&gt;<br></code></pre></td></tr></table></figure>


<h5 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h5><p>1.作用：不借助<code>&lt;router-rwatlink&gt;</code>实现路由跳转，让跳转更灵活</p>
<p>2.使用</p>
<p>写到methods方法中，</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">li</span> v-<span class="hljs-keyword">for</span>= <span class="hljs-string">&#x27;i in list&#x27;</span>&gt;<br>	&lt;<span class="hljs-selector-tag">button</span> @click=<span class="hljs-string">&#x27;pushchnage(i)&#x27;</span>&gt;点击跳转&lt;/button&gt;	<br>&lt;/li&gt;<br>如果遍历多个，要记得传参<br><br>methods:&#123;<br>	pushchange()&#123;<br>		this.<span class="hljs-variable">$router</span><span class="hljs-selector-class">.push</span>(&#123;<br>        name:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br>        params:&#123;<br>            id:xxx,<br>            title:xxx<br>        	&#125;<br>		&#125;)<br>	&#125;,<br>&#125;<br><br><br>this.<span class="hljs-variable">$router</span><span class="hljs-selector-class">.replace</span>(&#123;<br>	name:<span class="hljs-string">&#x27;xiangqing&#x27;</span>,<br>	params:&#123;<br>		id:xxx,<br>		title:xxx<br>	&#125;<br>&#125;)<br><br>this.<span class="hljs-variable">$router</span><span class="hljs-selector-class">.back</span>	<span class="hljs-comment">//后退</span><br>this.<span class="hljs-variable">$router</span><span class="hljs-selector-class">.foward</span>	<span class="hljs-comment">//前进</span><br>this.<span class="hljs-variable">$router</span><span class="hljs-selector-class">.go</span>(n)	<span class="hljs-comment">//指定跳几步 go(2)前进两步</span><br></code></pre></td></tr></table></figure>


<h5 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h5><p>让不展示的路由组件保持挂载，不被销毁</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">不写<span class="hljs-keyword">include</span>就是全部保持不销毁<br>写上可以指定不销毁，写的是组件名<br><br>&lt;<span class="hljs-keyword">keep</span>-alive <span class="hljs-keyword">include</span>=&#x27;组件名&#x27;&gt;		<span class="hljs-comment">//只能指定一个</span><br>	&lt;router-<span class="hljs-keyword">view</span>&gt;&lt;/router-<span class="hljs-keyword">view</span>&gt;<br>&lt;/<span class="hljs-keyword">keep</span>-alive&gt;<br><br>&lt;<span class="hljs-keyword">keep</span>-alive :<span class="hljs-keyword">include</span>=[&#x27;组件名1&#x27;,组件名2]&gt;	<span class="hljs-comment">//指定多个</span><br>	&lt;router-<span class="hljs-keyword">view</span>&gt;&lt;/router-<span class="hljs-keyword">view</span>&gt;<br>&lt;/<span class="hljs-keyword">keep</span>-alive&gt;<br></code></pre></td></tr></table></figure>


<h5 id="激活、失活-生命周期"><a href="#激活、失活-生命周期" class="headerlink" title="激活、失活 生命周期"></a>激活、失活 生命周期</h5><p>组件激活和失活时触发</p>
<p>activated()    激活</p>
<p>deactivated()    失活</p>
<p>nextTick(前面已经讲过)</p>
<h5 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h5><p>1.对路由进行权限控制</p>
<p>2.分类：全局守卫、独享守卫、组件内守卫</p>
<h6 id="全局守卫：初始化和每次切换时执行"><a href="#全局守卫：初始化和每次切换时执行" class="headerlink" title="全局守卫：初始化和每次切换时执行"></a>全局守卫：初始化和每次切换时执行</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">router/index.js<br>---------------------<br>位置 写到这个的后面<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  routes,<br>&#125;)<br>全局前置守卫<br>router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;		<span class="hljs-comment">//to:去哪儿from:从哪儿来next:放行</span><br>	<span class="hljs-keyword">if</span>(to.meta.isAuth)&#123;			<span class="hljs-comment">//判断是否需要进行权限控制(需要在路由配置中配置mata:&#123;isAuth:true&#125;)</span><br>		<span class="hljs-keyword">if</span>(<span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&#x27;school&#x27;</span>)===<span class="hljs-string">&#x27;atguigu&#x27;</span>)&#123;	<span class="hljs-comment">//控制权限的具体规则</span><br>			next()		<span class="hljs-comment">//放行</span><br>		&#125;<span class="hljs-keyword">else</span>&#123;<br>			alert(<span class="hljs-string">&#x27;无权限&#x27;</span>)<br>			router.push(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;login&quot;</span>&#125;)	<span class="hljs-comment">//去指定的页面</span><br>		&#125;<br>	&#125;<span class="hljs-keyword">else</span>&#123;<br>		next()<br>	&#125;<br>&#125;)<br><br><br>全局后置守卫<br>router.afterEach(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span></span>)=&gt;</span>&#123;<br>	<span class="hljs-keyword">if</span>(to.meta.title)&#123;<br>		<span class="hljs-built_in">document</span>.title=to.meat.title<br>	&#125;<span class="hljs-keyword">else</span>&#123;<br>		<span class="hljs-built_in">document</span>.title = <span class="hljs-string">&#x27;vuetitle&#x27;</span><br>	&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h6><p>beforeEnter(写到路由配置中)</p>
<p>写法和全局路由守卫的前置路由守卫一样,后面可以和全局后置守卫配合</p>
<h6 id="组件内路由守卫"><a href="#组件内路由守卫" class="headerlink" title="组件内路由守卫"></a>组件内路由守卫</h6><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">pages/about.vue<br>-----------------------<br><span class="hljs-comment">//进入该组件时调用		进入守卫</span><br>beforeRouterEnter(to,from,next)&#123;<br><span class="hljs-code">	里面写法和全局路由守卫一样</span><br>&#125;<br><br><span class="hljs-comment">//离开该组件时调用		离开守卫</span><br>beforeRouterLeave(to,from,next)&#123;<br><span class="hljs-code">	里面写法和全局路由守卫一样</span><br><span class="hljs-code">	next()</span><br>&#125;<br></code></pre></td></tr></table></figure>


<h5 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h5><p>1.hash模式</p>
<p>地址带#,不美观</p>
<p>若将地址通过第三方手机app分享，若app校验严格，则被标记不合法</p>
<p>兼容性好</p>
<p>2.history模式</p>
<p>地址干净美观</p>
<p>兼容性略差</p>
<p>部署上线时需要后端人员支持，解决页面刷新404问题</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">router/index.js<br>---------------------------<br>cosnt router = new VueRouter(&#123;<br><span class="hljs-code">	mode:&#x27;history&#x27;,		//默hash模式，切换到history模式</span><br><br>&#125;)<br></code></pre></td></tr></table></figure>


<h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-builtin-name">run</span> build<br></code></pre></td></tr></table></figure>
<p>将dist文件里面的所有同喜复制给后端部署就行了</p>
<h4 id="vue组件库"><a href="#vue组件库" class="headerlink" title="vue组件库"></a>vue组件库</h4><h6 id="移动端常用"><a href="#移动端常用" class="headerlink" title="移动端常用"></a>移动端常用</h6><p>Vant            htttps://youzan.github.io/vant</p>
<p>Cube UI        htttps://didi.github.io/cube-ui</p>
<p>Mint UI        htttps://mint-ui.github.io</p>
<h6 id="pc端"><a href="#pc端" class="headerlink" title="pc端"></a>pc端</h6><p>Element UI        htttps://element.eleme.cn</p>
<p>IView UI            htttps://<a href="http://www.iviewui.com/">www.iviewui.com</a></p>
<h3 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h3><h4 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h4><p>数据，方法等都配置到setup中</p>
<p>必须有返回值，**可以是对象(主要使用)**，也可以是渲染函数</p>
<p>尽量<strong>不要混用data，methods等方法</strong>，有<strong>重名</strong>优先以<strong>setup为主</strong></p>
<p><strong>不能用async修饰setup</strong>,因为这样会返回一个pomise对象，模板就看不到return对象中的属性了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//这样写不是响应式</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>	<span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;张三&quot;</span><br>		<span class="hljs-keyword">let</span> age = <span class="hljs-number">24</span><br>		<br>		<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHello</span>(<span class="hljs-params"></span>)</span>&#123;<br>			<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;这是方法&#x27;</span>)<br>		&#125;<br>		<br>		<span class="hljs-keyword">return</span> &#123;<br>			name,<br>			age,<br>			sayHello<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="setup两个注意点"><a href="#setup两个注意点" class="headerlink" title="setup两个注意点"></a>setup两个注意点</h5><p>执行时机</p>
<p>在beforeCreate之前执行</p>
<p>参数</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><code class="hljs kotlin">props:值为对象，是组件外部传递过来的值，且组件内部声明接收了的属性<br>context:上下文的对象<br>	attrs:值为对象，外部传递过来的，但没在props中声明，相当于<span class="hljs-keyword">this</span>.$attrs<br>	slots:接收到的插槽内容 相当于<span class="hljs-keyword">this</span>.$slots<br>	emit:分发自定义函数 相当于<span class="hljs-keyword">this</span>.$emit<br></code></pre></td></tr></table></figure>


<h5 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h5><p>定义一个响应式数据ref(参数)</p>
<p>参数可以为基本类型和对象类型</p>
<p>基本类型：响应依然靠<code>object.defineProperty()</code>和<code>get set</code>完成</p>
<p>对象类型：依靠reactive函数（里面有proxy对象）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> ‘vue’<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>	<span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">let</span> name = ref(<span class="hljs-string">&quot;张三&quot;</span>)	<span class="hljs-comment">//①用ref包裹后就成为响应式的了，模板中引用&#123;&#123;name&#125;&#125;</span><br>		<span class="hljs-keyword">let</span> age = ref(<span class="hljs-number">24</span>)<br>		<span class="hljs-keyword">let</span> person = ref&#123;<br>			habby:<span class="hljs-string">&#x27;打篮球&#x27;</span>,<br>			friend:<span class="hljs-string">&#x27;小红&#x27;</span><br>		&#125;<br>		<br>		<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"></span>)</span>&#123;<br>			name.value = <span class="hljs-string">&#x27;李四&#x27;</span>	<span class="hljs-comment">//修改响应式数据，要加上.value</span><br>			person.value.habby = <span class="hljs-string">&#x27;踢足球&#x27;</span>	<span class="hljs-comment">//person加value就行</span><br>		&#125;<br>		<br>		<span class="hljs-keyword">return</span> &#123;<br>			name,<br>			age,<br>			sayHello<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h5><p>定义一个<strong>对象类型</strong>的响应式数据</p>
<p>是深层次的</p>
<p>基于proxy实现，通过代理源对象对数据内部操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;reactive&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">let</span> person = reactive(&#123;<br>        name:<span class="hljs-string">&#x27;张三&#x27;</span>,<br>        age:<span class="hljs-string">&#x27;16&#x27;</span>,<br>        habby:[<span class="hljs-string">&#x27;游泳&#x27;</span>,<span class="hljs-string">&#x27;看书&#x27;</span>,<span class="hljs-string">&#x27;学习&#x27;</span>]<br>    &#125;)<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">changeperson</span>(<span class="hljs-params"></span>)</span>&#123;<br>        person.name = <span class="hljs-string">&#x27;李四&#x27;</span><br>        person.age = <span class="hljs-number">18</span><br>        habby[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;打球&#x27;</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> &#123;person&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="vue3响应式原理"><a href="#vue3响应式原理" class="headerlink" title="vue3响应式原理"></a>vue3响应式原理</h4><p>proxy(代理)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;<br>	name:<span class="hljs-string">&#x27;张三&#x27;</span><br>	age:<span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(person,&#123;<br>	<span class="hljs-comment">//读取</span><br>	<span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target,propName</span>)</span>&#123;<br>		<span class="hljs-keyword">return</span> target[propName]<br>	&#125;，<br>	<span class="hljs-comment">//修改和添加</span><br>	<span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target,propName,value</span>)</span>&#123;<br>		target[propName] = value<br>	&#125;，<br>	<span class="hljs-comment">//删除</span><br>	<span class="hljs-function"><span class="hljs-title">deleteProperty</span>(<span class="hljs-params">target,propName</span>)</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">delete</span> target[propName]<br>	&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>Reflect(反射)</p>
<p>操作对象，有返回值(true,false)</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> obj = &#123;a:<span class="hljs-number">1</span>,b:<span class="hljs-number">2</span>&#125;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Reflect</span>.</span></span>set(obj,a,<span class="hljs-number">5</span>)	<span class="hljs-comment">//修改或添加obj里的a属性</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Reflect</span>.</span></span>get(obj,b)		<span class="hljs-comment">//查询obj里的b属性</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Reflect</span>.</span></span>delete<span class="hljs-constructor">Property(<span class="hljs-params">obj</span>,<span class="hljs-params">b</span>)</span>	<span class="hljs-comment">//删除obj里的b属性</span><br></code></pre></td></tr></table></figure>
<h6 id="代理和反射合并-vue3完整响应式原理"><a href="#代理和反射合并-vue3完整响应式原理" class="headerlink" title="代理和反射合并(vue3完整响应式原理)"></a>代理和反射合并(vue3完整响应式原理)</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;<br>	name:<span class="hljs-string">&#x27;张三&#x27;</span><br>	age:<span class="hljs-number">18</span><br>&#125;<br><br><span class="hljs-keyword">const</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(person,&#123;<br>	<span class="hljs-comment">//读取</span><br>	<span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params">target,propName</span>)</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.get(target,propName)<br>	&#125;，<br>	<span class="hljs-comment">//修改和添加</span><br>	<span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">target,propName,value</span>)</span>&#123;<br>		<span class="hljs-built_in">Reflect</span>.set(target,propName,value)<br>	&#125;，<br>	<span class="hljs-comment">//删除</span><br>	<span class="hljs-function"><span class="hljs-title">deleteProperty</span>(<span class="hljs-params">target,propName</span>)</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-built_in">Reflect</span>.deleteProperty(terget,propName)<br>	&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<h4 id="computed函数"><a href="#computed函数" class="headerlink" title="computed函数"></a>computed函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;computed&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-comment">//简写</span><br>	<span class="hljs-keyword">let</span> fullName = computed(<span class="hljs-function">()=&gt;</span>&#123;<br>		<span class="hljs-keyword">return</span> person.firstname+person.lastname<br>	&#125;)<br>	<br>	<span class="hljs-comment">//完整写法</span><br>	<span class="hljs-keyword">let</span> fullName = computed(&#123;<br>		<span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br>			<span class="hljs-keyword">return</span> person.firstname+person.lastname<br>		&#125;,<br>		<span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newvalue</span>)</span>&#123;<br>			person.name = newvlue<br>		&#125;<br>	&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="watch函数"><a href="#watch函数" class="headerlink" title="watch函数"></a>watch函数</h4><p>监听reactive定义的响应式数据时，oldvalue无法正确获取，强制开启了深度监视(deep配置失效)</p>
<p>监听reactive定义的响应式数据中某个属性时：deep配置有效</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-regexp">//</span>情况一 监视一个ref定义的响应式数据<br>watch(sum,<span class="hljs-function"><span class="hljs-params">(newValue,oldValue)</span>=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sum变化了&#x27;</span>，newValue,oldValue)<br>&#125;,&#123;immediate:<span class="hljs-literal">true</span>&#125;)<br><br><span class="hljs-regexp">//</span>情况二 监视多个ref定义的响应式数据<br>watch([sum,msg],<span class="hljs-function"><span class="hljs-params">(newValue,oldValue)</span>=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;sum或msg变化了&#x27;</span>，newValue,oldValue)<br>&#125;,&#123;immediate:<span class="hljs-literal">true</span>&#125;)<br><br><span class="hljs-regexp">//</span>情况三 监视reactive定义的响应式数据<br><span class="hljs-regexp">//</span>若watch监视的是reactive定义的响应式数据，则无法正确获取oldvalue,且强制开启深度监视<br>watch(person,<span class="hljs-function"><span class="hljs-params">(newValue,oldValue)</span>=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person变化了&#x27;</span>，newValue,oldValue)<br>&#125;,&#123;immediate:<span class="hljs-literal">true</span>,deep:<span class="hljs-literal">false</span>&#125;) //deep不生效<br><br><span class="hljs-regexp">//</span>情况四 监视reactive定义的响应式数据中的某个属性<br>watch(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>person.name,<span class="hljs-function"><span class="hljs-params">(newValue,oldValue)</span>=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person里job变化了&#x27;</span>，newValue,oldValue)<br>&#125;)<br><br><span class="hljs-regexp">//</span>情况五 监视reactive定义的响应式数据中的多个属性<br>watch([()=&gt;person.age,<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>person.name],<span class="hljs-function"><span class="hljs-params">(newValue,oldValue)</span>=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person里job变化了&#x27;</span>，newValue,oldValue)<br>&#125;)<br><br><span class="hljs-regexp">//</span>特殊情况 当job也是一个对象时 deep有效<br>watch(person.job,<span class="hljs-function"><span class="hljs-params">(newValue,oldValue)</span>=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;person里job变化了&#x27;</span>，newValue,oldValue)<br>&#125;，&#123;deep:<span class="hljs-literal">true</span>&#125;)<br></code></pre></td></tr></table></figure>


<h4 id="watchEffect函数"><a href="#watchEffect函数" class="headerlink" title="watchEffect函数"></a>watchEffect函数</h4><p>watch函数:要指明监视的属性，也要指明监视的回调</p>
<p>watchEffect:不用指明监视哪个属性，监视的回调中用到哪个属性，就监视哪个属性</p>
<p>watchEffect有点像computed</p>
<p>​    computed注重计算出来的值(回调函数的返回值)，要写返回值</p>
<p>​    watchEffect注重的是过程(回调函数函数体)，不用写返回值</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>用到的属性中有一个变化，就会执行<br>watchEffect(()=&gt;&#123;<br>	sum++	<span class="hljs-regexp">//</span>sum变化了就会执行此函数<br>	age = <span class="hljs-number">2</span>	<span class="hljs-regexp">//</span>age变化了也会执行此函数<br>&#125;)<br></code></pre></td></tr></table></figure>


<h4 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h4><table>
<thead>
<tr>
<th align="center">vue2生命周期</th>
<th align="center">vue3生命周期</th>
<th align="center">组合形式API形式生命周期</th>
</tr>
</thead>
<tbody><tr>
<td align="center">beforecreate</td>
<td align="center">beforecreate</td>
<td align="center">setup()</td>
</tr>
<tr>
<td align="center">created</td>
<td align="center">created</td>
<td align="center">setup()</td>
</tr>
<tr>
<td align="center">beforemount</td>
<td align="center">beforemount</td>
<td align="center">onbeforemount</td>
</tr>
<tr>
<td align="center">mounted</td>
<td align="center">mounted</td>
<td align="center">onmounted</td>
</tr>
<tr>
<td align="center">beforeupdate</td>
<td align="center">beforeupdate</td>
<td align="center">onbeforeupdate</td>
</tr>
<tr>
<td align="center">updated</td>
<td align="center">updated</td>
<td align="center">onupdated</td>
</tr>
<tr>
<td align="center">beforedestory</td>
<td align="center">beforeunmount</td>
<td align="center">onbeforeunmount</td>
</tr>
<tr>
<td align="center">destoryed</td>
<td align="center">unmounted</td>
<td align="center">onunmounted</td>
</tr>
</tbody></table>
<figure class="highlight nim"><table><tr><td class="code"><pre><code class="hljs nim"><br>//写法<br>setup()&#123;<br>	onbeforemount(()=&gt;&#123; ....&#125;)<br>	onmounted(()=&gt;<span class="hljs-meta">&#123;....&#125;</span>)<br>	其他类似<br>&#125;<br></code></pre></td></tr></table></figure>


<h4 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h4><p>在src下创建hooks文件夹，在创建<code>usepinter.js</code>文件(最好以use开头)</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><code class="hljs nim">//usepinter.js<br>----------------------------------<br><span class="hljs-keyword">import</span> &#123;reractive,onMounted,onBeforeUnmounted&#125; <span class="hljs-keyword">from</span> &#x27;vue&#x27;<br><br><span class="hljs-keyword">export</span> default function()&#123;<br>	调用我了，我是一些方法<br>	<span class="hljs-keyword">let</span> <span class="hljs-built_in">pointer</span> = &#123;<br>		x:<span class="hljs-number">0</span>,<br>		y:<span class="hljs-number">0</span>,<br>	&#125;<br>	function()&#123;<br>	<br>	&#125;<br>	onMounted(()=&gt;<span class="hljs-meta">&#123;......&#125;</span>)<br>	onBeforeUnmounted(()=&gt;<span class="hljs-meta">&#123;........&#125;</span>)<br>	<span class="hljs-keyword">return</span> <span class="hljs-built_in">pointer</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>在需要使用的组件中引入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> usepointer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../hooks/usepointer.js&#x27;</span><br><br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">let</span> pointer = usepointer()<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h4 id="toref"><a href="#toref" class="headerlink" title="toref"></a>toref</h4><p>创建一个ref对象，其value值指向另一个对象的某个属性</p>
<p>应用：将响应式对象中的某个属性单独提供给外部使用时</p>
<p>扩展：toRefs 与 toref功能一致，可以批量创建多个ref对象</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//toref 一次只能处理一个对象</span><br><br>return&#123;<br>	name:<span class="hljs-keyword">to</span><span class="hljs-constructor">Ref(<span class="hljs-params">person</span>,&#x27;<span class="hljs-params">name</span>&#x27;)</span>,<br>	age:<span class="hljs-keyword">to</span><span class="hljs-constructor">Ref(<span class="hljs-params">person</span>,&#x27;<span class="hljs-params">age</span>&#x27;)</span>,<br>	salary:<span class="hljs-keyword">to</span><span class="hljs-constructor">Ref(<span class="hljs-params">person</span>.<span class="hljs-params">job</span>.<span class="hljs-params">j1</span>,&#x27;<span class="hljs-params">saylary</span>&#x27;)</span><br>&#125;<br><br><span class="hljs-comment">//toRefs 处理多个对象</span><br><br>return&#123;<br>	...<span class="hljs-keyword">to</span><span class="hljs-constructor">Refs(<span class="hljs-params">person</span>)</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="shallowReactive与shallowRef"><a href="#shallowReactive与shallowRef" class="headerlink" title="shallowReactive与shallowRef"></a>shallowReactive与shallowRef</h4><p>shallowReactive只考虑对象第一层的响应式</p>
<p>shallowRef：只对基本数据做响应式，不会对对象做响应式</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">cosnt person = shallowReactive(&#123;<br>	age:<span class="hljs-number">23</span>,			<span class="hljs-regexp">//</span>响应式<br>	name:<span class="hljs-string">&#x27;小明&#x27;</span>	<span class="hljs-regexp">//</span>响应式<br>	job:&#123;<br>		a:<span class="hljs-number">3</span>,	<span class="hljs-regexp">//</span>非响应式<br>		b:<span class="hljs-number">6</span>		<span class="hljs-regexp">//</span>非响应式<br>	&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>


<h4 id="readOnly与shallowReadonly"><a href="#readOnly与shallowReadonly" class="headerlink" title="readOnly与shallowReadonly"></a>readOnly与shallowReadonly</h4><p>readOnly：让响应式数据不能被更改</p>
<p>shallowReadonly：让响应式数据第一层不能被更改</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">per = read<span class="hljs-constructor">Only(<span class="hljs-params">person</span>)</span>	<span class="hljs-comment">//参数为响应式数据</span><br>per = shallow<span class="hljs-constructor">Readonly(<span class="hljs-params">person</span>)</span><br></code></pre></td></tr></table></figure>
<h4 id="toRaw与markRaw"><a href="#toRaw与markRaw" class="headerlink" title="toRaw与markRaw"></a>toRaw与markRaw</h4><p>toraw:将一个由reative生成的响应式对象转化为普通对象</p>
<p>markRaw:标记一个对象，让其永远不会在成为一个响应式对象</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">const p = <span class="hljs-keyword">to</span><span class="hljs-constructor">Raw(<span class="hljs-params">person</span>)</span> <br>p.age++	<span class="hljs-comment">//数据可以改，但不是响应式的</span><br><br><br><span class="hljs-keyword">let</span> car = &#123;naem:<span class="hljs-number">1121</span>,age;<span class="hljs-number">23</span>&#125;<br>person.car = mark<span class="hljs-constructor">Row(<span class="hljs-params">car</span>)</span>  <span class="hljs-comment">//car不会变成响应式的</span><br></code></pre></td></tr></table></figure>
<h4 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h4><p>作用：创建一个自定义的ref，并对其依赖项跟踪和更新触发进行显示控制</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;customRef&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myRef</span>(<span class="hljs-params">value</span>)</span>&#123;<br>		<span class="hljs-keyword">return</span> customRef(<span class="hljs-function">(<span class="hljs-params">track,trigger</span>)=&gt;</span>&#123;<br>			<span class="hljs-keyword">return</span>&#123;<br>				<span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br>					track() <span class="hljs-comment">//通知vue追踪value的变化</span><br>					<span class="hljs-keyword">return</span> value<br>				&#125;,<br>				<span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">newvalue</span>)</span>&#123;<br>					value = newvalue<br>					trigger()	<span class="hljs-comment">//通知vue重新解析模板</span><br>				&#125;<br>			&#125;<br>		&#125;)<br>	&#125;<br>	<br>	<span class="hljs-keyword">let</span> keyword = myRef(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>&#125;<br><br><br></code></pre></td></tr></table></figure>
<h4 id="provide与inject"><a href="#provide与inject" class="headerlink" title="provide与inject"></a>provide与inject</h4><p>作用：祖孙组件之间通信</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//祖组件</span><br>import &#123;reactive,provide&#125; from <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-function"><span class="hljs-title">setup</span><span class="hljs-params">()</span></span>&#123;<br>let car = reactive(&#123;name:<span class="hljs-string">&#x27;奔驰&#x27;</span>,price:<span class="hljs-string">&#x27;30w&#x27;</span>&#125;)<br><span class="hljs-function"><span class="hljs-title">provide</span><span class="hljs-params">(<span class="hljs-string">&#x27;car&#x27;</span>,car)</span></span><br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//孙组件</span><br><span class="hljs-keyword">import</span> &#123;inject&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">const</span> car = inject(<span class="hljs-string">&#x27;car&#x27;</span>)<br>	<span class="hljs-keyword">return</span> car<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h4><p>isRef:判断是否为ref对象</p>
<p>isReactive:    。。。。。</p>
<p>isReadonly:    。。。。。</p>
<p>isProxy:    。。。。。</p>
<h4 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h4><p>Fragment:template不用写根标签</p>
<p>Teleport:传送，将当前组件的特定内容传送到指定地方</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">teleport</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;body&quot;</span>&gt;</span> //to后面写css选择器<br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>	我是内容<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">teleport</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>Suspense:异步组件</p>
<p>等待异步组件时渲染一些额外的内容</p>
<p>异步引入组件</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> &#123;defineAsyncComonent&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br>const Child = defineAsyncComonent(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<span class="hljs-string">&#x27;./component/Child.vue&#x27;</span>&#125;) <br></code></pre></td></tr></table></figure>
<p>使用suspense包裹组件，并配置default与fallback</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;app&#x27;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">Suspense</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">Child</span>/&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:fallback</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>加载中<span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">Suspense</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端(尚硅谷)</category>
      </categories>
      <tags>
        <tag>Vue2</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析-Numpy</title>
    <url>/2021/06/26/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-Numpy/</url>
    <content><![CDATA[<h2 id="numpy的安装与说明"><a href="#numpy的安装与说明" class="headerlink" title="numpy的安装与说明"></a>numpy的安装与说明</h2><h4 id="数据-data"><a href="#数据-data" class="headerlink" title="数据(data)"></a>数据(data)</h4><p>–不只是数字</p>
<p>–“未经处理的原始记录”（《维基百科》)</p>
<p>–能够被计算机识别、存储和加工处理的</p>
<p>列：特征、属性、变量</p>
<p>行：样本、记录、观察、观测</p>
<h4 id="编辑器-最好使用以下编辑器"><a href="#编辑器-最好使用以下编辑器" class="headerlink" title="编辑器(最好使用以下编辑器)"></a>编辑器(最好使用以下编辑器)</h4><p>1、  jupyterlab</p>
<p>2、  jupyternotebook</p>
<p>官网：<a href="https://jupyter.org/">https://jupyter.org/</a></p>
<p>国内源安装</p>
<p>pip install jupyterlab -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>常用库：</p>
<p>pip install numpy</p>
<p>pip install pandas</p>
<h4 id="安装anaconda（有很多数据科学常用工具）"><a href="#安装anaconda（有很多数据科学常用工具）" class="headerlink" title="安装anaconda（有很多数据科学常用工具）"></a>安装anaconda（有很多数据科学常用工具）</h4><p>集成环境:<a href="https://www.anaconda.com/">https://www.anaconda.com/</a></p>
<h4 id="运行jupyterlab"><a href="#运行jupyterlab" class="headerlink" title="运行jupyterlab"></a>运行jupyterlab</h4><p>在cmd中进入工作文件夹执行</p>
<p>jupyter lab</p>
<p>查看Numpy版本：numpy._ _version__  或者 numpy.server.server</p>
<h2 id="Numpy的使用"><a href="#Numpy的使用" class="headerlink" title="Numpy的使用"></a>Numpy的使用</h2><h4 id="np-array的使用"><a href="#np-array的使用" class="headerlink" title="np.array的使用"></a>np.array的使用</h4><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#创建数组</span><br><span class="hljs-attribute">d</span> = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]，ndim=<span class="hljs-number">2</span>) 可以自由设置维度等参数<br><br><span class="hljs-comment">#查看类型</span><br><span class="hljs-attribute">type</span>(d)<br><br><span class="hljs-comment">#查看帮助文档</span><br><span class="hljs-attribute">np</span>.array?<br><br><span class="hljs-comment">#数组元素的类型</span><br><span class="hljs-attribute">d</span>.dtype		返回数组中元素的类型<br>	<span class="hljs-attribute">shape</span>(数组的形状几行几列)返回由整数组成的元组，元组中的每个整数依次对应数组的每个轴的元素个数。<br>	<span class="hljs-attribute">size</span>（元素数量）返回一个整数，代表数组中元素的个数。<br>	<span class="hljs-attribute">ndim</span>（几维数组）返回一个整数，代表数组的轴的个数，即维度<br>	<span class="hljs-attribute">nbytes</span>返回一个整数，代表用于保存数据的字节数。<br><br><span class="hljs-comment"># 数组元素类型的转化</span><br><span class="hljs-attribute">d2</span> = d.astype(np.int)<br><br><span class="hljs-comment"># 创建二维数组</span><br><span class="hljs-attribute">da</span> = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],[<span class="hljs-number">3</span>, <span class="hljs-number">4</span> ,<span class="hljs-number">5</span> ,<span class="hljs-number">6</span>],<span class="hljs-meta"> [5, 6, 7, 8], [7, 8, 9, 10]])</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">没列举完，可以上百度更多用法</span><br></code></pre></td></tr></table></figure>
<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>数组的索引也称为下标</p>
<p>1.下标是整数</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">import numpy as np<br>b = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">5</span>)<br>b<br>=&gt; array([<span class="hljs-number">0</span>., <span class="hljs-number">25</span>., <span class="hljs-number">50</span>., <span class="hljs-number">75</span>., <span class="hljs-number">100</span>.])<br><br>b[<span class="hljs-number">3</span>]	#取第四个数<br>=&gt; <span class="hljs-number">75.0</span><br><br>b[-<span class="hljs-number">3</span>]<br>=&gt; <span class="hljs-number">50.0</span><br><br>#二维数组<br>c = np.logspace(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>c<br><br>c[<span class="hljs-number">1</span>]		#取第二行<br>c[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]		#取第二行第三个数<br>c[(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)]	#第二行第三个<br><br>c[(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)] = <span class="hljs-number">999</span><br></code></pre></td></tr></table></figure>
<p>2.下标是列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs [">import numpy as np<br>b &#x3D; np.linspace(0, 100, 5)<br>b<br>&#x3D;&gt; array([0., 25., 50., 75., 100.])<br><br>b[1]		#返回值<br>&#x3D;&gt;25.0<br><br>b[(1)]		#返回值<br>&#x3D;&gt;25.0<br><br>b[[1, 3]]	#返回数组<br>&#x3D;&gt;array([25.0, 75.0])<br><br>#二维数组<br>c &#x3D; np.logspace(1, 3, 12).reshape(3, 4)<br>c<br><br>c[[0, 2]]		#返回第1行和第三行的数组<br>c[[0, 2], [1, 2]]	#返回以第一行的第二个数和第3行的第3个数组成的数组<br>c[[2,2,2]]		#列表为下标才可以这样写，返回以3个第3行组成的列表<br><br></code></pre></td></tr></table></figure>
<p>下标是数组</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">d = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>])<br><span class="hljs-built_in">t</span> = d == <span class="hljs-number">5</span><br>d[<span class="hljs-built_in">t</span>]<br>=&gt;array([<span class="hljs-built_in">False</span>, <span class="hljs-built_in">False</span>,  <span class="hljs-built_in">True</span>, <span class="hljs-built_in">False</span>, <span class="hljs-built_in">False</span>])<br><br>e =np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>)<br>e<br>#找出数组中的奇数<br><span class="hljs-built_in">t</span> = e % <span class="hljs-number">2</span> ==<span class="hljs-number">1</span>		#e % <span class="hljs-number">2</span> ==<span class="hljs-number">1</span>这个是判断条件<br>e[<span class="hljs-built_in">t</span>]<br><br>#e[<span class="hljs-built_in">t</span>]就是找出数组e里面符合条件<span class="hljs-built_in">t</span>的数<br><br>简化：<br>e[e % <span class="hljs-number">2</span> ==<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure>


<h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>一维数组的切片与列表切片一样</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">d</span> = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span> ,<span class="hljs-number">15</span>])<br><span class="hljs-attribute">d</span>[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure>
<p>二维数组</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">b</span> = np<span class="hljs-selector-class">.arange</span>(<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,<span class="hljs-number">10</span>)<span class="hljs-selector-class">.reshape</span>(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)+np<span class="hljs-selector-class">.arange</span>(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)<br>b<br>=&gt;array(<span class="hljs-selector-attr">[[ 0,  1,  2,  3,  4,  5]</span>,<br>       <span class="hljs-selector-attr">[10, 11, 12, 13, 14, 15]</span>,<br>       <span class="hljs-selector-attr">[20, 21, 22, 23, 24, 25]</span>,<br>       <span class="hljs-selector-attr">[30, 31, 32, 33, 34, 35]</span>,<br>       <span class="hljs-selector-attr">[40, 41, 42, 43, 44, 45]</span>,<br>       <span class="hljs-selector-attr">[50, 51, 52, 53, 54, 55]</span>])<br>       <br><span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[1:4]</span>		#得到第二行到第四行<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[1:4, 2:5]</span>	#得到第二行到第四行与第三列到第五列交叉的数<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[1, :]</span>		#得到第二行的数<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[1]</span>		#同上<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[:3, [0,3]</span>]	#先取前三行，<span class="hljs-selector-attr">[0,3]</span>的意思是取第一列和第第三列<br></code></pre></td></tr></table></figure>


<h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">import numpy as np<br>a = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>).reshape((<span class="hljs-number">2</span>, <span class="hljs-number">5</span>))<br>a<br>=&gt;array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>       [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<br> <br>元素级运算： 数组内的数对应加减乘除，数组与数组也是一样的<br>a * <span class="hljs-number">3</span>		#数组内每个数乘以<span class="hljs-number">3</span>，+ - /都是这样计算<br>=&gt;array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">12</span>],<br>       [<span class="hljs-number">15</span>, <span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">24</span>, <span class="hljs-number">27</span>]])<br>       <br>#广播 二维数组加一维数组<br>a = array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>          [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<br>b = array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br><br>a+b		#a的第一行加上对应的b,a的第二行也加上对应的b<br>=&gt;array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">8</span>],<br>         [ <span class="hljs-number">5</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>]])<br></code></pre></td></tr></table></figure>


<h4 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h4><h4 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h4><h6 id="创建矩阵"><a href="#创建矩阵" class="headerlink" title="创建矩阵"></a>创建矩阵</h6><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">import numpy as np<br>A = np.mat([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])		#创建矩阵<br>A<br><br>=&gt; matrix(<span class="hljs-string">[[1, 2, 3]]</span>)<br><br>A.shape		#查看形状<br><br>B = np.mat(<span class="hljs-string">&#x27;1 2 3; 4 5 6; 7 8 9&#x27;</span>)		#方阵<br>B<br><br>=&gt; matrix(<span class="hljs-string">[[1, 2, 3],</span><br><span class="hljs-string">          [4, 5, 6],</span><br><span class="hljs-string">          [7, 8, 9]]</span>)<br>          <br># 数组作为参数，创建矩阵<br>M1 = np.mat(np.eye(<span class="hljs-number">3</span>))<br>M1<br><br>#矩阵合并<br>np.bmat(<span class="hljs-string">&#x27;M1 M2;M2 M1&#x27;</span>)<br><br>重要 重要<br>两个数组相乘和两个矩阵相乘是不一样的<br>#矩阵的乘法<br><br>#两个数组相乘用“*”表示，对应元素相乘<br>a = np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>b = np.array(<span class="hljs-string">[[1,0,1],[0,1,1],[1,1,0]]</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-string">[[1 2 3]</span><br><span class="hljs-string"> [4 5 6]</span><br><span class="hljs-string"> [7 8 9]]</span><br><span class="hljs-comment">----------</span><br><span class="hljs-string">[[1 0 1]</span><br><span class="hljs-string"> [0 1 1]</span><br><span class="hljs-string"> [1 1 0]]</span><br><br>a*b       # 对应元素相乘<br>array(<span class="hljs-string">[[1, 0, 3],</span><br><span class="hljs-string">       [0, 5, 6],</span><br><span class="hljs-string">       [7, 8, 0]]</span>)<br><br>#两个矩阵用“*”相乘<br>A = np.mat(a)<br>B = np.mat(b)<br><br>A * B		# <span class="hljs-number">4</span>是a的第一行乘以b的第一列元素相加，以此类推<br>=&gt; matrix(<span class="hljs-string">[[ 4,  5,  3],</span><br><span class="hljs-string">        [10, 11,  9],</span><br><span class="hljs-string">        [16, 17, 15]]</span>)<br>        <br>np.dot(a,b)		#等价于上面的矩阵相乘  <br><br>A.T			#矩阵的转置<br></code></pre></td></tr></table></figure>


<h4 id="矢量运算"><a href="#矢量运算" class="headerlink" title="矢量运算"></a>矢量运算</h4><p>标量积</p>
<p>点积：np.dot(a,b)</p>
<p>内积： np.inner(a,b)</p>
<p>矢量积(叉积) ：np.cross(v,b)</p>
<h4 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h4><figure class="highlight nix"><table><tr><td class="code"><pre><code class="hljs nix"><span class="hljs-comment">#创建多项式</span><br><span class="hljs-comment"># f(x) = 2 x^3 - 3 x^2 + 1 x + 6</span><br><span class="hljs-attr">a</span> = np.array([<span class="hljs-number">2</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>])<br><span class="hljs-attr">fx</span> = np.poly1d(a)	<span class="hljs-comment">#poly1d中 d 前面的1是数字一</span><br>fx<br><br>=&gt; poly1d([ <span class="hljs-number">2</span>, -<span class="hljs-number">3</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">6</span>])<br><br>fx(<span class="hljs-number">2</span>)   <span class="hljs-comment">#给多项式赋值2</span><br>print(fx)	<span class="hljs-comment"># 打印fx多项式</span><br><br>拓展<br><span class="hljs-comment"># g = (x-1)^2 + 3(x-1) + 2</span><br><span class="hljs-attr">p</span> = np.poly1d([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])<br><span class="hljs-attr">g</span> = lambda x: p(x-<span class="hljs-number">1</span>)	<span class="hljs-comment">#将x替换成x-1</span><br>g(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">#基于根(解)创建多项式</span><br><span class="hljs-attr">root</span> = np.array([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-attr">p2</span> = np.poly1d(root, <span class="hljs-attr">r=True)</span><br>print(p2)<br><br><span class="hljs-comment">#在显示上，更换变量（将X替换成Y显示）</span><br><span class="hljs-attr">p3</span> = np.poly1d(a, <span class="hljs-attr">variable=&#x27;y&#x27;)</span><br>print(p3)<br></code></pre></td></tr></table></figure>
<h4 id="多项式运算"><a href="#多项式运算" class="headerlink" title="多项式运算"></a>多项式运算</h4><h6 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h6><p>正常运算</p>
<p>本质是系数运算，系数可以是数组，列表，</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit">p4 = p2 + [<span class="hljs-string">-2</span>, 1]		#[<span class="hljs-string">-2</span>,1]代表<span class="hljs-string">-2</span>x<span class="hljs-string">+1</span><br></code></pre></td></tr></table></figure>
<h6 id="微分（求导）"><a href="#微分（求导）" class="headerlink" title="微分（求导）"></a>微分（求导）</h6><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">pd</span> = p2.deriv()<br></code></pre></td></tr></table></figure>
<h6 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h6><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">pint</span> = pd.integ()<br></code></pre></td></tr></table></figure>
<h6 id="求多项式的根"><a href="#求多项式的根" class="headerlink" title="求多项式的根"></a>求多项式的根</h6><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">r</span> = np.roots(p2)<br></code></pre></td></tr></table></figure>
<p>#技巧：tab</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">np</span>.po	#按<span class="hljs-built_in">tab</span>键可以选择需要的函数<br><span class="hljs-built_in">np</span>.poly1d?	#查看该函数的方法<br></code></pre></td></tr></table></figure>


<h4 id="解线性方程组"><a href="#解线性方程组" class="headerlink" title="解线性方程组"></a>解线性方程组</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[[3, 1]</span>, <span class="hljs-selector-attr">[1, 2]</span>])<br><span class="hljs-selector-tag">b</span> = np,array(<span class="hljs-selector-attr">[[9]</span>, <span class="hljs-selector-attr">[8]</span>])<br>x = np<span class="hljs-selector-class">.linalg</span><span class="hljs-selector-class">.solve</span>(<span class="hljs-selector-tag">a</span>, b)<br>x<br><br>=&gt; array(<span class="hljs-selector-attr">[[2.]</span><br>			<span class="hljs-selector-attr">[3]</span>.])<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>尚硅谷-react</title>
    <url>/2022/04/20/%E5%B0%9A%E7%A1%85%E8%B0%B7-react/</url>
    <content><![CDATA[<h3 id="react基础"><a href="#react基础" class="headerlink" title="react基础"></a>react基础</h3><h4 id="react优点"><a href="#react优点" class="headerlink" title="react优点"></a>react优点</h4><p>1.采用组件化模式、声明式编码，提高开发效率及组件复用率。</p>
<p>2.在React Native中可以使用React语法进行移动端开发。</p>
<p>3.使用虚拟DOM+优秀的Diffing算法，尽量减少与真实DOM的交互。</p>
<h4 id="简单案例"><a href="#简单案例" class="headerlink" title="简单案例"></a>简单案例</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>	//②<br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/react.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/react-dom.development.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 上面两个必须写在前面，且顺序不能乱 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/babel.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>	//①<br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript">	<span class="hljs-comment">//写babel	③</span></span><br><span class="javascript">        <span class="hljs-keyword">const</span> VDOM = <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hello react<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>	<span class="hljs-comment">//jsx语法，创建虚拟dom</span></span><br><span class="javascript">        ReactDOM.render(VDOM,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>))	<span class="hljs-comment">//渲染虚拟dom到页面</span></span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br>//创建虚拟dom,不需要加引号、标签里是可以写选择器的<br> const VDOM = <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>hello react<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br> 可以写成<br>  const VDOM = (<br>  	<span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><br>  		<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>hello react<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  	<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  ) <br></code></pre></td></tr></table></figure>


<h4 id="jsx语法-规则、遍历"><a href="#jsx语法-规则、遍历" class="headerlink" title="jsx语法(规则、遍历)"></a><code>jsx</code>语法(规则、遍历)</h4><h5 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h5><figure class="highlight dust"><table><tr><td class="code"><pre><code class="hljs dust"><span class="xml">jsx语法规则:</span><br><span class="xml">1.定义虚拟DOM时，不要写引号。</span><br><span class="xml">2.标签中混入JS表达式时要用</span><span class="hljs-template-variable">&#123;&#125;</span><span class="xml">。</span><br><span class="xml">3.样式的类名指定不要用class，要用className。</span><br><span class="xml">4.内联样式，要用style=f</span><span class="hljs-template-variable">&#123;key : value&#125;</span><span class="xml">&#125;的形式去写。</span><br><span class="xml">5.只有一个根标签</span><br><span class="xml">6.标签必须闭合</span><br><span class="xml">7.标签首字母</span><br><span class="xml">	(1).若小写字母开头，则将改标签转为html中同名元素，若htm1中无该标签对应的同名元素，则报错。</span><br><span class="xml">	(2).若大写字母开头，react就去渲染对应的组件，若组件没有定义，则报错。</span><br></code></pre></td></tr></table></figure>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="xml">const myid = &#x27;title&#x27;</span><br><span class="xml">const content = &#x27;hello react&#x27;</span><br><br><span class="xml">const VDOM = (</span><br><span class="xml">  	<span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#123;myid&#125;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#x27;title&#x27;</span>&gt;</span>	//class要写成className</span><br><span class="xml">  		//内联样式，要用style=f&#123;key : value&#125;&#125;的形式去写,外层&#123;&#125;表示要写表达式，内层&#123;&#125;是一个对象</span><br><span class="xml">  		<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">color:</span><span class="hljs-string">&quot;red&quot;</span>,fontSize:<span class="hljs-string">&quot;20px&quot;</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&gt;</span>&#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> </span><br><span class="xml">  	<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">  ) </span><br></code></pre></td></tr></table></figure>
<h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell">遍历<br><span class="hljs-title">const</span> <span class="hljs-class"><span class="hljs-keyword">data</span> = [a,b,c]</span><br><br><span class="hljs-title">cosnt</span> <span class="hljs-type">VDOM</span> = (<br>	&lt;ul&gt;<br>		&#123;<br>			<span class="hljs-class"><span class="hljs-keyword">data</span>.map( (<span class="hljs-title">item</span>,<span class="hljs-title">index</span>)=&gt; &lt;li key=&#123;<span class="hljs-title">index</span>&#125;&gt;&#123;<span class="hljs-title">item</span>&#125;&lt;/li&gt; )</span><br>		&#125;<br>	&lt;/ul&gt;<br>)<br></code></pre></td></tr></table></figure>
<h4 id="组件-函数式、类式"><a href="#组件-函数式、类式" class="headerlink" title="组件(函数式、类式)"></a>组件(函数式、类式)</h4><h5 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建函数式组件</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Demo</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)	<span class="hljs-comment">//undefined,因为babel编译后开启了严格模式</span><br>	<span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是函数定义的组件(适用于【简单组件】的定义)<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br>&#125;<br><span class="hljs-comment">//渲染组件到页面 Demo首字母要大写，要有结束标签或自结束</span><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure>
<h5 id="复习：类的基本知识"><a href="#复习：类的基本知识" class="headerlink" title="复习：类的基本知识"></a>复习：类的基本知识</h5><h6 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建一个person类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;<br>	<span class="hljs-comment">//构造器方法</span><br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">name,age</span>)</span>&#123;<br>		<span class="hljs-built_in">this</span>.name = name	<span class="hljs-comment">//this指向类的实例对象</span><br>		<span class="hljs-built_in">this</span>.age = age<br>	&#125;<br>	<span class="hljs-comment">//一般方法 这些方法都是放到类的原型对象上，供实例使用</span><br>	<span class="hljs-comment">//通过Person实例调用speak时，speak中的this就是Person实例</span><br>	<span class="hljs-function"><span class="hljs-title">speak</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">`我叫<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.name&#125;</span>，<span class="hljs-subst">$&#123;<span class="hljs-built_in">this</span>.age&#125;</span>岁了`</span>)<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//创建一个person实例</span><br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-number">18</span>)<br><span class="hljs-keyword">const</span> p2 = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure>
<h6 id="继承-exends"><a href="#继承-exends" class="headerlink" title="继承(exends)"></a>继承(exends)</h6><p>可以直接调用父类的方法</p>
<p>如果子类的方法与父类的方法重名，那就是重写</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Person</span></span>&#123;<br>	constructor(name,age,grade)&#123;<br>		<span class="hljs-keyword">super</span>(name,age)	<span class="hljs-comment">//相当于父类中的this.name = name，this.age = age</span><br>		<span class="hljs-keyword">this</span>.grade = grade<br>	&#125;<br>	<span class="hljs-comment">//重写父类继承过来的方法</span><br>	speak()&#123;<br>		console.log(`我叫$&#123;<span class="hljs-keyword">this</span>.name&#125;，$&#123;<span class="hljs-keyword">this</span>.age&#125;岁了`，上$&#123;&#125;年级了)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="类式组件"><a href="#类式组件" class="headerlink" title="类式组件"></a>类式组件</h5><figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//创建</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>	render()&#123;<br>	console.log(<span class="hljs-keyword">this</span>)	<span class="hljs-comment">//MyComponent的实例对象或MyComponent组件实例对象</span><br>		<span class="hljs-keyword">return</span> &lt;h2&gt;我是类定义的组件(适用于【复杂组件】的定义)&lt;/h2&gt;<br>	&#125;<br>&#125;<br><span class="hljs-comment">//渲染组件到页面</span><br><span class="hljs-type">ReactDOM</span>.render(&lt;<span class="hljs-type">MyComponent</span>/&gt;,document.getElementById(<span class="hljs-symbol">&#x27;ap</span>p&#x27;))<br></code></pre></td></tr></table></figure>
<h4 id="初始化state"><a href="#初始化state" class="headerlink" title="初始化state"></a>初始化<code>state</code></h4><figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weather</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>	constructor(props)&#123;<br>		<span class="hljs-keyword">super</span>(props)<br>		<span class="hljs-keyword">this</span>.state = &#123;isHot:<span class="hljs-literal">false</span>&#125;	<span class="hljs-comment">//state必须是一个对象</span><br>	&#125;<br>	render()&#123;<br>	const &#123;isHot&#125; = <span class="hljs-keyword">this</span>.state<br>		<span class="hljs-keyword">return</span> &lt;h1&gt;今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;&lt;/h1&gt;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weather</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>		<span class="hljs-built_in">super</span>(props)<br>		<span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">isHot</span>:<span class="hljs-literal">false</span>&#125;	<span class="hljs-comment">//state必须是一个对象</span><br>	&#125;<br>	<span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">const</span> &#123;isHot&#125; = <span class="hljs-built_in">this</span>.state<br>		<span class="hljs-comment">//事件名是驼峰命名，第二个单词要大写。</span><br>		<span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span> = <span class="hljs-string">&#123;demo&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;h1被点击了&#x27;</span>)<br>&#125;<br><br>-----------------------------<br><span class="hljs-comment">//解决this指向问题</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weather</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>		<span class="hljs-built_in">super</span>(props)<br>		<span class="hljs-built_in">this</span>.state = &#123;<span class="hljs-attr">isHot</span>:<span class="hljs-literal">false</span>&#125;	<span class="hljs-comment">//state必须是一个对象</span><br>		<span class="hljs-built_in">this</span>.demo = <span class="hljs-built_in">this</span>.demo.bind(<span class="hljs-built_in">this</span>)<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">const</span> &#123;isHot&#125; = <span class="hljs-built_in">this</span>.state<br>		<span class="hljs-comment">//事件名是驼峰命名，第二个单词要大写。</span><br>		<span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">onClick</span> = <span class="hljs-string">&#123;this.demo&#125;</span>&gt;</span>今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>	&#125;<br>	<span class="hljs-function"><span class="hljs-title">demo</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>)	<span class="hljs-comment">//undefined</span><br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h4 id="三大属性-setState"><a href="#三大属性-setState" class="headerlink" title="三大属性(setState)"></a>三大属性(<code>setState</code>)</h4><h5 id="setState"><a href="#setState" class="headerlink" title="setState"></a><code>setState</code></h5><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">demo()&#123;<br>	this.<span class="hljs-keyword">state</span>.isHot = !this.<span class="hljs-keyword">state</span>.isHot	//不能这样修改<br>	<br>	this.<span class="hljs-built_in">set</span>State(&#123;isHot:!this.<span class="hljs-keyword">state</span>.isHot&#125;)	//只能这样修改，会进行对象的合并<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="state简写"><a href="#state简写" class="headerlink" title="state简写"></a><code>state</code>简写</h6><figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Weather</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>	<span class="hljs-comment">//初始化状态</span><br>	state = &#123;isHot:<span class="hljs-literal">false</span>,wind:&#x27;微风&#x27;&#125;<br>	render()&#123;<br>		const &#123;isHot&#125; = <span class="hljs-keyword">this</span>.state<br>		<span class="hljs-keyword">return</span> &lt;h1 onClick = &#123;<span class="hljs-keyword">this</span>.demo&#125;&gt;今天天气很&#123;isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;<br>	changeWeather = ()=&gt;&#123;<br>		<span class="hljs-keyword">this</span>.setState(&#123;isHot:!<span class="hljs-keyword">this</span>.state.isHot&#125;)<br>	&#125;<br>&#125;<br><br><span class="hljs-type">ReactDOM</span>.render(&lt;<span class="hljs-type">MyComponent</span>/&gt;,document.getElementById(<span class="hljs-symbol">&#x27;ap</span>p&#x27;))<br></code></pre></td></tr></table></figure>
<h5 id="props-父传子"><a href="#props-父传子" class="headerlink" title="props(父传子)"></a><code>props</code>(父传子)</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>	<span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">return</span>(<br>			&lt;ul&gt;<br>				&lt;li&gt;姓名：&#123;<span class="hljs-built_in">this</span>.props.name&#125;&lt;/li&gt;<br>				&lt;li&gt;姓名：&#123;<span class="hljs-built_in">this</span>.props.age&#125;&lt;/li&gt;<br>			&lt;/ul&gt;<br>		)<br>&#125;<br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tom&quot;</span> <span class="hljs-attr">age</span> = <span class="hljs-string">&quot;18&quot;</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>))<br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;张三&quot;</span> <span class="hljs-attr">age</span> = <span class="hljs-string">&#123;28&#125;/</span>&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>))<br>									<span class="hljs-comment">//加上大括才是数字</span><br><span class="hljs-comment">//批量传递 &#123;...per&#125;只在这里生效</span><br><span class="hljs-keyword">var</span> per = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-string">&quot;18&quot;</span>&#125;<br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Person</span> &#123;<span class="hljs-attr">...per</span>&#125; /&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>))<br></code></pre></td></tr></table></figure>
<h6 id="对props类型进行限制"><a href="#对props类型进行限制" class="headerlink" title="对props类型进行限制"></a>对<code>props</code>类型进行限制</h6><p>需要引入<code>prop-types.js</code>文件后才能限制</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>	render()&#123;<br>		<span class="hljs-keyword">return</span>(<br>			&lt;ul&gt;<br>				&lt;li&gt;姓名：&#123;<span class="hljs-keyword">this</span>.props.name&#125;&lt;/li&gt;<br>				&lt;li&gt;姓名：&#123;<span class="hljs-keyword">this</span>.props.age&#125;&lt;/li&gt;<br>			&lt;/ul&gt;<br>		)<br>&#125;<br><span class="hljs-comment">//标签属性限制类型（string,number,func）</span><br><span class="hljs-type">Person</span>.propTypes=&#123;<br>	name:<span class="hljs-type">PropTypes</span>.string.isRequired, <span class="hljs-comment">//必须是字符串，必须有</span><br>	age:<span class="hljs-type">PropTypes</span>.number,	<span class="hljs-comment">//必须是数字</span><br>&#125;<br><span class="hljs-comment">//设置属性的默认值</span><br><span class="hljs-type">Person</span>.defaultProps = &#123;<br>	age:<span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-type">ReactDOM</span>.render(&lt;<span class="hljs-type">Person</span> name=<span class="hljs-string">&quot;tom&quot;</span> age = <span class="hljs-string">&quot;18&quot;</span>/&gt;,document.getElementById(<span class="hljs-symbol">&#x27;ap</span>p&#x27;))<br></code></pre></td></tr></table></figure>
<h6 id="简写-写在类里面"><a href="#简写-写在类里面" class="headerlink" title="简写(写在类里面)"></a>简写(写在类里面)</h6><figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>	<span class="hljs-comment">//标签属性限制类型（string,number,func）</span><br>	propTypes=&#123;<br>        name:<span class="hljs-type">PropTypes</span>.string.isRequired, <span class="hljs-comment">//必须是字符串，必须有</span><br>        age:<span class="hljs-type">PropTypes</span>.number,	<span class="hljs-comment">//必须是数字</span><br>    &#125;<br>    <span class="hljs-comment">//设置属性的默认值</span><br>    defaultProps = &#123;<br>        age:<span class="hljs-number">0</span><br>    &#125;<br>	render()&#123;<br>		<span class="hljs-keyword">return</span>(<br>			&lt;ul&gt;<br>				&lt;li&gt;姓名：&#123;<span class="hljs-keyword">this</span>.props.name&#125;&lt;/li&gt;<br>				&lt;li&gt;姓名：&#123;<span class="hljs-keyword">this</span>.props.age&#125;&lt;/li&gt;<br>			&lt;/ul&gt;<br>		)<br>&#125;<br><br><br><span class="hljs-type">ReactDOM</span>.render(&lt;<span class="hljs-type">Person</span> name=<span class="hljs-string">&quot;tom&quot;</span> age = <span class="hljs-string">&quot;18&quot;</span>/&gt;,document.getElementById(<span class="hljs-symbol">&#x27;ap</span>p&#x27;))<br></code></pre></td></tr></table></figure>
<h6 id="构造器与props"><a href="#构造器与props" class="headerlink" title="构造器与props"></a>构造器与<code>props</code></h6><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">(props)</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-function"><span class="hljs-comment">	//构造器是否接收props，是否传给super，取决于是否在构造器中通过this访问props(很难遇到这样的需求)</span></span><br><span class="hljs-function"><span class="hljs-comment">	super(props)</span></span><br><span class="hljs-function"><span class="hljs-comment">	//如果不传props，this.props为undefined</span></span><br><span class="hljs-function"><span class="hljs-comment">	console.log(this.props);</span></span><br><span class="hljs-function"><span class="hljs-comment">&#125;</span></span><br></code></pre></td></tr></table></figure>
<h6 id="函数组件使用props"><a href="#函数组件使用props" class="headerlink" title="函数组件使用props"></a>函数组件使用<code>props</code></h6><p>标签里添加的属性都会被收集到<code>props</code>中</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-constructor">Person(<span class="hljs-params">props</span>)</span>&#123;<br>	const &#123;name,age,sex&#125; = props<br>	return(<br>			&lt;ul&gt;<br>				&lt;li&gt;姓名：&#123;this.props.name&#125;&lt;/li&gt;<br>				&lt;li&gt;姓名：&#123;this.props.age&#125;&lt;/li&gt;<br>			&lt;/ul&gt;<br>		)<br>&#125;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span>propTypes=&#123;<br>	name:<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PropTypes</span>.</span></span><span class="hljs-built_in">string</span>.isRequired, <span class="hljs-comment">//必须是字符串，必须有</span><br>	age:<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PropTypes</span>.</span></span>number,	<span class="hljs-comment">//必须是数字</span><br>&#125;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Person</span>.</span></span>defaultProps = &#123;<br>	age:<span class="hljs-number">0</span><br>&#125;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReactDOM</span>.</span></span>render(&lt;Person name=<span class="hljs-string">&quot;tom&quot;</span> age = <span class="hljs-string">&quot;18&quot;</span>/&gt;,document.get<span class="hljs-constructor">ElementById(&#x27;<span class="hljs-params">app</span>&#x27;)</span>)<br></code></pre></td></tr></table></figure>
<h4 id="refs"><a href="#refs" class="headerlink" title="refs"></a><code>refs</code></h4><p>可以用<code>ref</code>来标记标签，并且能根据<code>refs</code>来操作该标签</p>
<h6 id="字符串形式的ref-不建议使用"><a href="#字符串形式的ref-不建议使用" class="headerlink" title="字符串形式的ref(不建议使用)"></a>字符串形式的<code>ref</code>(不建议使用)</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">return</span>(<br>		&lt;div&gt;<br>			&lt;input ref=<span class="hljs-string">&#x27;input1&#x27;</span> type=<span class="hljs-string">&quot;text&quot;</span> onBlur=&#123;<span class="hljs-built_in">this</span>.getinput&#125; /&gt;<br>		&lt;/div&gt;<br>	)<br>	<br>getinput = <span class="hljs-function">()=&gt;</span>&#123;<br>	alert(<span class="hljs-built_in">this</span>.refs.input1.value)	<span class="hljs-comment">//this.refs.input1可以获取当前节点</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="回调形式的ref"><a href="#回调形式的ref" class="headerlink" title="回调形式的ref"></a>回调形式的<code>ref</code></h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//内联函数方式 当页面更新是箭头函数会调用两次</span><br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">return</span>(<br>		&lt;div&gt;<br>			&lt;input ref=&#123;<span class="hljs-function"><span class="hljs-params">c</span> =&gt;</span> <span class="hljs-built_in">this</span>.input1 = c&#125; type=<span class="hljs-string">&quot;text&quot;</span> onBlur=&#123;<span class="hljs-built_in">this</span>.getinput&#125; /&gt;<br>		&lt;/div&gt;<br>	)<br>	<br>getinput = <span class="hljs-function">()=&gt;</span>&#123;<br>	alert(<span class="hljs-built_in">this</span>.input1.value)	<span class="hljs-comment">//this.input1可以获取当前节点</span><br>&#125;<br><br>---------------------------------------------<br><span class="hljs-comment">//class的绑定函数形式	//这样写saveInput函数只调用一次</span><br><br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">return</span>(<br>		&lt;div&gt;<br>			&lt;input ref=&#123;<span class="hljs-built_in">this</span>.saveInput&#125; type=<span class="hljs-string">&quot;text&quot;</span> onBlur=&#123;<span class="hljs-built_in">this</span>.getinput&#125; /&gt;<br>		&lt;/div&gt;<br>	)<br>	<br>getinput = <span class="hljs-function">()=&gt;</span>&#123;<br>	alert(<span class="hljs-built_in">this</span>.input1.value)	<span class="hljs-comment">//this.input1可以获取当前节点</span><br>&#125;<br><br>saveInput = <span class="hljs-function">(<span class="hljs-params">c</span>)=&gt;</span>&#123;<br>	<span class="hljs-built_in">this</span>.input1 = c<br>	<span class="hljs-built_in">console</span>.log(c)<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="createRef的使用"><a href="#createRef的使用" class="headerlink" title="createRef的使用"></a><code>createRef</code>的使用</h6><figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>	<span class="hljs-comment">//React.createRef调用后可以返回一个容器，该容器可以存储被ref所标识的节点，一个容器只能存一个节点</span><br>	myRef = <span class="hljs-type">React</span>.createRef()<br>	myRef2 = <span class="hljs-type">React</span>.createRef()<br>	render()&#123;<br>		<span class="hljs-keyword">return</span>(<br>			&lt;div&gt;<br>				&lt;input ref=&#123;<span class="hljs-keyword">this</span>.myRef&#125; <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">&quot;text&quot;</span>  /&gt;<br>				&lt;input ref=&#123;<span class="hljs-keyword">this</span>.myRef2&#125; <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">&quot;text&quot;</span> onBlur=&#123;<span class="hljs-keyword">this</span>.getinput&#125; /&gt;<br>			&lt;/div&gt;<br>		)<br>&#125;<br>getinput = ()=&gt;&#123;<br>	alert(<span class="hljs-keyword">this</span>.myRef2.current.value)<br>&#125;<br><br><span class="hljs-type">ReactDOM</span>.render(&lt;<span class="hljs-type">Person</span> name=<span class="hljs-string">&quot;tom&quot;</span> age = <span class="hljs-string">&quot;18&quot;</span>/&gt;,document.getElementById(<span class="hljs-symbol">&#x27;ap</span>p&#x27;))<br></code></pre></td></tr></table></figure>
<h6 id="react中的事件处理"><a href="#react中的事件处理" class="headerlink" title="react中的事件处理"></a><code>react</code>中的事件处理</h6><p>当发生事件的元素与要操作事件的元素是同一个元素，不要使用<code>ref</code>,用<code>event.target</code></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">&lt;<span class="hljs-keyword">input</span>  <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> onBlur=&#123;<span class="hljs-keyword">this</span><span class="hljs-variable">.getinput</span>&#125; /&gt;<br><br>getinput = (<span class="hljs-keyword">event</span>)=&gt;&#123;<br>	alert(<span class="hljs-keyword">event</span><span class="hljs-variable">.target</span><span class="hljs-variable">.value</span>)<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="非受控组件与受控组件"><a href="#非受控组件与受控组件" class="headerlink" title="非受控组件与受控组件"></a>非受控组件与受控组件</h4><h6 id="非受控组件"><a href="#非受控组件" class="headerlink" title="非受控组件"></a>非受控组件</h6><figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">render()&#123;<br>	<span class="hljs-keyword">return</span>(<br>		&lt;form onSubmit = &#123;<span class="hljs-keyword">this</span><span class="hljs-variable">.handleSubmit</span>&#125;&gt;<br>			用户名：&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">ref</span>=&#123;c=&gt;<span class="hljs-keyword">this</span><span class="hljs-variable">.username</span>=c&#125; <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>/&gt;<br>			密码：&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">ref</span>=&#123;c=&gt;<span class="hljs-keyword">this</span><span class="hljs-variable">.password</span>=c&#125; <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>/&gt;<br>		&lt;/form&gt;<br>	)<br>	handleSubmit = (<span class="hljs-keyword">event</span>)=&gt;&#123;<br>		<span class="hljs-keyword">event</span><span class="hljs-variable">.preventDefault</span>()	<span class="hljs-comment">//阻止默认事件</span><br>		<span class="hljs-keyword">const</span> &#123;username,password&#125; = <span class="hljs-keyword">this</span><br>		alert(<span class="hljs-meta">`username:$&#123;username.value&#125;,password:$&#123;password.value&#125;`)</span><br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="受控组件-双向绑定"><a href="#受控组件-双向绑定" class="headerlink" title="受控组件(双向绑定)"></a>受控组件(双向绑定)</h6><p>是将获取的值放到<code>state</code>中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">return</span>(<br>		&lt;form onSubmit = &#123;<span class="hljs-built_in">this</span>.handleSubmit&#125;&gt;<br>			用户名：&lt;input onChange=&#123;<span class="hljs-built_in">this</span>.saveusername&#125; type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>/&gt;<br>			密码：&lt;input onChange=&#123;<span class="hljs-built_in">this</span>.savepassword&#125; type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>/&gt;<br>		&lt;/form&gt;<br>	)<br>	handleSubmit = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>		event.preventDefault()	<span class="hljs-comment">//阻止默认事件</span><br>		<span class="hljs-keyword">const</span> &#123;username,password&#125; = <span class="hljs-built_in">this</span>.state<br>		alert(<span class="hljs-string">`username:<span class="hljs-subst">$&#123;username&#125;</span>,password:<span class="hljs-subst">$&#123;password&#125;</span>`</span>)<br>	&#125;<br>	saveusername = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>		<span class="hljs-built_in">this</span>.setState(username:event.target.value)<br>	&#125;<br>	savepassword = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>		<span class="hljs-built_in">this</span>.setState(password:event.target.value)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h4><p>高阶函数：满足下面任意一个规范，就是高阶函数</p>
<p>1.若A函数接收的参数是一个函数，那么A就被称为高阶函数</p>
<p>2.若A函数，调用的返回值依然是一个函数，那么A就被称为高阶函数</p>
<p>常见的高阶函数：<code>promise、settimeout、arr.map()</code>等</p>
<p>函数柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式</p>
<h6 id="柯里化实现"><a href="#柯里化实现" class="headerlink" title="柯里化实现"></a>柯里化实现</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">return</span>(<br>		&lt;form onSubmit = &#123;<span class="hljs-built_in">this</span>.handleSubmit&#125;&gt;<br>			用户名：&lt;input onChange=&#123;<span class="hljs-built_in">this</span>.saveFormData(<span class="hljs-string">&#x27;username&#x27;</span>)&#125; type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>/&gt;<br>			密码：&lt;input onChange=&#123;<span class="hljs-built_in">this</span>.saveFormData(<span class="hljs-string">&#x27;password&#x27;</span>)&#125; type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>/&gt;<br>		&lt;/form&gt;<br>	)<br>	handleSubmit = <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>		event.preventDefault()	<span class="hljs-comment">//阻止默认事件</span><br>		<span class="hljs-keyword">const</span> &#123;username,password&#125; = <span class="hljs-built_in">this</span>.state<br>		alert(<span class="hljs-string">`username:<span class="hljs-subst">$&#123;username&#125;</span>,password:<span class="hljs-subst">$&#123;password&#125;</span>`</span>)<br>	&#125;<br>	<span class="hljs-comment">//只用写一个函数用来处理</span><br>	saveFormData = <span class="hljs-function">(<span class="hljs-params">dataType</span>)=&gt;</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>			<span class="hljs-built_in">this</span>.setState([dataType]:event.target.value)<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="不用柯里化实现"><a href="#不用柯里化实现" class="headerlink" title="不用柯里化实现"></a>不用柯里化实现</h6><figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">render()&#123;<br>	<span class="hljs-keyword">return</span>(<br>		&lt;form onSubmit = &#123;<span class="hljs-keyword">this</span><span class="hljs-variable">.handleSubmit</span>&#125;&gt;<br>			用户名：&lt;<span class="hljs-keyword">input</span> onChange=&#123;<span class="hljs-keyword">event</span> =&gt; <span class="hljs-keyword">this</span><span class="hljs-variable">.saveFormData</span>(&#x27;username&#x27;,<span class="hljs-keyword">event</span>)&#125; <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>/&gt;<br>			密码：&lt;<span class="hljs-keyword">input</span> onChange=&#123;<span class="hljs-keyword">event</span> =&gt; <span class="hljs-keyword">this</span><span class="hljs-variable">.saveFormData</span>(&#x27;password&#x27;,<span class="hljs-keyword">event</span>)&#125;  <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>/&gt;<br>		&lt;/form&gt;<br>	)<br>	handleSubmit = (<span class="hljs-keyword">event</span>)=&gt;&#123;<br>		<span class="hljs-keyword">event</span><span class="hljs-variable">.preventDefault</span>()	<span class="hljs-comment">//阻止默认事件</span><br>		<span class="hljs-keyword">const</span> &#123;username,password&#125; = <span class="hljs-keyword">this</span><span class="hljs-variable">.state</span><br>		alert(<span class="hljs-meta">`username:$&#123;username&#125;,password:$&#123;password&#125;`)</span><br>	&#125;<br>	<span class="hljs-comment">//只用写一个函数用来处理</span><br>	saveFormData = (dataType,<span class="hljs-keyword">event</span>)=&gt;&#123;<br>		<span class="hljs-keyword">this</span><span class="hljs-variable">.setState</span>([dataType]:<span class="hljs-keyword">event</span><span class="hljs-variable">.target</span><span class="hljs-variable">.value</span>)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>。初始化阶段：由ReactDOM.render()触发--初次渲染<br>	constructor<br>    componentWillMount()&#123;&#125;		<span class="hljs-regexp">//</span>将要挂载<br>    render()&#123;&#125;		<span class="hljs-regexp">//</span>初始化渲染，状态更新之后<br>    componentDidMount()&#123;&#125;		<span class="hljs-regexp">//</span>挂载完毕 ===常用<br>    					<span class="hljs-regexp">//</span>做一些初始化的事情，比如开启定时器，发送网络请求，订阅消息<br>    <br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>.更新阶段：由组件内部this.setState()或父组件render触发<br>	shouldComponentUpdate		<span class="hljs-regexp">//</span>控制组件是否更新<br>	componentWillUpdate			<span class="hljs-regexp">//</span>组件将要更新的钩子<br>	render()&#123;&#125;		<span class="hljs-regexp">//</span>初始化渲染，状态更新之后<br>	componentDidUpdate(preProps,preState)&#123;&#125;		<span class="hljs-regexp">//</span>更新完毕 参数分别代表，之前的props，之前的state<br><br><span class="hljs-regexp">//</span><span class="hljs-number">3</span>.卸载组件：由ReactDOM.unmountComponentAtNode触发<br>	componentWillUnmount()&#123;&#125;	<span class="hljs-regexp">//</span>将要卸载===常用<br>    					<span class="hljs-regexp">//</span>做一些收尾的事情，比如关闭定时器，取消订阅消息<br><br><br>-------------------------------------------------------------<br><span class="hljs-regexp">//</span>子组件接收新的props的流程<br>constructor<br>componentWillMount()&#123;&#125;		<span class="hljs-regexp">//</span>将要挂载<br>render()&#123;&#125;		<span class="hljs-regexp">//</span>初始化渲染，状态更新之后 必须使用<br>componentDidMount()&#123;&#125;		<span class="hljs-regexp">//</span>挂载完毕 <br>***componentWillReceiveProps	<span class="hljs-regexp">//</span>子组件将要接收新的props<br>shouldComponentUpdate		<span class="hljs-regexp">//</span>控制组件是否更新<br>componentWillUpdate			<span class="hljs-regexp">//</span>组件将要更新的钩子<br>componentWillUnmount()&#123;&#125;	<span class="hljs-regexp">//</span>将要卸载<br><br><br><br><span class="hljs-regexp">//</span>卸载组件按钮的回调<br>death = ()=&gt;&#123;<br>	<span class="hljs-regexp">//</span>卸载组件,要放到一个方法里面<br>	ReactDOM.unmountComponentAtNode(document.getElementById(<span class="hljs-string">&#x27;test&#x27;</span>))<br>&#125;<br><br><span class="hljs-regexp">//</span>强制更新按钮的回调<br>force = ()=&gt;&#123;<br>	this.forceUpdate()<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="新的生命周期"><a href="#新的生命周期" class="headerlink" title="新的生命周期"></a>新的生命周期</h6><p>废除了3个生命周期</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">componentWillMount</span><br><span class="hljs-attribute">componentWillReceiveProps</span><br><span class="hljs-attribute">componentWillUpdate</span><br></code></pre></td></tr></table></figure>
<p>添加了两个生命周期</p>
<p><code>getDerivedStateFromProps</code>派生状态</p>
<p>每次渲染都会调用</p>
<p>使用场景及其罕见</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">getDerivedStateFromProps<br>//要用static修饰成静态方法<br>//<span class="hljs-keyword">state</span>的值取决去返回的props的值，不能修改<br>//props组件标签传过来的数据，<span class="hljs-keyword">state</span>原始状态值，可以通过判断用哪个值<br><br>static getDerivedStateFromProps(props,<span class="hljs-keyword">state</span>)&#123;<br>	console.<span class="hljs-keyword">log</span>(props,<span class="hljs-keyword">state</span>)<br>	return props	//必须返回一个<span class="hljs-keyword">state</span>状态或者null<br>&#125;<br></code></pre></td></tr></table></figure>
<p><code>getSnapshotBeforeUpdate</code></p>
<p>即将更新之前调用（获取快照）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">getSnapshotBeforeUpdate</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;atguigu&#x27;</span>	<span class="hljs-comment">//这个返回值会传给componentDidUpdate</span><br>						<span class="hljs-comment">//必须有返回值，可以返回任意值，可以是null</span><br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">componentDidUpdate(preProps,preState)&#123;&#125;		<br>//更新完毕 参数分别代表，之前的props，之前的<span class="hljs-keyword">state</span>，getSnapshotBeforeUpdate传过来快照值<br></code></pre></td></tr></table></figure>
<h6 id="新的完整生命周期"><a href="#新的完整生命周期" class="headerlink" title="新的完整生命周期"></a>新的完整生命周期</h6><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi"><span class="hljs-comment">//1。初始化阶段：由ReactDOM.render()触发--初次渲染</span><br>	<span class="hljs-function"><span class="hljs-keyword">constructor</span></span><br><span class="hljs-function">    <span class="hljs-title">getDerivedStateFromProps</span></span><br><span class="hljs-function">    <span class="hljs-title">render</span><span class="hljs-params">()</span><span class="hljs-comment">&#123;&#125;</span>		<span class="hljs-comment">//初始化渲染，状态更新之后</span></span><br><span class="hljs-function">    <span class="hljs-title">componentDidMount</span><span class="hljs-params">()</span><span class="hljs-comment">&#123;&#125;</span>		<span class="hljs-comment">//挂载完毕 ===常用</span></span><br><span class="hljs-function">    					<span class="hljs-comment">//做一些初始化的事情，比如开启定时器，发送网络请求，订阅消息</span></span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-comment">//2.更新阶段：由组件内部this.setState()或父组件render触发</span></span><br><span class="hljs-function">	<span class="hljs-title">getDerivedStateFromProps</span></span><br><span class="hljs-function">	<span class="hljs-title">shouldComponentUpdate</span>		<span class="hljs-comment">//控制组件是否更新</span></span><br><span class="hljs-function">	<span class="hljs-title">render</span><span class="hljs-params">()</span><span class="hljs-comment">&#123;&#125;</span>		<span class="hljs-comment">//初始化渲染，状态更新之后</span></span><br><span class="hljs-function">	<span class="hljs-title">getSnapshotBeforeUpdate</span></span><br><span class="hljs-function">	<span class="hljs-title">componentDidUpdate</span><span class="hljs-params">(preProps,preState)</span><span class="hljs-comment">&#123;&#125;</span>		<span class="hljs-comment">//更新完毕 参数分别代表，之前的props，之前的state</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">//3.卸载组件：由ReactDOM.unmountComponentAtNode触发</span></span><br><span class="hljs-function">	<span class="hljs-title">componentWillUnmount</span><span class="hljs-params">()</span><span class="hljs-comment">&#123;&#125;</span>	<span class="hljs-comment">//将要卸载===常用</span></span><br><span class="hljs-function">    					<span class="hljs-comment">//做一些收尾的事情，比如关闭定时器，取消订阅消息</span></span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure>
<h3 id="react脚手架"><a href="#react脚手架" class="headerlink" title="react脚手架"></a><code>react</code>脚手架</h3><h4 id="安装与运行"><a href="#安装与运行" class="headerlink" title="安装与运行"></a>安装与运行</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>安装<br>npm i create-react-app -g	<span class="hljs-regexp">//</span>全局安装react脚手架<br><br><span class="hljs-regexp">//</span>创建项目<br>create-react-app myreact	<span class="hljs-regexp">//</span>后面是项目名-只能是英文小写<br><br><span class="hljs-regexp">//</span>运行项目<br>cd myreact <span class="hljs-regexp">//</span>进入项目目录<br>yarn start <span class="hljs-regexp">//</span>运行项目<br><br><span class="hljs-regexp">//</span>打包<br>yarn build	<span class="hljs-regexp">//</span>整个应用写完后，进行打包<br><br><span class="hljs-regexp">//</span>将webpack相关的文件展示出来<br>yarn eject	<span class="hljs-regexp">//</span>一般不显示，一旦显示就不能在隐藏了<br></code></pre></td></tr></table></figure>
<p>如果没有安装<code>yarn</code>,可以用<code>npm</code>代替</p>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>组件可以写成<code>jsx</code>文件</p>
<h6 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-comment">---- 静态资源文件夹</span><br>		favicon.icon <span class="hljs-comment">------ 网站页签图标</span><br>		<span class="hljs-keyword">index</span>.html <span class="hljs-comment">-------- 主页面      		 主要</span><br>		logo192.png <span class="hljs-comment">------- logo图</span><br>		logo512.png <span class="hljs-comment">------- logo图</span><br>		manifest.json <span class="hljs-comment">----- 应用加壳的配置文件</span><br>		robots.txt <span class="hljs-comment">-------- 爬虫协议文件</span><br>src <span class="hljs-comment">---- 源码文件夹</span><br>		App.css <span class="hljs-comment">-------- App组件的样式</span><br>		App.js <span class="hljs-comment">--------- App组件				主要</span><br>		App.test.js <span class="hljs-comment">---- 用于给App做测试</span><br>		<span class="hljs-keyword">index</span>.css <span class="hljs-comment">------ 样式</span><br>		<span class="hljs-keyword">index</span>.js <span class="hljs-comment">------- 入口文件	·			主要</span><br>		logo.svg <span class="hljs-comment">------- logo图</span><br>		reportWebVitals.js<br>			<span class="hljs-comment">--- 页面性能分析文件(需要web-vitals库的支持)</span><br>		setupTests.js<br>			<span class="hljs-comment">---- 组件单元测试的文件(需要jest-dom库的支持)</span><br><br></code></pre></td></tr></table></figure>
<p>开发的基本结构</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">src下<br>	api		<span class="hljs-regexp">//</span>ajax相关<br>	assets	<span class="hljs-regexp">//</span>公共资源<br>	componengs	<span class="hljs-regexp">//</span>非路由组件<br>	config		<span class="hljs-regexp">//</span>配置<br>	pages		<span class="hljs-regexp">//</span>路由组件<br>	utils		<span class="hljs-regexp">//</span>工具模块<br></code></pre></td></tr></table></figure>


<h6 id="public-index-html"><a href="#public-index-html" class="headerlink" title="public/index.html"></a><code>public/index.html</code></h6><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- %PUBLIC_URL% 代表public文件夹路径的简写 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 开启理想窗口，用于移动端网页的适配 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 用于配置浏览器页签+地址栏的颜色(仅支持安卓手机) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;theme-color&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;#000000&quot;</span> /&gt;</span><br>    &lt;meta<br>      name=&quot;description&quot;<br>      content=&quot;Web site created using create-react-app&quot;<br>    /&gt;<br>    <span class="hljs-comment">&lt;!-- 用于指定网页添加到手机主屏幕的图标(只支持苹果) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%PUBLIC_URL%/logo192.png&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!-- 应用加壳时的配置文件(manifest.json) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;manifest&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%PUBLIC_URL%/manifest.json&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>React App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  	<span class="hljs-comment">&lt;!-- 浏览器不支持js则显示 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span>You need to enable JavaScript to run this app.<span class="hljs-tag">&lt;/<span class="hljs-name">noscript</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h6 id="public-robots-txt"><a href="#public-robots-txt" class="headerlink" title="public/robots.txt"></a><code>public/robots.txt</code></h6><p>爬虫规则文件，指定哪些东西可以爬，哪些不能爬</p>
<h4 id="简单的hello组件-基本结构"><a href="#简单的hello组件-基本结构" class="headerlink" title="简单的hello组件(基本结构)"></a>简单的hello组件(基本结构)</h4><p><code>public</code>下的<code>index.html</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br>  <span class="hljs-comment">&lt;!-- %PUBLIC_URL% 代表public文件夹路径的简写 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;%PUBLIC_URL%/favicon.ico&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>React App<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><code>src</code>下的<code>App.js</code></p>
<figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs scala"><br><span class="hljs-keyword">import</span> <span class="hljs-type">React</span> from <span class="hljs-symbol">&#x27;reac</span>t&#x27;<br><br><span class="hljs-comment">//创建App组件 这是旧版本的写法，新版本有变化</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>	render()&#123;<br>		<span class="hljs-keyword">return</span>(<br>			&lt;div&gt;<br>				hello,react!	<span class="hljs-comment">//这可以写自己的组件</span><br>			&lt;/div&gt;<br>		)<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//默认暴露App组件</span><br>export <span class="hljs-keyword">default</span> <span class="hljs-type">App</span><br></code></pre></td></tr></table></figure>
<p><code>src</code>下的<code>index.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//引入react</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-comment">//引入reactDOM</span><br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-dom&#x27;</span>;<br><span class="hljs-comment">//引入App组件</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span>;<br><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>));<br></code></pre></td></tr></table></figure>
<h4 id="样式模块化"><a href="#样式模块化" class="headerlink" title="样式模块化"></a>样式模块化</h4><p>样式文件的名字必须添加<code>module</code>,例<code>index.moudle.css</code></p>
<p>引入：<code>import hello from &#39;./index.moule.css&#39;</code></p>
<p>在模板中使用：<code>&lt;div className=&#123;hello.title&#125;&gt;hello,react&lt;/div&gt;</code></p>
<h4 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h4><h6 id="父传子-props"><a href="#父传子-props" class="headerlink" title="父传子(props)"></a>父传子(<code>props</code>)</h6><figure class="highlight dust"><table><tr><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">TodoList</span> <span class="hljs-attr">key</span>=</span></span><span class="hljs-template-variable">&#123;current.id&#125;</span><span class="xml"><span class="hljs-tag"> </span></span><span class="hljs-template-variable">&#123;...current&#125;</span><span class="xml"><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TodoList</span>&gt;</span> //属性太多就用</span><span class="hljs-template-variable">&#123;...cur&#125;</span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">TodoList</span> <span class="hljs-attr">key</span>=</span></span><span class="hljs-template-variable">&#123;current.id&#125;</span><span class="xml"><span class="hljs-tag"> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;张三&quot;</span> <span class="hljs-attr">age</span> = </span></span><span class="hljs-template-variable">&#123;28&#125;</span><span class="xml"><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">TodoList</span>&gt;</span>	//属性少的时候用</span><span class="hljs-template-variable">&#123;name=&quot;张三&quot; age = &#123;28&#125;</span><span class="xml">&#125;</span><br></code></pre></td></tr></table></figure>
<h6 id="子传父-函数传递"><a href="#子传父-函数传递" class="headerlink" title="子传父(函数传递)"></a>子传父(函数传递)</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//父组件</span><br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>	<span class="hljs-keyword">return</span> (<br>        &lt;div&gt;<br>        &lt;MySearch getSearch=&#123;<span class="hljs-built_in">this</span>.getSearch&#125;&gt;&lt;/MySearch&gt;<br>        &lt;/div&gt;<br>	)<br>&#125;<br>getSearch = <span class="hljs-function">(<span class="hljs-params">val</span>)=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;TODO&#x27;</span>,val);<br>&#125;<br><br><span class="hljs-comment">//子组件 先定义一个事件函数来触发，调用getSearch</span><br>addtodo = <span class="hljs-function">()=&gt;</span>&#123;<br>  <span class="hljs-built_in">this</span>.props.getSearch(<span class="hljs-built_in">this</span>.addonetodo.value)<br> &#125;<br></code></pre></td></tr></table></figure>
<h4 id="安装axios"><a href="#安装axios" class="headerlink" title="安装axios"></a>安装<code>axios</code></h4><p>安装</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-builtin-name">add</span> axios<br></code></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">axios&#123;<br>	method:<span class="hljs-string">&#x27;get&#x27;</span>	<span class="hljs-regexp">//</span>请求方式<br>	url:<span class="hljs-string">&#x27;接口地址&#x27;</span><br>&#125;.then()<br></code></pre></td></tr></table></figure>
<h4 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h4><h6 id="第一种配置"><a href="#第一种配置" class="headerlink" title="第一种配置"></a>第一种配置</h6><p>在本页面写的请求都会通过代理发送给请求的服务器</p>
<p>在<code>package.json</code>下配置<code>proxy</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-string">&quot;proxy&quot;</span>:<span class="hljs-string">&quot;http://localhost:5000/&quot;</span>	<span class="hljs-regexp">//</span>写个baseurl就行 这儿是要访问的服务器的baseurl<br></code></pre></td></tr></table></figure>
<p>发送页面：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">axios</span><span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;http://localhost:3000/students&#x27;</span>)<span class="hljs-selector-class">.then</span>()	<span class="hljs-comment">//端口号要与本地网页打开的端口一样</span><br></code></pre></td></tr></table></figure>
<h6 id="第二种配置"><a href="#第二种配置" class="headerlink" title="第二种配置"></a>第二种配置</h6><p>可以配置多个服务器代理</p>
<p>在<code>src</code>目录下创建<code>setupProxy.js</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;http-proxy-middleware&#x27;</span>)<br><br>module.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">app</span>)</span>&#123;<br>	app.<span class="hljs-keyword">use</span>(<br>		proxy(<span class="hljs-string">&#x27;api1&#x27;</span>,&#123;<br>			target:<span class="hljs-string">&#x27;服务器baseurl&#x27;</span>,	<span class="hljs-comment">//将请求发给谁</span><br>			changeOrigin:<span class="hljs-literal">true</span>,		<span class="hljs-comment">//控制服务器收到的请求头中host的值</span><br>			pathRewrite:&#123;<span class="hljs-string">&#x27;^/api1,&#x27;</span><span class="hljs-string">&#x27;&#125;	//重写请求路径 拼接起来的重写请求路径url中的/api1替换为空</span><br><span class="hljs-string">		&#125;),</span><br><span class="hljs-string">		proxy(&#x27;</span>api2,&#123;<br>			target:<span class="hljs-string">&#x27;服务器baseurl&#x27;</span>,<br>			changeOrigin:<span class="hljs-literal">true</span>,<br>			pathRewrite:&#123;<span class="hljs-string">&#x27;^/api2&#x27;</span><span class="hljs-string">&#x27;&#125;	//将拼接起来的url中的/api2换为空</span><br><span class="hljs-string">		&#125;),</span><br><span class="hljs-string">	)</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure>
<h4 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h4><h6 id="pubsub-js"><a href="#pubsub-js" class="headerlink" title="pubsub-js"></a><code>pubsub</code>-js</h6><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">yarn</span> <span class="hljs-keyword">add</span> pubsub-js	<span class="hljs-comment">//也可以使npm安装</span><br></code></pre></td></tr></table></figure>
<h6 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h6><figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> PubSub <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;pubsub-js&#x27;</span><br></code></pre></td></tr></table></figure>
<h6 id="订阅消息"><a href="#订阅消息" class="headerlink" title="订阅消息"></a>订阅消息</h6><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript">PubSub.subscript(<span class="hljs-string">&#x27;atguigu&#x27;</span>,<span class="hljs-function"><span class="hljs-params">(msg,data)</span>=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(data)	<span class="hljs-regexp">//</span>打印接收到的消息<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">PubSub.publish(<span class="hljs-string">&#x27;atguigu&#x27;</span>,&#123;<span class="hljs-type">name</span>:<span class="hljs-string">&#x27;tom&#x27;</span>,age:<span class="hljs-string">&#x27;23&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure>
<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p><code>react-router-dom</code></p>
<h6 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">yarn add react-router-dom <span class="hljs-regexp">//</span>由于最新的包已发布，这儿默认安装的是新版本<br><br>npm i react-router-dom@<span class="hljs-number">5</span> <span class="hljs-regexp">//</span>安装旧版 <span class="hljs-number">5</span> 版本<br></code></pre></td></tr></table></figure>
<h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>引入<code>Link,Router</code></p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> &#123;Link,BrowserRouter,Route&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br></code></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br>&lt;BrowserRouter&gt;<br>	<span class="hljs-comment">//编写路由链接 相当于a标签</span><br>    &lt;Link to=<span class="hljs-string">&quot;/about&quot;</span>&gt;About&lt;/Link&gt;<br>    &lt;Link to=<span class="hljs-string">&quot;/home&quot;</span>&gt;Home&lt;/Link&gt;<br>    <br>    <span class="hljs-comment">//注册路由</span><br>    &lt;Route path=<span class="hljs-string">&quot;/about&quot;</span> component=&#123;About&#125;/&gt;<br>    &lt;Route path=<span class="hljs-string">&quot;/home&quot;</span> component=&#123;Home&#125;/&gt;<br>&lt;/BrowserRouter&gt;<br><br><span class="hljs-comment">//tips 需要引入about和home组件</span><br><br> <span class="hljs-comment">//需要用BrowserRouter这个标签将下面两个包起来</span><br> <span class="hljs-comment">//可以直接包裹app组件</span><br> <br> ReactDOM.render(<br> 	 &lt;BrowserRouter&gt;<br>        &lt;App/&gt;<br>     &lt;/BrowserRouter&gt;,<br>     <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br> )<br></code></pre></td></tr></table></figure>
<h6 id="二级路由"><a href="#二级路由" class="headerlink" title="二级路由"></a>二级路由</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;BrowserRouter&gt;<br>	<span class="hljs-comment">//编写路由链接 相当于a标签</span><br>    &lt;Link to=<span class="hljs-string">&quot;/about/news&quot;</span>&gt;news&lt;/Link&gt;<br>    &lt;Link to=<span class="hljs-string">&quot;/about/message&quot;</span>&gt;message&lt;/Link&gt;<br>    <br>    <span class="hljs-comment">//注册路由</span><br>    &lt;Route path=<span class="hljs-string">&quot;/about/news&quot;</span> component=&#123;News&#125;/&gt;<br>    &lt;Route path=<span class="hljs-string">&quot;/about/message&quot;</span> component=&#123;Message&#125;/&gt;<br>&lt;/BrowserRouter&gt;<br><br></code></pre></td></tr></table></figure>
<h4 id="路由组件与一般组件"><a href="#路由组件与一般组件" class="headerlink" title="路由组件与一般组件"></a>路由组件与一般组件</h4><p>1.写法不同</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">一般组件：<span class="hljs-tag">&lt;<span class="hljs-name">Demo</span>/&gt;</span><br>路由组件：<span class="hljs-tag">&lt;<span class="hljs-name">Router</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/demo&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Demo&#125;</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>2.存放位置不同</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima">一般组件：<span class="hljs-built_in">components</span><br>路由组件：pages<br></code></pre></td></tr></table></figure>
<p>3.接收到的<code>props</code>不同</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">一般组件：组件标签上传递什么，就能接收什么<br>路由组件：接收到三个固定的属性<br><span class="hljs-symbol">	history:</span><br><span class="hljs-symbol">		go:</span> f go(n)<br><span class="hljs-symbol">		goBack:</span><br><span class="hljs-symbol">		goForward:</span><br><span class="hljs-symbol">		push:</span><br><span class="hljs-symbol">		replace:</span><br><span class="hljs-symbol">	location:</span><br><span class="hljs-symbol">		pathname:</span><br><span class="hljs-symbol">		search:</span><br><span class="hljs-symbol">		state:</span><br><span class="hljs-symbol">	match:</span><br><span class="hljs-symbol">		params:</span><br><span class="hljs-symbol">		path:</span><br><span class="hljs-symbol">		url:</span><br></code></pre></td></tr></table></figure>


<h4 id="NavLink"><a href="#NavLink" class="headerlink" title="NavLink"></a><code>NavLink</code></h4><p>高亮显示</p>
<p><code>Link</code>的升级版</p>
<p>默认是蓝色背景，添加<code>activeClassName=&quot;类名&quot;</code>可以修改</p>
<p>如果与样式与其他框架起冲突，样式后面加上<code>!importent</code></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">&lt;NavLink <span class="hljs-attribute">activeClassName</span>=<span class="hljs-string">&quot;newactive&quot;</span> <span class="hljs-attribute">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;About&lt;/NavLink&gt; <br></code></pre></td></tr></table></figure>
<h5 id="封装NavLink"><a href="#封装NavLink" class="headerlink" title="封装NavLink"></a>封装NavLink</h5><h6 id="父组件内容"><a href="#父组件内容" class="headerlink" title="父组件内容"></a>父组件内容</h6><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">//需引入子组件<br><span class="hljs-tag">&lt;<span class="hljs-name">MyNavLink</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>About<span class="hljs-tag">&lt;<span class="hljs-name">MyNavLink</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>子组件内容</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyNavLink</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>	render()&#123;<br>		<span class="hljs-keyword">return</span> (<br>			&lt;<span class="hljs-type">NavLink</span> activeClassName=<span class="hljs-symbol">&#x27;atguig</span>u&#x27; &#123;...<span class="hljs-keyword">this</span>.props&#125;/&gt;<br>		)<br>	&#125;<br>&#125;<br><br>tips:&#123;...<span class="hljs-keyword">this</span>.props&#125; 会接收到的参数包括to .children等<br>		可以通过<span class="hljs-keyword">this</span>.props.children获取标签体内容<br>		children是父组件里的标签体里的内容(此处是<span class="hljs-type">About</span>)<br></code></pre></td></tr></table></figure>
<h4 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a><code>Switch</code></h4><p>当路由匹配到相应的组件后，不会继续再往下找</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;About&#125;/</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home1&#125;/</span>&gt;</span>	//匹配到这个后，就不会在向下匹配了<br>    <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home2&#125;/</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h4 id="解决样式丢失问题"><a href="#解决样式丢失问题" class="headerlink" title="解决样式丢失问题"></a>解决样式丢失问题</h4><p>当有多级路由结构时，并刷新页面会有样式丢失问题</p>
<p>会丢失</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;./css/bootstrap.css&quot;</span>&gt;<br></code></pre></td></tr></table></figure>
<p>解决：</p>
<p>1.引入样式是不要加上点</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;/css/bootstrap.css&quot;</span>&gt;<br></code></pre></td></tr></table></figure>
<p>2.用<code>%PUBLIC_URL%</code>代替点</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;%PUBLIC_URL%/css/bootstrap.css&quot;</span>&gt;<br></code></pre></td></tr></table></figure>
<p>3.用<code>HashRouter</code>包裹<code>App</code>组件</p>
<h4 id="模糊匹配与严格匹配"><a href="#模糊匹配与严格匹配" class="headerlink" title="模糊匹配与严格匹配"></a>模糊匹配与严格匹配</h4><p>默认是模糊匹配</p>
<p>加上<code>exact=&quot;true&quot;</code> 或<code>exact</code> 就便成了严格匹配</p>
<p><strong>严格匹配非必要不要开启</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">comppnents</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span>	//模糊匹配<br><span class="hljs-tag">&lt;<span class="hljs-name">Router</span> <span class="hljs-attr">exact</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">comppnents</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span>	//严格匹配<br></code></pre></td></tr></table></figure>
<h4 id="redirect重定向"><a href="#redirect重定向" class="headerlink" title="redirect重定向"></a>redirect重定向</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">comppnents</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Router</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">comppnents</span>=<span class="hljs-string">&#123;About&#125;</span> /&gt;</span>	<br><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>
<h4 id="向路由传递参数"><a href="#向路由传递参数" class="headerlink" title="向路由传递参数"></a>向路由传递参数</h4><h6 id="params传参"><a href="#params传参" class="headerlink" title="params传参"></a><code>params</code>传参</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>向组件传递(父组件内)<br>&lt;Link to=&#123;`<span class="hljs-regexp">/home/m</span>essage<span class="hljs-regexp">/detail/</span><span class="hljs-variable">$&#123;msg.id&#125;</span><span class="hljs-regexp">/$&#123;msg.title&#125;`&#125;&gt; Detail&lt;/</span>Link&gt;<br><br><span class="hljs-regexp">//</span>声明接收接收params参数(父组件内)<br>&lt;Route path=<span class="hljs-string">&quot;/home/message/detail/:id/:title&quot;</span> component=&#123;Detail&#125; /&gt;<br><br><span class="hljs-regexp">//</span>使用接收到的参数(子组件内)<br>const &#123;id,title&#125; = this.props.match.params<br></code></pre></td></tr></table></figure>
<h6 id="search传参"><a href="#search传参" class="headerlink" title="search传参"></a><code>search</code>传参</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>向组件传递(父组件内)<br>&lt;Link to=&#123;`<span class="hljs-regexp">/home/m</span>essage<span class="hljs-regexp">/detail/</span>?id=<span class="hljs-variable">$&#123;msg.id&#125;</span>&amp;title=<span class="hljs-variable">$&#123;msg.title&#125;</span>`&#125;&gt; Detail&lt;/Link&gt;<br><br><span class="hljs-regexp">//</span>search传参无需声明接收<br>&lt;Route path=<span class="hljs-string">&quot;/home/message/detail&quot;</span> component=&#123;Detail&#125; /&gt;<br><br><span class="hljs-regexp">//</span>使用接收到的参数(子组件内)<br><span class="hljs-regexp">//</span>需引入querystring包(内置)<br>import qs from <span class="hljs-string">&#x27;querystring&#x27;</span><br>const &#123;search&#125; = this.props.location<br>const &#123;id,title&#125; = qs.parse(search.slice(<span class="hljs-number">1</span>)) <span class="hljs-regexp">//</span>slice去掉？号<br></code></pre></td></tr></table></figure>
<h6 id="state传参"><a href="#state传参" class="headerlink" title="state传参"></a><code>state</code>传参</h6><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">//向组件传递(父组件内)<br><span class="hljs-variable">&lt;Link to=&#123;&#123;pathname:&#x27;/home/message/detail&#x27;,state:&#123;id:msg.id,title:msg.title&#125;&#125;&#125;&gt;</span> Detail&lt;/Link&gt;<br><br>//<span class="hljs-keyword">state</span>传参无需声明接收<br><span class="hljs-variable">&lt;Route path=&quot;/home/message/detail&quot; component=&#123;Detail&#125; /&gt;</span><br><br>//使用接收到的参数(子组件内)	//刷新也可以保留参数<br><span class="hljs-keyword">const</span> &#123;id,title&#125; = this.props.location.<span class="hljs-keyword">state</span> || &#123;&#125;<br></code></pre></td></tr></table></figure>
<h4 id="push与replace模式"><a href="#push与replace模式" class="headerlink" title="push与replace模式"></a><code>push</code>与<code>replace</code>模式</h4><p>默认是<code>push</code>模式</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="xml">//开启replace模式</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">replace</span>=<span class="hljs-string">&#123;true&#125;</span> <span class="hljs-attr">to</span>=</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">pathname:</span><span class="hljs-string">&#x27;/home/message/detail&#x27;</span>,state:&#123;id:msg.id,title:msg.title&#125;&#125;</span><span class="xml"><span class="hljs-tag">&#125;&gt;</span> Detail<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
<h4 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>触发按钮<br>&lt;button onClick=&#123;()=&gt; this.mypush(msg.id,msg.title)&#125;&gt;编程式导航&lt;/button&gt;<br><br><span class="hljs-regexp">//my</span>push方法<br>mypush = (id,title)=&gt;&#123;<br>	this.props.history.push(`<span class="hljs-regexp">/home/m</span>essage<span class="hljs-regexp">/$&#123;id&#125;/</span><span class="hljs-variable">$&#123;title&#125;</span>`)	<span class="hljs-regexp">//</span>params参数<br>	this.props.history.push(`<span class="hljs-regexp">/home/m</span>essage?id=<span class="hljs-variable">$&#123;id&#125;</span>&amp;title=<span class="hljs-variable">$&#123;title&#125;</span>`)	<span class="hljs-regexp">//</span>query参数<br>	this.props.history.push(`<span class="hljs-regexp">/home/m</span>essage`,&#123;id,title&#125;) <span class="hljs-regexp">//</span>state参数<br>	<span class="hljs-regexp">//</span>			      .replace<br>&#125;<br></code></pre></td></tr></table></figure>
<p>前进</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">this<span class="hljs-selector-class">.props</span><span class="hljs-selector-class">.history</span><span class="hljs-selector-class">.goBack</span>()<br></code></pre></td></tr></table></figure>
<p>后退</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">this<span class="hljs-selector-class">.props</span><span class="hljs-selector-class">.history</span><span class="hljs-selector-class">.goForword</span>()<br></code></pre></td></tr></table></figure>
<p>指定跳转</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">this<span class="hljs-selector-class">.props</span><span class="hljs-selector-class">.history</span><span class="hljs-selector-class">.go</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">//	前进两步</span><br>this<span class="hljs-selector-class">.props</span><span class="hljs-selector-class">.history</span><span class="hljs-selector-class">.go</span>(-<span class="hljs-number">3</span>)<span class="hljs-comment">//后退3步</span><br></code></pre></td></tr></table></figure>
<h4 id="withRouter"><a href="#withRouter" class="headerlink" title="withRouter"></a><code>withRouter</code></h4><p><code>withRouter</code>可以加工一般组件，让一般组件具备路由组件所特有的API</p>
<p>会返回一个新组件</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Header</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span></span>&#123;<br>	.....<br>&#125;<br><br><span class="hljs-comment">//更换一下暴露方式，用withRouter包裹Header</span><br>export <span class="hljs-keyword">default</span> withRouter(<span class="hljs-type">Header</span>) <br></code></pre></td></tr></table></figure>
<h4 id="BrowserRouter与HashRouter的区别"><a href="#BrowserRouter与HashRouter的区别" class="headerlink" title="BrowserRouter与HashRouter的区别"></a><code>BrowserRouter</code>与<code>HashRouter</code>的区别</h4><p>1.底层原理不一样</p>
<p>​    <code>BrowserRouter</code>使用的是<code>H5</code>的<code>history API</code>，不兼容<code>IE9</code>及以下版本</p>
<p>​    <code>HashRouter</code>使用的是<code>URL</code>的哈希值</p>
<p>2.<code>path</code>表现形式不一样</p>
<p>​    <code>BrowserRouter</code>路径不带#号</p>
<p>​    <code>HashRouter</code>路径带#</p>
<p>3.刷新后对路由<code>state</code>参数的影响</p>
<p>​    <code>BrowserRouter</code>没有任何影响</p>
<p>​    <code>HashRouter</code>刷新后会导致路由<code>state</code>参数丢失</p>
<p>4.<code>HashRouter</code>用于解决一些路径错误相关的问题</p>
<h4 id="组件库"><a href="#组件库" class="headerlink" title="组件库"></a>组件库</h4><p><code>ant-design</code>(蚂蚁金服写的)</p>
<p>官网：<a href="https://ant.design/index-cn">https://ant.design/index-cn</a></p>
<h6 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">yarn <span class="hljs-builtin-name">add</span> antd<br></code></pre></td></tr></table></figure>
<h4 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h4><p>专门用于做状态管理的js库</p>
<p>让多个组件之间共享状态</p>
<h5 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">yarn <span class="hljs-builtin-name">add</span> redux<br></code></pre></td></tr></table></figure>
<h5 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h5><p>在<code>src</code>下创建<code>redux</code>文件夹</p>
<p><code>redux</code>下创建<code>store.js</code>和<code>count_reducer.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//store.js</span><br><span class="hljs-comment">//该文件用于暴露一个store对象</span><br><br><span class="hljs-comment">//引入createStore，用于创建store对象</span><br><span class="hljs-keyword">import</span> &#123;createStore&#125; drom <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-comment">//引入为Count服务的reducer(自己创建的文件)</span><br><span class="hljs-keyword">import</span> countReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./count_reducer&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> createStort(countReducer)<br></code></pre></td></tr></table></figure>
<figure class="highlight fortran"><table><tr><td class="code"><pre><code class="hljs fortran">//count_reducer.js<br>//该文件是用于创建一个为<span class="hljs-built_in">count</span>组件服务的reducer,reducer本质是一个函数<br>//reducer会接到两个参数，分别是：之前的状态(preState)，动作对象(<span class="hljs-keyword">action</span>)<br><br>const initState = <span class="hljs-number">0</span><br>export defaul　<span class="hljs-function"><span class="hljs-keyword">function</span></span> countReducer(preState=initState,<span class="hljs-keyword">action</span>)&#123;<br>	//从<span class="hljs-keyword">action</span>中获取<span class="hljs-keyword">type</span>,<span class="hljs-keyword">data</span><br>	const &#123;<span class="hljs-keyword">type</span>,<span class="hljs-keyword">data</span>&#125; = <span class="hljs-keyword">action</span><br>	//根据<span class="hljs-keyword">type</span>决定加工数据<br>	switch(<span class="hljs-keyword">type</span>)&#123;<br>		<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;increment&#x27;</span>:<br>			<span class="hljs-keyword">return</span> preState + <span class="hljs-keyword">data</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;decrement&#x27;</span>:<br>            <span class="hljs-keyword">return</span> preState - <span class="hljs-keyword">data</span><br>        <span class="hljs-keyword">default</span>:<br>        	<span class="hljs-keyword">return</span> preState<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="组件内使用redux的状态"><a href="#组件内使用redux的状态" class="headerlink" title="组件内使用redux的状态"></a>组件内使用redux的状态</h6><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//引入</span><br>import store from <span class="hljs-string">&#x27;../../redux/store&#x27;</span><br><br><span class="hljs-comment">//获取state里的值</span><br>store<span class="hljs-selector-class">.getStore</span>() <br><br><span class="hljs-comment">//通知store修改状态</span><br><span class="hljs-comment">//写到方法里面</span><br>store<span class="hljs-selector-class">.dispatch</span>(&#123;type:<span class="hljs-string">&#x27;increment&#x27;</span>,data:value*<span class="hljs-number">1</span>&#125;)<br><br>------------------------------------------------------------<br><span class="hljs-comment">//检测redux状态的变化，变化后调用render，写在组件里，</span><br><span class="hljs-function"><span class="hljs-title">componentDidMount</span><span class="hljs-params">()</span></span>&#123;<br>	store<span class="hljs-selector-class">.subscribe</span>(()=&gt;&#123;<br>		this<span class="hljs-selector-class">.setState</span>(&#123;&#125;)<br>	&#125;)<br>&#125;<br><br>或<br><br><span class="hljs-comment">//写在index.js里，不管有多少个页面，只用写这一次</span><br>store<span class="hljs-selector-class">.subscribe</span>(()=&gt;&#123;<br>	ReactDom<span class="hljs-selector-class">.render</span>(&lt;App/&gt;,document<span class="hljs-selector-class">.getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>))<br>&#125;)<br></code></pre></td></tr></table></figure>
<p><code>redux</code>下创建<code>count_action.js</code>和<code>constent.js</code></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//constent.js</span><br><span class="hljs-comment">//用于定义type类型的常量值，防止写错</span><br><span class="hljs-comment">//用到这个变量的地方引入这个文件，防止写错</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> INCREMENT = <span class="hljs-string">&#x27;increment&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> DeCREMENT = <span class="hljs-string">&#x27;decrement&#x27;</span><br></code></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//count_action.js</span><br><span class="hljs-comment">//该文件专门为count组件生成action对象</span><br><span class="hljs-keyword">import</span> &#123;INCREMENT,DECREMENT&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./constent&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> createIncrementAction = <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> (&#123;<span class="hljs-attr">type</span>:INCREMENT,data&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> createDecrementAction = <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> (&#123;<span class="hljs-attr">type</span>:DECREMENT,data&#125;)<br><br><span class="hljs-comment">//使用(需要先引入)(组件内使用)</span><br><span class="hljs-comment">//引入</span><br><span class="hljs-keyword">import</span> &#123;createIncrementAction,createDecrementAction&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../redux/count_action.js&#x27;</span><br><span class="hljs-comment">//使用</span><br>store.dispatch(createIncrementAction(value*<span class="hljs-number">1</span>))<br>store.dispatch(createDecrementAction(value*<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure>
<h6 id="异步action-就是指action的值为函数"><a href="#异步action-就是指action的值为函数" class="headerlink" title="异步action,就是指action的值为函数"></a>异步<code>action</code>,就是指<code>action</code>的值为函数</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>store.js<br><br><span class="hljs-regexp">//</span>引入createStore，用于创建store对象<br><span class="hljs-regexp">//</span>引入 applyMiddleware 执行中间件  ******************<br>import &#123;createStore，applyMiddleware&#125; drom <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-regexp">//</span>引入为Count服务的reducer(自己创建的文件)<br>import countReducer from <span class="hljs-string">&#x27;./count_reducer&#x27;</span><br><span class="hljs-regexp">//</span>引入redux-thunk,用于支持异步action *******************<br><span class="hljs-regexp">//</span>安装 yarn add redux-thunk<br>import thunk from <span class="hljs-string">&#x27;redux-thunk&#x27;</span><br><br><br>export default createStort(countReducer,applyMiddleware(thunk)) <span class="hljs-regexp">//</span>添加第二个参数 **********<br></code></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//constent.js</span><br><span class="hljs-comment">//用于定义type类型的常量值，防止写错</span><br><span class="hljs-comment">//用到这个变量的地方引入这个文件，防止写错</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> INCREMENT = <span class="hljs-string">&#x27;increment&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> DeCREMENT = <span class="hljs-string">&#x27;decrement&#x27;</span><br><br>******************************************<br><span class="hljs-comment">//异步action，就是指action的值为函数，异步action一般会调用同步action</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> creatInCrementAsyncAction = <span class="hljs-function">(<span class="hljs-params">data,time</span>)=&gt;</span>&#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">dispatch</span>)=&gt;</span>&#123;<br>		<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>			dispatch(creatIncrementAction(data))<br>		&#125;,time)<br>	&#125;<br>&#125; <br></code></pre></td></tr></table></figure>
<h4 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a><code>react-redux</code></h4><p>1.所有的UIl组件都应该包裹一个容器组件，他们是父子关系。</p>
<p>⒉容器组件是真正和redux打交道的，里面可以随意的使用redux的api。</p>
<p>3.UI组件中不能使用任何redux的api。</p>
<p>4.容器组件会传给UI组件:(1).redux中所保存的状态。(2).用于操作状态的方法。</p>
<p>5.备注:容器给UI传递:状态、操作状态的方法，均通过props传递。</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode">获取：store.getState<span class="hljs-comment">()</span><br>修改：store.dispatch<span class="hljs-comment">(action)</span><br></code></pre></td></tr></table></figure>
<h5 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h5><p>在<code>src</code>下创建<code>container/Count/index.js</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//引入count的UI组件</span><br><span class="hljs-keyword">import</span> CountUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../components/Count&#x27;</span><br><br><span class="hljs-comment">//引入connect用于连接UI组件与redux</span><br><span class="hljs-keyword">import</span> &#123;connect&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><br><span class="hljs-comment">//下面两个函数返回的都是一个对象</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapStateToProps</span>(<span class="hljs-params">state</span>)</span>&#123;<br>	<span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">count</span>:state&#125; <span class="hljs-comment">//用于给子组件传值props</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">mapDispatchToProps</span>(<span class="hljs-params">dispatch</span>)</span>&#123;<br>	<span class="hljs-keyword">return</span> &#123; <span class="hljs-comment">//用于传递修改方法 需引入自己写的createIncrementAction</span><br>		jia:<span class="hljs-built_in">number</span> = &gt; dispatch(createIncrementAction(<span class="hljs-built_in">number</span>)), <br>		jian:<span class="hljs-built_in">number</span> = &gt; dispatch(createDecrementAction(<span class="hljs-built_in">number</span>)), <br>		jiaAsync:(<span class="hljs-built_in">number</span>,time) = &gt; dispatch(createIncrementAsyncAction(<span class="hljs-built_in">number</span>,time)), <br>	&#125; <span class="hljs-comment">//组件里使用 this.props.jia(val)</span><br>&#125;<br><br><span class="hljs-comment">//简写</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<br>	<span class="hljs-comment">//mapStateToProps的简写</span><br>	state =&gt; (&#123;<span class="hljs-attr">count</span>:state&#125;),<br>	<span class="hljs-comment">//mapDispatchToProps的简写</span><br>    &#123;<br>        jia:createIncrementAction,<br>        jian:createDecrementAction,<br>        jiaAsync:createIncrementAsyncAction<br>    &#125;<br>)(Count)<br><br><span class="hljs-comment">//使用connect()()创建并暴露一个Count的容器组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(mapStateToProps,mapDispatchToProps)(CountUI)<br></code></pre></td></tr></table></figure>
<h5 id="UI组件"><a href="#UI组件" class="headerlink" title="UI组件"></a><code>UI</code>组件</h5><p><code>ui</code>组件里不需要使用关于<code>redux</code>的语法</p>
<p>在使用<code>Count</code>组件时需要传入<code>store</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Count</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span> /&gt;</span><br></code></pre></td></tr></table></figure>
<h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><p>1.当使用<code>react-redux</code>后就不用写下面这一段代码，会自动检测</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//检测redux状态的变化，变化后调用render</span><br><span class="hljs-comment">//写在index.js里，不管有多少个页面，只用写这一次</span><br>store.subscribe(<span class="hljs-function">()=&gt;</span>&#123;<br>	ReactDom.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span>/&gt;</span></span>,<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>))<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>2.当有多个ui组件时，都需要传入<code>store</code>，可以直接在index里面直接用<code>provider</code>来包裹<code>APP</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">ReactDom.render(<br>    &lt;Provider&gt;<br>        &lt;App/&gt;<br>    &lt;/Provider&gt;,<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;root&#x27;</span>)<br>)<br></code></pre></td></tr></table></figure>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">&lt;Count <span class="hljs-keyword">store</span><span class="hljs-operator">=</span>&#123;<span class="hljs-keyword">store</span>&#125; /&gt; //当写了上面代码时，这边就不需要传入<span class="hljs-keyword">store</span>了<br></code></pre></td></tr></table></figure>
<p>3.<code>UI</code>组件与容器组件进行合并</p>
<h6 id="最终优化版"><a href="#最终优化版" class="headerlink" title="最终优化版"></a>最终优化版</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> React,&#123;Component&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123;connect&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-keyword">import</span> &#123;creatIncrementAction&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../redux/count_action&#x27;</span> <span class="hljs-comment">//自己写的文件</span><br><br><span class="hljs-comment">//UI组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Count</span> <span class="hljs-title">extents</span> <span class="hljs-title">Component</span> </span>&#123;<br>	add = <span class="hljs-function">()=&gt;</span>&#123;<br>		<span class="hljs-comment">//通知redux加一</span><br>		<span class="hljs-built_in">this</span>.props.jiafa(<span class="hljs-number">1</span>)<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">return</span>(<br>			&lt;div&gt;<br>				&lt;h2&gt;求和为：&#123;<span class="hljs-built_in">this</span>.props.he&#125;&lt;/h2&gt;<br>				&lt;button onClick=&#123;<span class="hljs-built_in">this</span>.add&#125;&gt;加一&lt;/button&gt;<br>			&lt;/div&gt;<br>		)<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//容器组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<br>	state =&gt; (&#123;<span class="hljs-attr">he</span>:state&#125;),	<span class="hljs-comment">//映射状态</span><br>	&#123;<span class="hljs-attr">jiafa</span>:createIncrementAction&#125;	<span class="hljs-comment">//映射操作状态的方法</span><br>)(Count)<br></code></pre></td></tr></table></figure>
<h4 id="多个数据共享"><a href="#多个数据共享" class="headerlink" title="多个数据共享"></a>多个数据共享</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//store.js</span><br><span class="hljs-comment">//当需要共享多个状态是，需引入combineReducers</span><br><span class="hljs-keyword">import</span> &#123;createStore,applyMiddleware,combineReducers&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><span class="hljs-keyword">import</span> countReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducers/count&#x27;</span><br><span class="hljs-keyword">import</span> personReducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducers/person&#x27;</span><br><span class="hljs-keyword">import</span> thunk <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-think&#x27;</span><br><br><span class="hljs-keyword">const</span> allReducer = combineReducers(&#123;<br>	he:countReducer,<br>	rens:personReducer<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> createStore(allReducer,applyMiddleware(thunk))<br><br><span class="hljs-comment">//在页面使用</span><br>state.he<br>state.rens<br></code></pre></td></tr></table></figure>


<h4 id="纯函数"><a href="#纯函数" class="headerlink" title="纯函数"></a>纯函数</h4><p>1.一类特别的函数:只要是同样的输入(实参)，必定得到同样的输出(返回)</p>
<p>2.必须遵守以下一些约束<br>    1)不得改写参数数据</p>
<p>​    2)不会产生任何副作用，例如网络请求，输入和输出设备</p>
<p>​    3)不能调用Date.now)或者Math.random)等不纯的方法</p>
<ol start="3">
<li>redux的reducer 函数必须是一个纯函数</li>
</ol>
<h4 id="redux开发者工具"><a href="#redux开发者工具" class="headerlink" title="redux开发者工具"></a>redux开发者工具</h4><p>插件市场下载<code>redux</code>并安装</p>
<p>需要在store中引入并使用<code>redux-devtools-extension</code>才会亮</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">安装：<br>yarn <span class="hljs-builtin-name">add</span> redux-devtools-extension<br>引入：<br>import &#123;composeWithDevTools&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux-devtools-extension&#x27;</span><br>使用：第二个参数用composeWithDevTools包裹<br><span class="hljs-builtin-name">export</span><span class="hljs-built_in"> default </span>createStore(allReducer,composeWithDevTools(applyMiddleware(thunk)))<br></code></pre></td></tr></table></figure>
<h4 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">npm <span class="hljs-builtin-name">run</span> build<br></code></pre></td></tr></table></figure>
<h6 id="快速创建一个服务器并运行指定文件夹"><a href="#快速创建一个服务器并运行指定文件夹" class="headerlink" title="快速创建一个服务器并运行指定文件夹"></a>快速创建一个服务器并运行指定文件夹</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>安装<br>npm i serve -g<br><span class="hljs-regexp">//</span>启动<br>serve  <span class="hljs-regexp">//</span>在根目录处执行<br>或<br>serve 指定文件夹<br></code></pre></td></tr></table></figure>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><h4 id="1-setState"><a href="#1-setState" class="headerlink" title="1. setState"></a>1.<code> setState</code></h4><h5 id="setState更新状态的2种写法"><a href="#setState更新状态的2种写法" class="headerlink" title="setState更新状态的2种写法"></a><code>setState</code>更新状态的2种写法</h5><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">	(<span class="hljs-number">1</span>). <span class="hljs-built_in">set</span>State(<span class="hljs-keyword">state</span>Change, [callback])------对象式的<span class="hljs-built_in">set</span>State<br>            <span class="hljs-number">1</span>.<span class="hljs-keyword">state</span>Change为状态改变对象(该对象可以体现出状态的更改)<br>            <span class="hljs-number">2</span>.callback是可选的回调函数, 它在状态更新完毕、界面也更新后(render调用后)才被调用<br>     例：<br>     this.<span class="hljs-built_in">set</span>State(&#123;count:count+<span class="hljs-number">1</span>&#125;,()=&gt;&#123;<br>     	console.<span class="hljs-keyword">log</span>(this.<span class="hljs-keyword">state</span>.count) //状态更新完毕、界面也更新后调用<br>     &#125;)<br>					<br>	(<span class="hljs-number">2</span>). <span class="hljs-built_in">set</span>State(updater, [callback])------函数式的<span class="hljs-built_in">set</span>State<br>            <span class="hljs-number">1</span>.updater为返回<span class="hljs-keyword">state</span>Change对象的函数。<br>            <span class="hljs-number">2</span>.updater可以接收到<span class="hljs-keyword">state</span>和props。<br>            <span class="hljs-number">4</span>.callback是可选的回调函数, 它在状态更新、界面也更新后(render调用后)才被调用。<br>            参数里面直接能获取到状态里面的数据，不需要自己在去<br>     this.<span class="hljs-built_in">set</span>State((<span class="hljs-keyword">state</span>,props)=&gt;&#123;<br>     	console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">state</span>,props)<br>     	return &#123;count:<span class="hljs-keyword">state</span>.count+<span class="hljs-number">1</span>&#125;<br>     &#125;)<br>总结:<br>		<span class="hljs-number">1</span>.对象式的<span class="hljs-built_in">set</span>State是函数式的<span class="hljs-built_in">set</span>State的简写方式(语法糖)<br>		<span class="hljs-number">2</span>.使用原则：<br>				(<span class="hljs-number">1</span>).如果新状态不依赖于原状态 ===&gt; 使用对象方式<br>				(<span class="hljs-number">2</span>).如果新状态依赖于原状态 ===&gt; 使用函数方式<br>				(<span class="hljs-number">3</span>).如果需要在<span class="hljs-built_in">set</span>State()执行后获取最新的状态数据, <br>					要在第二个callback函数中读取<br></code></pre></td></tr></table></figure>


<hr>
<h4 id="2-lazyLoad"><a href="#2-lazyLoad" class="headerlink" title="2. lazyLoad"></a>2. <code>lazyLoad</code></h4><h5 id="路由组件的lazyLoad"><a href="#路由组件的lazyLoad" class="headerlink" title="路由组件的lazyLoad"></a>路由组件的<code>lazyLoad</code></h5><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1.通过React的lazy函数配合import()函数动态加载路由组件 ===&gt; 路由组件代码会被分开打包</span><br><span class="hljs-keyword">const</span> Login = lazy(<span class="hljs-function">()=&gt;</span><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/pages/Login&#x27;</span>))<br><br><span class="hljs-comment">//2.通过&lt;Suspense&gt;指定在加载得到路由打包文件前显示一个自定义loading界面</span><br>&lt;Suspense fallback=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>loading.....<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span>&#125;&gt;<br>       &lt;Switch&gt;<br>           &lt;Route path=<span class="hljs-string">&quot;/xxx&quot;</span> component=&#123;Xxxx&#125;/&gt;<br>           &lt;Redirect to=<span class="hljs-string">&quot;/login&quot;</span>/&gt;<br>       &lt;/Switch&gt;<br>   &lt;/Suspense&gt;<br></code></pre></td></tr></table></figure>


<hr>
<h4 id="3-Hooks"><a href="#3-Hooks" class="headerlink" title="3. Hooks"></a>3. <code>Hooks</code></h4><h5 id="1-React-Hook-Hooks是什么"><a href="#1-React-Hook-Hooks是什么" class="headerlink" title="1. React Hook/Hooks是什么?"></a>1. <code>React Hook/Hooks</code>是什么?</h5><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">(<span class="hljs-number">1</span>). Hook是React <span class="hljs-number">16.8</span>.<span class="hljs-number">0</span>版本增加的新特性/新语法<br>(<span class="hljs-number">2</span>). 可以让你在函数组件中使用 <span class="hljs-keyword">state</span> 以及其他的 React 特性<br></code></pre></td></tr></table></figure>
<h5 id="2-三个常用的Hook"><a href="#2-三个常用的Hook" class="headerlink" title="2. 三个常用的Hook"></a>2. 三个常用的<code>Hook</code></h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">(<span class="hljs-number">1</span>). State Hook: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">React</span>.</span></span>use<span class="hljs-constructor">State()</span><br>(<span class="hljs-number">2</span>). Effect Hook: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">React</span>.</span></span>use<span class="hljs-constructor">Effect()</span><br>(<span class="hljs-number">3</span>). Ref Hook: <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">React</span>.</span></span>use<span class="hljs-constructor">Ref()</span><br></code></pre></td></tr></table></figure>
<h5 id="3-State-Hook"><a href="#3-State-Hook" class="headerlink" title="3. State Hook"></a>3. <code>State Hook</code></h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">(<span class="hljs-number">1</span>). State Hook让函数组件也可以有state状态, 并进行状态数据的读写操作<br>(<span class="hljs-number">2</span>). 语法: const <span class="hljs-literal">[<span class="hljs-identifier">xxx</span>, <span class="hljs-identifier">setXxx</span>]</span> = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">React</span>.</span></span>use<span class="hljs-constructor">State(<span class="hljs-params">initValue</span>)</span>  <br>(<span class="hljs-number">3</span>). use<span class="hljs-constructor">State()</span>说明:<br>        参数: 第一次初始化指定的值在内部作缓存<br>        返回值: 包含<span class="hljs-number">2</span>个元素的数组, 第<span class="hljs-number">1</span>个为内部当前状态值, 第<span class="hljs-number">2</span>个为更新状态值的函数<br>(<span class="hljs-number">4</span>). set<span class="hljs-constructor">Xxx()</span><span class="hljs-number">2</span>种写法:<br>        set<span class="hljs-constructor">Xxx(<span class="hljs-params">newValue</span>)</span>: 参数为非函数值, 直接指定新的状态值, 内部用其覆盖原来的状态值<br>        set<span class="hljs-constructor">Xxx(<span class="hljs-params">value</span> =&gt; <span class="hljs-params">newValue</span>)</span>: 参数为函数, 接收原本的状态值, 返回新的状态值, 内部用其覆盖原来的状态值<br></code></pre></td></tr></table></figure>
<h5 id="4-Effect-Hook"><a href="#4-Effect-Hook" class="headerlink" title="4. Effect Hook"></a>4. <code>Effect Hook</code></h5><figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">(<span class="hljs-number">1</span>). Effect Hook 可以让你在函数组件中执行副作用操作(用于模拟类组件中的生命周期钩子)<br>(<span class="hljs-number">2</span>). React中的副作用操作:<br>        发ajax请求数据获取<br>        设置订阅 / 启动定时器<br>        手动更改真实DOM<br>(<span class="hljs-number">3</span>). 语法和说明: <br>        useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; <br>          <span class="hljs-comment">// 在此可以执行任何带副作用操作</span><br>          <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123; <span class="hljs-comment">// 在组件卸载前执行</span><br>            <span class="hljs-comment">// 在此做一些收尾工作, 比如清除定时器/取消订阅等</span><br>          &#125;<br>        &#125;, [stateValue]) <span class="hljs-comment">// 如果指定的是[], 回调函数只会在第一次render()后执行</span><br>    <br>(<span class="hljs-number">4</span>). 可以把 useEffect Hook 看做如下三个函数的组合<br>        componentDidMount()<br>        componentDidUpdate()<br>    	componentWillUnmount() <br></code></pre></td></tr></table></figure>
<h5 id="5-Ref-Hook"><a href="#5-Ref-Hook" class="headerlink" title="5. Ref Hook"></a>5. <code>Ref Hook</code></h5><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">(<span class="hljs-number">1</span>). Ref Hook可以在函数组件中存储/查找组件内的标签或任意其它数据<br>(<span class="hljs-number">2</span>). 语法: const refContainer = use<span class="hljs-constructor">Ref()</span><br>(<span class="hljs-number">3</span>). 作用:保存标签对象,功能与<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">React</span>.</span></span>create<span class="hljs-constructor">Ref()</span>一样<br></code></pre></td></tr></table></figure>


<hr>
<h4 id="4-Fragment"><a href="#4-Fragment" class="headerlink" title="4. Fragment"></a>4. <code>Fragment</code></h4><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><pre><code class="hljs">&lt;Fragment&gt;&lt;Fragment&gt;
&lt;&gt;&lt;/&gt;
</code></pre>
<h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><blockquote>
<p>可以不用必须有一个真实的DOM根标签了</p>
</blockquote>
<hr/>

<h4 id="5-Context"><a href="#5-Context" class="headerlink" title="5. Context"></a>5. <code>Context</code></h4><h5 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h5><blockquote>
<p>一种组件间通信方式, 常用于【祖组件】与【后代组件】间通信</p>
</blockquote>
<h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-number">1</span>) 创建Context容器对象：<br>	<span class="hljs-keyword">const</span> XxxContext = React.createContext()  <br>	<br><span class="hljs-number">2</span>) 渲染子组时，外面包裹xxxContext.Provider, 通过value属性给后代组件传递数据：<br>	&lt;xxxContext.Provider value=&#123;数据&#125;&gt;<br>		子组件<br>    &lt;/xxxContext.Provider&gt;<br>    <br><span class="hljs-number">3</span>) 后代组件读取数据：<br><br>	<span class="hljs-comment">//第一种方式:仅适用于类组件 </span><br>	  <span class="hljs-keyword">static</span> contextType = xxxContext  <span class="hljs-comment">// 声明接收context</span><br>	  <span class="hljs-built_in">this</span>.context <span class="hljs-comment">// 读取context中的value数据</span><br>	  <br>	<span class="hljs-comment">//第二种方式: 函数组件与类组件都可以</span><br>	  &lt;xxxContext.Consumer&gt;<br>	    &#123;<br>	      value =&gt; ( <span class="hljs-comment">// value就是context中的value数据</span><br>	        要显示的内容<br>	      )<br>	    &#125;<br>	  &lt;/xxxContext.Consumer&gt;<br></code></pre></td></tr></table></figure>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><pre><code class="hljs">在应用开发中一般不用context, 一般都用它的封装react插件
</code></pre>
<hr/>


<h4 id="6-组件优化"><a href="#6-组件优化" class="headerlink" title="6. 组件优化"></a>6. 组件优化</h4><h5 id="Component的2个问题"><a href="#Component的2个问题" class="headerlink" title="Component的2个问题"></a><code>Component</code>的2个问题</h5><blockquote>
<ol>
<li><p>只要执行<code>setState()</code>,即使不改变状态数据, 组件也会重新<code>render()</code> ==&gt; 效率低</p>
</li>
<li><p>只当前组件重新<code>render()</code>, 就会自动重新render子组件，纵使子组件没有用到父组件的任何数据 ==&gt; 效率低</p>
</li>
</ol>
</blockquote>
<h5 id="效率高的做法"><a href="#效率高的做法" class="headerlink" title="效率高的做法"></a>效率高的做法</h5><blockquote>
<p> 只有当组件的<code>state</code>或<code>props</code>数据发生改变时才重新<code>render()</code></p>
</blockquote>
<h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><blockquote>
<p> <code>Component</code>中的<code>shouldComponentUpdate()</code>总是返回<code>true</code></p>
</blockquote>
<h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><pre><code class="hljs">办法1: 
    重写shouldComponentUpdate()方法
    比较新旧state或props数据, 如果有变化才返回true, 如果没有返回false
办法2:  
    使用PureComponent
    PureComponent重写了shouldComponentUpdate(), 只有state或props数据有变化才返回true
    注意: 
        只是进行state和props数据的浅比较, 如果只是数据对象内部数据变了, 返回false  
        不要直接修改state数据, 而是要产生新数据
项目中一般使用PureComponent来优化
</code></pre>
<hr/>


<h4 id="7-render-props"><a href="#7-render-props" class="headerlink" title="7. render props"></a>7. <code>render props</code></h4><h5 id="如何向组件内部动态传入带内容的结构-标签"><a href="#如何向组件内部动态传入带内容的结构-标签" class="headerlink" title="如何向组件内部动态传入带内容的结构(标签)?"></a>如何向组件内部动态传入带内容的结构(标签)?</h5><pre><code class="hljs">Vue中: 
    使用slot技术, 也就是通过组件标签体传入结构  &lt;A&gt;&lt;B/&gt;&lt;/A&gt;
React中:
    使用children props: 通过组件标签体传入结构
    使用render props: 通过组件标签属性传入结构,而且可以携带数据，一般用render函数属性
</code></pre>
<h5 id="children-props"><a href="#children-props" class="headerlink" title="children props"></a><code>children props</code></h5><pre><code class="hljs">&lt;A&gt;
  &lt;B&gt;xxxx&lt;/B&gt;
&lt;/A&gt;
&#123;this.props.children&#125;
问题: 如果B组件需要A组件内的数据, ==&gt; 做不到 
</code></pre>
<h5 id="render-props"><a href="#render-props" class="headerlink" title="render props"></a><code>render props</code></h5><pre><code class="hljs">&lt;A render=&#123;(data) =&gt; &lt;C data=&#123;data&#125;&gt;&lt;/C&gt;&#125;&gt;&lt;/A&gt;
A组件: &#123;this.props.render(内部state数据)&#125;
C组件: 读取A组件传入的数据显示 &#123;this.props.data&#125; 
</code></pre>
<hr/>

<h4 id="8-错误边界"><a href="#8-错误边界" class="headerlink" title="8. 错误边界"></a>8. 错误边界</h4><h5 id="理解："><a href="#理解：" class="headerlink" title="理解："></a>理解：</h5><p>错误边界(<code>Error boundary</code>)：用来捕获后代组件错误，渲染出备用页面</p>
<h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><p>只能捕获后代组件生命周期产生的错误，不能捕获自己组件产生的错误和其他组件在合成事件、定时器中产生的错误</p>
<p>使用方式：</p>
<p><code>getDerivedStateFromError配合componentDidCatch</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 生命周期函数，一旦后台组件报错，就会触发</span><br><span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-title">getDerivedStateFromError</span>(<span class="hljs-params">error</span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(error);<br>    <span class="hljs-comment">// 在render之前触发</span><br>    <span class="hljs-comment">// 返回新的state</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        hasError: <span class="hljs-literal">true</span>,<br>    &#125;;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">componentDidCatch</span>(<span class="hljs-params">error, info</span>)</span> &#123;<br>    <span class="hljs-comment">// 统计页面的错误。发送请求发送到后台去</span><br>    <span class="hljs-built_in">console</span>.log(error, info);<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="9-组件通信方式总结"><a href="#9-组件通信方式总结" class="headerlink" title="9. 组件通信方式总结"></a>9. 组件通信方式总结</h4><h5 id="组件间的关系："><a href="#组件间的关系：" class="headerlink" title="组件间的关系："></a>组件间的关系：</h5><ul>
<li>父子组件</li>
<li>兄弟组件（非嵌套组件）</li>
<li>祖孙组件（跨级组件）</li>
</ul>
<h5 id="几种通信方式："><a href="#几种通信方式：" class="headerlink" title="几种通信方式："></a>几种通信方式：</h5><pre><code class="hljs">    1.props：
        (1).children props
        (2).render props
    2.消息订阅-发布：
        pubs-sub、event等等
    3.集中式管理：
        redux、dva等等
    4.conText:
        生产者-消费者模式
</code></pre>
<h5 id="比较好的搭配方式："><a href="#比较好的搭配方式：" class="headerlink" title="比较好的搭配方式："></a>比较好的搭配方式：</h5><pre><code class="hljs">    父子组件：props
    兄弟组件：消息订阅-发布、集中式管理
    祖孙组件(跨级组件)：消息订阅-发布、集中式管理、conText(开发用的少，封装插件用的多)
</code></pre>
<h3 id="React-Router-6"><a href="#React-Router-6" class="headerlink" title="React Router 6"></a>React Router 6</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-number">1</span>. React Router 以三个不同的包发布到 npm 上，它们分别为：<br><br><span class="hljs-title">   1. react-router:</span> 路由的核心库，提供了很多的：组件、钩子。<br>   <span class="hljs-number">2</span>. &lt;strong style=<span class="hljs-string">&quot;color:#dd4d40&quot;</span>&gt;**react-router-dom:**&lt;/strong &gt; &lt;strong style=<span class="hljs-string">&quot;color:#dd4d40&quot;</span>&gt;包含react-router所有内容，并添加一些专门用于 DOM 的组件，例如 `&lt;BrowserRouter&gt;`等 &lt;/strong&gt;。<br><span class="hljs-title">   3. react-router-native: 包括react-router所有内容，并添加一些专门用于ReactNative的API，例如:</span>`&lt;NativeRouter&gt;`等。<br><br><span class="hljs-number">2</span>. 与React Router <span class="hljs-number">5</span>.x 版本相比，改变了什么？<br><br>   <span class="hljs-number">1</span>. 内置组件的变化：移除`&lt;Switch/&gt;` ，新增 `&lt;Routes/&gt;`等。<br><br>   <span class="hljs-number">2</span>. 语法的变化：`component=&#123;About&#125;` 变为 `element=&#123;&lt;About/&gt;&#125;`等。<br><br>   <span class="hljs-number">3</span>. 新增多个hook：`useParams`、`useNavigate`、`useMatch`等。<br><br>   <span class="hljs-number">4</span>. &lt;strong style=<span class="hljs-string">&quot;color:#dd4d40&quot;</span>&gt;官方明确推荐函数式组件了！！！&lt;/strong&gt;<br><br>      ......<br></code></pre></td></tr></table></figure>


<h4 id="2-Component"><a href="#2-Component" class="headerlink" title="2.Component"></a>2.<code>Component</code></h4><h5 id="1-lt-BrowserRouter-gt"><a href="#1-lt-BrowserRouter-gt" class="headerlink" title="1. &lt;BrowserRouter&gt;"></a>1. <code>&lt;BrowserRouter&gt;</code></h5><ol>
<li><p>说明：<code>&lt;BrowserRouter&gt; </code>用于包裹整个应用。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; BrowserRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br>ReactDOM.render(<br>  &lt;BrowserRouter&gt;<br>    &#123;<span class="hljs-comment">/* 整体结构（通常为App组件） */</span>&#125;<br>  &lt;/BrowserRouter&gt;,root<br>);<br></code></pre></td></tr></table></figure>
<h5 id="2-lt-HashRouter-gt"><a href="#2-lt-HashRouter-gt" class="headerlink" title="2. &lt;HashRouter&gt;"></a>2. <code>&lt;HashRouter&gt;</code></h5></li>
<li><p>说明：作用与<code>&lt;BrowserRouter&gt;</code>一样，但<code>&lt;HashRouter&gt;</code>修改的是地址栏的hash值。</p>
</li>
<li><p>备注：6.x版本中<code>&lt;HashRouter&gt;</code>、<code>&lt;BrowserRouter&gt; </code> 的用法与 5.x 相同。</p>
</li>
</ol>
<h5 id="3-lt-Routes-gt-与-lt-Route-gt"><a href="#3-lt-Routes-gt-与-lt-Route-gt" class="headerlink" title="3. &lt;Routes/&gt; 与 &lt;Route/&gt;"></a>3. <code>&lt;Routes/&gt; 与 &lt;Route/&gt;</code></h5><ol>
<li><p>v6版本中移出了先前的<code>&lt;Switch&gt;</code>，引入了新的替代者：<code>&lt;Routes&gt;</code>。</p>
</li>
<li><p><code>&lt;Routes&gt;</code> 和 <code>&lt;Route&gt;</code>要配合使用，且必须要用<code>&lt;Routes&gt;</code>包裹<code>&lt;Route&gt;</code>。</p>
</li>
<li><p><code>&lt;Route&gt;</code> 相当于一个 if 语句，如果其路径与当前 URL 匹配，则呈现其对应的组件。</p>
</li>
<li><p><code>&lt;Route caseSensitive&gt;</code> 属性用于指定：匹配时是否区分大小写（默认为<code> false</code>）。</p>
</li>
<li><p>当URL发生变化时，<code>&lt;Routes&gt; </code>都会查看其所有子<code> &lt;Route&gt;</code> 元素以找到最佳匹配并呈现组件 。</p>
</li>
<li><p><code>&lt;Route&gt;</code> 也可以嵌套使用，且可配合<code>useRoutes()</code>配置 “路由表” ，但需要通过 <code>&lt;Outlet&gt;</code> 组件来渲染其子路由。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;Routes&gt;<br>    <span class="hljs-comment">/*path属性用于定义路径，element属性用于定义当前路径所对应的组件*/</span><br>    &lt;Route path=<span class="hljs-string">&quot;/login&quot;</span> element=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span> /&gt;</span></span>&#125;&gt;&lt;/Route&gt;<br><br>		<span class="hljs-comment">/*用于定义嵌套路由，home是一级路由，对应的路径/home*/</span><br>    &lt;Route path=<span class="hljs-string">&quot;home&quot;</span> element=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span> /&gt;</span></span>&#125;&gt;<br>       <span class="hljs-comment">/*test1 和 test2 是二级路由,对应的路径是/home/test1 或 /home/test2*/</span><br>      &lt;Route path=<span class="hljs-string">&quot;test1&quot;</span> element=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Test</span>/&gt;</span></span>&#125;&gt;&lt;/Route&gt;<br>      &lt;Route path=<span class="hljs-string">&quot;test2&quot;</span> element=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Test2</span>/&gt;</span></span>&#125;&gt;&lt;/Route&gt;<br>		&lt;/Route&gt;<br>	<br>		<span class="hljs-comment">//Route也可以不写element属性, 这时就是用于展示嵌套的路由 .所对应的路径是/users/xxx</span><br>    &lt;Route path=<span class="hljs-string">&quot;users&quot;</span>&gt;<br>       &lt;Route path=<span class="hljs-string">&quot;xxx&quot;</span> element=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Demo</span> /&gt;</span></span>&#125; /&gt;<br>    &lt;/Route&gt;<br>&lt;/Routes&gt;<br></code></pre></td></tr></table></figure>
<h5 id="4-lt-Link-gt"><a href="#4-lt-Link-gt" class="headerlink" title="4. &lt;Link&gt;"></a>4. <code>&lt;Link&gt;</code></h5></li>
<li><p>作用: 修改URL，且不发送网络请求（路由链接）。</p>
</li>
<li><p>注意: 外侧需要用<code>&lt;BrowserRouter&gt;</code>或<code>&lt;HashRouter&gt;</code>包裹。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; Link &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>    	&lt;Link to=<span class="hljs-string">&quot;/路径&quot;</span>&gt;按钮&lt;/Link&gt;<br>    &lt;/div&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="5-lt-NavLink-gt"><a href="#5-lt-NavLink-gt" class="headerlink" title="5. &lt;NavLink&gt;"></a>5. <code>&lt;NavLink&gt;</code></h5></li>
<li><p>作用: 与<code>&lt;Link&gt;</code>组件类似，且可实现导航的“高亮”效果。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 注意: NavLink默认类名是active，下面是指定自定义的class</span><br><br><span class="hljs-comment">//自定义样式</span><br>&lt;NavLink<br>    to=<span class="hljs-string">&quot;login&quot;</span><br>    className=&#123;<span class="hljs-function">(<span class="hljs-params">&#123; isActive &#125;</span>) =&gt;</span> &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;home&#x27;</span>, isActive)<br>        <span class="hljs-keyword">return</span> isActive ? <span class="hljs-string">&#x27;base one&#x27;</span> : <span class="hljs-string">&#x27;base&#x27;</span><br>    &#125;&#125;<br>&gt;login&lt;/NavLink&gt;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">	默认情况下，当Home的子组件匹配成功，Home的导航也会高亮，</span><br><span class="hljs-comment">	当NavLink上添加了end属性后，若Home的子组件匹配成功，则Home的导航没有高亮效果。</span><br><span class="hljs-comment">*/</span><br>&lt;NavLink to=<span class="hljs-string">&quot;home&quot;</span> end &gt;home&lt;/NavLink&gt;<br></code></pre></td></tr></table></figure>
<h5 id="6-lt-Navigate-gt"><a href="#6-lt-Navigate-gt" class="headerlink" title="6. &lt;Navigate&gt;"></a>6. <code>&lt;Navigate&gt;</code></h5></li>
<li><p>作用：只要<code>&lt;Navigate&gt;</code>组件被渲染，就会修改路径，切换视图。</p>
</li>
<li><p><code>replace</code>属性用于控制跳转模式（<code>push</code> 或<code> replace</code>，默认是<code>push</code>）。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React,&#123;useState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123;Navigate&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Home</span>(<span class="hljs-params"></span>) </span>&#123;<br>	<span class="hljs-keyword">const</span> [sum,setSum] = useState(<span class="hljs-number">1</span>)<br>	<span class="hljs-keyword">return</span> (<br>		&lt;div&gt;<br>			&lt;h3&gt;我是Home的内容&lt;/h3&gt;<br>			&#123;<span class="hljs-comment">/* 根据sum的值决定是否切换视图 */</span>&#125;<br>			&#123;sum === <span class="hljs-number">1</span> ? <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>sum的值为&#123;sum&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span></span> : <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span> <span class="hljs-attr">replace</span>=<span class="hljs-string">&#123;true&#125;/</span>&gt;</span></span>&#125;<br>			&lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>setSum(<span class="hljs-number">2</span>)&#125;&gt;点我将sum变为<span class="hljs-number">2</span>&lt;/button&gt;<br>		&lt;/div&gt;<br>	)<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="7-lt-Outlet-gt"><a href="#7-lt-Outlet-gt" class="headerlink" title="7. &lt;Outlet&gt;"></a>7. <code>&lt;Outlet&gt;</code></h5></li>
<li><p>当<code>&lt;Route&gt;</code>产生嵌套时，渲染其对应的后续子路由。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//根据路由表生成对应的路由规则</span><br><span class="hljs-keyword">const</span> element = useRoutes([<br>  &#123;<br>    path:<span class="hljs-string">&#x27;/about&#x27;</span>,<br>    element:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">About</span>/&gt;</span></span><br>  &#125;,<br>  &#123;<br>    path:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>    element:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span>/&gt;</span></span>,<br>    children:[<br>      &#123;<br>        path:<span class="hljs-string">&#x27;news&#x27;</span>,<br>        element:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">News</span>/&gt;</span></span><br>      &#125;,<br>      &#123;<br>        path:<span class="hljs-string">&#x27;message&#x27;</span>,<br>        element:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Message</span>/&gt;</span></span>,<br>      &#125;<br>    ]<br>  &#125;<br>])<br><br><span class="hljs-comment">//Home.js</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123;NavLink,Outlet&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Home</span>(<span class="hljs-params"></span>) </span>&#123;<br>	<span class="hljs-keyword">return</span> (<br>		&lt;div&gt;<br>			&lt;h2&gt;Home组件内容&lt;/h2&gt;<br>			&lt;div&gt;<br>				&lt;ul className=<span class="hljs-string">&quot;nav nav-tabs&quot;</span>&gt;<br>					&lt;li&gt;<br>						&lt;NavLink className=<span class="hljs-string">&quot;list-group-item&quot;</span> to=<span class="hljs-string">&quot;news&quot;</span>&gt;News&lt;/NavLink&gt;<br>					&lt;/li&gt;<br>					&lt;li&gt;<br>						&lt;NavLink className=<span class="hljs-string">&quot;list-group-item&quot;</span> to=<span class="hljs-string">&quot;message&quot;</span>&gt;Message&lt;/NavLink&gt;<br>					&lt;/li&gt;<br>				&lt;/ul&gt;<br>				&#123;<span class="hljs-comment">/* 指定路由组件呈现的位置 */</span>&#125;<br>				&lt;Outlet /&gt;<br>			&lt;/div&gt;<br>		&lt;/div&gt;<br>	)<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h4 id="3-Hooks-1"><a href="#3-Hooks-1" class="headerlink" title="3.Hooks"></a>3.<code>Hooks</code></h4></li>
</ol>
<h5 id="1-useRoutes"><a href="#1-useRoutes" class="headerlink" title="1. useRoutes()"></a>1. <code>useRoutes()</code></h5><ol>
<li><p>作用：根据路由表，动态创建<code>&lt;Routes&gt;</code>和<code>&lt;Route&gt;</code>。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">//路由表配置：src/routes/index.js</span><br><span class="hljs-keyword">import</span> About <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/About&#x27;</span><br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Home&#x27;</span><br><span class="hljs-keyword">import</span> &#123;Navigate&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> [<br>	&#123;<br>		path:<span class="hljs-string">&#x27;/about&#x27;</span>,<br>		element:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">About</span>/&gt;</span></span><br>	&#125;,<br>	&#123;<br>		path:<span class="hljs-string">&#x27;/home&#x27;</span>,<br>		element:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Home</span>/&gt;</span></span><br>	&#125;,<br>	&#123;<br>		path:<span class="hljs-string">&#x27;/&#x27;</span>,<br>		element:<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Navigate</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>/&gt;</span></span><br>	&#125;<br>]<br><br><span class="hljs-comment">//App.jsx</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123;NavLink,useRoutes&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><span class="hljs-keyword">import</span> routes <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./routes&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>	<span class="hljs-comment">//根据路由表生成对应的路由规则</span><br>	<span class="hljs-keyword">const</span> element = useRoutes(routes)<br>	<span class="hljs-keyword">return</span> (<br>		&lt;div&gt;<br>			......<br>      &#123;<span class="hljs-comment">/* 注册路由 */</span>&#125;<br>      &#123;element&#125;<br>		  ......<br>		&lt;/div&gt;<br>	)<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h5 id="2-useNavigate"><a href="#2-useNavigate" class="headerlink" title="2. useNavigate()"></a>2. <code>useNavigate()</code></h5></li>
<li><p>作用：返回一个函数用来实现编程式导航。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123;useNavigate&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Demo</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> navigate = useNavigate()<br>  <span class="hljs-keyword">const</span> handle = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">//第一种使用方式：指定具体的路径</span><br>    navigate(<span class="hljs-string">&#x27;/login&#x27;</span>, &#123;<br>      replace: <span class="hljs-literal">false</span>,<br>      state: &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">b</span>:<span class="hljs-number">2</span>&#125;<br>    &#125;) <br>    <span class="hljs-comment">//第二种使用方式：传入数值进行前进或后退，类似于5.x中的 history.go()方法</span><br>    navigate(-<span class="hljs-number">1</span>)<br>  &#125;<br>  <br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;button onClick=&#123;handle&#125;&gt;按钮&lt;/button&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="3-useParams"><a href="#3-useParams" class="headerlink" title="3. useParams()"></a>3. <code>useParams()</code></h5></li>
<li><p>作用：回当前匹配路由的<code>params</code>参数，类似于5.x中的<code>match.params</code>。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Routes, Route, useParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span>;<br><span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./pages/User.jsx&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ProfilePage</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// 获取URL中携带过来的params参数</span><br>  <span class="hljs-keyword">let</span> &#123; id &#125; = useParams();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;Routes&gt;<br>      &lt;Route path=<span class="hljs-string">&quot;users/:id&quot;</span> element=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">User</span> /&gt;</span></span>&#125;/&gt;<br>    &lt;/Routes&gt;<br>  );<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="4-useSearchParams"><a href="#4-useSearchParams" class="headerlink" title="4. useSearchParams()"></a>4. <code>useSearchParams()</code></h5></li>
<li><p>作用：用于读取和修改当前位置的 <code>URL </code>中的查询字符串。</p>
</li>
<li><p>返回一个包含两个值的数组，内容分别为：当前的<code>seaech</code>参数、更新<code>search</code>的函数。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123;useSearchParams&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Detail</span>(<span class="hljs-params"></span>) </span>&#123;<br>	<span class="hljs-keyword">const</span> [search,setSearch] = useSearchParams()<br>	<span class="hljs-keyword">const</span> id = search.get(<span class="hljs-string">&#x27;id&#x27;</span>)<br>	<span class="hljs-keyword">const</span> title = search.get(<span class="hljs-string">&#x27;title&#x27;</span>)<br>	<span class="hljs-keyword">const</span> content = search.get(<span class="hljs-string">&#x27;content&#x27;</span>)<br>	<span class="hljs-keyword">return</span> (<br>		&lt;ul&gt;<br>			&lt;li&gt;<br>				&lt;button onClick=&#123;<span class="hljs-function">()=&gt;</span>setSearch(<span class="hljs-string">&#x27;id=008&amp;title=哈哈&amp;content=嘻嘻&#x27;</span>)&#125;&gt;点我更新一下收到的search参数&lt;/button&gt;<br>			&lt;/li&gt;<br>			&lt;li&gt;消息编号：&#123;id&#125;&lt;/li&gt;<br>			&lt;li&gt;消息标题：&#123;title&#125;&lt;/li&gt;<br>			&lt;li&gt;消息内容：&#123;content&#125;&lt;/li&gt;<br>		&lt;/ul&gt;<br>	)<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h5 id="5-useLocation"><a href="#5-useLocation" class="headerlink" title="5. useLocation()"></a>5. <code>useLocation()</code></h5></li>
<li><p>作用：获取当前<code>location</code>信息，对标5.x中的路由组件的<code>location</code>属性。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123;useLocation&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Detail</span>(<span class="hljs-params"></span>) </span>&#123;<br>	<span class="hljs-keyword">const</span> x = useLocation()<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;@&#x27;</span>,x)<br>  <span class="hljs-comment">// x就是location对象: </span><br>	<span class="hljs-comment">/*</span><br><span class="hljs-comment">		&#123;</span><br><span class="hljs-comment">      hash: &quot;&quot;,</span><br><span class="hljs-comment">      key: &quot;ah9nv6sz&quot;,</span><br><span class="hljs-comment">      pathname: &quot;/login&quot;,</span><br><span class="hljs-comment">      search: &quot;?name=zs&amp;age=18&quot;,</span><br><span class="hljs-comment">      state: &#123;a: 1, b: 2&#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">	*/</span><br>	<span class="hljs-keyword">return</span> (<br>		&lt;ul&gt;<br>			&lt;li&gt;消息编号：&#123;id&#125;&lt;/li&gt;<br>			&lt;li&gt;消息标题：&#123;title&#125;&lt;/li&gt;<br>			&lt;li&gt;消息内容：&#123;content&#125;&lt;/li&gt;<br>		&lt;/ul&gt;<br>	)<br>&#125;<br><br>  <br><br><br></code></pre></td></tr></table></figure>
<h5 id="6-useMatch"><a href="#6-useMatch" class="headerlink" title="6. useMatch()"></a>6. <code>useMatch()</code></h5></li>
<li><p>作用：返回当前匹配信息，对标5.x中的路由组件的<code>match</code>属性。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx">&lt;Route path=<span class="hljs-string">&quot;/login/:page/:pageSize&quot;</span> element=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Login</span> /&gt;</span></span>&#125;/&gt;<br>&lt;NavLink to=<span class="hljs-string">&quot;/login/1/10&quot;</span>&gt;登录&lt;/NavLink&gt;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Login</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> match = useMatch(<span class="hljs-string">&#x27;/login/:x/:y&#x27;</span>)<br>  <span class="hljs-built_in">console</span>.log(match) <span class="hljs-comment">//输出match对象</span><br>  <span class="hljs-comment">//match对象内容如下：</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  	&#123;</span><br><span class="hljs-comment">      params: &#123;x: &#x27;1&#x27;, y: &#x27;10&#x27;&#125;</span><br><span class="hljs-comment">      pathname: &quot;/LoGin/1/10&quot;  </span><br><span class="hljs-comment">      pathnameBase: &quot;/LoGin/1/10&quot;</span><br><span class="hljs-comment">      pattern: &#123;</span><br><span class="hljs-comment">      	path: &#x27;/login/:x/:y&#x27;, </span><br><span class="hljs-comment">      	caseSensitive: false, </span><br><span class="hljs-comment">      	end: false</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">return</span> (<br>  	&lt;div&gt;<br>      &lt;h1&gt;Login&lt;/h1&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="7-useInRouterContext"><a href="#7-useInRouterContext" class="headerlink" title="7. useInRouterContext()"></a>7. <code>useInRouterContext()</code></h5></li>
</ol>
<p>​            作用：如果组件在 <code>&lt;Router&gt;</code> 的上下文中呈现，则 <code>useInRouterContext</code> 钩子返回 true，否则返回 false。</p>
<h5 id="8-useNavigationType"><a href="#8-useNavigationType" class="headerlink" title="8. useNavigationType()"></a>8. <code>useNavigationType()</code></h5><ol>
<li>作用：返回当前的导航类型（用户是如何来到当前页面的）。</li>
<li>返回值：<code>POP</code>、<code>PUSH</code>、<code>REPLACE</code>。</li>
<li>备注：<code>POP</code>是指在浏览器中直接打开了这个路由组件（刷新页面）。</li>
</ol>
<h5 id="9-useOutlet"><a href="#9-useOutlet" class="headerlink" title="9. useOutlet()"></a>9. <code>useOutlet()</code></h5><ol>
<li><p>作用：用来呈现当前组件中渲染的嵌套路由。</p>
</li>
<li><p>示例代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> result = useOutlet()<br><span class="hljs-built_in">console</span>.log(result)<br><span class="hljs-comment">// 如果嵌套路由没有挂载,则result为null</span><br><span class="hljs-comment">// 如果嵌套路由已经挂载,则展示嵌套的路由对象</span><br></code></pre></td></tr></table></figure>
<h5 id="10-useResolvedPath"><a href="#10-useResolvedPath" class="headerlink" title="10.useResolvedPath()"></a>10.<code>useResolvedPath()</code></h5></li>
<li><p>作用：给定一个 <code>URL</code>值，解析其中的：<code>path</code>、<code>search</code>、<code>hash</code>值。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析-Pandas</title>
    <url>/2021/08/12/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-Pandas/</url>
    <content><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>掌握Series和DataFrame对象的创建方法</p>
<p>掌握读、写数据的方法</p>
<p>Pandas<br>安装:</p>
<p>pip install pandas</p>
<p>conda install pandas<br>常用对象/数据类型<br> Series<br> DataFrame</p>
<h5 id="series"><a href="#series" class="headerlink" title="series"></a>series</h5><figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">#series对象	序列 索引<br>#适用于数据只有一列的时候<br><br>import numpy as np<br>import pandas as pd<br><br># 比较数组与series<br>g = np.array([<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">77</span>, <span class="hljs-number">88</span>])<br>g<br><br>=&gt; array([<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">77</span>, <span class="hljs-number">88</span>])<br><br>gdp = pd.Series(g, <span class="hljs-built_in">index</span>=[&#x27;shanghai&#x27;, &#x27;beijing&#x27;, &#x27;guangzhou&#x27;, &#x27;shenzhen&#x27;, &#x27;tianjin&#x27;, &#x27;chongqing&#x27;, &#x27;suzhou&#x27;,&#x27;shandong&#x27;])<br>gdp      <br><br>=&gt;  shanghai     <span class="hljs-number">11</span><br>    beijing      <span class="hljs-number">22</span><br>    guangzhou    <span class="hljs-number">33</span><br>    shenzhen     <span class="hljs-number">44</span><br>    tianjin      <span class="hljs-number">55</span><br>    chongqing    <span class="hljs-number">66</span><br>    suzhou       <span class="hljs-number">77</span><br>    shandong     <span class="hljs-number">88</span><br>    dty<span class="hljs-symbol">pe:</span> int32<br>    <br>gdp.index			#查看索引序列<br>=&gt; <span class="hljs-built_in">Index</span>([&#x27;shanghai&#x27;, &#x27;beijing&#x27;, &#x27;guangzhou&#x27;, &#x27;shenzhen&#x27;, &#x27;tianjin&#x27;, &#x27;chongqing&#x27;,&#x27;suzhou&#x27;, &#x27;shandong&#x27;],<br> dtype=&#x27;object&#x27;)<br> <br>gdp.name = <span class="hljs-string">&quot;xx&quot;</span>		#给这个对象添加名字<br>gdp.index.name = <span class="hljs-string">&quot;xx&quot;</span>	#给索引名命名<br></code></pre></td></tr></table></figure>


<h5 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h5><figure class="highlight prolog"><table><tr><td class="code"><pre><code class="hljs prolog"># <span class="hljs-symbol">DataFrame</span>对象<br><br><br>#创建<span class="hljs-symbol">DataFrame</span>对象<br>gp = pd.<span class="hljs-symbol">DataFrame</span>([[<span class="hljs-number">11</span>,<span class="hljs-number">101</span>], [<span class="hljs-number">22</span>,<span class="hljs-number">202</span>], [<span class="hljs-number">33</span>,<span class="hljs-number">303</span>], [<span class="hljs-number">44</span>,<span class="hljs-number">404</span>], [<span class="hljs-number">55</span>,<span class="hljs-number">505</span>], [<span class="hljs-number">66</span>,<span class="hljs-number">606</span>], [<span class="hljs-number">77</span>,<span class="hljs-number">707</span>], [<span class="hljs-number">88</span>,<span class="hljs-number">808</span>]])<br><br>#每行的名字<br>gp.index = [<span class="hljs-string">&#x27;shanghai&#x27;</span>, <span class="hljs-string">&#x27;beijing&#x27;</span>, <span class="hljs-string">&#x27;guangzhou&#x27;</span>, <span class="hljs-string">&#x27;shenzhen&#x27;</span>, <span class="hljs-string">&#x27;tianjin&#x27;</span>, <span class="hljs-string">&#x27;chongqing&#x27;</span>, <span class="hljs-string">&#x27;suzhou&#x27;</span>,<span class="hljs-string">&#x27;shandong&#x27;</span>]<br><br>#每列的名字<br>gp.columns = [<span class="hljs-string">&#x27;city&#x27;</span>,<span class="hljs-string">&#x27;rooms&#x27;</span>]<br><br>#或者一起写也可以<br>#创建的时候就设置行名和列名<br>gpf = pd.<span class="hljs-symbol">DataFrame</span>([[<span class="hljs-number">11</span>,<span class="hljs-number">101</span>], [<span class="hljs-number">22</span>,<span class="hljs-number">202</span>], [<span class="hljs-number">33</span>,<span class="hljs-number">303</span>], [<span class="hljs-number">44</span>,<span class="hljs-number">404</span>], [<span class="hljs-number">55</span>,<span class="hljs-number">505</span>], [<span class="hljs-number">66</span>,<span class="hljs-number">606</span>], [<span class="hljs-number">77</span>,<span class="hljs-number">707</span>], [<span class="hljs-number">88</span>,<span class="hljs-number">808</span>]],<br>                   index=[<span class="hljs-string">&#x27;shanghai&#x27;</span>, <span class="hljs-string">&#x27;beijing&#x27;</span>, <span class="hljs-string">&#x27;guangzhou&#x27;</span>, <span class="hljs-string">&#x27;shenzhen&#x27;</span>, <span class="hljs-string">&#x27;tianjin&#x27;</span>, <span class="hljs-string">&#x27;chongqing&#x27;</span>,                              <span class="hljs-string">&#x27;suzhou&#x27;</span>,<span class="hljs-string">&#x27;shandong&#x27;</span>],<br>                   columns=[<span class="hljs-string">&#x27;city&#x27;</span>,<span class="hljs-string">&#x27;rooms&#x27;</span>])<br>gpf  <br><br>gp.index.name = <span class="hljs-string">&#x27;city&#x27;</span>		#修改行标签<br>gp.columns.name = <span class="hljs-string">&#x27;itme&#x27;</span>	#修改列标签<br><br>#另一种方法<br>ha = pd.<span class="hljs-symbol">DataFrame</span>(&#123;<span class="hljs-string">&quot;city&quot;</span>:[<span class="hljs-string">&quot;beijing&quot;</span>,<span class="hljs-string">&quot;shanghai&quot;</span>],<br>                   <span class="hljs-string">&quot;marks&quot;</span>:[<span class="hljs-string">&quot;111&quot;</span>,<span class="hljs-string">&quot;222&quot;</span>]&#125;,<br>                  index=[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>])<br>ha<br><br>=&gt; 	city	marks<br>a	beijing	<span class="hljs-number">111</span><br>b	shanghai	<span class="hljs-number">222</span><br></code></pre></td></tr></table></figure>


<h2 id="读写操作"><a href="#读写操作" class="headerlink" title="读写操作"></a>读写操作</h2><figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">pd.read_		<span class="hljs-meta">#然后按tab键选择需要读取的文件类型</span><br>df.to_			<span class="hljs-meta">#将DataFrame数据写入需要格式文件</span><br></code></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">df = pd<span class="hljs-selector-class">.read_csv</span>(<span class="hljs-string">&#x27;文件路径&#x27;</span>)<br><br><br>#index_col表示索引使用文件中的索引<br><span class="hljs-selector-id">#df</span><span class="hljs-selector-class">.head</span>()表示默认显示前五条数据，括号里填几就展示几条<br>df = pd<span class="hljs-selector-class">.read_excle</span>(<span class="hljs-string">&#x27;文件路径&#x27;</span>，index_col=<span class="hljs-number">0</span>)		<br>df<span class="hljs-selector-class">.head</span>()<br></code></pre></td></tr></table></figure>


<h4 id="series与DataFrame的索引和切片"><a href="#series与DataFrame的索引和切片" class="headerlink" title="series与DataFrame的索引和切片"></a>series与DataFrame的索引和切片</h4><h6 id="series索引"><a href="#series索引" class="headerlink" title="series索引"></a>series索引</h6><figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">g = np.array([<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">77</span>, <span class="hljs-number">88</span>])<br>g<br>=&gt; array([<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">77</span>, <span class="hljs-number">88</span>])<br><br>gdp = pd.Series(g, <span class="hljs-built_in">index</span>=[&#x27;shanghai&#x27;, &#x27;beijing&#x27;, &#x27;guangzhou&#x27;, &#x27;shenzhen&#x27;, &#x27;tianjin&#x27;, &#x27;chongqing&#x27;, &#x27;suzhou&#x27;,&#x27;shandong&#x27;])<br>gdp      <br>=&gt;  shanghai     <span class="hljs-number">11</span><br>    beijing      <span class="hljs-number">22</span><br>    guangzhou    <span class="hljs-number">33</span><br>    shenzhen     <span class="hljs-number">44</span><br>    tianjin      <span class="hljs-number">55</span><br>    chongqing    <span class="hljs-number">66</span><br>    suzhou       <span class="hljs-number">77</span><br>    shandong     <span class="hljs-number">88</span><br>    dty<span class="hljs-symbol">pe:</span> int32<br>    <br>#根据标签索引取值<br>gdp[&#x27;suzhou&#x27;]	# =&gt;<span class="hljs-number">77</span><br>#Series对象具有类字典性<br>gdp[<span class="hljs-string">&quot;hangzhou&quot;</span>] = <span class="hljs-number">323</span>		#增加一项<br>#另外一种访问方法<br>gdp.suzhou		#=&gt;<span class="hljs-number">77</span><br><br>#下标可以是列表<br>gdp[[&#x27;suzhou&#x27;,&#x27;shanghai&#x27;,&#x27;beijing&#x27;]]<br>=&gt;      suzhou      <span class="hljs-number">77</span><br>        shanghai    <span class="hljs-number">11</span><br>        beijing     <span class="hljs-number">22</span><br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> Gdp(hunder millin RMB), dty<span class="hljs-symbol">pe:</span> int32<br>        <br>#条件判断<br>gdp&gt;<span class="hljs-number">30</span><br>=&gt;      shanghai     <span class="hljs-built_in">False</span><br>        beijing      <span class="hljs-built_in">False</span><br>        guangzhou     <span class="hljs-built_in">True</span><br>        shenzhen      <span class="hljs-built_in">True</span><br>        tianjin       <span class="hljs-built_in">True</span><br>        chongqing     <span class="hljs-built_in">True</span><br>        suzhou        <span class="hljs-built_in">True</span><br>        shandong      <span class="hljs-built_in">True</span><br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> Gdp(hunder millin RMB), dty<span class="hljs-symbol">pe:</span> bool<br>        <br>gdp[gdp&gt;<span class="hljs-number">30</span>]<br>=&gt;		guangzhou    <span class="hljs-number">33</span><br>        shenzhen     <span class="hljs-number">44</span><br>        tianjin      <span class="hljs-number">55</span><br>        chongqing    <span class="hljs-number">66</span><br>        suzhou       <span class="hljs-number">77</span><br>        shandong     <span class="hljs-number">88</span><br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> Gdp(hunder millin RMB), dty<span class="hljs-symbol">pe:</span> int32<br></code></pre></td></tr></table></figure>
<h6 id="series切片"><a href="#series切片" class="headerlink" title="series切片"></a>series切片</h6><figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">#切片，注意：包含结束值<br>gdp[&#x27;tianjin&#x27;<span class="hljs-symbol">:</span>&#x27;suzhou&#x27;]<br>=&gt;      tianjin      <span class="hljs-number">55</span><br>        chongqing    <span class="hljs-number">66</span><br>        suzhou       <span class="hljs-number">77</span><br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> Gdp(hunder millin RMB), dty<span class="hljs-symbol">pe:</span> int32<br>        <br>#尽管有标签，但是依据位置索引依然有效<br>gdp[<span class="hljs-number">2</span>]		# =&gt;<span class="hljs-number">33</span><br><br>gdp[<span class="hljs-symbol">2:6</span>]	# 不包含结束值<br> =&gt;     guangzhou    <span class="hljs-number">33</span><br>        shenzhen     <span class="hljs-number">44</span><br>        tianjin      <span class="hljs-number">55</span><br>        chongqing    <span class="hljs-number">66</span><br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> Gdp(hunder millin RMB), dty<span class="hljs-symbol">pe:</span> int32<br>        <br>        <br>#制造混乱<br>#当标签也是数字时，切片与索引就会产生混乱<br>s = pd.Series(np.random.randn(<span class="hljs-number">4</span>),<span class="hljs-built_in">index</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>])<br>s<br>=&gt;      <span class="hljs-number">1</span>    <span class="hljs-number">0.344526</span><br>        <span class="hljs-number">3</span>    <span class="hljs-number">1.550617</span><br>        <span class="hljs-number">5</span>   -<span class="hljs-number">0.508269</span><br>        <span class="hljs-number">7</span>   -<span class="hljs-number">0.874402</span><br>        dty<span class="hljs-symbol">pe:</span> float64<br>        <br>s[<span class="hljs-number">1</span>]		# =&gt;<span class="hljs-number">0.3445261496453495</span><br>s[<span class="hljs-symbol">1:3</span>]		# 混乱了，这个是按照索引切片的，而上面的是按标签索引的<br>=&gt; 		<span class="hljs-number">3</span>    <span class="hljs-number">1.550617</span><br>        <span class="hljs-number">5</span>   -<span class="hljs-number">0.508269</span><br>        dty<span class="hljs-symbol">pe:</span> float64<br>        <br>#解决混乱	iloc强制使用默认的数字索引进行切片<br>s.iloc[<span class="hljs-number">1</span>]	# =&gt;<span class="hljs-number">1.5506167001966298</span><br>s.iloc[<span class="hljs-symbol">1:3</span>]<br>=&gt;      <span class="hljs-number">3</span>    <span class="hljs-number">1.550617</span><br>        <span class="hljs-number">5</span>   -<span class="hljs-number">0.508269</span><br>        dty<span class="hljs-symbol">pe:</span> float64<br>        <br>#  loc 使用标签索引进行切片和索引  <br>s.loc[<span class="hljs-number">1</span>]	# =&gt;<span class="hljs-number">0.3445261496453495</span><br></code></pre></td></tr></table></figure>


<h6 id="DataFrame-1"><a href="#DataFrame-1" class="headerlink" title="DataFrame"></a>DataFrame</h6><figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">ha = pd.DataFrame(&#123;<span class="hljs-string">&quot;city&quot;</span><span class="hljs-symbol">:</span>[<span class="hljs-string">&quot;beijing&quot;</span>,<span class="hljs-string">&quot;shanghai&quot;</span>，<span class="hljs-string">&quot;chongqing&quot;</span>],<br>                   <span class="hljs-string">&quot;marks&quot;</span><span class="hljs-symbol">:</span>[<span class="hljs-string">&quot;111&quot;</span>,<span class="hljs-string">&quot;222&quot;</span>,<span class="hljs-string">&quot;333&quot;</span>]&#125;,<br>                 	 <span class="hljs-built_in">index</span>=[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>])<br>ha<br><br> =&gt;         city	marks<br>        a	beijing	<span class="hljs-number">111</span><br>        b	shanghai	<span class="hljs-number">222</span><br>        c	chongqing	<span class="hljs-number">333</span><br><br>#取出ha中的所有的值<br>ha.values <br><br>=&gt;array([[&#x27;beijing&#x27;, &#x27;<span class="hljs-number">111</span>&#x27;],<br>       [&#x27;shanghai&#x27;, &#x27;<span class="hljs-number">222</span>&#x27;],<br>       [&#x27;chongqing&#x27;, &#x27;<span class="hljs-number">333</span>&#x27;]], dtype=object)<br>       <br>#某特征（某列）<br>s = ha[&#x27;city&#x27;]<br>s<br>=&gt;      a      beijing<br>        b     shanghai<br>        c    chongqing<br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> city, dty<span class="hljs-symbol">pe:</span> object<br><br>#方括号里可以填写多个值，相当于可以选择需要的列<br>ha[[&#x27;city&#x27;,&#x27;marks&#x27;]]   <br><br>#某样本（某行）<br>ha.loc[&#x27;b&#x27;]<br><br>=&gt;		city     shanghai<br>        marks         <span class="hljs-number">222</span><br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> b, dty<span class="hljs-symbol">pe:</span> object<br><br>#指定值<br>ha.loc[&#x27;a&#x27;,&#x27;city&#x27;]		# =&gt;&#x27;beijing&#x27;<br><br>#切片 逗号前是选择行，逗号后是选择列，得到重合的<br>ha.loc[&#x27;a&#x27;<span class="hljs-symbol">:</span>&#x27;b&#x27;,&#x27;city&#x27;]<br>=&gt;      a     beijing<br>        b    shanghai<br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> city, dty<span class="hljs-symbol">pe:</span> object	<br>        <br>#增加特征（列）        <br>ha[&#x27;weather&#x27;] = [&#x27;sunny&#x27;, &#x27;rain&#x27;, &#x27;rain&#x27;]<br><br>#同理，增加样本（行）<br>ha.loc[&#x27;d&#x27;] = [&#x27;shanxi&#x27;, &#x27;<span class="hljs-number">444</span>&#x27;, &#x27;rain&#x27;]<br></code></pre></td></tr></table></figure>


<h2 id="统计和分组运算"><a href="#统计和分组运算" class="headerlink" title="统计和分组运算"></a>统计和分组运算</h2><p>集中量</p>
<p>–求和</p>
<p>–平均值</p>
<p>–中位数</p>
<p>–最大/小值</p>
<h5 id="集中量统计"><a href="#集中量统计" class="headerlink" title="集中量统计"></a>集中量统计</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.read_excle(<span class="hljs-string">&#x27;C:/Users/15486/Desktop/pandastest1.xlsx&#x27;</span>)<br>df.sample(<span class="hljs-number">5</span>)	<span class="hljs-comment">#随机抽取5个样本</span><br><br>df = df.set_index(<span class="hljs-string">&quot;姓名&quot;</span>)		<span class="hljs-comment">#将姓名作为这个对象的索引</span><br>df.<span class="hljs-built_in">sum</span>()			<span class="hljs-comment">#求和</span><br>df.mean()			<span class="hljs-comment">#求平均</span><br>df.median()			<span class="hljs-comment">#求中值（列）</span><br>df.madian(axis=<span class="hljs-number">1</span>)	<span class="hljs-comment">#求中值（行）有axis=1的就是求行的中值</span><br><br><span class="hljs-comment">#杜撰一个缺失值 数据显示为nan不参与统计</span><br>df.loc[<span class="hljs-string">&#x27;tianshanxuelian&#x27;</span>] = np.nan<br><br><span class="hljs-comment">#显示一些常见的统计结果</span><br>df.describe()<br><br><span class="hljs-comment">#显示详细有多少样本，有多少有效样本</span><br>df.info()<br></code></pre></td></tr></table></figure>


<h4 id="分组运算"><a href="#分组运算" class="headerlink" title="分组运算"></a>分组运算</h4><figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">df = pd.DataFrame(&#123;<span class="hljs-string">&quot;subject&quot;</span><span class="hljs-symbol">:</span>[&#x27;math&#x27;,&#x27;physics&#x27;,&#x27;english&#x27;,&#x27;math&#x27;,&#x27;physics&#x27;,&#x27;english&#x27;],<br><span class="hljs-string">&quot;score&quot;</span><span class="hljs-symbol">:</span>[<span class="hljs-number">90</span>, <span class="hljs-number">80</span>, <span class="hljs-number">70</span>, <span class="hljs-number">95</span>, <span class="hljs-number">85</span>, <span class="hljs-number">75</span>]&#125;)<br><br>=&gt;		subject	jidian	score<br>    <span class="hljs-number">0</span>	math	<span class="hljs-number">9.9</span>	    <span class="hljs-number">90</span><br>    <span class="hljs-number">1</span>	physics	<span class="hljs-number">9.5</span>	    <span class="hljs-number">80</span><br>    <span class="hljs-number">2</span>	english	<span class="hljs-number">10.0</span>	<span class="hljs-number">70</span><br>    <span class="hljs-number">3</span>	math	<span class="hljs-number">9.3</span>	    <span class="hljs-number">95</span><br>    <span class="hljs-number">4</span>	physics	<span class="hljs-number">9.5</span>  	<span class="hljs-number">85</span><br>    <span class="hljs-number">5</span>	english	<span class="hljs-number">9.0</span> 	<span class="hljs-number">75</span><br> <br># 根据学科分组进行求和（自动判别是否可以求和）<br>df.groupby(&#x27;subject&#x27;).<span class="hljs-built_in">sum</span>()<br><br>=&gt;			jidian	score<br>    subject		<br>    english	<span class="hljs-number">19.0</span>	<span class="hljs-number">145</span><br>    math	<span class="hljs-number">19.2</span>	<span class="hljs-number">185</span><br>    physics	<span class="hljs-number">19.0</span>	<span class="hljs-number">165</span><br><br>#添加一列<br>df[&#x27;teacher&#x27;] = [&#x27;xiaobo&#x27;,&#x27;xiaotan&#x27;,&#x27;xiaobo&#x27;,&#x27;xiaotan&#x27;,&#x27;xiaotan&#x27;,&#x27;xiaobo&#x27;]<br><br>#根据teacher，subject分组进行求平均<br>df.groupby([&#x27;teacher&#x27;,&#x27;subject&#x27;]).mean()<br><br>=&gt;					jidian	score<br>    teacher	subject		<br>    xiaobo	english	<span class="hljs-number">9.5</span>		<span class="hljs-number">72.5</span><br>   			math	<span class="hljs-number">9.9</span>		<span class="hljs-number">90.0</span><br>    xiaotan	math	<span class="hljs-number">9.3</span>		<span class="hljs-number">95.0</span><br>   			physics	<span class="hljs-number">9.5</span>		<span class="hljs-number">82.5</span><br><br># 只计算score的平均值<br>df.groupby([&#x27;teacher&#x27;,&#x27;subject&#x27;])[&#x27;score&#x27;].mean()<br></code></pre></td></tr></table></figure>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">#额外定义分组键<br>data = pd.DataFrame(np.random.randn(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>),<br>                    <span class="hljs-built_in">columns</span>=[<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>],<br>                    <span class="hljs-built_in">index</span>=[<span class="hljs-string">&quot;first&quot;</span>, <span class="hljs-string">&quot;second&quot;</span>, <span class="hljs-string">&quot;third&quot;</span>, <span class="hljs-string">&quot;forth&quot;</span>])<br>data<br><br>=&gt; 				a			b			c			d<br>    first	<span class="hljs-number">0.030423</span>	<span class="hljs-number">0.151275</span>	-<span class="hljs-number">0.270502</span>	<span class="hljs-number">0.035102</span><br>    <span class="hljs-built_in">second</span>	<span class="hljs-number">1.740231</span>	-<span class="hljs-number">1.073806</span>	<span class="hljs-number">2.556271</span>	-<span class="hljs-number">0.729984</span><br>    third	<span class="hljs-number">0.068484</span>	<span class="hljs-number">0.091321</span>	-<span class="hljs-number">0.236538</span>	-<span class="hljs-number">2.036020</span><br>    forth	-<span class="hljs-number">0.163275</span>	-<span class="hljs-number">0.877364</span>	<span class="hljs-number">1.137151</span>	<span class="hljs-number">0.318996</span><br><br>--------------------------------------<br>#将lst作为分组的键，列表的数量要与特征相对应<br>lst = [<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>] <br>data.groupby(lst,axis=<span class="hljs-number">1</span>).mean()<br><br>=&gt;<br>    		one(ab平均值)	two(cd平均)<br>    first	<span class="hljs-number">0.090849</span>	-<span class="hljs-number">0.117700</span><br>    <span class="hljs-built_in">second</span>	<span class="hljs-number">0.333213</span>	<span class="hljs-number">0.913144</span><br>    third	<span class="hljs-number">0.079903</span>	-<span class="hljs-number">1.136279</span><br>    forth	-<span class="hljs-number">0.520319</span>	<span class="hljs-number">0.728073</span><br>    <br>#还可以以字典方式建立映射关系<br>mapping = &#123;&#x27;a&#x27;<span class="hljs-symbol">:</span><span class="hljs-string">&quot;one&quot;</span>,&#x27;b&#x27;<span class="hljs-symbol">:</span><span class="hljs-string">&quot;one&quot;</span><br>		   &#x27;c&#x27;<span class="hljs-symbol">:</span><span class="hljs-string">&quot;two&quot;</span>,&#x27;d&#x27;<span class="hljs-symbol">:</span><span class="hljs-string">&quot;two&quot;</span>&#125;<br>data.groupby(mapping,axis=<span class="hljs-number">1</span>).mean()<br><br>#和上面一样的结果<br>=&gt;		one			two<br>first	<span class="hljs-number">0.090849</span>	-<span class="hljs-number">0.117700</span><br><span class="hljs-built_in">second</span>	<span class="hljs-number">0.333213</span>	<span class="hljs-number">0.913144</span><br>third	<span class="hljs-number">0.079903</span>	-<span class="hljs-number">1.136279</span><br>forth	-<span class="hljs-number">0.520319</span>	<span class="hljs-number">0.728073</span><br>------------------------------------<br><br>#用函数作为分组的键<br>#创建一个函数，判断对象中是否含有“<span class="hljs-built_in">t</span>”<br>def is_t(name)<span class="hljs-symbol">:</span><br>	<span class="hljs-built_in">if</span> <span class="hljs-string">&quot;t&quot;</span> in <span class="hljs-built_in">na</span><span class="hljs-symbol">me:</span><br>		return <span class="hljs-built_in">True</span><br>	el<span class="hljs-symbol">se:</span><br>		return <span class="hljs-built_in">False</span><br><br>data.groupby(is_t).mean()		#以函数作为条件<br>data.groupby(<span class="hljs-built_in">len</span>).mean()		#以长度作为条件<br>------------------------------------<br><br>#将上面的条件组合起来进行分组<br>index_list = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;A&#x27;]<br>data.groupby(is_t,index_list).mean()<br><br>-----------------------------------<br><br>#根据teacher显示一些只关于score的常量<br>df.groupby(&#x27;teacher&#x27;)[&#x27;score&#x27;].describe()<br></code></pre></td></tr></table></figure>


<h4 id="分组对象"><a href="#分组对象" class="headerlink" title="分组对象"></a>分组对象</h4><figure class="highlight vala"><table><tr><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#  aggregate方法  集合 聚集</span><br><br><span class="hljs-meta">#根据teacher分组，并分别计算平均数，求和，最大值，标准差等</span><br><span class="hljs-meta">#aggregate可以简写成agg</span><br><span class="hljs-meta">#aggregate后面可以填写自定义函数</span><br>df.groupby(<span class="hljs-string">&#x27;teacher&#x27;</span>).aggregate([<span class="hljs-string">&#x27;mean&#x27;</span>,<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-string">&#x27;max&#x27;</span>,<span class="hljs-string">&#x27;std&#x27;</span>])<br><br><br><span class="hljs-meta">#根据teacher分组后，分别求score的平均值，rank的中值</span><br>df.groupby(<span class="hljs-string">&#x27;teacher&#x27;</span>).aggregate(&#123;<span class="hljs-string">&quot;score&quot;</span>:np.mean,<br>								 <span class="hljs-string">&quot;rank&quot;</span>:np.median&#125;)<br>								 <br><span class="hljs-meta">#更进一步进阶</span><br>df.groupby(<span class="hljs-string">&#x27;teacher&#x27;</span>).aggregate(&#123;<span class="hljs-string">&quot;score&quot;</span>:[<span class="hljs-string">&#x27;max&#x27;</span>,<span class="hljs-string">&#x27;min&#x27;</span>,np.mean],<br>								 <span class="hljs-string">&quot;rank&quot;</span>:np.median&#125;)<br>								 <br><span class="hljs-meta"># filter方法	筛选</span><br><br><span class="hljs-meta">#根据subject分组后，筛选出rank中平均值大于6的组</span><br>def high_rank(x):<br>	<span class="hljs-keyword">return</span> x[<span class="hljs-string">&#x27;rank&#x27;</span>].mean() &gt; <span class="hljs-number">6</span><br><br>df.groupby(<span class="hljs-string">&#x27;subject&#x27;</span>).filter(high_rank)<br><br><span class="hljs-meta">#也可直接胞函数写到filter里</span><br>df.groupby(<span class="hljs-string">&#x27;subject&#x27;</span>).filter(lambda x: x[<span class="hljs-string">&#x27;rank&#x27;</span>.mean()&gt;<span class="hljs-number">6</span>])<br><br><span class="hljs-meta">#转换transform</span><br>df.groupby(<span class="hljs-string">&#x27;subject&#x27;</span>).transform(lambda x: x - x.mean())<br><br><span class="hljs-meta">#apply 分组对象中的每一组都会执行这个函数</span><br>df_subject = df.groupby(<span class="hljs-string">&quot;subject&quot;</span>)	#创建一个分组对象<br>def rank_score(x)：<br>	x[<span class="hljs-string">&#x27;rank_score&#x27;</span>] = x[<span class="hljs-string">&#x27;score&#x27;</span>] * x[<span class="hljs-string">&#x27;rank&#x27;</span>].std()<br>	<span class="hljs-keyword">return</span> x<br>df_subject.apply(rank_score)<br></code></pre></td></tr></table></figure>


<h4 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h4><p>安装一个模块seaborn</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">!pip <span class="hljs-keyword">install</span> seaborn<br></code></pre></td></tr></table></figure>
<p>太懒了，没记笔记</p>
<h2 id="矢量化字符串"><a href="#矢量化字符串" class="headerlink" title="矢量化字符串"></a>矢量化字符串</h2><p><strong>将序列类对象转换为series类</strong></p>
<p>-series的str属性</p>
<p>-避免循环语句</p>
<p>-对字符串的处理能力更强</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment">#必要性</span><br><span class="hljs-comment">#将列表中字符串首字母大写</span><br><br>names = [<span class="hljs-string">&quot;newton&quot;</span>, <span class="hljs-string">&quot;hertz&quot;</span>, <span class="hljs-string">&quot;cueie&quot;</span>]<br>[<span class="hljs-built_in">name</span>.capitalize() <span class="hljs-keyword">for</span> <span class="hljs-built_in">name</span> <span class="hljs-keyword">in</span> names]	<span class="hljs-comment">#将首字母变成大写</span><br><br><br><span class="hljs-comment">#如果列表中有缺失值none，这样操作就会报错</span><br>names1 = [<span class="hljs-string">&quot;newton&quot;</span>, <span class="hljs-string">&quot;hertz&quot;</span>, None, <span class="hljs-string">&quot;cueie&quot;</span>]<br>[<span class="hljs-built_in">name</span>.capitalize() <span class="hljs-keyword">for</span> <span class="hljs-built_in">name</span> <span class="hljs-keyword">in</span> names1]<br><br><span class="hljs-comment"># =&gt; 报错</span><br><br><span class="hljs-comment">#解决方法，将列表转化成series对象</span><br><br>import pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-comment">#矢量化</span><br>snames = pd.Series(names2)	<br>snames<br><br>snaes.str.capitalize() <span class="hljs-comment">#这就没问题了</span><br><br><span class="hljs-comment">#snames.str.    #&lt;TAB键&gt;可以选择需要的函数</span><br></code></pre></td></tr></table></figure>
<h6 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h6><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">df = pd<span class="hljs-selector-class">.DataFrame</span>(np<span class="hljs-selector-class">.random</span><span class="hljs-selector-class">.randn</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>),<br>				  <span class="hljs-attribute">columns</span>=[<span class="hljs-string">&#x27; Columns A &#x27;</span>, <span class="hljs-string">&#x27; Columns B &#x27;</span>],<br>				  index=range(<span class="hljs-number">3</span>))<br>df<br><br>#=&gt;<br>	Columns A	 Columns B <br><span class="hljs-number">0</span>	-<span class="hljs-number">0.609668</span>	-<span class="hljs-number">0.628859</span><br><span class="hljs-number">1</span>	<span class="hljs-number">0.562721</span>	<span class="hljs-number">0.117674</span><br><span class="hljs-number">2</span>	-<span class="hljs-number">0.178206</span>	-<span class="hljs-number">0.941975</span><br>-----------------------<br>下面的方法得到的都是一个对象，不会真正的额更改<br>#去掉特征中两侧的空格<br>df<span class="hljs-selector-class">.columns</span><span class="hljs-selector-class">.str</span><span class="hljs-selector-class">.strip</span>()<br><br>#特征名称小写<br>df<span class="hljs-selector-class">.columns</span><span class="hljs-selector-class">.str</span><span class="hljs-selector-class">.lower</span>()<br>------------------------<br><br>#真实修改 去空格 小写 将空格改为_<br>df<span class="hljs-selector-class">.columns</span> = df<span class="hljs-selector-class">.columns</span><span class="hljs-selector-class">.str</span><span class="hljs-selector-class">.strip</span>()<span class="hljs-selector-class">.str</span><span class="hljs-selector-class">.lower</span>()<span class="hljs-selector-class">.str</span><span class="hljs-selector-class">.replace</span>(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分析-可视化</title>
    <url>/2021/08/20/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>了解数据可视化的基本概念</p>
<p>了解Matplotlib的基本应用方法</p>
<h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><p>①艺术可视化</p>
<p>②数字性可视化</p>
<p>​    –基于统计学</p>
<p>​    –统计图表</p>
<p>③众多第三方库</p>
<p>​    –Matplotlib</p>
<p>​    –Seaborn</p>
<p>​    –plotly</p>
<p>​    –Pyecharts</p>
<p>④Matplotlib</p>
<p><a href="http://matplotlib.org/">http://matplotlib.org/</a></p>
<p>​    –Matplotlib 3.0 is Python 3 only</p>
<p>​    –安装: pip install matplotlib</p>
<h4 id="Matplotlib概要"><a href="#Matplotlib概要" class="headerlink" title="Matplotlib概要"></a>Matplotlib概要</h4><figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta">#sin函数图像</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-title">x</span> = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">100</span>)<br><span class="hljs-title">y1</span> = np.sin(x)<br><span class="hljs-title">plt</span>.plot(x,y1)<br><span class="hljs-title">plt</span>.show()<br></code></pre></td></tr></table></figure>
<figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima">%matplotlib inline  #写了这一行，就不用写plt.<span class="hljs-built_in">show</span>()了<br>x = <span class="hljs-built_in">np</span>.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*<span class="hljs-built_in">np</span>.pi, <span class="hljs-number">100</span>)<br>y1 = <span class="hljs-built_in">np</span>.<span class="hljs-built_in">sin</span>(x)<br>plt.plot(x,y1)<br>#plt.<span class="hljs-built_in">show</span>()		#这行写了第一行就不用写了<br></code></pre></td></tr></table></figure>
<h6 id="绘图风格："><a href="#绘图风格：" class="headerlink" title="绘图风格："></a>绘图风格：</h6><p>1.MATLAB风格(上面是这个风格)</p>
<p>2.面向对象风格(我们使用这个方法)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#建立坐标系</span><br><span class="hljs-attribute">fig</span> = plt.figure()		#创建一个对象，后面直接调用这个对象<br><span class="hljs-attribute">ax</span> = fig.add_axes([<span class="hljs-number">0</span>.<span class="hljs-number">1</span>, <span class="hljs-number">0</span>.<span class="hljs-number">1</span>, <span class="hljs-number">0</span>.<span class="hljs-number">8</span>, <span class="hljs-number">0</span>.<span class="hljs-number">8</span>])<br><br><span class="hljs-attribute">x</span> = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">100</span>)<br><span class="hljs-attribute">ax</span>.plot(x,np.sin(x))<br><br><span class="hljs-comment">#保存图像</span><br><span class="hljs-attribute">fig</span>.savefig(<span class="hljs-string">&quot;./images/sine.png&quot;</span>)<br><br><span class="hljs-comment">#查看方法文档</span><br><span class="hljs-attribute">fig</span>.add_axes?<br></code></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">plt函数</th>
<th align="center">方法ax对象</th>
</tr>
</thead>
<tbody><tr>
<td align="center">plt.plot()</td>
<td align="center">ax.plot()</td>
</tr>
<tr>
<td align="center">plt.legend()</td>
<td align="center">ax.legend()</td>
</tr>
<tr>
<td align="center">plt.xlabel()</td>
<td align="center">ax.set_xlabel()</td>
</tr>
<tr>
<td align="center">plt.ylabel()</td>
<td align="center">ax.set_ylabel()</td>
</tr>
<tr>
<td align="center">plt.xlim()</td>
<td align="center">ax.set_xlim()</td>
</tr>
<tr>
<td align="center">plt.ylim()</td>
<td align="center">ax.set_ylim()</td>
</tr>
<tr>
<td align="center">plt.title()</td>
<td align="center">ax.set_title()</td>
</tr>
</tbody></table>
<h5 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h5><figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">#坐标网络<br>%matplotlib <span class="hljs-keyword">inline</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>x = np.arange(<span class="hljs-number">0.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">0.02</span>)<br>y = np.exp(-x)*np.cos(<span class="hljs-number">2</span>*np.pi*x)<br>plt.plot(x, y)<br><br>plt.grid(color=<span class="hljs-string">&#x27;gray&#x27;</span>)   #显示网格<br><br>#面向对象作图<br>#面向对象作图<br>fig = plt.figure()<br>ax = fig.add_axes([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.8</span>])<br><br>ax.grid(color=<span class="hljs-string">&#x27;gray&#x27;</span>)<br>ax.plot(x, y)<br><br>#小于零的坐标显示负数<br><span class="hljs-keyword">import</span>.matplotlib<br>matplotlib.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure>
<h5 id="设置坐标轴"><a href="#设置坐标轴" class="headerlink" title="设置坐标轴"></a>设置坐标轴</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">#设置坐标轴<br>fig = plt<span class="hljs-selector-class">.figure</span>()<br>ax = fig<span class="hljs-selector-class">.add_axes</span>(<span class="hljs-selector-attr">[0.1, 0.1, 0.8, 0.8]</span>)<br>ax<span class="hljs-selector-class">.grid</span>(<span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;gray&#x27;</span>)<br>ax<span class="hljs-selector-class">.plot</span>(x, y)<br><br>ax<span class="hljs-selector-class">.set_xlabel</span>(<span class="hljs-string">&#x27;横坐标&#x27;</span>)    #为X，Y轴设置标题<br>ax<span class="hljs-selector-class">.set_ylabel</span>(<span class="hljs-string">&#x27;纵坐标&#x27;</span>)<br>ax<span class="hljs-selector-class">.set_xlim</span>((-<span class="hljs-number">2</span>,<span class="hljs-number">10</span>))      #为X，Y轴设置数值范围<br>ax<span class="hljs-selector-class">.set_ylim</span>((-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br><br>#坐标轴标题显示方框，不显示中文？<br>#解决方法<br>from pylab import mpl<br><br>mpl<span class="hljs-selector-class">.rcParams</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>]</span> = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;fangsong&#x27;</span>]</span>  #指定默认字体<br>mpl<span class="hljs-selector-class">.rcParams</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>]</span> = False<br><br>#设置刻度<br>ax<span class="hljs-selector-class">.set_xlim</span>((<span class="hljs-number">0</span>, <span class="hljs-number">5</span>))		#x轴刻度范围设置为<span class="hljs-number">0</span>~<span class="hljs-number">5</span><br>ax<span class="hljs-selector-class">.set_xticks</span>(np<span class="hljs-selector-class">.linspace</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>))	#将<span class="hljs-number">0</span>到<span class="hljs-number">5</span>分成<span class="hljs-number">11</span>个数<br><br>#隐藏刻度上的数字<br>ax<span class="hljs-selector-class">.yaxis</span><span class="hljs-selector-class">.set_maior_locator</span>(plt<span class="hljs-selector-class">.Nulllocator</span>())	#隐藏y轴上的刻度与数字<br>ax<span class="hljs-selector-class">.xaxis</span><span class="hljs-selector-class">.set_maior_formatter</span>(plt<span class="hljs-selector-class">.Nullformatter</span>()) #只隐藏数字<br></code></pre></td></tr></table></figure>


<h5 id="多分区坐标系"><a href="#多分区坐标系" class="headerlink" title="多分区坐标系"></a>多分区坐标系</h5><p>比较：</p>
<p>plt.subplot</p>
<p>plt.subplots</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 创建3*3的坐标轴</span><br><span class="hljs-attribute">fig</span>, ax = plt.subplots(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, sharex=&#x27;col&#x27;, sharey=&#x27;row&#x27;)<br><br><span class="hljs-attribute">ax</span>.shape	#查看坐标轴的形状（个数）<br><br><span class="hljs-comment">#大小不一样的坐标系</span><br><span class="hljs-attribute">fig</span> = plt.figure()<br><span class="hljs-attribute">ax1</span> = fig.add_axes([<span class="hljs-number">0</span>.<span class="hljs-number">1</span>, <span class="hljs-number">0</span>.<span class="hljs-number">1</span>, <span class="hljs-number">0</span>.<span class="hljs-number">8</span>, <span class="hljs-number">0</span>.<span class="hljs-number">8</span>])	#数字依次代表左下宽高<br><span class="hljs-attribute">ax1</span> = fig.add_axes([<span class="hljs-number">0</span>.<span class="hljs-number">6</span>, <span class="hljs-number">0</span>.<span class="hljs-number">5</span>, <span class="hljs-number">0</span>.<span class="hljs-number">2</span>, <span class="hljs-number">0</span>.<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure>


<h4 id="曲线和散点"><a href="#曲线和散点" class="headerlink" title="曲线和散点"></a>曲线和散点</h4><p>掌握曲线图，图例，散点图的绘制方法</p>
<p>常用函数：plot</p>
<p>常用参数：color（颜色），linestyle（线型）</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">solid</th>
<th align="center">dashed</th>
<th align="center">dashdot</th>
<th align="center">dotted</th>
</tr>
</thead>
<tbody><tr>
<td align="center">符号</td>
<td align="center">-</td>
<td align="center">—</td>
<td align="center">-.</td>
<td align="center">:</td>
</tr>
<tr>
<td align="center">样式</td>
<td align="center"><strong><strong><strong>____</strong></strong></strong></td>
<td align="center">————–</td>
<td align="center">-.-.-.-.-.-.</td>
<td align="center">……………….</td>
</tr>
</tbody></table>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">%matplotlib inline<br>import numpy as np<br>import pandas as pd<br>import matplotlib.pyplot as plt<br><br>x = np.linspace(0, 2*np.pi, 100)<br>plt.plot(x, np.sin(x), <span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;blue&#x27;</span>)<br><span class="hljs-comment">#颜色(&#x27;blue&#x27;)(&#x27;r&#x27;)(&#x27;#A52A2A&#x27;),这三种方法都行</span><br><br><span class="hljs-comment">#线型写法</span><br>plt.plot(x, 2*x, <span class="hljs-attribute">linestyle</span>=<span class="hljs-string">&#x27;dashdot&#x27;</span>)<br>plt.plot(x, -2*x+2, <span class="hljs-attribute">linestyle</span>=<span class="hljs-string">&#x27;:&#x27;</span>)<br><br>plt.plot(range(10), <span class="hljs-attribute">linestyle</span>=<span class="hljs-string">&#x27;--&#x27;</span>, <span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-attribute">marker</span>=<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-attribute">markersize</span>=16, <span class="hljs-attribute">markerfacecolor</span>=<span class="hljs-string">&#x27;b&#x27;</span>)<br>					#  线型			颜色		 xy相交点的形状	相交点的大小		相交点形状填充颜色<br><br><span class="hljs-comment">#&#x27;-rD&#x27;是线型，颜色，形状的简写										只显示2,4,6这三个点</span><br>plt.plot(range(10), <span class="hljs-string">&#x27;-rD&#x27;</span>, <span class="hljs-attribute">markersize</span>=16, <span class="hljs-attribute">markerfacecolor</span>=<span class="hljs-string">&#x27;b&#x27;</span>, markevery=[2,4,6])<br><br>plt.grid(<span class="hljs-literal">True</span>)		#网格		<br><br><span class="hljs-comment">#图例</span><br>plt.plot(x, -2*x+2, <span class="hljs-string">&#x27;k--&#x27;</span>, <span class="hljs-attribute">lable</span>=<span class="hljs-string">&quot;图例名&quot;</span>)		#图例记得命名<br>plt.legend(<span class="hljs-attribute">loc</span>=<span class="hljs-string">&#x27;upper right&#x27;</span>)    #图例的位置（这个表示右上角显示图例）<br>plt.legend((line1,line2),<span class="hljs-attribute">loc</span>=0)		#图例只显示线1和线2<br></code></pre></td></tr></table></figure>


<h5 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h5><p>函数：scatter</p>
<p>参数：</p>
<p>– c:颜色</p>
<p>– s:大小</p>
<p>– alpha：透明度</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><code class="hljs nix"><span class="hljs-attr">rng</span> = np.random.RandomState(<span class="hljs-number">0</span>)<br><br><span class="hljs-attr">x</span> = rng.randn(<span class="hljs-number">100</span>)<br><span class="hljs-attr">y</span> = rng.randn(<span class="hljs-number">100</span>)<br><br><span class="hljs-attr">colors</span> = rng.rand(<span class="hljs-number">100</span>)<br><span class="hljs-attr">sizes</span> = <span class="hljs-number">1000</span>*rng.rand(<span class="hljs-number">100</span>)<br><br>plt.scatter(x, y, <span class="hljs-attr">c=colors,</span> <span class="hljs-attr">s=sizes,</span> <span class="hljs-attr">alpha=0.3)</span><br>plt.colorbar()		<span class="hljs-comment">#颜色谱</span><br></code></pre></td></tr></table></figure>


<h4 id="其它统计图"><a href="#其它统计图" class="headerlink" title="其它统计图"></a>其它统计图</h4><h5 id="柱形图"><a href="#柱形图" class="headerlink" title="柱形图"></a>柱形图</h5><p>bar</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell">%matplotlib inline<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-class"><span class="hljs-keyword">data</span> = [2, 10, 4, 8, 6]			#每个柱形图对应的高度</span><br><span class="hljs-title">position</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]		#相对应的位置<br><span class="hljs-title">plt</span>.bar(x=position, height=<span class="hljs-class"><span class="hljs-keyword">data</span>)	#还有许多参数，自行了解</span><br></code></pre></td></tr></table></figure>
<h5 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h5><p>boxplot</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure>
<h5 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h5><p>pie</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">x =[2, 4, 6, 8]<br>fig, ax = plt.subplots()<br>labels = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br>explode = (0, 0.1, 0, 0)	#偏离度(是否突起)<br><br><br><span class="hljs-comment"># 参数的意思分别是数据，偏离程度，标识，颜色，百分比格式，阴影，第一个扇形开始角度，半径大小</span><br>ax.pie(x, <span class="hljs-attribute">explode</span>=explode, <span class="hljs-attribute">labels</span>=labels, <span class="hljs-attribute">colors</span>=colors, <span class="hljs-attribute">autopct</span>=<span class="hljs-string">&#x27;%1.1f%%&#x27;</span>, <span class="hljs-attribute">shadow</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">startangle</span>=90, radius1.2)<br><br>ax.<span class="hljs-builtin-name">set</span>(<span class="hljs-attribute">aspect</span>=<span class="hljs-string">&quot;equal&quot;</span>, <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;Pie&quot;</span>)<br></code></pre></td></tr></table></figure>
<h5 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h5><p>hist</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">datas</span> = np.random.randn(<span class="hljs-number">10000</span>)<br><span class="hljs-attr">hs</span> = plt.hist(datas)<br></code></pre></td></tr></table></figure>


<h4 id="概述和分类统计"><a href="#概述和分类统计" class="headerlink" title="概述和分类统计"></a>概述和分类统计</h4><p>seaborn</p>
<p>seaborn是基于Matplotlib发展而来的实现数据可视化的库</p>
<p>他提供了一些更高级的工具，使得应用起来比matplotlib更简单</p>
<p>安装方法</p>
<p>pip install seaborn</p>
<p>conda install seaborn</p>
<p>官方网站：<a href="https://seaborn.pydata.org/">https://seaborn.pydata.org/</a></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">%matplotlib inline<br>import seaborn as sns<br>sns.<span class="hljs-builtin-name">set</span>()			#结果设置为默认风格<br>tips = sns.load_dataset(<span class="hljs-string">&quot;tips&quot;</span>)		#sns自带的数据集<br>sns.relplot(<span class="hljs-attribute">x</span>=<span class="hljs-string">&#x27;total_bill&#x27;</span>, <span class="hljs-attribute">y</span>=<span class="hljs-string">&#x27;tip&#x27;</span>, <span class="hljs-attribute">col</span>=<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-attribute">hue</span>=<span class="hljs-string">&#x27;smoker&#x27;</span>, <span class="hljs-attribute">style</span>=<span class="hljs-string">&#x27;smoker&#x27;</span>, <span class="hljs-attribute">size</span>=<span class="hljs-string">&#x27;size&#x27;</span>, <span class="hljs-attribute">data</span>=tips)<br><br>sns.barplot(记得写参数)	#柱状图<br><br></code></pre></td></tr></table></figure>


<h5 id="分类特征的统计图"><a href="#分类特征的统计图" class="headerlink" title="分类特征的统计图"></a>分类特征的统计图</h5><p>函数：seaborn.catplot</p>
<p>– 分类特征的散点图</p>
<p>– 分类特征的分布图</p>
<p>– 分类特征的估计图</p>
<h5 id="更多统计图"><a href="#更多统计图" class="headerlink" title="更多统计图"></a>更多统计图</h5><p>关系统计图</p>
<p>函数：seaborn.relplot</p>
<p>回归统计图</p>
<p>函数：seaborn.lmplot</p>
<p>数据分布统计图</p>
<p>函数：sns.distplot</p>
<p>​            sns.jointplot</p>
<p>​            sns.pairplot</p>
<p>热图</p>
<p>函数：sns.heatmap</p>
<p>​            sns.clustermap</p>
<h4 id="plotly应用"><a href="#plotly应用" class="headerlink" title="plotly应用"></a>plotly应用</h4><p>掌握plotly的开发环境</p>
<p>掌握基本使用方法</p>
<p>掌握高级接口的绘图函数</p>
<h4 id="pyecharts"><a href="#pyecharts" class="headerlink" title="pyecharts"></a>pyecharts</h4><p>!pip install pyecharts -U        #-u是升级的意思</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#生成本地HTML文件</span><br>from pyecharts.charts import <span class="hljs-keyword">Bar</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">bar </span>= <span class="hljs-keyword">Bar()</span><br><span class="hljs-keyword">bar.add_xaxis([&quot;羊&quot;, </span><span class="hljs-string">&quot;猪&quot;</span>, <span class="hljs-string">&quot;狗&quot;</span>])<br><span class="hljs-keyword">bar.add_yaxis(&quot;小博&quot;, </span>[<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br><span class="hljs-keyword">bar.render()</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword"># </span>HTML文件，会默认生成在当前目录且名字叫render.html<br><span class="hljs-comment"># 也可以传入路径参数，如 bar.render(&quot;myecharts.html&quot;)</span><br><br><br><span class="hljs-comment">#链式调用（跟上面原理一样）</span><br>from pyecharts.charts import <span class="hljs-keyword">Bar</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">bar </span>= (<br>		<span class="hljs-keyword">Bar()</span><br><span class="hljs-keyword">	</span>	.<span class="hljs-keyword">add_xaxis([&quot;羊&quot;, </span><span class="hljs-string">&quot;猪&quot;</span>, <span class="hljs-string">&quot;狗&quot;</span>])<br>		.<span class="hljs-keyword">add_yaxis(&quot;小博&quot;, </span>[<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br>		)<br><span class="hljs-keyword">bar.render_notebook()	</span><span class="hljs-comment">#将图像渲染到当前的jupyter环境中来	</span><br></code></pre></td></tr></table></figure>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">from pyecharts.charts import Bar<br>from pyecharts import options <span class="hljs-keyword">as</span> opts	#对图像进行配置<br><br>bar = <span class="hljs-constructor">Bar()</span><br>bar.add<span class="hljs-constructor">_xaxis([<span class="hljs-string">&quot;羊&quot;</span>, <span class="hljs-string">&quot;猪&quot;</span>, <span class="hljs-string">&quot;狗&quot;</span>])</span><br>bar.add<span class="hljs-constructor">_yaxis(<span class="hljs-string">&quot;小博&quot;</span>, [3, 7, 8])</span><br><br>bar.set<span class="hljs-constructor">_global_opts(<span class="hljs-params">title_opts</span>=<span class="hljs-params">opts</span>.TitleOpts(<span class="hljs-params">title</span>=<span class="hljs-string">&quot;小博旗舰店&quot;</span>, <span class="hljs-params">subtitle</span>=<span class="hljs-string">&quot;双十一促销&quot;</span>)</span>)<br>bar.render(<span class="hljs-string">&quot;render1.html&quot;</span>)<br></code></pre></td></tr></table></figure>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">from pyecharts.charts import Bar<br>from pyecharts import options <span class="hljs-keyword">as</span> opts	#对图像进行配置<br>from pyecharts.globals import ThemeType   #配置主题 <span class="hljs-keyword">new</span><br><br>bar = <span class="hljs-constructor">Bar(<span class="hljs-params">init_opts</span>=<span class="hljs-params">opts</span>.InitOpts(<span class="hljs-params">theme</span>=ThemeType.LIGHT)</span>)  #换主题 <span class="hljs-keyword">new</span><br>bar.add<span class="hljs-constructor">_xaxis([<span class="hljs-string">&quot;羊&quot;</span>, <span class="hljs-string">&quot;猪&quot;</span>, <span class="hljs-string">&quot;狗&quot;</span>])</span><br>bar.add<span class="hljs-constructor">_yaxis(<span class="hljs-string">&quot;小博&quot;</span>, [3, 7, 8])</span><br><br>bar.set<span class="hljs-constructor">_global_opts(<span class="hljs-params">title_opts</span>=<span class="hljs-params">opts</span>.TitleOpts(<span class="hljs-params">title</span>=<span class="hljs-string">&quot;小博旗舰店&quot;</span>, <span class="hljs-params">subtitle</span>=<span class="hljs-string">&quot;双十一促销&quot;</span>)</span>)<br>bar.render(<span class="hljs-string">&quot;render2.html&quot;</span>)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据分析</category>
      </categories>
      <tags>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title>网易-jQuery</title>
    <url>/2022/03/03/%E7%BD%91%E6%98%93-jQuery/</url>
    <content><![CDATA[<h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h5><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-selector-class">.show</span>()显示元素	<span class="hljs-selector-class">.hide</span>()隐藏元素<br><span class="hljs-selector-class">.index</span>()当前元素索引	<span class="hljs-selector-class">.css</span>()设置样式<br><span class="hljs-selector-class">.toFixed</span>(<span class="hljs-number">2</span>)保留<span class="hljs-selector-tag">2</span>位小数	<span class="hljs-selector-class">.substr</span>(<span class="hljs-number">1</span>)截取<span class="hljs-selector-tag">index1</span>往后的<br><span class="hljs-selector-class">.change</span>(fn)<span class="hljs-selector-tag">input</span>框内容发生改变<br><span class="hljs-selector-class">.trigger</span>(<span class="hljs-string">&#x27;click&#x27;</span>) 自动触发事件<br></code></pre></td></tr></table></figure>




<h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><h6 id="等待页面加载"><a href="#等待页面加载" class="headerlink" title="等待页面加载"></a>等待页面加载</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//第一种</span><br>$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;加载完毕&#x27;</span>);<br>&#125;);<br><br><span class="hljs-comment">//第二种</span><br>$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;dom加载完毕&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>


<h6 id="对象相互转换"><a href="#对象相互转换" class="headerlink" title="对象相互转换"></a>对象相互转换</h6><p>dom对象：原生js语法得到的对象(document.querySelector(‘div’))</p>
<p>jQuery对象：通过jQuery获得的对象($(‘div’))</p>
<p>每个对象只能调用自己的方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">dom转jQuery<br><span class="hljs-keyword">var</span> mydiv = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&#x27;div&#x27;</span>);<br><br>$(mydiv)		<span class="hljs-comment">//</span><br><br>jQuery转dom<br>$(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">0</span>]	后面就可以添加原生js语句了<br>$(<span class="hljs-string">&#x27;div&#x27;</span>).get(<span class="hljs-number">0</span>)  和上面的方法是一样的<br></code></pre></td></tr></table></figure>


<h5 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h5><h6 id="css选择"><a href="#css选择" class="headerlink" title="css选择"></a>css选择</h6><p>直接在选择器里写入css选择器就行</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">$(&#x27;<span class="hljs-params">div</span>&#x27;)</span>	<span class="hljs-constructor">$(&#x27;<span class="hljs-params">li</span>&#x27;)</span><br><span class="hljs-constructor">$(&#x27;.<span class="hljs-params">class</span>&#x27;)</span>	<span class="hljs-constructor">$(&#x27;#<span class="hljs-params">id</span>&#x27;)</span> <br><span class="hljs-constructor">$(&#x27;<span class="hljs-params">ul</span> <span class="hljs-params">li</span>&#x27;)</span><br></code></pre></td></tr></table></figure>
<h6 id="隐式迭代"><a href="#隐式迭代" class="headerlink" title="隐式迭代"></a>隐式迭代</h6><p>遍历 内部dom元素的过程就叫隐式迭代</p>
<p>jQuery会给匹配到的所有元素进行循环遍历，不用我们自己在进行循环</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">所有匹配到的元素背景都会变成red<br>$(<span class="hljs-string">&quot;div&quot;</span>).css(<span class="hljs-string">&#x27;backgroundCorlor&#x27;</span>,<span class="hljs-string">&#x27;red&#x27;</span>)<br></code></pre></td></tr></table></figure>
<h6 id="筛选选择器"><a href="#筛选选择器" class="headerlink" title="筛选选择器"></a>筛选选择器</h6><figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima">$(&#x27;<span class="hljs-built_in">li</span>:<span class="hljs-built_in">first</span>&#x27;)	第一个<span class="hljs-built_in">li</span><br>$(&#x27;<span class="hljs-built_in">li</span>:<span class="hljs-built_in">last</span>&#x27;)	最后一个<span class="hljs-built_in">li</span><br>$(<span class="hljs-built_in">li</span>:eq(<span class="hljs-number">2</span>))		第二个<span class="hljs-built_in">li</span>,括号里是几就选择第几个<br><br><span class="hljs-built_in">li</span>:<span class="hljs-built_in">odd</span>	选择奇数<br><span class="hljs-built_in">li</span>:<span class="hljs-built_in">even</span>	选择偶数<br></code></pre></td></tr></table></figure>
<p>父子元素选择</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">$(<span class="hljs-string">&#x27;.li&#x27;</span>)<span class="hljs-selector-class">.parent</span>()		li的父元素<br>$(<span class="hljs-string">&#x27;.li&#x27;</span>)<span class="hljs-selector-class">.parents</span>()		li的所有祖先元素(括号里可以指定祖先元素)<br>$(<span class="hljs-string">&#x27;.li&#x27;</span>)<span class="hljs-selector-class">.children</span>(<span class="hljs-string">&#x27;p&#x27;</span>)	li的最近一级的子元素p<br>$(<span class="hljs-string">&#x27;.li&#x27;</span>)<span class="hljs-selector-class">.find</span>(<span class="hljs-string">&#x27;p&#x27;</span>)		li所有的子元素p<br></code></pre></td></tr></table></figure>
<p>兄弟元素</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">$(&#x27;<span class="hljs-params">li</span>:<span class="hljs-params">first</span>&#x27;)</span>.siblings(&#x27;li&#x27;)	查找兄弟节点，不包括自己<br><span class="hljs-constructor">$(&#x27;<span class="hljs-params">li</span>:<span class="hljs-params">first</span>&#x27;)</span>.next<span class="hljs-constructor">All()</span>			同级后面所有元素<br><span class="hljs-constructor">$(&#x27;<span class="hljs-params">li</span>:<span class="hljs-params">first</span>&#x27;)</span>.prev<span class="hljs-constructor">All()</span>			同级前面所有元素<br><span class="hljs-constructor">$(&#x27;<span class="hljs-params">li</span>:<span class="hljs-params">first</span>&#x27;)</span>.eq(<span class="hljs-number">2</span>)				查找同级的第几个元素<br></code></pre></td></tr></table></figure>


<h5 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h5><p>css()单个样式修改</p>
<p>css({})多个样式修改</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;div&#x27;</span>).css(<span class="hljs-string">&quot;width&quot;</span>,<span class="hljs-string">&quot;500px&quot;</span>)<br>$(<span class="hljs-string">&#x27;div&#x27;</span>).css(&#123;<br>	<span class="hljs-string">&quot;width&quot;</span>:<span class="hljs-string">&quot;300px&quot;</span>,<br>	<span class="hljs-string">&quot;height&quot;</span>:<span class="hljs-string">&quot;200px&quot;</span>,<br>	<span class="hljs-string">&quot;backgroundColor&quot;</span>:<span class="hljs-string">&#x27;red&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure>
<p>操作类名样式方法</p>
<p>添加删除时不影响原来已有的类名</p>
<p>.addClass(‘rotate’)        添加class</p>
<p>.removeClass(‘rotate’)    删除class</p>
<p>.toggleClass(‘rotate’)        判断有无class，有:删除，无:加上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="css">	<span class="hljs-selector-class">.rotate</span>&#123;<span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>$(&#x27;div&#x27;).addClass(&#x27;rotate&#x27;)<br></code></pre></td></tr></table></figure>


<h5 id="jQuery动画效果"><a href="#jQuery动画效果" class="headerlink" title="jQuery动画效果"></a>jQuery动画效果</h5><h6 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h6><p>都有三个参数分别是speed，easing,fn(速度，效果，回调函数)</p>
<p>.show()    显示</p>
<p>.hide()    隐藏</p>
<p>.toggle()    切换</p>
<p>用这几个方法是一般都不会添加参数（这个动画不好看）</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">上下拉动<br>参数与show的参数一样<br><span class="hljs-title">.slideDown()下拉显示</span><br><span class="hljs-title">.slideUp()上拉消失</span><br><span class="hljs-title">.slideToggle()上下拉切换</span><br></code></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">淡入淡出<br>参数：速度，透明度（效果），回调函数<br>参数与show的参数一样<br><span class="hljs-function"><span class="hljs-title">fadeIn</span><span class="hljs-params">()</span></span>		淡入<br><span class="hljs-function"><span class="hljs-title">fadeOut</span><span class="hljs-params">()</span></span>		淡出<br><span class="hljs-function"><span class="hljs-title">fadeToggle</span><span class="hljs-params">()</span></span>	淡入淡出切换<br><span class="hljs-function"><span class="hljs-title">fadeTo</span><span class="hljs-params">(<span class="hljs-number">1000</span>，<span class="hljs-number">0.5</span>)</span></span>		切换透明度必须写速度与透明度两个参数<br></code></pre></td></tr></table></figure>
<h6 id="事件切换（鼠标移动）"><a href="#事件切换（鼠标移动）" class="headerlink" title="事件切换（鼠标移动）"></a>事件切换（鼠标移动）</h6><p>hover([over],out)</p>
<p>只写一个参数时，鼠标进入和移出都触发</p>
<p>over:鼠标移到元素上触发</p>
<p>out:鼠标离开元素触发</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;div&#x27;</span>).hover(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;移入事件&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;移出事件&#125;)<br><br><span class="hljs-comment">//写成一个函数</span><br>$(<span class="hljs-string">&#x27;div&#x27;</span>).hover(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	使用toggle相关方法<br>	&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="停止动画"><a href="#停止动画" class="headerlink" title="停止动画"></a>停止动画</h6><p>放到动画前执行，停止上一个未执行完的动画</p>
<p>stop()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;div &gt; li&#x27;</span>).hover(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	$(<span class="hljs-built_in">this</span>).children(<span class="hljs-string">&#x27;ul&#x27;</span>).stop().slideToggle();	<span class="hljs-comment">//放到slideToggle前面</span><br>&#125;);<br></code></pre></td></tr></table></figure>
<h6 id="自定义动画"><a href="#自定义动画" class="headerlink" title="自定义动画"></a>自定义动画</h6><p>animate(params,[speed],[easing],[fn])</p>
<p>params:想要更改的样式属性，以对象的形式传递，属性不用带引号</p>
<p>speed ：速度(‘slow’,’normal’,’fast’)或者毫秒数（1000）</p>
<p>esaing:    切换效果(默认swing)(linear)</p>
<p>fn:回调函数，动画完成后执行</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">$(<span class="hljs-string">&#x27;div&#x27;</span>)<span class="hljs-selector-class">.animate</span>(&#123;<br>	<span class="hljs-attribute">left</span>:<span class="hljs-number">300</span><br>&#125;,<span class="hljs-number">2000</span>)<br></code></pre></td></tr></table></figure>


<h5 id="jQuery属性获取与设置"><a href="#jQuery属性获取与设置" class="headerlink" title="jQuery属性获取与设置"></a>jQuery属性获取与设置</h5><h6 id="获取与修改"><a href="#获取与修改" class="headerlink" title="获取与修改"></a>获取与修改</h6><p>prop()    获取固有属性</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">$(&#x27;<span class="hljs-keyword">div</span>&#x27;).<span class="hljs-keyword">prop</span>(&#x27;<span class="hljs-built_in">class</span>&#x27;)	获取<br>$(&#x27;<span class="hljs-keyword">div</span>&#x27;).<span class="hljs-keyword">prop</span>(&#x27;<span class="hljs-built_in">class</span>&#x27;,&#x27;<span class="hljs-built_in">name</span>&#x27;)	设置<br></code></pre></td></tr></table></figure>
<p>attr()    获取自定义属性</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;div&#x27;</span>).attr(<span class="hljs-string">&#x27;index&#x27;</span>)	获取<br>$(<span class="hljs-string">&#x27;div&#x27;</span>).attr(<span class="hljs-string">&#x27;index&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)	设置<br></code></pre></td></tr></table></figure>
<p>data()    数据缓存，设置的属性存放到元素内存里，不会在页面上显示</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;div&#x27;</span>).attr(<span class="hljs-string">&#x27;name&#x27;</span>)	获取<br>$(<span class="hljs-string">&#x27;div&#x27;</span>).data(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;tbz&#x27;</span>)	设置<br></code></pre></td></tr></table></figure>


<h5 id="jQuery内容文本值"><a href="#jQuery内容文本值" class="headerlink" title="jQuery内容文本值"></a>jQuery内容文本值</h5><h6 id="元素内容"><a href="#元素内容" class="headerlink" title="元素内容"></a>元素内容</h6><p>html()</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;div&#x27;</span>).html()		获取<br>$(<span class="hljs-string">&#x27;div&#x27;</span>).html(<span class="hljs-string">&#x27;&lt;p&gt;123&lt;/p&gt;&#x27;</span>)		设置<br></code></pre></td></tr></table></figure>
<h6 id="元素文本"><a href="#元素文本" class="headerlink" title="元素文本"></a>元素文本</h6><p>text()</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><code class="hljs mel">$(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-keyword">text</span>()		获取<br>$(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-keyword">text</span>(<span class="hljs-string">&#x27;123&#x27;</span>)		设置<br></code></pre></td></tr></table></figure>
<h6 id="表单值"><a href="#表单值" class="headerlink" title="表单值"></a>表单值</h6><p>val()</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">$(&#x27;<span class="hljs-params">input</span>&#x27;)</span>.<span class="hljs-keyword">val</span><span class="hljs-literal">()</span>		获取<br><span class="hljs-constructor">$(&#x27;<span class="hljs-params">input</span>&#x27;)</span>.<span class="hljs-keyword">val</span>(&#x27;<span class="hljs-number">123</span>&#x27;)		设置<br></code></pre></td></tr></table></figure>


<h5 id="jQuery元素操作"><a href="#jQuery元素操作" class="headerlink" title="jQuery元素操作"></a>jQuery元素操作</h5><h6 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h6><p>$(‘div’).each()    用于遍历dom对象</p>
<p>$(‘div’).each(function(index,domEle){})</p>
<p>参数： 索引号，dom对象(需转换$())</p>
<p>$.each()    用于遍历数据，处理数据</p>
<p>$.each(arr,fun(数组索引，数组内容))    </p>
<h6 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h6><p>添加元素</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> li = $(<span class="hljs-string">&quot;&lt;li&gt;我是新创建的元素&lt;/li&gt;&quot;</span>)<br><br>$(<span class="hljs-string">&#x27;div&#x27;</span>).append(<span class="hljs-string">&#x27;li&#x27;</span>)	内部添加到元素后面<br>	prepend(<span class="hljs-string">&#x27;li&#x27;</span>)	内部添加到元素前面<br>	after(<span class="hljs-string">&#x27;li&#x27;</span>)	外部添加到后面<br>	before(<span class="hljs-string">&#x27;li&#x27;</span>)	外部添加到前面<br></code></pre></td></tr></table></figure>
<p>删除元素</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;div&#x27;</span>).remove();	删除自己<br>$(<span class="hljs-string">&#x27;div&#x27;</span>).empty();	删除子节点，与html(<span class="hljs-string">&#x27;&#x27;</span>)一样<br></code></pre></td></tr></table></figure>


<h5 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h5><h6 id="事件注册"><a href="#事件注册" class="headerlink" title="事件注册"></a>事件注册</h6><p>单个</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;div&#x27;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;)<br>$(<span class="hljs-string">&#x27;div&#x27;</span>).mousemove(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h6><p>同时添加多个事件</p>
<p>on()</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;div&#x27;</span>).on(&#123;<br>	click:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;,<br>	mouseenter:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;,<br>	mousedown:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>执行相同事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;div&#x27;</span>).on(<span class="hljs-string">&quot;mouseover mouseout&quot;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	$(<span class="hljs-built_in">this</span>).toggleClass(<span class="hljs-string">&#x27;current&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h6><p>on(‘事件’，子元素，fn)</p>
<p>将事件绑定到父元素上，子元素能触发该事件</p>
<p>也可以给未来动态创建的元素绑定事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;ul&#x27;</span>).on(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-string">&#x27;li&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	$(<span class="hljs-built_in">this</span>).toggleClass(<span class="hljs-string">&#x27;current&#x27;</span>);<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>解除事件委托</p>
<p>off() </p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span>(<span class="hljs-string">&#x27;div&#x27;</span>).off()	解绑所有事件<br><span class="hljs-symbol">$</span>(<span class="hljs-string">&#x27;div&#x27;</span>).off(<span class="hljs-string">&#x27;click&#x27;</span>)	解除<span class="hljs-built_in">div</span>上的click事件<br><span class="hljs-symbol">$</span>(<span class="hljs-string">&#x27;ul&#x27;</span>).off(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-string">&#x27;li&#x27;</span>) 解除事件委托<br></code></pre></td></tr></table></figure>
<p>只能触发一次</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">$(<span class="hljs-string">&#x27;ul&#x27;</span>).one(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<span class="hljs-string">&#x27;)</span><br></code></pre></td></tr></table></figure>


<h6 id="自动触发事件"><a href="#自动触发事件" class="headerlink" title="自动触发事件"></a>自动触发事件</h6><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">$(&#x27;<span class="hljs-params">div</span>&#x27;)</span>.click<span class="hljs-literal">()</span><br><span class="hljs-constructor">$(&#x27;<span class="hljs-params">div</span>&#x27;)</span>.trigger.(<span class="hljs-string">&quot;click&quot;</span>)<br><br>上面两种都会触发默认行为<br>下面一种不会触发默认事件<br><br><span class="hljs-constructor">$(&#x27;<span class="hljs-params">input</span>&#x27;)</span>.trigger<span class="hljs-constructor">Handler(&#x27;<span class="hljs-params">focus</span>&#x27;)</span><br></code></pre></td></tr></table></figure>


<h6 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h6><p>阻止默认行为：event.preventDefault()或者return false</p>
<p>阻止冒泡：event.stopPropagation()</p>
<h5 id="对象拷贝（合并）"><a href="#对象拷贝（合并）" class="headerlink" title="对象拷贝（合并）"></a>对象拷贝（合并）</h5><p>$.extend([deep],target,object1,[objectN])</p>
<p>deep:true为深拷贝，默认false浅拷贝</p>
<p>target：要拷贝的目标对象</p>
<p>object1：待拷贝到的第一个对象</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">$.extend(待拷贝，被拷贝)<br></code></pre></td></tr></table></figure>
<p>浅拷贝：会把原来对象里面的复杂数据类型地址拷贝给目标对象</p>
<p>深拷贝：完全复制一份，会将不冲突的数据合并在一起</p>
<h5 id="多库共存（-符冲突）"><a href="#多库共存（-符冲突）" class="headerlink" title="多库共存（$符冲突）"></a>多库共存（$符冲突）</h5><p>1：使用jQuery代替$</p>
<p>2：让jQuery释放对$的控制权，自己定义</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> tbz = jQuery.noConflict();<br><br>tbz(<span class="hljs-string">&#x27;div&#x27;</span>)<br></code></pre></td></tr></table></figure>


<h5 id="jQuery元素尺寸与位置"><a href="#jQuery元素尺寸与位置" class="headerlink" title="jQuery元素尺寸与位置"></a>jQuery元素尺寸与位置</h5><h6 id="元素尺寸"><a href="#元素尺寸" class="headerlink" title="元素尺寸"></a>元素尺寸</h6><p>如果参数为空，获取相应的值返回数字</p>
<p>如果参数为数字，则是修改相应的值</p>
<p>参数可以不写单位</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">width</span><span class="hljs-params">()</span></span>/<span class="hljs-attribute">height</span>()			获取元素的宽度/高度 <br><span class="hljs-function"><span class="hljs-title">width</span><span class="hljs-params">(<span class="hljs-number">200</span>)</span></span>/<span class="hljs-attribute">height</span>(<span class="hljs-number">100</span>)	修改元素的宽度/高度 <br><span class="hljs-function"><span class="hljs-title">innerWidth</span><span class="hljs-params">()</span></span>/innerHight()	包含<span class="hljs-attribute">padding</span><br><span class="hljs-function"><span class="hljs-title">outerWidth</span><span class="hljs-params">()</span></span>/outerHight()	包含<span class="hljs-attribute">padding</span>,border<br><span class="hljs-function"><span class="hljs-title">outerWidth</span><span class="hljs-params">(true)</span></span>/outerHight(true)	包含<span class="hljs-attribute">padding</span>,border,margin<br></code></pre></td></tr></table></figure>


<h6 id="元素位置"><a href="#元素位置" class="headerlink" title="元素位置"></a>元素位置</h6><p>offset()</p>
<p>设置/获取元素偏移(相对于文档)</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">获取<br>$(<span class="hljs-string">&#x27;div&#x27;</span>)<span class="hljs-selector-class">.offset</span>()<span class="hljs-selector-class">.top</span>	距离文档顶部距离<br>$(<span class="hljs-string">&#x27;div&#x27;</span>)<span class="hljs-selector-class">.offset</span>()<span class="hljs-selector-class">.left</span>	距离文档左侧距离<br><br>设置<br>$(<span class="hljs-string">&#x27;div&#x27;</span>)<span class="hljs-selector-class">.offset</span>(&#123;<br>	<span class="hljs-attribute">top</span>:<span class="hljs-number">100</span>,<br>	<span class="hljs-attribute">left</span>:<span class="hljs-number">200</span><br>&#125;)<br></code></pre></td></tr></table></figure>


<p>position()</p>
<p>获取距离带有定位父级位置的偏移（该元素到父级的距离）</p>
<p>如果没有定位，以文档为准</p>
<p>只能获取，不能设置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">$(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-built_in">position</span>().<span class="hljs-keyword">left</span><br>$(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-built_in">position</span>().top<br></code></pre></td></tr></table></figure>


<p>scroll()    滚动事件</p>
<p>scrollTop()        被卷去的头部</p>
<p>scrollLeft()        被卷去的左侧</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-built_in">window</span>).scroll(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">if</span>($(<span class="hljs-built_in">document</span>).scrollTop()&gt;=<span class="hljs-number">200</span>)&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;111&#x27;</span>)<br>	&#125;<span class="hljs-keyword">else</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;222&#x27;</span>)<br>	&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>


<p>返回顶部</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">赋值滚动距离<br><span class="hljs-constructor">$(<span class="hljs-params">document</span>)</span>.scroll<span class="hljs-constructor">Top(0)</span>	返回顶部(将它添加到一个点击事件里)<br><br>带动画的返回顶部<br><span class="hljs-constructor">$(&#x27;.<span class="hljs-params">back</span>&#x27;)</span>.click(<span class="hljs-keyword">function</span><span class="hljs-literal">()</span>&#123;<br>	<span class="hljs-constructor">$(&#x27;<span class="hljs-params">body</span>,<span class="hljs-params">html</span>&#x27;)</span>.stop<span class="hljs-literal">()</span>.animate(&#123;<br>		scrollTop:<span class="hljs-number">0</span><br>	&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端(网易学习)</category>
      </categories>
      <tags>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>网易-Html</title>
    <url>/2021/10/21/%E7%BD%91%E6%98%93-html/</url>
    <content><![CDATA[<p>前端总结</p>
<p>前端由html css js 组成</p>
<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>html结构</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;html&gt;</span><br>	<span class="hljs-section">&lt;head&gt;</span><br>		<span class="hljs-section">&lt;mate&gt;</span><span class="hljs-section">&lt;/mate&gt;</span><br>		<span class="hljs-section">&lt;title&gt;</span><span class="hljs-section">&lt;title&gt;</span><br>	<span class="hljs-section">&lt;/head&gt;</span><br>	<span class="hljs-section">&lt;body&gt;</span><br>	<span class="hljs-section">&lt;/body&gt;</span><br><span class="hljs-section">&lt;/html&gt;</span><br></code></pre></td></tr></table></figure>


<p>div标签(块状元素)</p>
<p>属性：width  height background-color等</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">test</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure>
<p>img标签</p>
<p>属性：width height </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;图片路径&quot;</span>&gt;<br></code></pre></td></tr></table></figure>


<p>a标签</p>
<p>属性：target( _blank 新窗口打开)  title</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span> <span class="hljs-attribute">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;百度&quot;</span>&gt;<br></code></pre></td></tr></table></figure>


<p>ol ul  li dl dd标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">有序列表<br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br>无序列表<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>自定义描述列表标签<br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure>


<p>注释（ctrl+/）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 这是注释 --&gt;</span><br></code></pre></td></tr></table></figure>


<p>input元素（输入框）</p>
<p>属性：button password text  date 等 </p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;类型&quot;</span>  value=<span class="hljs-string">&quot;默认值&quot;</span> /&gt;<br></code></pre></td></tr></table></figure>


<p>p  ,  span 元素(行级元素)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> <br>&lt;<span class="hljs-selector-tag">p</span>&gt;这是一个<span class="hljs-selector-tag">p</span>标签，可以放文字&lt;/<span class="hljs-selector-tag">p</span>&gt;<br><br><span class="hljs-selector-tag">span</span><br>&lt;<span class="hljs-selector-tag">span</span>&gt;&lt;/<span class="hljs-selector-tag">span</span>&gt;<br></code></pre></td></tr></table></figure>


<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>	选择器&#123;<br><span class="css">	<span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css">	<span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br>	&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure>


<p>css引入方式（3种）</p>
<ol>
<li>将样式直接写在标签上</li>
<li>将样式写在style标签中</li>
<li>将样式写成一个css 文件（link引入）</li>
</ol>
<p>css选择器</p>
<p>标签选择器（标签名{}）</p>
<p>*,html,body ,head,div,p,span等</p>
<p>后代选择器</p>
<p>群组选择器</p>
<p>子级选择器</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">&lt;style&gt;<br>&lt;--后代选择器--&gt;<br><span class="hljs-string">.test</span> <span class="hljs-string">.test-1</span> <span class="hljs-string">.test-2</span>&#123;&#125;<br>&lt;--群组选择器--&gt;<br><span class="hljs-string">.test</span>, <span class="hljs-string">.test-1</span>, <span class="hljs-string">.test-2</span>&#123;&#125;<br>&lt;--子级选择器--&gt;<br><span class="hljs-string">.test</span> &gt; <span class="hljs-string">.test-1</span> &gt; <span class="hljs-string">.test-2</span>&#123;&#125;<br>&lt;<span class="hljs-string">/style</span>&gt;<br>&lt;div class=<span class="hljs-string">&quot;test&quot;</span>&gt;<br>	&lt;div class=<span class="hljs-string">&quot;test-1&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;test-2&quot;</span>&gt;<br>        &lt;<span class="hljs-string">/div</span>&gt;<br>	&lt;<span class="hljs-string">/div</span>&gt;<br>&lt;<span class="hljs-string">/div</span>&gt;<br></code></pre></td></tr></table></figure>


<p>盒子模型概念</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss">浮动<br><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>    <span class="hljs-attribute">float</span>: right<br><br>外边距<br>margin:<span class="hljs-number">10px</span>;<br>内边距<br><span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;<br>边框<br><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;  solid（实线） dashed(虚线)<br><br>都支持 <span class="hljs-attribute">top</span> <span class="hljs-attribute">right</span> <span class="hljs-attribute">bottom</span> <span class="hljs-attribute">left</span><br></code></pre></td></tr></table></figure>


<p>css样式继承</p>
<p>子元素会继承父元素的一部分样式</p>
<p>背景(background)</p>
<p>background-color：red;</p>
<p>background-image: url(图片路径)；</p>
<p>background-position  属性：left top right bottom  10px 10px;</p>
<p>background-repeat  属性： repeat  no-repeat  repeat-x repeat-y;</p>
<p>background-size:10px 10px;</p>
<p>简写</p>
<p>background:  url(图片路径)  left top/10px 10px red repeat;</p>
<p>透明度</p>
<p>opacity：0.5；  值为0到1</p>
<p>css注释（ctrl+/）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*这是css注释*/</span><br></code></pre></td></tr></table></figure>


<p>重置样式</p>
<ol>
<li>*{magin:0px;  padding:0px;}</li>
<li>引入reset.css文件</li>
</ol>
<p>命名规则</p>
<p>不能使用数字或者使用数字开头命名</p>
<ol>
<li><p>匈牙利命名法</p>
<p>变量名=属性+类型+描述</p>
</li>
<li><p>小驼峰命名法</p>
<p>使用-或者_连接单词</p>
</li>
<li><p>大驼峰命名法</p>
<p>起始单词小写，下一个单词首字母大写</p>
</li>
</ol>
<p>标准流与非标准流</p>
<ol>
<li><p>先放非标准流会出现重叠现象</p>
</li>
<li><p>标准流的margin-top会让父元素也跟着下移</p>
<p>解决方法：加上float：left</p>
</li>
</ol>
<p>定位</p>
<p>固定定位    position：fixed；</p>
<p>绝对定位    position: absolute;</p>
<p>相对定位    position:relative;</p>
<p>继承定位    position:inherit;</p>
<p>默认值    position：static；    </p>
<p>font（字体）</p>
<p>字体大小    font-size:10px;</p>
<p>文字粗细    font-weight:500;  数值1到1000</p>
<p>字体样式    font-family: “宋体”；</p>
<p>风格样式    font-style: italic;</p>
<p>字体对齐方式    text-align: center;   left  right</p>
<p>行高    line-height：10px;</p>
<p>小型大写字母样式    font-variant:small-caps;</p>
<p>英文自动换行    word-wrap：break-word;</p>
<p>文本缩进    text-indent:20px;</p>
<p>缩写</p>
<p>font: italic small-caps bold 12px/20px “宋体”;</p>
<p>排序：style variant weight size/height family</p>
<p>百分比和auto属性</p>
<p>width:50%;</p>
<p>height:100%；</p>
<p>position：absolute； left：50% ； top：0%；</p>
<p>padding:50%;(根据父元素的宽度计算)</p>
<p>margin:70%;(根据父元素的宽度计算)</p>
<p>元素消失 变块 行内 行内块样式</p>
<p>display :   none   block  inline   inline-block</p>
<p>元素溢出隐藏</p>
<p>overflow :  hidden   auto</p>
<p>overflow-x : hidden   auto</p>
<p>overflow-y : hidden  auto</p>
<p>链接未访问 已访问 点击中 鼠标浮动样式</p>
<p>a:link{ color:red;  backgound:black;}</p>
<p>a:visited{}</p>
<p>a:hover{}</p>
<p>a:active{}</p>
<p>图片三像素解决方法</p>
<p>1.font-size：0px;</p>
<p>2.img{float:left}</p>
<p>改变鼠标样式</p>
<p>cursor:pointer  等</p>
<p>单选框(radio)    </p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;for0&quot;</span>  <span class="hljs-attribute">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;&lt;label <span class="hljs-attribute">for</span>=<span class="hljs-string">&quot;for0&quot;</span>&gt;bobo&lt;/label&gt;<br></code></pre></td></tr></table></figure>


<p>多选框 (checkbox)</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;for0&quot;</span>  <span class="hljs-attribute">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;&lt;label <span class="hljs-attribute">for</span>=<span class="hljs-string">&quot;for0&quot;</span>&gt;bobo&lt;/label&gt;<br></code></pre></td></tr></table></figure>


<p>iframe</p>
<p>frameborder  scrolling</p>
]]></content>
      <categories>
        <category>Web前端(网易学习)</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>网易-javaScript交互</title>
    <url>/2021/12/23/%E7%BD%91%E6%98%93-javaScript%E4%BA%A4%E4%BA%92/</url>
    <content><![CDATA[<h4 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h4><h6 id="最基本的使用"><a href="#最基本的使用" class="headerlink" title="最基本的使用"></a>最基本的使用</h6><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">&lt;script&gt;<br>	var ajax = <span class="hljs-built_in">new</span> XMLHttpRequest();	<span class="hljs-comment">#创建Ajax对象</span><br>	ajax.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;接口地址&#x27;</span>);		 <span class="hljs-comment"># 请求类型，请求接口地址</span><br>	ajax.<span class="hljs-built_in">send</span>();						<span class="hljs-comment">#对地址进行请求</span><br>	ajax.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>()&#123;</span><br>		console.<span class="hljs-built_in">log</span>(ajax.responseText);	<span class="hljs-comment">#请求结果</span><br>	&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>


<h6 id="get请求与发送数据"><a href="#get请求与发送数据" class="headerlink" title="get请求与发送数据"></a>get请求与发送数据</h6><p>get请求是明文的</p>
<p>get发送数据是接口后面发那个如？，问号后面就是数据</p>
<p>发送的数据一般都是key=value的形式，多条数据用&amp;相连</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript">&lt;script <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>		btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>			<span class="hljs-keyword">var</span> ajax = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>			ajax.open(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;http://myjavascript.cn/textToJson&#x27;</span>)<br>			ajax.send();<br>			ajax.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>				<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;(&#x27;</span>+ajax.responseText+<span class="hljs-string">&#x27;)&#x27;</span>));<br>				btn.style.backgroundColor = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;(&#x27;</span>+ajax.responseText+<span class="hljs-string">&#x27;)&#x27;</span>).text <br>			&#125;<br>		&#125;<br>&lt;/script&gt; <br><br><span class="hljs-comment">//字符串格式的json，变成json格式</span><br><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;(&#x27;</span>+ajax.responseText+<span class="hljs-string">&#x27;)&#x27;</span>))<br><span class="hljs-built_in">JSON</span>.parse(ajax.responseText)<br></code></pre></td></tr></table></figure>


<h6 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h6><p>同步：一个一个的执行，效率低</p>
<p>异步：一起执行，效率高，容错率高</p>
<p>ajax的open方法有第三个参数，默认是true异步，false为同步</p>
<h6 id="ajax状态码"><a href="#ajax状态码" class="headerlink" title="ajax状态码"></a>ajax状态码</h6><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">0</span>（未初始化）还没有调用<span class="hljs-built_in">open</span>()方法<br><span class="hljs-number">1</span>（启动）已调用<span class="hljs-built_in">open</span>方法，但还未调用<span class="hljs-built_in">send</span>方法<br><span class="hljs-number">2</span>（发送）已调用<span class="hljs-built_in">send</span>方法，但还未接收数据<br><span class="hljs-number">3</span>（接收）已经接收部分数据<br><span class="hljs-number">4</span>（完成）已接收全部数据且可以在客户端使用<br></code></pre></td></tr></table></figure>
<p>兼容（有些版本不支持ajax.onload方法）</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><code class="hljs fortran">正常<br>ajax.onload = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>	console.<span class="hljs-built_in">log</span>(ajax.responseText);<br>&#125;;<br><br>兼容老版本<br>ajax.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">if</span>(ajax.readyState == <span class="hljs-number">4</span>)&#123;<br>		console.<span class="hljs-built_in">log</span>(ajax.responseText);<br>	&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>


<h6 id="服务器状态码（ajax-status）"><a href="#服务器状态码（ajax-status）" class="headerlink" title="服务器状态码（ajax.status）"></a>服务器状态码（ajax.status）</h6><p>200    成功</p>
<p>304    缓存</p>
<p>404    找不到页面</p>
<p>500    服务器错误</p>
<p>如何去掉缓存：链接不一样，就会重新获取，在连接后面加？就可以了</p>
<h6 id="POST字符串请求"><a href="#POST字符串请求" class="headerlink" title="POST字符串请求"></a>POST字符串请求</h6><p>post请求数据不是明文的，需要放在send方法里进行发送</p>
<p>post一般区分为字符串数据和非字符串数据</p>
<p>post发送时，需要给一个请求头告诉服务器发送的类型</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">var ajax = new XMLHttpRequest();<br>ajax.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-string">&#x27;请求地址&#x27;</span>);<br>ajax.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>,<span class="hljs-string">&#x27;application/x-www-form-urlencodeed&#x27;</span>);<br>ajax.send(<span class="hljs-string">&#x27;user=len&amp;pass=123456&#x27;</span>)<br>ajax.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">if</span>(ajax.readystate == <span class="hljs-number">4</span>)&#123;<br>		<span class="hljs-keyword">if</span>(ajax.<span class="hljs-built_in">status</span>&gt;=<span class="hljs-number">200</span> &amp;&amp; ajax.<span class="hljs-built_in">status</span>&lt;<span class="hljs-number">300</span> || ajax.<span class="hljs-built_in">status</span> == <span class="hljs-number">304</span>)&#123;<br>			console.<span class="hljs-built_in">log</span>(ajax.responseText);<br>		&#125;<br>		<span class="hljs-keyword">else</span>&#123;<br>			console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;连接失败&#x27;</span>);<br>			console.<span class="hljs-built_in">log</span>(ajax.<span class="hljs-built_in">status</span>);<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="post文件发送请求"><a href="#post文件发送请求" class="headerlink" title="post文件发送请求"></a>post文件发送请求</h6><p>post发送文件时需要表单+文件形式发送</p>
<p>表单需在js中new FormData()对象</p>
<p>可以通过表单的append方法把文件对象插入到表单中</p>
<p>一般情况下post传输非字符串内容把表单放入send中即可</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//创建表单</span><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-type">FormData</span>();<br><span class="hljs-comment">//写入文件 参数（服务器端要求的文件名，上传的第一个文件）</span><br>f.append(<span class="hljs-string">&#x27;leo&#x27;</span>,<span class="hljs-built_in">this</span>.files[<span class="hljs-number">0</span>])<br><br>ajax.send(f)	将要发送的数据放到send中<br></code></pre></td></tr></table></figure>


<h6 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a>跨域请求</h6><p>在后台数据请求交互过程中会有跨域的限制</p>
<p>正常来说只能自己域名下请求自己域名的接口，除此之外则为跨域请求</p>
<p>服务器接口可以开放让其他域名访问，理论上只有服务器开放才可以</p>
<p>报错：Access-Control-Allow-Oringn,一般都是跨域请求导致</p>
<h6 id="form表单GET-POST请求"><a href="#form表单GET-POST请求" class="headerlink" title="form表单GET/POST请求"></a>form表单GET/POST请求</h6><p>除了使用ajax对后台进行请求，我们也可以使用form表单方式进行请求</p>
<p>form表单只能请求，请求后页面跳转，数据不能操作</p>
<p>form表单上action代表数据接口，method代表请求类型</p>
<p>form表单提交按钮：input的type为submit或者button元素</p>
<p>form表单上的数据key对应内部input的name，value对应元素的value</p>
<p>post需要设置请求头（默认发送字符串请求头）</p>
<p>不存在跨域问题</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">//<span class="hljs-keyword">get</span>请求<br>&lt;form action=&quot;接口地址&quot; <span class="hljs-keyword">method</span>=<span class="hljs-string">&#x27;get&#x27;</span>&gt;<br>	&lt;<span class="hljs-keyword">input</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;数据的key&#x27;</span> <span class="hljs-keyword">value</span>=<span class="hljs-string">&#x27;&#x27;</span>/&gt;<br>	&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&#x27;submit&#x27;</span>/&gt;<br>&lt;/form&gt;<br><br>//post请求  enctype不写默认是application/x-www-form-urlencoded<br><br>//post请求字符串<br>&lt;form action=&quot;接口地址&quot; <span class="hljs-keyword">method</span>=<span class="hljs-string">&#x27;post&#x27;</span> enctype=<span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>&gt;<br>	&lt;<span class="hljs-keyword">input</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;数据的key&#x27;</span> <span class="hljs-keyword">value</span>=<span class="hljs-string">&#x27;&#x27;</span>/&gt;<br>	&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&#x27;submit&#x27;</span>/&gt;<br>&lt;/form&gt;<br><br>//post请求文件 注意enctype改变了<br>&lt;form action=&quot;接口地址&quot; <span class="hljs-keyword">method</span>=<span class="hljs-string">&#x27;post&#x27;</span> enctype=<span class="hljs-string">&#x27;multipart/form-data&#x27;</span>&gt;<br>	&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;name&#x27;</span>/&gt;<br>	&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&#x27;submit&#x27;</span>/&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure>


<h5 id="fetch对象的get请求"><a href="#fetch对象的get请求" class="headerlink" title="fetch对象的get请求"></a>fetch对象的get请求</h5><p>相当于ajax的升级版</p>
<p>兼容：不支持ie，一般用于移动端和非Ie浏览器</p>
<p>fetch对象的第一个参数为接口地址，之后跟随then(成功)，catch(失败)</p>
<p>成功后可以继续使用text()或json()方法进行解析后继续跟随then和catch</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">btn.onclick=<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;</span><br>	fetch(<span class="hljs-string">&#x27;接口地址&#x27;</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(res)</span>&#123;</span><br>		<span class="hljs-keyword">res</span>.json().then(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;</span><br>			leo.style.color=<span class="hljs-built_in">tan</span>.text<br>		&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(res)</span>&#123;</span><br>			......<br>		&#125;)<br>	&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;....&#125;)</span><br>&#125;<br></code></pre></td></tr></table></figure>


<h4 id="Axios框架"><a href="#Axios框架" class="headerlink" title="Axios框架"></a>Axios框架</h4><p>下载Axios（百度axios找axios到中文网）</p>
<p>目前最流行的前后端交互的框架之一</p>
<p>如果是静态页面使用直接去官网使用cdn外链方式进行引入</p>
<p>axios的get方法即为get请求，接口放到第一个参数中</p>
<p>then和catch表示成功和失败</p>
<p>axios成功函数中包含所有内容，其中data表示返回的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//get</span><br>ipt.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	Axios.get(<span class="hljs-string">&quot;接口地址&quot;</span>,&#123;<span class="hljs-attr">params</span>:&#123;需要传入的参数，没有则不要这个&#125;<br>	&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>	&#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(失败)<br>	&#125;)<br>&#125;<br><br><span class="hljs-comment">//post </span><br>ipt.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	Axios.post(<span class="hljs-string">&quot;接口地址&quot;</span>,<span class="hljs-string">&quot;user=leo&amp;pass=123456&quot;</span>(要求<span class="hljs-built_in">JSON</span>时，前面可用<span class="hljs-built_in">JSON</span>格式替换)<br>	&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>	&#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(失败)<br>	&#125;)<br>&#125;<br><span class="hljs-comment">//传送文件</span><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> FormData();<br>f.append(<span class="hljs-string">&#x27;leo&#x27;</span>,<span class="hljs-built_in">this</span>.files[<span class="hljs-number">0</span>])<br>Axios.post(<span class="hljs-string">&quot;接口地址&quot;</span>,f<br>	&#125;).<br></code></pre></td></tr></table></figure>


<h6 id="axios框架函数写法"><a href="#axios框架函数写法" class="headerlink" title="axios框架函数写法"></a>axios框架函数写法</h6><p>get方式</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;</span><br>	axios(&#123;<br>		method:<span class="hljs-string">&#x27;get&#x27;</span>,<br>		ur<span class="hljs-variable">l:</span><span class="hljs-string">&#x27;接口地址&#x27;</span>,<br>		param<span class="hljs-variable">s:</span>&#123;<span class="hljs-variable">a:20</span>,<span class="hljs-variable">b:30</span>&#125;<br>	&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(res)</span>&#123;</span><br>		console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>.data)<br>	&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(res)</span>&#123;</span><br>		console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>post方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	axios(&#123;<br>		method:<span class="hljs-string">&#x27;post&#x27;</span>,<br>		url:<span class="hljs-string">&#x27;接口地址&#x27;</span>,<br>		data:<span class="hljs-string">&quot;user=leo&amp;pass=123456&quot;</span><br>	&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(res.data)<br>	&#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(res)<br>&#125;<br><br><span class="hljs-comment">//为了方便，不要求会，ie不支持</span><br><span class="hljs-comment">//字符串表单（为了让data的值可以放函数）</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toJson</span>(<span class="hljs-params">json</span>)</span>&#123;<br>	<span class="hljs-keyword">var</span> sp = <span class="hljs-keyword">new</span> URLSearchParams();<br>	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> json)&#123;<br>		sp.append(i,json[i]);<br>	&#125;;<br>	<span class="hljs-keyword">return</span> sp;<br>&#125;<br><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	axios(&#123;<br>		method:<span class="hljs-string">&#x27;post&#x27;</span>,<br>		url:<span class="hljs-string">&#x27;接口地址&#x27;</span>,<br>		data:toJson(&#123;<br>			<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-string">&quot;leo&quot;</span>,<br>			<span class="hljs-string">&quot;pass&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>		&#125;)<br>	&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(res.data)<br>	&#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(res)<br>&#125;<br><br></code></pre></td></tr></table></figure>


<h6 id="axios框架并发请求"><a href="#axios框架并发请求" class="headerlink" title="axios框架并发请求"></a>axios框架并发请求</h6><p>多个请求整合到一个axios里面</p>
<p>都拿到结果后才会执行后面的结果</p>
<p>axios.all里面放入数组，数组中其他的axios请求为并发请求</p>
<p>axios的并发请求需要使用axios,spread里面的结果</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">btn<span class="hljs-selector-class">.onclick</span> = function()&#123;<br>	axios<span class="hljs-selector-class">.all</span>(<span class="hljs-selector-attr">[axios.get(<span class="hljs-string">&#x27;接口地址&#x27;</span>),第二个接口]</span>)<br>&#125;<span class="hljs-selector-class">.then</span>(axios<span class="hljs-selector-class">.spread</span>(function(<span class="hljs-selector-tag">a</span>,b)&#123;		<span class="hljs-comment">//a,b 参数代表返回的结果</span><br>	console<span class="hljs-selector-class">.log</span>(<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.data</span>,<span class="hljs-selector-tag">b</span>.data)<br>&#125;))<br></code></pre></td></tr></table></figure>


<h4 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h4><p>支持跨域（但需要后端人员配合）</p>
<p>使用script标签里面src属性运行本地的函数</p>
<p>需要有一个callback函数才可以使用</p>
<h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>安装</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i axios<br></code></pre></td></tr></table></figure>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">//<span class="hljs-built_in">get</span>方式<br><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;</span><br>	axios(&#123;<br>		method:<span class="hljs-string">&#x27;get&#x27;</span>,			//<span class="hljs-built_in">get</span> post <span class="hljs-keyword">put</span> <span class="hljs-keyword">delete</span><br>		ur<span class="hljs-variable">l:</span><span class="hljs-string">&#x27;接口地址&#x27;</span>,<br>		param<span class="hljs-variable">s:</span>&#123;<span class="hljs-variable">a:20</span>,<span class="hljs-variable">b:30</span>&#125;<br>	&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(res)</span>&#123;</span><br>		console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>.data)<br>	&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(res)</span>&#123;</span><br>		console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>)<br>&#125;<br><br>//post方式<br><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;</span><br>	axios(&#123;<br>		method:<span class="hljs-string">&#x27;get&#x27;</span>,<br>		ur<span class="hljs-variable">l:</span><span class="hljs-string">&#x27;接口地址&#x27;</span>,<br>		param<span class="hljs-variable">s:</span>&#123;<span class="hljs-variable">a:20</span>,<span class="hljs-variable">b:30</span>&#125;<br>	&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(res)</span>&#123;</span><br>		console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>.data)<br>	&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(res)</span>&#123;</span><br>		console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>)<br>&#125;<br></code></pre></td></tr></table></figure>


<h5 id="axios方法"><a href="#axios方法" class="headerlink" title="axios方法"></a>axios方法</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">axios<span class="hljs-selector-class">.request</span>(config)<br>axios<span class="hljs-selector-class">.get</span>(url<span class="hljs-selector-attr">[,config]</span>)<br>axios<span class="hljs-selector-class">.post</span>(url<span class="hljs-selector-attr">[,data]</span><span class="hljs-selector-attr">[,config]</span>)<br>axios<span class="hljs-selector-class">.put</span>(url<span class="hljs-selector-attr">[,data]</span><span class="hljs-selector-attr">[,config]</span>)<br>axios<span class="hljs-selector-class">.patch</span>(url<span class="hljs-selector-attr">[,data]</span><span class="hljs-selector-attr">[,config]</span>)<br>axios<span class="hljs-selector-class">.delete</span>(url<span class="hljs-selector-attr">[,config]</span>)<br>axios<span class="hljs-selector-class">.head</span>(url<span class="hljs-selector-attr">[,config]</span>)<br>axios<span class="hljs-selector-class">.options</span>(url<span class="hljs-selector-attr">[,config]</span>)<br></code></pre></td></tr></table></figure>
<p>例</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span>&#123;</span><br>	axios.post(<br>		<span class="hljs-string">&#x27;接口地址&#x27;</span><br>		&#123;<br>			<span class="hljs-string">&#x27;xing&#x27;</span>:<span class="hljs-string">&#x27;tan&#x27;</span>,<br>			<span class="hljs-string">&#x27;ming&#x27;</span>:<span class="hljs-string">&#x27;bo&#x27;</span><br>		&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(res)</span>&#123;</span><br>			console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>.data)<br>&#125;<br></code></pre></td></tr></table></figure>
<p>全局配置</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">main.js<br>------------------<br>import axios from <span class="hljs-emphasis">&#x27;axios&#x27;</span><br><br>axios.default.baseURL=<span class="hljs-emphasis">&#x27;根路径&#x27;</span><br>Vue.prototype.$http = axios<br><br><span class="hljs-comment">//这样配置后所有组件都能使用axios</span><br></code></pre></td></tr></table></figure>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">//在子组件使用</span><br>this.<span class="hljs-variable">$http</span>.<span class="hljs-keyword">post</span>(<span class="hljs-string">&quot;login&quot;</span>,&#123;请求参数&#125;)<br>相当于<br>axios.<span class="hljs-keyword">post</span>()<br></code></pre></td></tr></table></figure>


<h5 id="配置对象"><a href="#配置对象" class="headerlink" title="配置对象"></a>配置对象</h5><h6 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h6><figure class="highlight lasso"><table><tr><td class="code"><pre><code class="hljs lasso">&#123;<br>常用<br>	url: <span class="hljs-string">&#x27;url&#x27;</span> 接口地址<br>	method:  <span class="hljs-string">&#x27;get&#x27;</span> 请求方式<br>	baseURL: <span class="hljs-string">&#x27;baseurl&#x27;</span> 设置接口基础URL<br>	<span class="hljs-keyword">params</span>: &#123;id:<span class="hljs-number">123</span>&#125;	对URL参数进行配置<br>	timeout:<span class="hljs-number">1000</span>	超时请求时间，单位ms,超时就会取消请求<br>	<span class="hljs-comment">//配置请求头</span><br>	headers: &#123;<span class="hljs-string">&#x27;X-Requested-Width&#x27;</span>:<span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>&#125;<br>	<br>不常用<br>	<span class="hljs-comment">//对相应的结果进行处理</span><br>	transformRequest: <span class="hljs-meta">[</span>function(<span class="hljs-built_in">data</span>,headers)&#123;<span class="hljs-params">...</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">data</span>&#125;<span class="hljs-meta">]</span><br>	transformResponse:<span class="hljs-meta">[</span>function(<span class="hljs-built_in">data</span>)&#123;<span class="hljs-params">...</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">data</span>&#125;<span class="hljs-meta">]</span><br>	<br>	还有很多。。。。。<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h6><p>将一些需要重复书写的配置配置成默认配置，简化书写</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">axios<span class="hljs-selector-class">.defaults</span><span class="hljs-selector-class">.method</span> = <span class="hljs-string">&#x27;get&#x27;</span>	设置默认请求方式为get<br>axios<span class="hljs-selector-class">.defaults</span><span class="hljs-selector-class">.baseURL</span> = <span class="hljs-string">&#x27;http://localhost:3000&#x27;</span>	设置默认基础URL<br>axios<span class="hljs-selector-class">.defaults</span><span class="hljs-selector-class">.params</span> = &#123;id:<span class="hljs-number">100</span>&#125;	<br>axios<span class="hljs-selector-class">.defaults</span><span class="hljs-selector-class">.timeout</span> = <span class="hljs-number">3000</span><br><br>btn<span class="hljs-selector-class">.onclick</span> = function()&#123;<br>	axios(&#123;<br>			url:<span class="hljs-string">&#x27;/post&#x27;</span>		<span class="hljs-comment">//这里就可以不用写method,timeout等</span><br>		&#125;)<span class="hljs-selector-class">.then</span>(function(res)&#123;<br>			console<span class="hljs-selector-class">.log</span>(res.data)<br>&#125;<br></code></pre></td></tr></table></figure>


<h5 id="创建实例对象发送请求"><a href="#创建实例对象发送请求" class="headerlink" title="创建实例对象发送请求"></a>创建实例对象发送请求</h5><p>创建的实例对象与axios的功能几乎是一样的</p>
<p>用axios只可以配置一个请求方法</p>
<p>用axios.create可以配置多个请求方法</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">const</span> axios1 = axios.create(&#123;<br>	baseURL:<span class="hljs-symbol">&#x27;https</span>:<span class="hljs-comment">//api.apiopen.top&#x27;</span><br>	timeout: <span class="hljs-number">2000</span><br>&#125;) <br><br><span class="hljs-keyword">const</span> axios2 = axios.create(&#123;<br>	baseURL:<span class="hljs-symbol">&#x27;https</span>:<span class="hljs-comment">//api.apiopen&#x27;</span><br>	timeout: <span class="hljs-number">3000</span><br>&#125;) <br></code></pre></td></tr></table></figure>


<h5 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h5><p>对请求的参数和内容进行处理，可以停止这个请求</p>
<p>对响应的结果和内容进行处理</p>
<h6 id="设置请求拦截器"><a href="#设置请求拦截器" class="headerlink" title="设置请求拦截器"></a>设置请求拦截器</h6><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">axios.interceptors.request.use(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(config)</span></span>&#123;<br>	cosnole.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;请求拦截器，成功&#x27;</span>)<br>	//这儿可以对<span class="hljs-built_in">config</span>进行处理后在返回<br>	<span class="hljs-keyword">return</span> <span class="hljs-built_in">config</span><br>	//throw <span class="hljs-string">&#x27;参数异常&#x27;</span>	//可以主动抛出异常，再去响应拦截器的失败的回调函数<br>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(error)</span></span>&#123;<br>	cosnole.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;请求拦截器，失败&#x27;</span>)<br>	<span class="hljs-keyword">return</span> Promise.reject(<span class="hljs-built_in">error</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="设置响应拦截器"><a href="#设置响应拦截器" class="headerlink" title="设置响应拦截器"></a>设置响应拦截器</h6><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">axios.interceptors.response.use(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(config)</span></span>&#123;<br>	cosnole.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;响应拦截器，成功&#x27;</span>)<br>	//这儿可以对<span class="hljs-built_in">config</span>进行处理后在返回<br>	<span class="hljs-keyword">return</span> response<br>&#125;,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(error)</span></span>&#123;<br>	cosnole.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;响应拦截器，失败&#x27;</span>)<br>	<span class="hljs-keyword">return</span> Promise.reject(<span class="hljs-built_in">error</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="nprogress-可以显示进度条"><a href="#nprogress-可以显示进度条" class="headerlink" title="nprogress(可以显示进度条)"></a>nprogress(可以显示进度条)</h6><p>是一个插件</p>
<p>安装</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save nprogress</span><br></code></pre></td></tr></table></figure>
<p>引入（在拦截器页面引入）</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> nprogress <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;nprogress&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;nprogress/nprogress.css&quot;</span>	<span class="hljs-comment">//引入样式</span><br></code></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">请求拦截器里使用：nprogress.start()	<span class="hljs-regexp">//</span>开始<br>响应拦截器里使用：nprogress.done()	<span class="hljs-regexp">//</span>结束<br></code></pre></td></tr></table></figure>
<p>修改进度条颜色:找到<code>nprogress</code>包里的<code>nprogress.css</code>文件里的<code>.bar</code>样式，改颜色就行了</p>
<h6 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h6><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">axios(&#123;<br>    method:<span class="hljs-string">&#x27;get&#x27;</span>,<br>    ur<span class="hljs-variable">l:</span><span class="hljs-string">&#x27;接口地址&#x27;</span>,<br>    param<span class="hljs-variable">s:</span>&#123;<span class="hljs-variable">a:20</span>,<span class="hljs-variable">b:30</span>&#125;<br>&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(res)</span>&#123;</span><br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>.data)<br>&#125;).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(res)</span>&#123;</span><br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>)<br>&#125;<br></code></pre></td></tr></table></figure>


<h5 id="axios取消请求"><a href="#axios取消请求" class="headerlink" title="axios取消请求"></a>axios取消请求</h5><p>cancelToken</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> cancel = <span class="hljs-literal">null</span>		<span class="hljs-comment">//设置一个可以辨识的变量</span><br><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">if</span>(cancel !== <span class="hljs-literal">null</span> )&#123;<br>		cancel()<br>	&#125;<br>	axios(&#123;<br>			method:<span class="hljs-string">&#x27;get&#x27;</span>,<br>			url:<span class="hljs-string">&#x27;http://localhost/3000&#x27;</span><br>			<br>			<span class="hljs-comment">//添加对象属性</span><br>			cancelToken: <span class="hljs-keyword">new</span> axios.CancelToken(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">c</span>)</span>&#123;<br>				cancel = c<br>			&#125;)<br>		&#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)</span>&#123;<br>			<span class="hljs-built_in">console</span>.log(res.data)<br>			cancel = <span class="hljs-literal">null</span><br>			&#125;<br>&#125;<br><br><span class="hljs-comment">//取消请求</span><br>btn1.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	cancel();<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h4><h6 id="promise是什么"><a href="#promise是什么" class="headerlink" title="promise是什么"></a>promise是什么</h6><p>抽象</p>
<p>1.promise技术遵循es6规范</p>
<p>2.用来解决异步编程的新解决方案(原方案是回调函数)</p>
<p>具体</p>
<p>是一个构造函数，用来封装一个异步操作并可以获取其成功、失败的结果值，支持链式调用，可以解决回调地狱问题</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript">const p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(resolve,reject)</span> =&gt;</span> &#123;<br>	<br>&#125;)<br><br>p.<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>	成功了执行<br>&#125;,<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>	失败了执行<br>&#125;);<br><br><span class="hljs-regexp">//////</span><span class="hljs-regexp">//////</span><span class="hljs-regexp">//////</span><span class="hljs-regexp">//////</span><span class="hljs-regexp">///</span><br><span class="hljs-regexp">resolve:请求成功调用这个函数</span><br><span class="hljs-regexp">reject:请求失败调用</span><br></code></pre></td></tr></table></figure>


<h6 id="promise的状态"><a href="#promise的状态" class="headerlink" title="promise的状态"></a>promise的状态</h6><p>实例对象中的一个属性PromiseState</p>
<p>pending    未决定的</p>
<p>resolved / fullfilled    成功</p>
<p>rejected     失败</p>
<p>实例对象中另一个属性PromiseResult</p>
<p>保存着异步结果【成功/失败】的结果(resolve,reject)</p>
<h6 id="promise工作流程"><a href="#promise工作流程" class="headerlink" title="promise工作流程"></a>promise工作流程</h6><figure class="highlight isbl"><table><tr><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">new</span> <span class="hljs-function"><span class="hljs-title">Promise</span>()</span><br><br>执行异步操作<br><br>成功&gt;执行<span class="hljs-function"><span class="hljs-title">resolve</span>()&gt;<span class="hljs-title">then</span>()</span><br>失败&gt;执行<span class="hljs-function"><span class="hljs-title">reject</span>()&gt;<span class="hljs-title">then</span>(第二个函数)或<span class="hljs-title">catch</span>()</span><br><br>得到新的<span class="hljs-variable">promise</span>对象<br></code></pre></td></tr></table></figure>


<h6 id="util-promisify"><a href="#util-promisify" class="headerlink" title="util promisify"></a>util promisify</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">引入 util 模块<br><span class="hljs-keyword">const</span> util = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;util&#x27;</span>)<br>引入fs 模块<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br>返回一个新的promise风格的函数<br><span class="hljs-keyword">let</span> readFile = util.promiseify(fs.readFile);<br><br>readFile(<span class="hljs-string">&#x27;./res/content.text&#x27;</span>).the(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(value.toString())<br>&#125;)<br><br></code></pre></td></tr></table></figure>


<h6 id="API"><a href="#API" class="headerlink" title="API"></a>API</h6><figure class="highlight mercury"><table><tr><td class="code"><pre><code class="hljs mercury"><span class="hljs-keyword">promise</span>.resolve()<br>返回一个成功或者失败的对象<br>如果参数是<span class="hljs-keyword">promise</span>对象，参数会决定返回内容是否成功，其他都为成功<br>let p1 <span class="hljs-built_in">=</span> Promise.resolve(<span class="hljs-number">111</span>)<br>console.log(p1)<br><br><span class="hljs-keyword">promise</span>.reject()<br>返回一个失败的<span class="hljs-keyword">promise</span>对象<br><br><br><span class="hljs-keyword">promise</span>.<span class="hljs-built_in">all</span>(promises<span class="hljs-built_in">=&gt;</span>&#123;&#125;)<br>promises:包含N个<span class="hljs-keyword">promise</span>的数组<br>返回一个新的<span class="hljs-keyword">promise</span>，有一个失败就直接失败<br><br><span class="hljs-keyword">promise</span>.race(promises<span class="hljs-built_in">=&gt;</span>&#123;&#125;)<br>promises:包含N个<span class="hljs-keyword">promise</span>的数组<br>返回一个新的<span class="hljs-keyword">promise</span>，有一个完成后，就作为结果返回<br><br><span class="hljs-keyword">promise</span>.allSettled(p1,p2)<br>p1,p2分别代表<span class="hljs-keyword">promise</span>对象<br>会返回每个<span class="hljs-keyword">promise</span>的结果，每个<span class="hljs-keyword">promise</span>都会执行<br></code></pre></td></tr></table></figure>


<h6 id="改变对象状态"><a href="#改变对象状态" class="headerlink" title="改变对象状态"></a>改变对象状态</h6><p><code>resolve,reject,throw</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span>&#123;<br>	resovle(<span class="hljs-string">&#x27;ok&#x27;</span>);	<span class="hljs-comment">//pending =&gt; fulfilled</span><br>	reject(<span class="hljs-string">&#x27;error&#x27;</span>);	<span class="hljs-comment">//pending =&gt; rejected</span><br>	<span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;出问题了&#x27;</span>;		<span class="hljs-comment">//pending =&gt; rejected</span><br>&#125;)<br></code></pre></td></tr></table></figure>


<p>一个promise指定多个成功/失败回调函数，都会调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span>&#123;<br>	resovle(<span class="hljs-string">&#x27;ok&#x27;</span>)；<br>&#125;)<br><br>p.then( <span class="hljs-function"><span class="hljs-params">valve</span> =&gt;</span> &#123;<br>	<span class="hljs-built_in">console</span>.log(value)<br>&#125;);<br>p.then( <span class="hljs-function"><span class="hljs-params">valve</span> =&gt;</span> &#123;<br>	<span class="hljs-built_in">console</span>.log(value+value)<br>&#125;);<br><br>当成功时，两个then都会调用<br></code></pre></td></tr></table></figure>


<h6 id="改变Promise状态和指定回调函数谁先谁后？"><a href="#改变Promise状态和指定回调函数谁先谁后？" class="headerlink" title="改变Promise状态和指定回调函数谁先谁后？"></a>改变Promise状态和指定回调函数谁先谁后？</h6><figure class="highlight isbl"><table><tr><td class="code"><pre><code class="hljs isbl">都有可能，正常：先指定状态，在改变状态<br><br>如何先改状态在指定回调？<br>在执行器中直接调用<span class="hljs-variable">resolve</span>/<span class="hljs-variable">reject</span><br>延长更长时间调用<span class="hljs-function"><span class="hljs-title">then</span>()(添加一个定时器执行)</span><br>当状态改变和指定回调都完成时，才会得到数据<br><br><span class="hljs-variable">then</span>方法返回的结果就是内部<span class="hljs-variable">promise</span>返回的结果<br></code></pre></td></tr></table></figure>


<h6 id="串联多个任务（链式调用）"><a href="#串联多个任务（链式调用）" class="headerlink" title="串联多个任务（链式调用）"></a>串联多个任务（链式调用）</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span>&#123;<br>	resovle(<span class="hljs-string">&#x27;ok&#x27;</span>)；<br>&#125;)<br><br>p.then( <span class="hljs-function"><span class="hljs-params">valve</span> =&gt;</span> &#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>		resolve(<span class="hljs-string">&#x27;success&#x27;</span>)<br>	&#125;);<br>&#125;).then( <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>	<span class="hljs-built_in">console</span>.log(value)	&gt;&gt;&gt;success<br>&#125;).then( <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(value)		&gt;&gt;<span class="hljs-literal">undefined</span><br>&#125;)<br></code></pre></td></tr></table></figure>


<h6 id="异常穿透"><a href="#异常穿透" class="headerlink" title="异常穿透"></a>异常穿透</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span>&#123;<br>	resovle(<span class="hljs-string">&#x27;ok&#x27;</span>)；<br>&#125;)<br><br>p.then( <span class="hljs-function"><span class="hljs-params">valve</span> =&gt;</span> &#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>		resovle(<span class="hljs-string">&#x27;success&#x27;</span>)<br>	&#125;);<br>&#125;).then( <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>	<span class="hljs-built_in">console</span>.log(value)	&gt;&gt;&gt;success<br>&#125;).then( <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(value)		&gt;&gt;<span class="hljs-literal">undefined</span><br>&#125;).catch( <span class="hljs-function"><span class="hljs-params">reason</span> =&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(reason)		如果前面任何一个失败就会执行这个<br>&#125;)<br></code></pre></td></tr></table></figure>


<h6 id="中断promise链"><a href="#中断promise链" class="headerlink" title="中断promise链"></a>中断promise链</h6><p>在需要的中断的地方返回一个pending状态的promise</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">.then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> &#123;<br>	comsole.log(<span class="hljs-string">&#x27;需要中断&#x27;</span>)<br>	<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Promise( <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;&#125; )	<span class="hljs-comment">//返回pending状态的promise</span><br>&#125;)<br></code></pre></td></tr></table></figure>


<h6 id="async"><a href="#async" class="headerlink" title="async"></a>async</h6><p> 定义的函数会返回一个promise对象，与then的用法一样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(.....)<br>	<br>	<span class="hljs-comment">//return 8987</span><br>&#125;<br><span class="hljs-keyword">let</span> result = main()<br><span class="hljs-built_in">console</span>.log(result)<br></code></pre></td></tr></table></figure>


<h6 id="await"><a href="#await" class="headerlink" title="await"></a>await</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">main</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">let</span> p = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>		resolve(<span class="hljs-string">&#x27;ok&#x27;</span>);<br>		<span class="hljs-comment">//reject(&#x27;失败了&#x27;)</span><br>	&#125;)<br>	            <br>	<span class="hljs-comment">//成功，await 后面是其他数据时，返回原数据</span><br>	<span class="hljs-keyword">let</span> res =<span class="hljs-keyword">await</span> <span class="hljs-number">30</span>;<br>    <span class="hljs-built_in">console</span>.log(res)	&gt;&gt;&gt;<span class="hljs-number">30</span><br>	<br>	<span class="hljs-comment">//成功时，await后面是promise对象，返回p的结果</span><br>	<span class="hljs-keyword">let</span> res =<span class="hljs-keyword">await</span> p;<br>    <span class="hljs-built_in">console</span>.log(res)	&gt;&gt;&gt;ok<br>	<br>	<span class="hljs-comment">//失败时，需要用try catch 来捕获结果</span><br>	<span class="hljs-keyword">try</span>&#123;<br>		<span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> p;<br>	&#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>		cosnole.log(e);	&gt;&gt;&gt;失败了<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端(网易学习)</category>
      </categories>
      <tags>
        <tag>js交互</tag>
      </tags>
  </entry>
  <entry>
    <title>网易-Js</title>
    <url>/2021/11/06/%E7%BD%91%E6%98%93-js/</url>
    <content><![CDATA[<h4 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h4><p>数据类型    number   string    object    boolean    null    undefined</p>
<p>查看类型    typeof(“tan”)</p>
<p>报错类型    异常错误    语法错误</p>
<p>注释    / *这是注释 */</p>
<p>js函数（两种写法）</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">objName</span><span class="hljs-params">()</span></span>&#123;<br>	alert(<span class="hljs-string">&quot;我是一个函数&quot;</span>);<br>&#125;;<br>	<br><span class="hljs-keyword">var</span> objName = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>	alert(<span class="hljs-string">&quot;我也是一个函数&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure>


<p>预解析</p>
<p>js会解析两边，第一遍比较粗略，叫预解析。用于检查有无语法错误。</p>
<p>变量提升</p>
<p>会提升var和function函数变量,将变量提到最上面</p>
<p>js变量有作用域，只在自己作用域才能调用</p>
<p>window对象</p>
<p>最大的全局环境，所有操作都在这个window环境中操作</p>
<p>如果在函数作用域中使用window设置变量，那么这个变量会变成全局变量</p>
<p>延时定时器(setTimeout)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">延时<br><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	alert(<span class="hljs-string">&quot;我是延时5秒出现的哦&quot;</span>);<br>	&#125;,<span class="hljs-number">5000</span>);<br><br>清除延时<br><span class="hljs-built_in">clearTimeout</span>(timer);<br></code></pre></td></tr></table></figure>


<p>轮询定时器（setInterval）</p>
<p>打开关闭浏览器(open(“网址”),close())</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">var</span> <span class="hljs-keyword">timer</span> = setInterval(function()&#123;<br>	<span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>);<br>	&#125;),0;<br>	<br>clearInterval(<span class="hljs-keyword">timer</span>);<br><br>如何打开别人的网址后并关闭？<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">timer</span> = setInterval(function()&#123;<br>	<span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>);<br>	&#125;),0;<br><br><span class="hljs-keyword">timer</span>.<span class="hljs-keyword">close</span>()  #在<span class="hljs-keyword">close</span>前加上变量名就可以<br></code></pre></td></tr></table></figure>
<p>js控制台</p>
<p>输出</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">console</span>.log()	<span class="hljs-comment">#打印日志</span><br><span class="hljs-built_in">console</span>.error() <span class="hljs-comment">#以错误的的方式打印</span><br><span class="hljs-built_in">console</span>.warn() <span class="hljs-comment">#以警告的的方式打印</span><br></code></pre></td></tr></table></figure>
<p>弹出框</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">alert</span><span class="hljs-params">(<span class="hljs-string">&#x27;常用对话框&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">prompt</span><span class="hljs-params">(<span class="hljs-string">&quot;输入对话框&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">confirm</span><span class="hljs-params">(<span class="hljs-string">&quot;选择对话框&quot;</span>)</span></span><br></code></pre></td></tr></table></figure>
<p>window常用属性</p>
<p>window.innerHeight    浏览器可视高度（可以省略window）</p>
<p>window.innerWidth    浏览器可视宽度</p>
<p>window.screenLeft（screenTop）    浏览器离屏幕左边的距离（上边）</p>
<p>window.screen.width(height)    屏幕宽度(高度)</p>
<p>window其他属性（关键字不能被声明）</p>
<p>window    this（本环境）    self(本环境的自己)    top(最外层环境)</p>
<p>number类型的基本运算</p>
<p>加减乘除 括号（正常运算）</p>
<p>!=    =    ==    &gt;    &lt;    &gt;=    &lt;=    %    /    *</p>
<p>20/0  → infinity</p>
<p>小数点16位之后系统就不看了</p>
<p>例：1.1111111111111111234==1.111111111111111164（返回true）</p>
<p>快捷计算</p>
<p>a+=5    (a=a+5)(其他运算符也可以这样写)</p>
<p>1+=5是错的(a只能是变量不能直接是数字)</p>
<p>科学计数法</p>
<p>1e4 = 10000        2e5 = 200000</p>
<p>number对象与nan</p>
<p>number(“3223”) → 3223    当括号内是有数字组成的字符串时</p>
<p>number(“21ja”)  → NaN    当转换不了时，输出NaN</p>
<p>递增与递减</p>
<p>a++  →  a = number(a) +1</p>
<p>++a    a–    –a</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">注意<br><span class="hljs-selector-tag">var</span> a=<span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-title">console</span><span class="hljs-params">(a++,a)</span></span>  <span class="hljs-comment">//1 , 2</span><br></code></pre></td></tr></table></figure>


<p>字符串对象与字符串拼接</p>
<p>string()    将括号内所有内容转换成字符串</p>
<p>拼接： 3+’px’ → 3px        4+7+’px’→ 11px</p>
<p>隐式转换：’4’ - ‘7’ →  -3</p>
<p>​                    1 + ‘4’ * 6    → 25</p>
<p>​                    “3” + 8*1    → 38</p>
<p>‘786’&gt;’323’    →  true        ‘397’&gt;’2987’ → true (字符串比大小先看第一位，再看第二位)</p>
<p>js计算BUG</p>
<p>当有小数点的时候，会出现精度问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">例：<span class="hljs-number">0.1</span>+<span class="hljs-number">0</span>,<span class="hljs-number">2</span> = <span class="hljs-number">0.30000000000000004</span>(js中计算)<br>解决方法：(<span class="hljs-number">0.1</span>*<span class="hljs-number">10</span>  + <span class="hljs-number">0.2</span>*<span class="hljs-number">10</span>)/<span class="hljs-number">10</span> = <span class="hljs-number">0.3</span><br></code></pre></td></tr></table></figure>


<p>字符串下标和长度</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">a= =<span class="hljs-string">&#x27;good&#x27;</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.length</span>	&gt;&gt;&gt;<span class="hljs-number">4</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[0]</span>		&gt;&gt;&gt;g<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[3]</span>		&gt;&gt;&gt;d<br></code></pre></td></tr></table></figure>


<h6 id="Boolean对象方法"><a href="#Boolean对象方法" class="headerlink" title="Boolean对象方法"></a>Boolean对象方法</h6><p>返回false的有六种（空字符串，0，null，NaN，undefined，false）</p>
<p>计算时，false默认为0，true默认为1</p>
<p>（true+true&gt;&gt;&gt;1+1=2,false+true&gt;&gt;&gt;0+1=1）</p>
<h6 id="函数返回值概念-return"><a href="#函数返回值概念-return" class="headerlink" title="函数返回值概念(return)"></a>函数返回值概念(return)</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">var</span> c=<span class="hljs-number">3</span><br>	<span class="hljs-keyword">var</span> d=<span class="hljs-number">5</span><br>	<span class="hljs-keyword">return</span> c+d	返回<span class="hljs-number">8</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a())	<span class="hljs-comment">//打印出8</span><br></code></pre></td></tr></table></figure>
<h6 id="函数参数概念"><a href="#函数参数概念" class="headerlink" title="函数参数概念"></a>函数参数概念</h6><figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(c,d)&#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-type">c+d</span><br>&#125;<br>console.log(a(<span class="hljs-number">4</span>+<span class="hljs-number">5</span>))	//打印出<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure>
<h6 id="Undefined-与NaN-null"><a href="#Undefined-与NaN-null" class="headerlink" title="Undefined 与NaN  null"></a>Undefined 与NaN  null</h6><p>undefined与任何东西运算都会得到NaN（除了+字符串）</p>
<p>作比较都是false（除了undefined==undefined&gt;&gt;&gt; true或者===）</p>
<p>null==undefined &gt;&gt;&gt;true null==0&gt;&gt;&gt;false</p>
<p>null计算比较时可以当做0，但null==false&gt;&gt;&gt;false</p>
<h6 id="document对象-最大对象"><a href="#document对象-最大对象" class="headerlink" title="document对象(最大对象)"></a>document对象(最大对象)</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">document.title	<span class="hljs-regexp">//</span>获取网页title<br><br>document.URL	<span class="hljs-regexp">//</span>获取该网页的详细URL<br><br>document.domain	<span class="hljs-regexp">//</span>获取该网页的最原始的URL<br><br>document.write(<span class="hljs-string">&quot;hello world&quot;</span>) 		<span class="hljs-regexp">//</span>清除原网页内容，写入hello world ，重复写入可叠加<br></code></pre></td></tr></table></figure>
<h6 id="操作元素的基本流程"><a href="#操作元素的基本流程" class="headerlink" title="操作元素的基本流程"></a>操作元素的基本流程</h6><p>等待全部内容加载完成后操作</p>
<p>获取id元素(getElementById(‘id名’))</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-comment">//让body的背景为红色</span><br>	<span class="hljs-built_in">document</span>.body.style.background = <span class="hljs-string">&quot;red&quot;</span><br>	<span class="hljs-comment">//获取id</span><br>	<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;leo&#x27;</span>).style.width = <span class="hljs-string">&quot;500px&quot;</span><br>	<span class="hljs-comment">//有-的名称，后面首字母大写</span><br>	<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;leo&#x27;</span>).style.backgroundColor = <span class="hljs-string">&quot;green&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure>
<h6 id="元素点击事件"><a href="#元素点击事件" class="headerlink" title="元素点击事件"></a>元素点击事件</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;leo&#x27;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>		alert(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>	&#125;;<br>&#125;;<br><span class="hljs-comment">//直接赋予函数名也可以</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leoNode</span>(<span class="hljs-params"></span>)</span>&#123;<br>	alert(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>&#125;;<br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;leo&#x27;</span>).onclick = leoNode;<br>&#125;;<br><br><br><span class="hljs-comment">//储存变量，方便使用</span><br><span class="hljs-keyword">var</span> leoNode = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;leo&#x27;</span>)<br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	leoNode.style.height = <span class="hljs-string">&#x27;300px&#x27;</span>;<br>	leoNode.style.width = <span class="hljs-string">&#x27;300px&#x27;</span>;<br>&#125;;<br><br>注意：每句后面记得加封号<br></code></pre></td></tr></table></figure>
<h6 id="使用js控制元素的id和类"><a href="#使用js控制元素的id和类" class="headerlink" title="使用js控制元素的id和类"></a>使用js控制元素的id和类</h6><p>var leoNode = document.getElementById(‘leo’)</p>
<p>使用 leoNode.id可以获得这个id名</p>
<p>leoNode.className    获得class名 如果class为空则返回空</p>
<p>修改id：leoNode.id = ‘abc’</p>
<h6 id="逗号和中括号的使用"><a href="#逗号和中括号的使用" class="headerlink" title="逗号和中括号的使用"></a>逗号和中括号的使用</h6><figure class="highlight qml"><table><tr><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">//逗号 </span><br><span class="hljs-keyword">var</span> a=<span class="hljs-number">6</span>,b=<span class="hljs-number">7</span>,k=<span class="hljs-number">9</span><br><br><span class="hljs-comment">//中括号 可以代替点</span><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;leo&#x27;</span>).onclick = leoNode;<br>也可以写成<br><span class="hljs-built_in">document</span>[<span class="hljs-string">&#x27;getElementById(&#x27;</span>leo<span class="hljs-string">&#x27;)&#x27;</span>][<span class="hljs-string">&#x27;onclick&#x27;</span>] = lenNode;<br><br><span class="hljs-attribute">tips</span>:这样可以更灵活，可以用参数传递值<br>例：<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leo</span>(<span class="hljs-params">s,bg,color</span>)</span>&#123;<br>	<span class="hljs-built_in">document</span>.getElmentById[s][bg] = <span class="hljs-built_in">color</span><br>&#125;<br>leo(height,background,green)<br></code></pre></td></tr></table></figure>
<h6 id="获取元素节点（nodeName）"><a href="#获取元素节点（nodeName）" class="headerlink" title="获取元素节点（nodeName）"></a>获取元素节点（nodeName）</h6><p>nodeName可以获得当前标签的大写名称，自定义标签也可以获得，自定义标签只能是英文，自定义标签是行内元素</p>
<h6 id="使用js操作input内容"><a href="#使用js操作input内容" class="headerlink" title="使用js操作input内容"></a>使用js操作input内容</h6><p>text.id    text.value(得到的值是字符串)</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">text1 = document.getElementById(<span class="hljs-string">&#x27;text1&#x27;</span>)<br>btn = document.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>)<br><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>	text1.value = <span class="hljs-number">77</span>;	//点击后输入框的值变为<span class="hljs-number">77</span><br>&#125;;<br><br><br>&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text &#x27;</span>id=<span class="hljs-string">&#x27;text1&#x27;</span> value=<span class="hljs-string">&#x27;99&#x27;</span>&gt;<br>&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;button&#x27;</span> id=<span class="hljs-string">&#x27;btn&#x27;</span> value=<span class="hljs-string">&#x27;点击&#x27;</span>&gt;<br></code></pre></td></tr></table></figure>
<p>input属性</p>
<p>maxlength = ‘4’        最大长度为4（适用于text）</p>
<p>type=’number’        只能输入数字</p>
<p>type= ‘range’        范围 进度条（默认0~100，修改范围min=20，max=1000 适用于range和number）</p>
<p>type= ‘color’          颜色选取</p>
<h6 id="input内容改变事件"><a href="#input内容改变事件" class="headerlink" title="input内容改变事件"></a>input内容改变事件</h6><p>onchange    输入结束后触发事件</p>
<p>oninput        输入时值一旦发生变化就触发事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.getElmentById(<span class="hljs-string">&#x27;元素id名&#x27;</span>).onchange=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	cosole.log(<span class="hljs-string">&#x27;内容以改变&#x27;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure>
<h6 id="js查找标签元素"><a href="#js查找标签元素" class="headerlink" title="js查找标签元素"></a>js查找标签元素</h6><p>getElementsTagByName(‘标签名’)</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">2</span>].style.width = <span class="hljs-string">&#x27;100px&#x27;</span>;<br></code></pre></td></tr></table></figure>
<p>查找顺序:从上到下，从左到右</p>
<h6 id="js查找class元素"><a href="#js查找class元素" class="headerlink" title="js查找class元素"></a>js查找class元素</h6><p>getElementsByClassName(‘元素class名’)</p>
<p>可以通过length查看总和</p>
<h6 id="js中的if-else语句"><a href="#js中的if-else语句" class="headerlink" title="js中的if else语句"></a>js中的if else语句</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">var <span class="hljs-attribute">a</span>=1;<br><span class="hljs-keyword">if</span>(<span class="hljs-attribute">a</span>==3)&#123;<br>	alert(<span class="hljs-string">&#x27;6&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>	alert(<span class="hljs-string">&#x27;不等于3哦&#x27;</span>&#125;;<br>	<br><br><span class="hljs-keyword">if</span>()&#123;<br><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>()&#123;<br><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>()&#123;<br><br>&#125;<br><span class="hljs-keyword">else</span>&#123;&#125;<br></code></pre></td></tr></table></figure>
<h6 id="js和-或的用法"><a href="#js和-或的用法" class="headerlink" title="js和/或的用法"></a>js和/或的用法</h6><p>&amp;&amp;    和 （所有条件都满足）</p>
<p>||     或 （有一个条件满足）</p>
<h6 id="js操作元素内容"><a href="#js操作元素内容" class="headerlink" title="js操作元素内容"></a>js操作元素内容</h6><p>innerHTML（元素内容）</p>
<p>js 可以通过DOM使用innerHTML属性获取会赋值DOM内容</p>
<p>如果赋值标签内容的话，会在HTML中显示标签</p>
<p>innerHTML替换元素，原元素的事件会消失</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;leo&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>console.log(leo.innerHTML);	输出<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>leo.innerHTML = &#x27;&#x27;;	清空leo中的内容<br>leo.innerHTML = &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>添加这个span<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;;	添加span这个元素到leo中<br></code></pre></td></tr></table></figure>
<p>outerHTML(元素内容)</p>
<p>与inner的区别就是，outerHTML获取的信息包含自己</p>
<p>innerText(元素文本)</p>
<p>用法同上</p>
<p>js可通过DOM使用innerText获取或赋值文本内容</p>
<p>innerText只会获取文本不会获取标签信息</p>
<p>赋值时内容不会变成标签，都会以文本显示</p>
<h6 id="css绑定元素样式值（cssText）"><a href="#css绑定元素样式值（cssText）" class="headerlink" title="css绑定元素样式值（cssText）"></a>css绑定元素样式值（cssText）</h6><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;leo&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">	leo.style.cssText = <span class="hljs-string">&#x27;width:10px;height:10px; background:red;&#x27;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h6 id="js获取非行间样式，行间属性"><a href="#js获取非行间样式，行间属性" class="headerlink" title="js获取非行间样式，行间属性"></a>js获取非行间样式，行间属性</h6><p>获取元素样式的高度</p>
<p> window.getComputedStyle(leo).height（不支持低级ie）</p>
<p>leo.currentStyle.height(ie支持,谷歌不支持)</p>
<p>解决兼容</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss">function getstyle(obj,style)&#123;<br>	if(obj.currentStyle)&#123;<br>		alert(obj.currentStyle[style]);<br>	&#125;<br>	else&#123;<br>		alert(obj.getComptedStyle(obj)<span class="hljs-selector-attr">[style]</span>);<br>	&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p>获取行间属性（getAttribute()）</p>
<p>leo.getAttribute(‘id’)</p>
<p>设置行间属性（setAttribute(‘属性’，’属性值’)）</p>
<p>leo.setAttribute(‘id’,’haha’)</p>
<p>删除行间属性（removeAttribute）</p>
<p>leo.removeAttribute(‘id’)</p>
<p>判断该元素是否有值</p>
<p>hasAttribute(‘id’)</p>
<h6 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h6><p>for(初始化条件;结束条件;条件变化){执行条件}</p>
<p>例</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(var i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)</span></span>&#123;<br>	alert(i)<br>&#125;<br>&gt;&gt;&gt; <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure>
<p>循环终止（break）</p>
<p>循环跳过(continue)</p>
<h6 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h6><p>特点 穿透</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">switch</span>(a)&#123;<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        alert(<span class="hljs-string">&#x27;不执行&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>	<span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>        alert(<span class="hljs-string">&#x27;执行&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>    	alert(<span class="hljs-string">&#x27;上面条件都不满足，就执行我&#x27;</span>)<br>&#125;<br><br>如果不写<span class="hljs-keyword">break</span>，就会出现穿透效果<br></code></pre></td></tr></table></figure>
<h6 id="获取元素（父级元素、子级元素、子级节点）"><a href="#获取元素（父级元素、子级元素、子级节点）" class="headerlink" title="获取元素（父级元素、子级元素、子级节点）"></a>获取元素（父级元素、子级元素、子级节点）</h6><p>父级元素（parentNode）</p>
<p>子级元素（children）</p>
<p>子级节点（childNodes） 修改节点里的内容（childNodes[0].data = ‘123’）</p>
<p>创建元素（document.creatElement(‘div’)）创建后并不能显示在HTML中，还需要放入</p>
<p>放入元素（leo.appendChild(‘放入元素变量’)）该方法只能插入后排到最后面</p>
<p>插入元素（leo.insertBefore(插入元素变量，插入元素后面的变量）</p>
<p>删除子级元素（document.body.removeChild(目标元素)）可以</p>
<p>删除目标元素（ leo.remove() ）</p>
<p>替换元素（replaceChild）</p>
<p>父元素.replaceChild(替换元素，被替换元素)</p>
<p>克隆元素leo.cloneNode() 默认括号内为false时只会复制元素，不会复制内容与子孙节点，为ture时leo里的内容也会复制</p>
<p>首尾元素（firstElementChild,lastElementchild）(兼容问题)</p>
<p>leo.firstElementChild == leo.children[0]</p>
<p>leo.lastElementChild == leo.children[leo.children.length-1]</p>
<p>兄弟元素（nextElementSibling,previousElementSibling）</p>
<p>leo.previousElementSibling.style.color = ‘red’;leo的上一个元素</p>
<p>leo.nextElementSibling.style.color = ‘red’;leo的下一个元素</p>
<h6 id="双击事件（ondblclick）"><a href="#双击事件（ondblclick）" class="headerlink" title="双击事件（ondblclick）"></a>双击事件（ondblclick）</h6><p>与onclick用法一样</p>
<h6 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h6><p>移入(onmouseover)：当鼠标移到元素上面时触发</p>
<p>移出(onmouseout)：当鼠标移出到元素外面后触发</p>
<p>移动(onmousemove)：当鼠标移动就会触发</p>
<p>鼠标按下(onmousedown)：按下鼠标左键</p>
<p>鼠标抬起(onmouseup)：抬起鼠标左键</p>
<p>鼠标右键(oncontextmenu)：鼠标右键菜单</p>
<p>鼠标事件对象（event）</p>
<p>event.clientX(x轴坐标)，event.clientY(y轴坐标)，event.targrt(事件元素的对象)，</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><code class="hljs fortran">#使用事件对象的两种方法<br>leo.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>	console.<span class="hljs-built_in">log</span>(event)<br>&#125;<br><br>第二种，早期ie不支持<br>leo.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a)</span></span>&#123;<br>	console.<span class="hljs-built_in">log</span>(a)<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="事件捕获与事件冒泡"><a href="#事件捕获与事件冒泡" class="headerlink" title="事件捕获与事件冒泡"></a>事件捕获与事件冒泡</h6><p>事件捕获：子元素获取到事件后会往父元素上找，直到找到事件本体</p>
<p>事件冒泡：事件本体会将事件给子元素（像冒泡一样往上冒）</p>
<p>事件捕获优先级高于事件冒泡</p>
<p>阻止事件冒泡（两种方法）</p>
<p>event.cancelBubble = true;(都支持)</p>
<p>event.stopPropagation();（老版本ie不支持）</p>
<h6 id="表单获取、失去焦点事件"><a href="#表单获取、失去焦点事件" class="headerlink" title="表单获取、失去焦点事件"></a>表单获取、失去焦点事件</h6><p>使用在可以输入文本内容的标签上（input,textarea）</p>
<p>获取焦点（onfocus）</p>
<p>自动获取焦点: 在标签上添加  autofocus</p>
<p>点击事件元素后主动获取焦点  ipt.focus();</p>
<p>失去焦点（onblur）</p>
<p>点击事件元素后主动获取焦点  ipt.onblur();</p>
<h6 id="元素可见高度与宽度"><a href="#元素可见高度与宽度" class="headerlink" title="元素可见高度与宽度"></a>元素可见高度与宽度</h6><p>offsetWidth、offsetHeight(height+padding+border三个总和)</p>
<p>clientWidth、clientHeight(height+padding这两个之和)</p>
<p>元素偏移距离属性</p>
<p>offsetLeft、offsetTop(元素距离浏览器左边、上边的距离，当父元素有定位属性时，就是距离父元素的距离)</p>
<p>clientLeft、clientTop(当前元素的border宽度)</p>
<h6 id="鼠标拖拽元素"><a href="#鼠标拖拽元素" class="headerlink" title="鼠标拖拽元素"></a>鼠标拖拽元素</h6><p>1.鼠标按下</p>
<p>2.鼠标移动</p>
<p>3.鼠标抬起</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">tan.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>		tan.style.left = event.clientX+<span class="hljs-string">&#x27;px&#x27;</span>;<br>		tan.style.top = event.clientY+<span class="hljs-string">&#x27;px&#x27;</span>;<br>	&#125;;<br>	<span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-literal">null</span>;<br>		<span class="hljs-built_in">document</span>.onmouseup =<span class="hljs-literal">null</span>;<br>	&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p>优化版拖拽元素</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><code class="hljs verilog">#cl是元素id名<br>cl<span class="hljs-variable">.onmousedown</span> = <span class="hljs-keyword">function</span>()&#123;<br>    <span class="hljs-keyword">var</span> clickLeft = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientX</span>-<span class="hljs-keyword">this</span><span class="hljs-variable">.offsetLeft</span>;<br>    <span class="hljs-keyword">var</span> clickTop = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientY</span>-<span class="hljs-keyword">this</span><span class="hljs-variable">.offsetTop</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-number">_</span><span class="hljs-keyword">this</span> = <span class="hljs-keyword">this</span>;<br>    document<span class="hljs-variable">.onmousemove</span> = <span class="hljs-keyword">function</span>()&#123;<br>        <span class="hljs-number">_</span><span class="hljs-keyword">this</span><span class="hljs-variable">.style</span><span class="hljs-variable">.left</span> = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientX</span>-clickLeft+&#x27;px&#x27;;<br>        <span class="hljs-number">_</span><span class="hljs-keyword">this</span><span class="hljs-variable">.style</span><span class="hljs-variable">.top</span> = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientY</span>-clickTop+&#x27;px&#x27;;<br>    &#125;;<br>    document<span class="hljs-variable">.onmouseup</span> = <span class="hljs-keyword">function</span>()&#123;<br>        <span class="hljs-keyword">this</span><span class="hljs-variable">.onmousemove</span> = <span class="hljs-keyword">this</span><span class="hljs-variable">.onmouseup</span> = <span class="hljs-literal">null</span>;<br>    &#125;;<br>&#125;;<br><br>#封装<br><span class="hljs-keyword">var</span> darg = <span class="hljs-keyword">function</span>(obj)&#123;<br>    obj<span class="hljs-variable">.onmousedown</span> = <span class="hljs-keyword">function</span>()&#123;<br>        <span class="hljs-keyword">var</span> clickLeft = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientX</span>-<span class="hljs-keyword">this</span><span class="hljs-variable">.offsetLeft</span>;<br>        <span class="hljs-keyword">var</span> clickTop = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientY</span>-<span class="hljs-keyword">this</span><span class="hljs-variable">.offsetTop</span>;<br>        <span class="hljs-keyword">var</span> <span class="hljs-number">_</span><span class="hljs-keyword">this</span> = <span class="hljs-keyword">this</span>;<br>        document<span class="hljs-variable">.onmousemove</span> = <span class="hljs-keyword">function</span>()&#123;<br>            <span class="hljs-number">_</span><span class="hljs-keyword">this</span><span class="hljs-variable">.style</span><span class="hljs-variable">.left</span> = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientX</span>-clickLeft+&#x27;px&#x27;;<br>            <span class="hljs-number">_</span><span class="hljs-keyword">this</span><span class="hljs-variable">.style</span><span class="hljs-variable">.top</span> = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientY</span>-clickTop+&#x27;px&#x27;;<br>        &#125;;<br>        document<span class="hljs-variable">.onmouseup</span> = <span class="hljs-keyword">function</span>()&#123;<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.onmousemove</span> = <span class="hljs-keyword">this</span><span class="hljs-variable">.onmouseup</span> = <span class="hljs-literal">null</span>;<br>        &#125;;<br>    &#125;;<br>&#125;;<br>darg(元素名);	#执行<br></code></pre></td></tr></table></figure>


<h6 id="数字方法"><a href="#数字方法" class="headerlink" title="数字方法"></a>数字方法</h6><p>isNaN     检查是否位数字</p>
<p>toFiexd()    四舍五入，参数代表保留几位小数</p>
<p>toPrecision()    四舍五入，总共保留几位</p>
<p>toExponential()    以字符串的形式返回指数计数法表示的数字</p>
<h6 id="数据格式-数组"><a href="#数据格式-数组" class="headerlink" title="数据格式-数组"></a>数据格式-数组</h6><p>三种方式定义</p>
<p>arrone = [2,4,6,’dsfdsfs’,’090’,232]        #中括号内什么类型都可以放</p>
<p>arrtwo= Array(1,3,’fd’,function(){alert(2);},true)</p>
<p>arrthree = new Array(34,567,’dsf’,false)</p>
<p>使用：arrone[3], arrone.length</p>
<h6 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h6><p>截取字符串</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">str = <span class="hljs-string">&#x27;abcdefgh&#x27;</span>;<br>str.substring(<span class="hljs-keyword">start</span>,<span class="hljs-keyword">end</span>);（从第几位开始截取，截取到第几位）<br> <br># str.substring(<span class="hljs-number">3</span>); &gt;&gt;&gt; defgh 截取第<span class="hljs-number">3</span>位及以后的<br># str.substring(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>); &gt;&gt;&gt;cdefg 相当于 str.substring(<span class="hljs-number">2</span>,<span class="hljs-number">7</span>);<br># str.substring(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>); &gt;&gt;&gt;cdefg  相当于 str.substring(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);当<span class="hljs-number">0</span>是负数时也是<span class="hljs-number">0</span><span class="hljs-number">-4</span><br><br>str.substr(<span class="hljs-keyword">start</span>,<span class="hljs-keyword">end</span>);（从第几位开始截取，截取几位）<br># str.substr(<span class="hljs-number">3</span>); &gt;&gt;&gt; defgh 截取第<span class="hljs-number">3</span>位及以后的<br># str.substr(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>); &gt;&gt;&gt;空	  当第二位为<span class="hljs-number">0</span>或者为负 返回空字符串<br># str.substr(<span class="hljs-number">-4</span>,<span class="hljs-number">2</span>); &gt;&gt;&gt;ef	第一位为负数时，从尾巴往前看<br><br>str.<span class="hljs-keyword">slice</span>(<span class="hljs-keyword">start</span>,<span class="hljs-keyword">end</span>)(第几位开始，第几位结束)<br><span class="hljs-meta">#str.slice(3，-2) &gt;&gt;&gt;def 截取index 3 与 -2 之间的内容</span><br></code></pre></td></tr></table></figure>
<p>字符串下标方法</p>
<p>str.charAt(2) == str[2]</p>
<p>charAt找不到内容会返回空，放入不规则内容返回索引0的内容</p>
<p>字符串拼接</p>
<p>1.使用加号拼接</p>
<p>2.str.concat(str1,’true’,1) 括号内放需要拼接的字符串</p>
<p>字符串大写小写（作用在英文字母上）</p>
<p>大写：str.toUpperCase()</p>
<p>小写：str.toLowerCase()</p>
<p>查找索引方法（字符串，数组都适用）</p>
<p>找不到返回-1</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;abcdefghabc&#x27;</span>;<br><span class="hljs-built_in">str</span>.indexOf(<span class="hljs-string">&#x27;c&#x27;</span>);  &gt;&gt;&gt; <span class="hljs-number">2</span>	返回第一个c的索引<br><span class="hljs-built_in">str</span>.indexOf(<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">4</span>);&gt;&gt;&gt;<span class="hljs-number">10</span>	从第四位开始找c,找到后返回<br><br><span class="hljs-built_in">str</span>.lastIndexOf(<span class="hljs-string">&#x27;b&#x27;</span>);&gt;&gt;&gt;<span class="hljs-number">9</span>  从后往前找，找到第一个e;<br><span class="hljs-built_in">str</span>.lastIndexOf(<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">5</span>); &gt;&gt;&gt;<span class="hljs-number">2</span> 先截取字符串前五位，从这五位从后往前<br></code></pre></td></tr></table></figure>


<p>替换</p>
<p>str=’abcdef’;</p>
<p>str.replace(‘abc’,f)&gt;&gt;&gt;fdef    把abc替换成a，字符串中有多个abc只能替换第一个abc</p>
<p>str.replaceall(‘abc’,f) 替换所有的abc</p>
<p>str.replace(‘c’,function(text,index,lastStr){}) 括号内分别是找到的内容，索引，原始字符串</p>
<p>去掉空格</p>
<p>str.trim() 去掉前后空格</p>
<p>str.trimLeft()或者str.trimStart()  去掉左边空格</p>
<p>str.trimRight()或者str.trimEnd()    去掉右边空格</p>
<p>split方法把字符串转换成数组</p>
<p>str = ‘abcdefg’;</p>
<p>str.split(‘’);  &gt;&gt;&gt;[‘a’,’b’,’c’,’d’,’e’,’f’,’g’]   </p>
<p>str.split(‘c’);&gt;&gt;&gt;[‘ab’,’defg’]        以c为分隔符分隔</p>
<p>str.split(‘’,4);&gt;&gt;&gt;[‘a’,’b’,’c’,’d’]   4代表留下4个数</p>
<p>插入（push）</p>
<p>arr.push(3,5,78,’jks’,4)    尾部插入内容</p>
<p>arr.unshift(4.5,76,’dd’,true)    头部插入内容</p>
<p>都会返回新数组的length</p>
<p>删除（pop）</p>
<p>arr.pop();    尾部删除，删除最后一个内容，返回删除的内容</p>
<p>arr.shift();    头部删除，删除第一个内容，返回删除的内容</p>
<p>数组连接(原数组不会改变)</p>
<p>arr = [1,2,3]</p>
<p>arr1 = [4,5,6]</p>
<p>arr.concat(arr1); &gt;&gt;&gt;[1,2,3,4,5,6]   返回新数组</p>
<p>倒序方法（reverse）</p>
<p>不会改变原数组，返回一个新数组</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><code class="hljs accesslog">arr1 = <span class="hljs-string">[1,2,3,4,5]</span><br>arr2 = arr1.reverse();<br>console.log(arr2)<br><br>&gt;&gt;&gt;<span class="hljs-string">[5,4,3,2,1]</span><br></code></pre></td></tr></table></figure>


<p>数组转字符串（join）</p>
<p>括号里的参数替换数组中的逗号，并将数组转换成字符串</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">arr1</span> =<span class="hljs-meta"> [1,2,3,4,5]</span><br><br><span class="hljs-attribute">arr1</span>.join()   #&#x27;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#x27;<br><span class="hljs-attribute">arr1</span>.join(&#x27;&#x27;) #&#x27;<span class="hljs-number">12345</span>&#x27;<br><span class="hljs-attribute">arr1</span>.join(&#x27;c&#x27;)#&#x27;<span class="hljs-number">1</span>c<span class="hljs-number">2</span>c<span class="hljs-number">3</span>c<span class="hljs-number">4</span>c<span class="hljs-number">5</span>&#x27;<br></code></pre></td></tr></table></figure>


<p>数组截取（slice）</p>
<p>与字符串截取一样</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">arr</span> =<span class="hljs-meta"> [1,2,3,4,5,6]</span><br><span class="hljs-attribute">arr</span>.slice(<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>)   #<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span><br><span class="hljs-attribute">arr</span>.slice(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)   #<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>


<p>数组万能方法（splice）</p>
<p>删除    arr.splice(从第几位开始，删几位)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">arr</span> =<span class="hljs-meta"> [1,2,3,4,5]</span><br><span class="hljs-attribute">arr</span>.splice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)	#从第一位开始，删除两位&gt;&gt;&gt;[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure>
<p>增加 arr.splice(从第几位开始，删除几位，添加内容(可以无限添加))</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">arr</span> =<span class="hljs-meta"> [1,2,3,4,5]</span><br><span class="hljs-attribute">arr</span>.splice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,&#x27;tan&#x27;)	#从第一位开始，删除两位并在第一位后面添加tan &gt;&gt;&gt;[<span class="hljs-number">1</span>,tan,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure>
<p>修改</p>
<p>当第二位是1的时候，就是修改了</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">arr</span> =<span class="hljs-meta"> [1,2,3,4,5]</span><br><span class="hljs-attribute">arr</span>.splice(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,&#x27;tan&#x27;)	#[<span class="hljs-number">1</span>,tan,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure>


<p>排序整理(sort)(返回新数组)</p>
<p>通过对比字符编码来排序</p>
<p>查看字符编码：xxx.charCodeAt()</p>
<p>字符串看第一位，第一位相同看第二位</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">由于是查看第一位来排序，所以有缺陷<br><br>解决方法：<br>arr.<span class="hljs-built_in">sort</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a,b)</span>&#123;<span class="hljs-title">return</span> <span class="hljs-title">b</span>.<span class="hljs-title">charCodeAt</span><span class="hljs-params">()</span>-<span class="hljs-title">a</span>.<span class="hljs-title">charCodeAt</span><span class="hljs-params">()</span>;&#125;;)</span><br></code></pre></td></tr></table></figure>


<p>数组循环(forEach)</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><br><span class="hljs-meta">#function里可以放入3个参数，分别代表数组的每一个内容，索引，原数组</span><br>#不能使用break，可以使用<span class="hljs-keyword">return</span>来代替<span class="hljs-keyword">continue</span><br>#返回undefined<br>arr.<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">function</span>(content,<span class="hljs-keyword">index</span>,arr)&#123;<br>	console.log(content,<span class="hljs-keyword">index</span>,arr);<br>&#125;)<br><br></code></pre></td></tr></table></figure>


<p>json数据对象{}</p>
<p>存取数据  json是没有长度(length)的</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">json = &#123;<br>	<span class="hljs-string">&quot;tan&quot;</span>:<span class="hljs-string">&#x27;v&#x27;</span>,<br>	<span class="hljs-string">&quot;leo&quot;</span>:<span class="hljs-string">&#x27;true&#x27;</span>,<br>	<span class="hljs-string">&quot;le&quot;</span>:<span class="hljs-literal">true</span>,<br>	<span class="hljs-string">&quot;vf&quot;</span>:<span class="hljs-number">4</span>,<br>	<span class="hljs-string">&quot;vfv&quot;</span>:[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>]<br>&#125;<br><span class="hljs-meta">#标准格式 key名是双引号</span><br><br><span class="hljs-meta">#获取数据（两种方法）</span><br><span class="hljs-built_in">str</span>.leo<br><span class="hljs-built_in">str</span>[<span class="hljs-string">&#x27;leo&#x27;</span>]	<span class="hljs-meta">#当键名为数字时，用这个方法</span><br></code></pre></td></tr></table></figure>


<p>json转字符串,字符串转json</p>
<p>JSON.stringify(json名)</p>
<p>JSON.parse(字符串名)</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">str</span> = &#123;<span class="hljs-string">&#x27;tan&#x27;</span>:<span class="hljs-string">&#x27;v&#x27;</span>,<br>	<span class="hljs-string">&#x27;leo&#x27;</span>:<span class="hljs-string">&#x27;true&#x27;</span>,<br>	<span class="hljs-string">&#x27;le&#x27;</span>:<span class="hljs-literal">true</span>,&#125;<br><br><span class="hljs-meta">#转字符串</span><br>JSON.stringify(<span class="hljs-built_in">str</span>)<br><span class="hljs-meta">#转JSON</span><br>JSON.parse(<span class="hljs-built_in">str</span>)<br></code></pre></td></tr></table></figure>


<p>for in 循环</p>
<p>用来循环对象的属性(一般循环JSON对象)</p>
<p>可以使用break，continue</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><code class="hljs processing">json = &#123;<span class="hljs-string">&quot;sky&quot;</span>:<span class="hljs-number">20</span>,<span class="hljs-string">&quot;blue&quot;</span>:<span class="hljs-number">40</span>,<span class="hljs-string">&quot;red&quot;</span>:<span class="hljs-number">45</span>,<span class="hljs-string">&quot;green&quot;</span>:<span class="hljs-number">98</span>&#125;<br><br><span class="hljs-keyword">for</span>(var i in json)&#123;<br>	console.<span class="hljs-built_in">log</span>(i);<br>&#125;<br>&gt;&gt;&gt; sky,<span class="hljs-built_in">blue</span>,<span class="hljs-built_in">red</span>,<span class="hljs-built_in">green</span><br></code></pre></td></tr></table></figure>


<p>in关键字</p>
<p>检测属性是否在对象中（一般在JSON上使用）</p>
<p>字符串没有这个方法（要有属性才行）</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">JSON</span>对象<br><span class="hljs-type">json</span> = &#123;&quot;sky&quot;:<span class="hljs-number">20</span>,&quot;blue&quot;:<span class="hljs-number">40</span>,&quot;red&quot;:<span class="hljs-number">45</span>,&quot;green&quot;:<span class="hljs-number">98</span>&#125;<br><span class="hljs-string">&#x27;sky&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-type">json</span> 		#<span class="hljs-keyword">true</span><br><br>数组<br>arr = [<span class="hljs-string">&#x27;scr&#x27;</span>,<span class="hljs-string">&#x27;width&#x27;</span>,<span class="hljs-string">&#x27;height&#x27;</span>]<br><span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">in</span> arr   	#<span class="hljs-keyword">true</span> 这个的属性是索引，判断索引是否有<span class="hljs-number">2</span> <br></code></pre></td></tr></table></figure>


<p>JSON删除属性(delete)</p>
<p>只能删除JSON数据下的属性，var声明的对象不能删除，length也不能删除</p>
<p>删除成功返回true，失败返回false</p>
<p>delete删除数组内容会留下占位内容，不会影响数组的长度</p>
<h6 id="事件监听（addEventListener）"><a href="#事件监听（addEventListener）" class="headerlink" title="事件监听（addEventListener）"></a>事件监听（addEventListener）</h6><p>监听元素的事件</p>
<p>第一个参数是 事件名称，第二个参数是监听到后执行方法(该方法可以通过函数名传入) </p>
<p>js事件监听可以叠加，普通事件会被覆盖</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript">div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>	alert(<span class="hljs-string">&#x27;1&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure>


<p>addEventListener中还有第三个参数可以放入布尔值，默认是false</p>
<p>如果放入第三个参数，事件则在捕获时执行</p>
<p>解除事件监听（removeEventListener）</p>
<p>也有三个参数，意义和添加监听一样</p>
<p>解决ie兼容问题</p>
<p>低级ie需要用到attachEvent和detachEvent来监听</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">tan</span>.attachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;alert(<span class="hljs-string">&#x27;1&#x27;</span>)&#125;)<br><span class="hljs-built_in">tan</span>.detachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>,fnName)<br><br>解决兼容<br>var a = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123; alert(<span class="hljs-string">&#x27;2&#x27;</span>); &#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">tan</span>.addEventListener)&#123;<br>	<span class="hljs-built_in">tan</span>.addEventListener(<span class="hljs-string">&#x27;onclick&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;alert(<span class="hljs-string">&#x27;1&#x27;</span>)&#125;)<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>	<span class="hljs-built_in">tan</span>.attachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;alert(<span class="hljs-string">&#x27;1&#x27;</span>)&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h6><p>在js中可以使用事件委托/代理方式给予元素事件</p>
<p>这种给予可以控制 未来元素</p>
<p>原理是 通过事件对象的元素目标属性来操作元素</p>
<p>这种方式 安全 不会报错</p>
<p>例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">if</span>(event.target.nodeName == <span class="hljs-string">&#x27;DIV&#x27;</span>&#123;<br>		event.target.style.color = <span class="hljs-string">&#x27;red&#x27;</span>;<br>	&#125;<br>&#125;;<br><span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>oDiv.id = <span class="hljs-string">&#x27;div&#x27;</span>;<br>oDiv.innerHTML = <span class="hljs-string">&#x27;124324wedfds&#x27;</span>;<br><span class="hljs-built_in">document</span>.appendChild(oDiv);<br></code></pre></td></tr></table></figure>


<p>事件委托兼容</p>
<p>部分ie浏览器不支持event.target属性</p>
<p>在ie浏览器中用event.srcElement属性来获得事件委托触发事件元素</p>
<p>documentElement就是html,在IE浏览器中能用得到</p>
<p>窗口重置事件(onresize)</p>
<p>只有window和body可以触发这个事件</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript"><span class="hljs-built_in">window</span>.onresize = <span class="hljs-keyword">function</span>()&#123;alert(<span class="hljs-string">&#x27;1&#x27;</span>)&#125;<br><br><span class="hljs-comment">#自定义</span><br><span class="hljs-keyword">var</span> doResize = <span class="hljs-keyword">function</span>()&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;<br><br>&lt;body onresize=<span class="hljs-string">&quot;doResize()&quot;</span>&gt;<br>		<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure>


<p>js滚动事件(onscroll)</p>
<p>scrollTop、scrollLeft</p>
<p>浏览器的滚动距离：document.documentElement.scrollTop</p>
<p>键盘事件</p>
<p>onkeydown(键盘按下)</p>
<p>onkeypress(输入框出现新字符才会触发)</p>
<p>onkeyup(键盘抬起)</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">window</span>.onkeydwon = function()&#123;<br>	console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">event</span>.keyCode);<br>	console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">event</span>.key);<br>	console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">event</span>.code);<br>	console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">event</span>.shich);<br>&#125;<br></code></pre></td></tr></table></figure>


<p>键盘事件对象<br>可以通过keyCode/key/code/which来获得当前按下的键</p>
<p>ie兼容 </p>
<p>ie低版本（keyCode/key/code/which）这四个中只支持keyCode</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.onkeydwon = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; #ie要使用<span class="hljs-built_in">document</span><br>	<span class="hljs-built_in">console</span>.log(event.keyCode)<br>&#125;<br></code></pre></td></tr></table></figure>


<p>键盘禁止输入内容</p>
<p>使用onkeydown然后函数中return false,就阻止输入了</p>
<p>禁止某些按键输入，可以判断keyCode码来单独return false</p>
<p>例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#禁止全部建</span><br>ipt.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">#禁止一个键</span><br>ipt.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">if</span>(event.keyCode == <span class="hljs-number">48</span>)&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;<br><span class="hljs-comment">#禁止多个键</span><br>ipt.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">if</span>(event.keyCode == <span class="hljs-number">48</span> || event.keyCode == <span class="hljs-number">49</span>)<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;<br><span class="hljs-comment">#禁止很多键</span><br>ipt.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">if</span>(event.keyCode &gt;=<span class="hljs-number">48</span> &amp;&amp; event.keyCode&lt;=<span class="hljs-number">65</span>)<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<p>键盘特殊按键使用</p>
<p>ctrlKey、altKey、shiftKey、metaKey</p>
<p>metakey在mac系统上是command键，在window上是win键</p>
<p>组合键</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#使用特殊件配合</span><br>window.onkeydown = function()&#123;<br>    <span class="hljs-keyword">if</span>(event.ctrlKey &amp;&amp; event.keyCode == 65)&#123;<br>    	console.log(<span class="hljs-string">&#x27;1&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">#如果不使用特殊键，用布尔值来代替</span><br><br>var a = <span class="hljs-literal">false</span>,<span class="hljs-attribute">b</span>=<span class="hljs-literal">false</span>;<br>window.onkeydown = function()&#123;<br>    <span class="hljs-keyword">if</span>(event.keyCode == 17)&#123;<br>   		<span class="hljs-attribute">a</span>=<span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(event.keyCode == 65)&#123;<br>   		<span class="hljs-attribute">b</span>=<span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a &amp;&amp; b)&#123;<br>    	alert(<span class="hljs-string">&#x27;组合键ctrl+a&#x27;</span>)<br>    	a = <span class="hljs-literal">false</span>;<br>    	<span class="hljs-attribute">b</span>=<span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="全局方法"><a href="#全局方法" class="headerlink" title="全局方法"></a>全局方法</h6><p>eval</p>
<p>eval 去掉字符串的引号</p>
<p>在JS的全局对象window中可以使用eval方法来解析字符串</p>
<p>使用eval方法处理除字符串的其他数据类型的话会原状返回</p>
<p>使用eval方法处理字符串的话，让其执行字符串内的JavaScript代码</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">a</span> = <span class="hljs-string">&#x27;b = 13;&#x27;</span><br><br>eval(<span class="hljs-keyword">a</span>)		&gt;&gt;&gt; b=<span class="hljs-number">13</span>; 执行依次只能去掉一层引号，如果有多层引号，需要多次执行<br>console.<span class="hljs-built_in">log</span>(b)  &gt;&gt;&gt; <span class="hljs-number">13</span><br></code></pre></td></tr></table></figure>


<p>parseInt</p>
<p>解析字符串，并以整数的形式返回</p>
<p>去掉空格，返回整数</p>
<p>从非空格开始，如果第一位是非数字，返回NaN；如果是数字，返回非数字前的数字</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-string">&#x27;  1332  &#x27;</span>)</span></span>	&gt;&gt;&gt;<span class="hljs-number">123</span><br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-string">&#x27;  hyg13&#x27;</span>)</span></span>		&gt;&gt;&gt;NaN<br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-string">&#x27; 232kjk&#x27;</span>)</span></span>		&gt;&gt;&gt;<span class="hljs-number">232</span><br></code></pre></td></tr></table></figure>
<p>有两个参数时parseInt(数字,几进制)</p>
<p>例：parseInt(1011,2)     &gt;&gt;&gt; 11   1011的二进制</p>
<p>parseFloat</p>
<p>基本与parseInt一样，唯一区别是会保留小数点以后的内容</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">parseFloat</span><span class="hljs-params">(<span class="hljs-string">&#x27;  3243.44&#x27;</span>)</span></span>	&gt;&gt;&gt;<span class="hljs-number">3243.44</span><br><span class="hljs-function"><span class="hljs-title">parseFloat</span><span class="hljs-params">(<span class="hljs-string">&#x27;  3243.44.3242sa&#x27;</span>)</span></span>	&gt;&gt;&gt;<span class="hljs-number">3243.44</span><br><span class="hljs-function"><span class="hljs-title">parseFloat</span><span class="hljs-params">(<span class="hljs-string">&#x27;  dsf3243.44&#x27;</span>)</span></span>	&gt;&gt;&gt;NaN<br></code></pre></td></tr></table></figure>


<p>isNaN    </p>
<p>在JS的全局对象window里面可以使用isNaN方法来判断内容是否为NaN</p>
<p>isNaN方法里面如果放入NaN内容返回True，其余返回false</p>
<p>其原理是先把参数放入number函数下面，如果返回是NaN。则，isNaN内容为true，其余情况则为false</p>
<h6 id="三目运算符-三元运算符"><a href="#三目运算符-三元运算符" class="headerlink" title="三目运算符(三元运算符)"></a>三目运算符(三元运算符)</h6><p>判断条件 ？成功执行 : 失败执行</p>
<p>如果要执行多条语句，要用逗号连接，并使用括号括起来</p>
<p>判断条件 ？(成功语句一,成功语句二) : (失败语句1，失败语句二)</p>
<h6 id="数学方法-随机数"><a href="#数学方法-随机数" class="headerlink" title="数学方法-随机数"></a>数学方法-随机数</h6><p>Math.random()    0~1的随机数</p>
<p>理论上会出现0和1，但实际上不会出现0和1</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">Math.PI			π<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>round<span class="hljs-literal">()</span>	四舍五入<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>ceil<span class="hljs-literal">()</span>		变成大于且最接近本身的整数<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>floor<span class="hljs-literal">()</span>	变成小于且最接近本身的整数<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>random<span class="hljs-literal">()</span>	<span class="hljs-number">0</span>~<span class="hljs-number">1</span>的随机数<br></code></pre></td></tr></table></figure>
<p>随机数1~10</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">parseInt</span>( Math.random() * <span class="hljs-number">10</span>+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure>
<p>封装随机数</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">function <span class="hljs-title">randint</span><span class="hljs-params">(<span class="hljs-built_in">min</span>,<span class="hljs-built_in">max</span>)</span></span>&#123;<br>	<span class="hljs-keyword">return</span>(<span class="hljs-built_in">parseInt</span>(Math.<span class="hljs-built_in">random</span>() *(<span class="hljs-built_in">max</span>-<span class="hljs-built_in">min</span>+<span class="hljs-number">1</span>)+<span class="hljs-built_in">min</span>))<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="js对象理解"><a href="#js对象理解" class="headerlink" title="js对象理解"></a>js对象理解</h6><p>不等性</p>
<p>不同的对象都不相等</p>
<p>私有属性</p>
<p>数组、JSON、函数都有私有属性</p>
<p>只要是对象都可以挂私有属性，非对象就不能挂私有属性</p>
<p>new</p>
<p>在js中，函数除了普通方式调用之外，还能使用new调用</p>
<p>使用new调用函数，会改变函数的一些特性会影响声明的数据类型状态</p>
<p>通过new声明的数据类型都为对象，具备对象的所有属性</p>
<p>引用机制(对象才有)</p>
<p>两个变量的内容指向同一内容，改变其中一个内容，另一个也会随之改变</p>
<p>只有改变原有对象内容的方法和改变属性会触发引用机制</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-attribute">var</span> b = a;<br><span class="hljs-attribute">b</span>.push(<span class="hljs-number">4</span>);	#进行增删改 才会触发引用机制<br><span class="hljs-attribute">console</span>.log(a);	<span class="hljs-meta">	[1,2,3,4]</span><br></code></pre></td></tr></table></figure>


<h6 id="面对对象"><a href="#面对对象" class="headerlink" title="面对对象"></a>面对对象</h6><p>类</p>
<p>js中又很多类，如string、number、Boolean。array、function、object等</p>
<p>new函数可以创建新的类</p>
<p>原型(prototype)</p>
<p>在js中原型的作用是连接类的方法</p>
<p>通过原型可以对类的方法进行操作</p>
<p>new创建的自定义类也可以进行添加方法</p>
<p>Array.prototype 查看数组所有方法</p>
<p>Number.prototype 查看Number所有方法</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#删除方法</span><br><span class="hljs-built_in">Array</span>.prototype.indexOf = <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">#添加方法,原始类只能这样添加方法</span><br><span class="hljs-built_in">Array</span>.prototype.tan= <span class="hljs-keyword">function</span>()&#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].tan())	&gt;&gt;&gt;[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-comment">#自定义类并添加方法</span><br><span class="hljs-keyword">function</span> tan()&#123;<br>&#125;;<br>tan.prototype = &#123;<br>	<span class="hljs-string">&#x27;aaa&#x27;</span>:<span class="hljs-number">12</span>,<br>	<span class="hljs-string">&#x27;ccc&#x27;</span>:<span class="hljs-string">&#x27;sadasl&#x27;</span>,<br>	<span class="hljs-string">&#x27;leo&#x27;</span>:<span class="hljs-number">1212</span><br>&#125;<br>a = <span class="hljs-keyword">new</span> tan()<br>a.ccc	&gt;&gt;&gt;<span class="hljs-string">&#x27;sadasl&#x27;</span><br></code></pre></td></tr></table></figure>


<p>原型链(——proto——)</p>
<p>在JS中，Object是最大的类，其余所有的类都默认原型链到Object上</p>
<p>类可以使用原型链上面的类的原型方法</p>
<p>在JS的默认归类中，如果Object类原型发生改变，那么所有的类都会可以使用改变的内容</p>
<p>获取数据类的方法（constructor）</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><code class="hljs gml">&lt;<span class="hljs-keyword">div</span> <span class="hljs-symbol">id</span> = <span class="hljs-string">&#x27;tan&#x27;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br><br><span class="hljs-built_in">tan</span>.constructor  &gt;&gt;&gt; HTMLDivElement<br></code></pre></td></tr></table></figure>


<p>对象中this的指向</p>
<p>在js对象中，一般this指向为当前对象</p>
<p>在自定义类中，this可以为当前自定义类挂方法</p>
<p>在自定义类中，this属性和当前属性一致时，最后结果为this属性内容</p>
<p>强制改变this-call</p>
<p>第一个参数是改变this的指向</p>
<p>后面的参数就是函数里正常需要的参数</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-comment">&#123;</span><br><span class="hljs-comment">	a:200</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tan</span><span class="hljs-params">(x)</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-function"><span class="hljs-comment">	console.log(this.a)</span></span><br><span class="hljs-function"><span class="hljs-comment">&#125;</span>;</span><br>tan();			&gt;&gt;&gt;<span class="hljs-number">2</span><br>tan.call(obj); 	&gt;&gt;&gt;<span class="hljs-number">200</span><br></code></pre></td></tr></table></figure>


<p>强制改变this-apply</p>
<p>传一个参数的时候与call一样</p>
<p>第二个参数必须是一个数组，数组内容必须对应函数参数的个数</p>
<p>原型继承</p>
<p>自定义类继承原型方法，使用prototype然后赋值new一下要继承的类，这样就会触发原型链链接</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">tan</span> 继承 sky里的方法<br>sky.prototype = <span class="hljs-keyword">new</span> <span class="hljs-built_in">tan</span>();<br></code></pre></td></tr></table></figure>


<p>属性继承</p>
<p>如果当前自定义类想使用其他自定义类的属性，我们可以使用call或apply方法通过this传参的形式，去其他自定义类中“偷”到自定义属性</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">function <span class="hljs-title">tan</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-keyword">this</span>.a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">this</span>.b = <span class="hljs-number">20</span>;<br>&#125;<br><br><span class="hljs-function">function <span class="hljs-title">bo</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-built_in">tan</span>.call(<span class="hljs-keyword">this</span>);		将<span class="hljs-keyword">this</span>指到<span class="hljs-built_in">tan</span>()中<br>&#125;<br><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">new</span> bo().a)		&gt;&gt;&gt;<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure>


<h6 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h6><p>四点好处</p>
<p>1.避免变量污染，命名冲突</p>
<p>2.提高代码复用率</p>
<p>3.提高了可维护性</p>
<p>4.方便依赖关系管理</p>
<p>jQuery选择器封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jQuery</span>(<span class="hljs-params">ele</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = ele;<br>    <span class="hljs-built_in">this</span>.eleArr = [];<br>    <span class="hljs-keyword">switch</span>(<span class="hljs-built_in">this</span>.name[<span class="hljs-number">0</span>])&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;#&#x27;</span>:<br>            <span class="hljs-built_in">this</span>.newele = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-built_in">this</span>.name.slice(<span class="hljs-number">1</span>));<br>            <span class="hljs-built_in">this</span>.eleArr.push(<span class="hljs-built_in">this</span>.newele);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;.&#x27;</span>:<br>            <span class="hljs-built_in">this</span>.newele = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-built_in">this</span>.name.slice(<span class="hljs-number">1</span>));<br>            <span class="hljs-built_in">this</span>.eleArr.push(<span class="hljs-built_in">this</span>.newele);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">this</span>.newele = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-built_in">this</span>.name);<br>            <span class="hljs-built_in">this</span>.eleArr.push(<span class="hljs-built_in">this</span>.newele);<br><br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.eleArr)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$</span>(<span class="hljs-params">ele</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> jQuery(ele);<br>&#125;;<br>$(<span class="hljs-string">&#x27;div&#x27;</span>);<br></code></pre></td></tr></table></figure>


<h6 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h6><p>方式：</p>
<p>1.(function(){}());    最常用</p>
<p>2.(function(){})();</p>
<p>3.void function(){}()    返回值永远是undefined</p>
<p>4.!function(){}()    返回值自动转成布尔值，并且布尔值相反</p>
<p>5.-function(){}()    返回值会自动乘以-1</p>
<p>6.+function(){}()    返回值乘以1</p>
<p>7.~function(){}()    返回值会乘以-1再减去1</p>
<p>例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> allipt = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; allipt.length; i++)&#123;<br>    allipt[i].index = i;<br>    allipt[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        alert(<span class="hljs-built_in">this</span>.index);<br>    &#125;;<br>&#125;;<br><br><span class="hljs-keyword">var</span> allipt = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;allipt.length;i++)&#123;<br>    (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)</span>&#123;<br>        allipt[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            alert(i);<br>        &#125;;<br>    &#125;(i))<br>&#125;;<br></code></pre></td></tr></table></figure>


<h6 id="使用技巧-创建对象"><a href="#使用技巧-创建对象" class="headerlink" title="使用技巧-创建对象"></a>使用技巧-创建对象</h6><p>三种方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> json = &#123;&#125;;<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">Object</span>();<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></td></tr></table></figure>


<h5 id="常用函数-数组"><a href="#常用函数-数组" class="headerlink" title="常用函数-数组"></a>常用函数-数组</h5><h6 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h6><p>对数组进行过滤</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">arr.<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-string">&#x27;当前元素的值&#x27;</span>，当前元素索引,当前<span class="hljs-title">arr</span>)&#123;</span><br>	<span class="hljs-literal">return</span> ？？？<br>&#125;)<br><br>例<br>var <span class="hljs-keyword">items</span> = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>]<br><br><span class="hljs-keyword">items</span>.<span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-title">item</span>)&#123;</span><br>	<span class="hljs-literal">return</span> <span class="hljs-keyword">item</span>&gt;<span class="hljs-number">5</span><br>&#125;)<br>&gt;&gt;&gt; [<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">10</span>]<br></code></pre></td></tr></table></figure>
<h6 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h6><p>对数组进行排序</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">arr<span class="hljs-selector-class">.sort</span>(function(<span class="hljs-selector-tag">a</span>,<span class="hljs-selector-tag">b</span>)&#123;<br>	return <span class="hljs-selector-tag">a</span>-<span class="hljs-selector-tag">b</span>		//<span class="hljs-selector-tag">a</span>-<span class="hljs-selector-tag">b</span> 是升序 <span class="hljs-selector-tag">b</span>-<span class="hljs-selector-tag">a</span>是降序<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h6><p>统计需要的元素的个数（汇总累加器）</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">arr.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(prev, current,currentindex,arr)</span>&#123;</span><br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">prev</span> +current<br>&#125;,initialvalue)<br><br><span class="hljs-keyword">pre</span><span class="hljs-variable">v:</span> 初始值或者上一次回调的返回值<br>current：当前元素的处理值<br>currentindex:当前元素索引<br>arr:当前元素数组本身<br>initialvalue:传给函数的初始值<br><br>例<br>arr = [<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>]<br><br>arr.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(prev,current)</span>&#123;</span><br>	<span class="hljs-keyword">return</span> <span class="hljs-keyword">prev</span>+(current==<span class="hljs-number">2</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>)<br>&#125;,<span class="hljs-number">0</span>)<br><br>写成箭头函数<br>arr.reduce((<span class="hljs-keyword">prev</span>,current)=&gt; <span class="hljs-keyword">prev</span>+(current==<span class="hljs-number">2</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>),<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web前端(网易学习)</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>网易-Vue</title>
    <url>/2021/12/26/%E7%BD%91%E6%98%93-vue/</url>
    <content><![CDATA[<h5 id="mvc框架"><a href="#mvc框架" class="headerlink" title="mvc框架"></a>mvc框架</h5><p>Modal(数据模型)</p>
<p>View(视图界面)</p>
<p>Controller(控制器)控制所有事件</p>
<h5 id="mvvm框架"><a href="#mvvm框架" class="headerlink" title="mvvm框架"></a>mvvm框架</h5><p>Modal(数据模型)</p>
<p>View(视图界面)</p>
<p>ViewModal(视图模型)</p>
<h5 id="Vue3的引入与基本使用"><a href="#Vue3的引入与基本使用" class="headerlink" title="Vue3的引入与基本使用"></a>Vue3的引入与基本使用</h5><p>Vue的creatApp方法，可以放入数据池与事件池</p>
<p>输出数据与事件需要挂载器mount方法，挂载指定元素</p>
<h6 id="引入Vue3"><a href="#引入Vue3" class="headerlink" title="引入Vue3"></a>引入Vue3</h6><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;Vue3.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h6 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h6><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        &#123;&#123;content&#125;&#125; <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-comment">//变量池</span></span><br><span class="javascript">        data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                content:<span class="hljs-string">&#x27;hello world&#x27;</span></span><br>            &#125;<br>        &#125;,<br><span class="javascript">        <span class="hljs-comment">//事件池</span></span><br>        methods:&#123;<br><span class="javascript">            a:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                alert(<span class="hljs-string">&#x27;我是点击事件&#x27;</span>);</span><br>            &#125;,<br><span class="javascript">            b:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                alert(<span class="hljs-string">&quot;又点我了&quot;</span>)</span><br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).mount(<span class="hljs-string">&#x27;#test&#x27;</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h5 id="模板语法-插值"><a href="#模板语法-插值" class="headerlink" title="模板语法-插值"></a>模板语法-插值</h5><h6 id="插值-文本操作"><a href="#插值-文本操作" class="headerlink" title="插值-文本操作"></a>插值-文本操作</h6><p>可以直接在事件池中使用this找到变量池中的内容进行更改，页面也会直接变化</p>
<p>v-once用于锁定模板值</p>
<p>v-html用来输出HTML元素内容</p>
<p>v-text用来输出文本内容</p>
<p>v-html、v-text会覆盖元素里原本的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        &#123;&#123;content&#125;&#125; <br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-once</span>&gt;</span>&#123;&#123;content&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;html&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                <span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;hello world&quot;</span>,</span><br><span class="javascript">                <span class="hljs-string">&quot;html&quot;</span>:<span class="hljs-string">&quot;点我变成红色div&quot;</span></span><br>            &#125;<br>        &#125;,<br>        methods:&#123;<br><span class="javascript">            a:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.content = <span class="hljs-string">&#x27;123&#x27;</span>;</span><br>            &#125;,<br><span class="javascript">            b:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="handlebars"><span class="xml">                this.html = &quot;<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width:100px;height:100px;background-color:red;&#x27;</span>&gt;</span>456<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&quot;;</span></span><br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).mount(<span class="hljs-string">&#x27;#test&#x27;</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h6 id="插值-属性与表达式"><a href="#插值-属性与表达式" class="headerlink" title="插值-属性与表达式"></a>插值-属性与表达式</h6><p>v-bind:属性名=’data内的变量名’</p>
<p>v-bind如果只给属性不赋值,n那么最后只显示属性</p>
<p>v-bind想赋值字符串需要进行引号切换</p>
<p>语法内容的输出结果可以放入语法表达式（三目，拼接等）</p>
<h6 id="插值-指令-动态参数"><a href="#插值-指令-动态参数" class="headerlink" title="插值-指令-动态参数"></a>插值-指令-动态参数</h6><p>v-bind或on后面的参数可以通过[data]来实现动态参数</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">div</span> v-bind:<span class="hljs-selector-attr">[test]</span>=<span class="hljs-string">&#x27;content&#x27;</span>&gt;	<span class="hljs-comment">//test和content都是data里的变量</span><br></code></pre></td></tr></table></figure>
<p>v-bind后面参数如果是class，修改将会变成添加而不是替换</p>
<p>v-on通过动态参数切换事件时，所有事件会删除变成新的事件</p>
<h6 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">v-bind:class=<span class="hljs-string">&#x27;content&#x27;</span><br><span class="hljs-regexp">//</span>属性 缩写为 :class=<span class="hljs-string">&#x27;content&#x27;</span><br><br>v-on:click=<span class="hljs-string">&#x27;change&#x27;</span><br><span class="hljs-regexp">//</span>事件 缩写为 @click=<span class="hljs-string">&#x27;change&#x27;</span><br></code></pre></td></tr></table></figure>


<h5 id="Data-Property-数据权"><a href="#Data-Property-数据权" class="headerlink" title="Data Property(数据权)"></a>Data Property(数据权)</h5><p>给app设定为变量，可以访问或操作数据和事件</p>
<p>通过专门的$data来访问或者操作数据内容</p>
<p>事件名和变量名尽量不要一样，数据变量优先</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">var vm = Vue.createApp(&#123;<br>            data:function()&#123;<br>                return &#123;<br>                    &quot;content&quot;:&quot;hello world&quot;,<br>                    &quot;html&quot;:&quot;点我变成红色div&quot;<br>                &#125;<br>            &#125;<br>         &#125;).mount(&#x27;#test&#x27;);<br><br>console.log(vm.content);<br>console.log(vm.$data.content);<br></code></pre></td></tr></table></figure>


<h5 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h5><h6 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h6><p>控制元素的显示与隐藏</p>
<p>v-show接收到的数据会自动转换成布尔值</p>
<p>v-show接收到的值为false,则display:none;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;a&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;切换&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;bool&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color:red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                bool:<span class="hljs-literal">true</span></span><br>            &#125;<br>        &#125;,<br>        methods:&#123;<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.bool = !<span class="hljs-built_in">this</span>.bool;</span><br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).mount(<span class="hljs-string">&quot;#test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h6><p>条件渲染，隐藏和消失</p>
<p>v-if比v-show使用起来更消耗资源</p>
<p>v-if后面可以继续进行v-else-if和v-else指令拓展</p>
<p>v-if的拓展指令必须相邻，不然会失效。</p>
<h6 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h6><p>循环渲染数据内容</p>
<p>基本写法v-for=”自定义变量名 in(of) data数据”</p>
<p>JSON数据格式用(value,key)方式来循环内容</p>
<p>v-for循环获取索引值，非JSON的第二个参数，JSON为第三个参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(content,index) in list&quot;</span>&gt;</span><br>            &#123;&#123;content&#125;&#125;-&#123;&#123;index&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(content,index) in str&quot;</span>&gt;</span><br>            &#123;&#123;content&#125;&#125;-&#123;&#123;index&#125;&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,key,index) in json&quot;</span>&gt;</span><br>            &#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;-&#123;&#123;index&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                bool:<span class="hljs-literal">true</span>,</span><br><span class="javascript">                <span class="hljs-string">&#x27;list&#x27;</span>:[<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>],</span><br><span class="javascript">                <span class="hljs-string">&#x27;str&#x27;</span>:<span class="hljs-string">&#x27;string&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-string">&#x27;json&#x27;</span>:&#123;</span><br><span class="javascript">                    <span class="hljs-string">&#x27;num&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,</span><br><span class="javascript">                    <span class="hljs-string">&#x27;bbb&#x27;</span>:<span class="hljs-string">&quot;23&quot;</span></span><br>                &#125;<br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).mount(<span class="hljs-string">&quot;#test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="v-for状态维护"><a href="#v-for状态维护" class="headerlink" title="v-for状态维护"></a>v-for状态维护</h6><p>v-for循环出来的元素为方便维护尽量有key属性</p>
<p>尽量放入唯一属性id或者index</p>
<p>key属性只允许放入number或者string数据类型</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir">&lt;div v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;i in str&quot;</span> <span class="hljs-symbol">:key=<span class="hljs-string">&#x27;id&#x27;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="v-for与v-if"><a href="#v-for与v-if" class="headerlink" title="v-for与v-if"></a>v-for与v-if</h6><p>这两个尽量不要一起使用，v-if会优先执行</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">因为v-if先执行，最终会导致v-for循环出来的五个元素都消失<br>&lt;div <span class="hljs-attribute">v-for</span>=<span class="hljs-string">&quot; i in 5&quot;</span> <span class="hljs-attribute">v-if</span>=<span class="hljs-string">&quot;i==2?true:false&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure>


<h5 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h5><p>如果data与computed里有同一个属性，输出data里的属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">computed:&#123;<br>	&quot;cpt&quot;:function()&#123;<br>		if(this.num==2)&#123;<br>			return &#x27;kkk&#x27;+num*3<br>		&#125;<br>		else&#123;<br>			return &#x27;kkk&#x27;<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="计算属性里的setter和getter"><a href="#计算属性里的setter和getter" class="headerlink" title="计算属性里的setter和getter"></a>计算属性里的setter和getter</h6><p>get作为属性的输出需要配合return</p>
<p>set可以进行传参进行操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">computed:&#123;<br>	<span class="hljs-string">&quot;cpt&quot;</span>:&#123;<br>		<span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;10&#x27;</span><br>		&#125;,<br>		<span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;<br>			<span class="hljs-built_in">this</span>.str= value;<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="监听器watch"><a href="#监听器watch" class="headerlink" title="监听器watch"></a>监听器watch</h6><p>watch代表监听器，可以放入函数，函数名称代表需要监听的数据</p>
<p>监听某个参数，当这个参数改变时，可以触发函数</p>
<p>监听器里可以放入两个参数，分别为新数据和老数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">watch:&#123;<br>    <span class="hljs-function"><span class="hljs-title">aa</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">bb</span>(<span class="hljs-params">newvalue,oldvalue</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(newvalue,oldvalue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="深度监听"><a href="#深度监听" class="headerlink" title="深度监听"></a>深度监听</h6><p>deep:true    开启深度监听，默认为false</p>
<p>immediate     初始化时就执行一次，默认为false</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;watch&quot;</span>:&#123;<br>	aa:&#123;<br>		<span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params"></span>)</span>&#123;<br>			alert(<span class="hljs-number">1</span>);<br>		&#125;,<br>		deep:<span class="hljs-literal">true</span>,<br>		immediate:<span class="hljs-literal">true</span><br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h5 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h5><p>Vue3中事件里面可以用括号也可以不用括号，不用括号是单事件</p>
<p>多事件必须用逗号隔开，并且事件带括号</p>
<p>如果事件带括号可以进行传参参数可以是vue对象里的属性</p>
<p>事件里可以传入$event,下方可以调用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;go(),test()&quot;</span> &gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p>快速调用事件的某些状态</p>
<p>修饰符放在事件后面用“.”连接，可以多事件修饰符一起使用</p>
<p>可以存在修饰符不加事件调用函数</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">stop 阻止冒泡修饰符<br>prevent 阻止事件默认行为<br>capture 事件捕获触发<br><span class="hljs-literal">self</span> 精准事件触发<br><span class="hljs-keyword">once</span> 事件只触发一次<br>passive 优化移动端滚动事件不能和prevent一起使用<br></code></pre></td></tr></table></figure>


<h5 id="按键别名"><a href="#按键别名" class="headerlink" title="按键别名"></a>按键别名</h5><p>在按键事件中可以使用按键别名方式指定某一种按键有效</p>
<p>与修饰符一样，在按键事件后面放入</p>
<p>有9种，可以多个一起使用，用点连接</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keydown.tab.enter.up</span>=<span class="hljs-string">&#x27;abc&#x27;</span>/&gt;</span><br>Vue.createApp(&#123;<br>	&quot;methods&quot;:&#123;<br>		abc()&#123;<br>			alert(1);<br>		&#125;<br>	&#125;<br>&#125;).mount(&#x27;.tan&#x27;)<br></code></pre></td></tr></table></figure>


<h5 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h5><p>四种：ctrl、shift、alt、meta</p>
<p>可以和其他修饰键组合使用</p>
<p>精准使用需要使用exact来修饰系统修饰键（只能按需要的系统修饰符）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript">&lt;div <span class="hljs-meta">@keydown</span>.shift.ctrl=<span class="hljs-string">&#x27;abc&#x27;</span>&gt;按ctrl加shift&lt;/div&gt;<br><br>Vue.createApp(&#123;<br>	<span class="hljs-string">&quot;methods&quot;</span>:&#123;<br>		<span class="hljs-function"><span class="hljs-title">abc</span>(<span class="hljs-params"></span>)</span>&#123;<br>			alert(<span class="hljs-number">1</span>);<br>		&#125;<br>	&#125;<br>&#125;).mount(<span class="hljs-string">&#x27;.tan&#x27;</span>)<br></code></pre></td></tr></table></figure>


<h5 id="鼠标修饰符"><a href="#鼠标修饰符" class="headerlink" title="鼠标修饰符"></a>鼠标修饰符</h5><p>用来修饰鼠标事件的</p>
<p>鼠标事件后面只能放一个鼠标修饰符</p>
<p>三个：left、right、middle 代表左右滚轮</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">&lt;<span class="hljs-keyword">div</span> @mousedown.<span class="hljs-keyword">middle</span>=<span class="hljs-string">&#x27;abc&#x27;</span>&gt;点击鼠标滚轮&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure>


<h5 id="表单输入绑定（双向绑定）"><a href="#表单输入绑定（双向绑定）" class="headerlink" title="表单输入绑定（双向绑定）"></a>表单输入绑定（双向绑定）</h5><p>使用v-modle来绑定表单元素输入内容</p>
<p>单选：输出input的value，不用name即可分组</p>
<p>复选：输出true和false</p>
<p>文本域：输出内容</p>
<p>下拉框：代表option的内容</p>
<p>v-modle的值会覆盖原生属性上面的值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-modle</span>=<span class="hljs-string">&#x27;message&#x27;</span> &gt;</span><br></code></pre></td></tr></table></figure>


<h5 id="双向绑定修饰符"><a href="#双向绑定修饰符" class="headerlink" title="双向绑定修饰符"></a>双向绑定修饰符</h5><p>lazy：从oninput的频率变成onchange的频率</p>
<p>number：一开始就输入字符串，则输出字符串，如果最开始输入的是数字，则输出数字，遇到非数字则不在输出</p>
<p>trim：去掉两端的空格</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">input</span> v-modle<span class="hljs-selector-class">.lazy</span>.number=<span class="hljs-string">&#x27;message&#x27;</span> &gt;<br><br>可以多个一起使用<br></code></pre></td></tr></table></figure>


<h5 id="class与style绑定"><a href="#class与style绑定" class="headerlink" title="class与style绑定"></a>class与style绑定</h5><h6 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h6><p>可以使用数据来控制style或class的属性</p>
<p>class控制方式是传入<strong>JSON数据</strong>，对应class值为true和false</p>
<p>可以传入任何数据，会自动转为布尔值</p>
<p>style与class类似，可以样式key传值，也可以JSON传值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;test&quot;</span> &gt;<br>    &lt;!-- 数组 --&gt;<br>    &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;[abc,def]&quot;</span> &gt;&lt;/div&gt;<br>	&lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;arr&quot;</span> &gt;&lt;/div&gt;<br>	&lt;!-- 对象 --&gt;<br>    &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;&#123;first:active&#125;&quot;</span> &gt;&lt;/div&gt;<br>    &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;second&quot;</span> &gt;&lt;/div&gt;<br>    &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;third&quot;</span> &gt;&lt;/div&gt;<br>&lt;/div&gt;<br><br>Vue.createApp(&#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-string">&quot;abc&quot;</span>:<span class="hljs-string">&quot;abc&quot;</span>,<br>            <span class="hljs-string">&quot;def&quot;</span>:<span class="hljs-string">&quot;def&quot;</span>,<br>            <span class="hljs-string">&quot;arr&quot;</span>:[<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;defd&#x27;</span>],<br>            <span class="hljs-string">&quot;active&quot;</span>:<span class="hljs-literal">true</span>,<br>            <span class="hljs-string">&quot;second&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;blue&quot;</span>:<span class="hljs-literal">true</span>,<br>                <span class="hljs-string">&quot;green&quot;</span>:<span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>    &#125;,<br>    computed:&#123;<br>        <span class="hljs-function"><span class="hljs-title">third</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span>&#123;<br>                aaa:<span class="hljs-literal">true</span>,<br>                bbb:<span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;).mount(<span class="hljs-string">&#x27;#test&#x27;</span>)<br></code></pre></td></tr></table></figure>


<h6 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h6><p>也可以用数组的方式来控制style与class</p>
<p>可以在数组中直接放入class，也可以放入运算符</p>
<p>控制style，可以直接放入JSON格式的样式</p>
<h5 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h5><h6 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h6><p>使用``可以随意折行，可以使用${}传入变量，也可以使用三目运算符</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><code class="hljs dust"><span class="xml">var a=1,b=4;</span><br><span class="xml">var str =`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">			<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">				$</span><span class="hljs-template-variable">&#123;a+b&#125;</span><br><span class="xml">				$</span><span class="hljs-template-variable">&#123;a?a:b&#125;</span><br><span class="xml">			<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">		  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span><br></code></pre></td></tr></table></figure>


<h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><h6 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h6><p>使用component来自定义组件</p>
<p>可以放入data，computed，methods等属性</p>
<p>component方法第一个参数为组件名称</p>
<p>template为组件输出内容</p>
<p>组件无法使用createApp里面的数据，组件数据不共通</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">component-test</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-test</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><br><span class="javascript">&#125;).component(<span class="hljs-string">&quot;component-test&quot;</span>,&#123;</span><br><span class="javascript">    data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span>&#123;</span><br>            count:23<br>        &#125;<br>    &#125;,<br>    methods:&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">go</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.count++</span><br>        &#125;<br>    &#125;,<br><span class="handlebars"><span class="xml">    &quot;template&quot;:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;go&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">count</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br><span class="javascript">&#125;).mount(<span class="hljs-string">&quot;#test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="props"><a href="#props" class="headerlink" title="props"></a>props</h6><p>使用props获取父级的数据</p>
<p>通过在组件元素上进行自定义属性赋值的方法，然后通过组件中的props属性拿到自定义属性名，其属性的最终值就是组件上赋值的内容</p>
<p>通过props拿到的值使用方式和data内容一样</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">component-test</span> <span class="hljs-attr">:msg</span>=<span class="hljs-string">&#x27;message&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-test</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&#x27;拿到了createApp里面的值了&#x27;</span></span><br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).component(<span class="hljs-string">&quot;component-test&quot;</span>,&#123;</span><br><span class="javascript">        <span class="hljs-string">&quot;props&quot;</span>:[<span class="hljs-string">&quot;msg&quot;</span>],</span><br><span class="handlebars"><span class="xml">        &quot;template&quot;:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br><span class="javascript">    &#125;).mount(<span class="hljs-string">&quot;#test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h6><p>调用父元素的事件，将子级元素内容传到父元素中</p>
<p>在子组件输出的模板中，自定义事件，然后输出$emit方法</p>
<p>$emit第一个参数为定义的名称，该内容可以在组件上使用调佣交互内容为事件内容</p>
<p>$emit第二个参数，对应着组件元素调用的父级函数的参数内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> &gt;</span><br>        &#123;&#123;message1&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">component-test</span> @<span class="hljs-attr">go</span>=<span class="hljs-string">&#x27;test&#x27;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">component-test</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                <span class="hljs-string">&quot;message1&quot;</span>:<span class="hljs-string">&#x27;调用子元素内容之前&#x27;</span></span><br>            &#125;<br>        &#125;,<br>        methods:&#123;<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">test</span>(<span class="hljs-params">msg</span>)</span>&#123;</span><br>                alert(msg)<br><span class="javascript">                <span class="hljs-built_in">this</span>.message1 = msg;</span><br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).component(<span class="hljs-string">&quot;component-test&quot;</span>,&#123;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                message:<span class="hljs-string">&quot;我是子组件内容&quot;</span></span><br>            &#125;<br>        &#125;,<br><span class="handlebars"><span class="xml">        &quot;template&quot;:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;$emit(&quot;go&quot;,this.message)&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br><span class="javascript">    &#125;).mount(<span class="hljs-string">&quot;#test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="v-modle数据互通"><a href="#v-modle数据互通" class="headerlink" title="v-modle数据互通"></a>v-modle数据互通</h6><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpnt</span> <span class="hljs-attr">v-bind:val</span>=<span class="hljs-string">&#x27;text&#x27;</span> @<span class="hljs-attr">top</span>=<span class="hljs-string">&#x27;text=$event&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpnt</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                text:<span class="hljs-string">&#x27;没改变&#x27;</span></span><br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).component(<span class="hljs-string">&#x27;cpnt&#x27;</span>,&#123;</span><br><span class="javascript">        <span class="hljs-string">&quot;props&quot;</span>:[<span class="hljs-string">&#x27;val&#x27;</span>],</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                list:<span class="hljs-string">&#x27;123&#x27;</span>		</span><br>            &#125;<br>        &#125;,<br><span class="handlebars"><span class="xml">        &quot;template&quot;:`<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&#x27;val&#x27;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&#x27;$emit(&quot;top&quot;,$event.target.value)&#x27;</span>&gt;</span>`</span></span><br><span class="javascript">    &#125;).mount(<span class="hljs-string">&quot;#test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h6><p>组件插槽标签slot</p>
<p>如果组件里有其他内容，我们在组件模板下使用slot标签输出原始内容</p>
<p>暴露在外层的内容是可以使用最外层数据的，但不能使用组件内的数据</p>
<p>slot可以多次使用，标签要闭合，不然有警告窗</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpnt</span>&gt;</span><br>            123<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">cpnt</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><br><span class="javascript">    &#125;).component(<span class="hljs-string">&#x27;cpnt&#x27;</span>,&#123;</span><br><span class="handlebars"><span class="xml">        template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">                  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br><span class="javascript">    &#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h6><p>可以使用component标签进行组件输出</p>
<p>component标签需要配合:is来指定输出的组件名称，属性值为字符串</p>
<p>component标签上面所有的属性都会叠加到最终输出的组件内容的最外层元素上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        &#123;&#123;test1&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpnt</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpnt</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sky</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sky</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;i in list&quot;</span> <span class="hljs-attr">v-bind:is</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = Vue.createApp(&#123;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                test1:<span class="hljs-string">&#x27;测试&#x27;</span>,</span><br><span class="javascript">                list:[<span class="hljs-string">&#x27;cpnt&#x27;</span>,<span class="hljs-string">&#x27;sky&#x27;</span>]</span><br>            &#125;<br>        &#125;<br>    &#125;)<br><span class="javascript">    vm.component(<span class="hljs-string">&quot;cpnt&quot;</span>,&#123;</span><br><span class="javascript">        <span class="hljs-string">&quot;template&quot;</span>:<span class="hljs-string">`&lt;div&gt;cpnt&lt;/div&gt;`</span></span><br>    &#125;);<br><span class="javascript">    vm.component(<span class="hljs-string">&quot;sky&quot;</span>,&#123;</span><br><span class="handlebars"><span class="xml">        template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>sky<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br>    &#125;);<br><span class="javascript">    <span class="hljs-comment">// 挂载一定要放到component后面</span></span><br><span class="javascript">    vm.mount(<span class="hljs-string">&quot;.test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="组件的其他写入方式"><a href="#组件的其他写入方式" class="headerlink" title="组件的其他写入方式"></a>组件的其他写入方式</h6><p>任何标签配合v-is属性，其属性内容为字符串形式，如果等于组件名，则会输出组件内容</p>
<p>该输出组件的方式可以有效的规避掉HTML嵌套的问题</p>
<p>该输出组件元素上的属性也会叠加到组件输出的最外层元素上</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-is</span>=<span class="hljs-string">&#x27;&quot;tan&quot;&#x27;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aaa</span> <span class="hljs-attr">v-is</span>=<span class="hljs-string">&quot;&#x27;tan&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aaa</span>&gt;</span><br><br>p标签里不能放div，可以通过放入span标签，会自动转为div标签<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-is</span>=<span class="hljs-string">&#x27;&quot;tan&quot;&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h5 id="组件进阶"><a href="#组件进阶" class="headerlink" title="组件进阶"></a>组件进阶</h5><h6 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h6><p>使用components属性，属性后面的key为组件名称，对应的为组件数据</p>
<p>局部组件可以无限的套用局部组件，数据传递使用props和emit方式</p>
<p>组件名称可以用“-”号，也可以使用驼峰命名法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tan</span> <span class="hljs-attr">:text</span>=<span class="hljs-string">&#x27;texttan&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tan</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bo</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bo</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                texttan:<span class="hljs-string">&#x27;tan&#x27;</span></span><br>            &#125;<br>        &#125;,<br><span class="javascript">        <span class="hljs-string">&quot;components&quot;</span>:&#123;</span><br><span class="javascript">            <span class="hljs-string">&#x27;tan&#x27;</span>:&#123;</span><br><span class="javascript">                props:[<span class="hljs-string">&#x27;text&#x27;</span>],</span><br><span class="handlebars"><span class="xml">                template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">text</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br>            &#125;,<br><span class="javascript">            <span class="hljs-string">&#x27;bo&#x27;</span>:&#123;</span><br><span class="handlebars"><span class="xml">                template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>bo</span></span><br><span class="handlebars"><span class="xml">							<span class="hljs-tag">&lt;<span class="hljs-name">zhi</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">zhi</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">    					  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`,</span></span><br><span class="javascript">                <span class="hljs-string">&quot;components&quot;</span>:&#123;</span><br><span class="javascript">                    <span class="hljs-string">&#x27;zhi&#x27;</span>:&#123;</span><br><span class="handlebars"><span class="xml">                        template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>zhi<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br></code></pre></td></tr></table></figure>


<h6 id="props验证类型"><a href="#props验证类型" class="headerlink" title="props验证类型"></a>props验证类型</h6><p>props具有验证功能，需要使用json数据类型</p>
<p>props如果内容对应的数据类型不一样时，会有警告提示</p>
<p>type:数据类型、</p>
<p>required为true的话验证必填内容</p>
<p>default属性为默认值，也可以使用函数进行返回</p>
<p>validator属性为精准验证</p>
<p>null和undefined是无法使用数据类型进行验证的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">components:&#123;<br>	&quot;tan&quot;:&#123;<br>		props:&#123;<br>			text:String<br>			//text:[String,number,Boolean]	#这儿也可以放数组,只要符合其中一个就行<br>		&#125;,<br>		template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`<br>	&#125;<br>&#125;<br>或者<br>components:&#123;<br>	&quot;tan&quot;:&#123;<br>		props:&#123;<br>			text:&#123;<br>				type:Strig,		//判断类型<br>				default:&#x27;abc&#x27;,	//设置默认值，可以放函数<br>				required:true	//验证有没有数据，true为必须有数据<br>			&#125;<br>		&#125;,<br>		template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="属性继承"><a href="#属性继承" class="headerlink" title="属性继承"></a>属性继承</h6><p>组件元素会自动默认传递属性和事件给予模块最外层元素</p>
<p>组件中的inheritAttrs属性如果为false则会阻止传递属性或事件</p>
<p>组件中模板如果有一堆平级元素，那么属性与事件不会传递，并且有警告提示</p>
<p>在模板中使用v-bind=”$attrs”方式，让模板元素强制继承属性与事件</p>
<figure class="highlight nim"><table><tr><td class="code"><pre><code class="hljs nim">&lt;tan class=<span class="hljs-string">&quot;abc&quot;</span>&gt;&lt;/tan&gt;<br><br>components:&#123;<br>	<span class="hljs-string">&quot;tan&quot;</span>:&#123;<br>		inherit:<span class="hljs-literal">false</span>,		//不继承标签上的属性<br>		<span class="hljs-keyword">template</span>:`&lt;<span class="hljs-keyword">div</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;`<br>	&#125;<br>&#125;<br><br>components:&#123;<br>	<span class="hljs-string">&quot;tan&quot;</span>:&#123;<br>		//添加v-<span class="hljs-keyword">bind</span>=<span class="hljs-string">&quot;$attrs&quot;</span>后就可以继承属性了<br>		<span class="hljs-keyword">template</span>:`&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">bind</span>=<span class="hljs-string">&quot;$attrs&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>					&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">bind</span>=<span class="hljs-string">&quot;$attrs&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;`<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="emit验证"><a href="#emit验证" class="headerlink" title="emit验证"></a>emit验证</h6><p>emit也是可以验证的，使用emits属性来进行操作</p>
<p>如果使用emit，尽量把自定义内容放在emits后面的数组中</p>
<p>组件中的emits可以使用JSON数据来验证发射事件，以事件名称作为key即可</p>
<p>emits属性验证对应的验证函数返回true则验证通过</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tan</span> <span class="hljs-attr">:text</span>=<span class="hljs-string">&#x27;texttan&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;abc&#x27;</span> @<span class="hljs-attr">abc</span>=<span class="hljs-string">&#x27;go&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tan</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br>        methods:&#123;<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">go</span>(<span class="hljs-params"></span>)</span>&#123;</span><br>                alert(1)<br>            &#125;<br>        &#125;,<br>        components:&#123;<br><span class="javascript">            <span class="hljs-string">&quot;tan&quot;</span>:&#123;</span><br><span class="javascript">                <span class="hljs-comment">// emits:[&#x27;abc&#x27;],</span></span><br>                emits:&#123;<br><span class="javascript">                    abc:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;</span><br>                        if(num1==1&amp;&amp;num2==2)&#123;<br><span class="javascript">                            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br>                        &#125;<br><span class="javascript">                        <span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br>                        &#125;<br>                    &#125;<br>                &#125;,<br>                template:<br>               		`<br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;$emit(&quot;abc&quot;,1,2)&#x27;</span>&gt;</span></span></span><br>                    	点击<br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br>                    `<br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="v-model传参"><a href="#v-model传参" class="headerlink" title="v-model传参"></a>v-model传参</h6><p>可以使用v-model传参的方式进行数据交互</p>
<p>组件上可以使用v-model:参数=变量的方式进行数据交互，组件需要接收参数</p>
<p>组件里可以使用$emit方式进行数据通信，需要使用update：参数名称 的方式进行数据传递</p>
<p>一个组件上可以放任意多的v-model分发到组件内的元素上</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>		这个是message:&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>		这个是name:&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">tan</span> <span class="hljs-attr">v-model:abc</span>=<span class="hljs-string">&#x27;message&#x27;</span> <span class="hljs-attr">v-model:def</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tan</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>	Vue.createApp(&#123;<br><span class="javascript">		<span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">			<span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">				message:<span class="hljs-string">&#x27;123&#x27;</span>,</span><br><span class="javascript">				name:<span class="hljs-string">&#x27;234&#x27;</span></span><br>			&#125;<br>		&#125;,<br>		components:&#123;<br><span class="javascript">			<span class="hljs-string">&quot;tan&quot;</span>:&#123;</span><br><span class="javascript">				<span class="hljs-string">&quot;props&quot;</span>:[<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;def&#x27;</span>],</span><br>				template:<br>					`<br><span class="handlebars"><span class="xml">					<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&#x27;abc&#x27;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&#x27;$emit(&quot;update:abc&quot;,$event.target.value)&#x27;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">					<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&#x27;def&#x27;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&#x27;$emit(&quot;update:def&quot;,$event.target.value)&#x27;</span>/&gt;</span></span></span><br>					`<br>			&#125;<br>		&#125;<br><span class="javascript">	&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="slot插槽参数用法"><a href="#slot插槽参数用法" class="headerlink" title="slot插槽参数用法"></a>slot插槽参数用法</h6><p>可以使用template标签配合slot标签进行需求输出</p>
<p>template标签可以使用v-slot:定义名，slot标签通过name属性配合输出的定义名进行需求输出</p>
<p>slot标签不会输出template包起来的标签内容</p>
<p>template标签的v-slot：default值可以定义slot标签的默认输出内容</p>
<p>使用v-slot：default后，slot标签将不会显示公共元素内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">tan</span>&gt;</span><br>			插槽slot进阶<br>			<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>头部<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:content</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>尾部<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>设置成为默认值<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">tan</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>	Vue.createApp(&#123;<br>		components:&#123;<br><span class="javascript">			<span class="hljs-string">&#x27;tan&#x27;</span>:&#123;</span><br>				template:`<br><span class="handlebars"><span class="xml">					<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br>						123<br><span class="handlebars"><span class="xml">						<span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">						<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;header&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">						<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;content&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">						<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;footer&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">					<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br>				`<br>			&#125;<br>		&#125;<br><span class="javascript">	&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="slot插槽数据交互"><a href="#slot插槽数据交互" class="headerlink" title="slot插槽数据交互"></a>slot插槽数据交互</h6><p>组件标签内部是没法使用组件上面的数据的，通过slot来进行数据交互</p>
<p>slot标签通过:属性=数据方式传递数据，在组件标签内容中使用template进行接收</p>
<p>template标签上使用v-solt:作用域名=自定义属性名，这样自定义属性名上就会有slot的属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">tan</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;name in xxx.item&quot;</span>&gt;</span><br>					&#123;&#123;name&#125;&#125;<br>				<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">tan</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>	Vue.createApp(&#123;<br>		components:&#123;<br><span class="javascript">			<span class="hljs-string">&#x27;tan&#x27;</span>:&#123;</span><br><span class="javascript">				<span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">					<span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">						<span class="hljs-string">&quot;arr&quot;</span>:[<span class="hljs-string">&quot;升职&quot;</span>,<span class="hljs-string">&quot;加薪&quot;</span>,<span class="hljs-string">&quot;快乐&quot;</span>]</span><br>					&#125;<br>				&#125;,<br>				template:`<br><span class="handlebars"><span class="xml">					<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">						<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;name in arr&quot;</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">							</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span></span><br><span class="handlebars"><span class="xml">						<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">						<span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:item</span>=<span class="hljs-string">&#x27;arr&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">					<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br>				`<br>			&#125;<br>		&#125;<br><span class="javascript">	&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="Es6解构赋值与结构插槽prop"><a href="#Es6解构赋值与结构插槽prop" class="headerlink" title="Es6解构赋值与结构插槽prop"></a>Es6解构赋值与结构插槽prop</h6><p>数组赋值</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">	<span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];</span><br><span class="javascript">	<span class="hljs-keyword">var</span> [a,b,c]=arr;</span><br><span class="javascript">	<span class="hljs-built_in">console</span>.log(a,b,c);		<span class="hljs-comment">//1,2,3</span></span><br>	<br><span class="javascript">	<span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];</span><br><span class="javascript">	<span class="hljs-keyword">var</span> [a,,c]=arr;</span><br><span class="javascript">	<span class="hljs-built_in">console</span>.log(a,c);		<span class="hljs-comment">//1,3</span></span><br>	<br><span class="javascript">	<span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];</span><br><span class="javascript">	<span class="hljs-keyword">var</span> [a,...tan]=arr;</span><br><span class="javascript">	<span class="hljs-built_in">console</span>.log(a,tan);		<span class="hljs-comment">//1,[2,3]</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>json赋值</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">var</span> <span class="hljs-comment">&#123;a,b&#125;</span>=<span class="hljs-comment">&#123;a:10,b:20&#125;</span>	<span class="hljs-comment">//JSON格式key要一样,此例变量必须为&#123;a,b&#125;</span><br>console.log(a,b);	<span class="hljs-comment">//10,20</span><br><br><span class="hljs-keyword">var</span> <span class="hljs-comment">&#123;a,b,...tan&#125;</span>=<span class="hljs-comment">&#123;a:10,b:20,c:30,d:40&#125;</span>;<br>console.log(a,b,tan);		<span class="hljs-comment">//10,20,[c:30,d:40]</span><br><br><span class="hljs-comment">//定义默认值,当JSON值为undefined时取值为默认值</span><br><span class="hljs-keyword">var</span> <span class="hljs-comment">&#123;a=2,b=4,c=6,d=8&#125;</span>=<span class="hljs-comment">&#123;a:10,b:20,d:undefined&#125;</span>;<br>console.log(a,b,c,d);		<span class="hljs-comment">//10,20,6,8</span><br><br><span class="hljs-comment">//重命名</span><br><span class="hljs-keyword">var</span> <span class="hljs-comment">&#123;a:c,b&#125;</span>=<span class="hljs-comment">&#123;a:10,b:20&#125;</span>;<br>console.log(a)		<span class="hljs-comment">//错误</span><br>console.log(c)		<span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure>


<p>slot数据交互里面的内容替换成下面内容，应用了es6的解构赋值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tan</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>=<span class="hljs-string">&quot;&#123;item&#125;&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;name in item&quot;</span>&gt;</span><br>			&#123;&#123;name&#125;&#125;<br>		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tan</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="动态插槽与插槽缩写"><a href="#动态插槽与插槽缩写" class="headerlink" title="动态插槽与插槽缩写"></a>动态插槽与插槽缩写</h6><p>插槽动态形式v-slot:[变量]</p>
<p>插槽缩写#，#可以代替v-slot:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">//下面两种写法是相等的--缩写<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>//加上方括号后通过data数据修改变量，从而实现动态<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:</span>[<span class="hljs-attr">abc</span>]&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #[<span class="hljs-attr">abc</span>]&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>data()&#123;<br>	return&#123;<br>		abc:&#x27;default&#x27;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h5 id="refs的用法"><a href="#refs的用法" class="headerlink" title="refs的用法"></a>refs的用法</h5><p>任何标签都可以使用ref属性赋予一个自定义值</p>
<p>可以通过内置的$refs来获取定义的ref的所有的内容元素</p>
<p>如果给予组件ref，那么$refs可以直接访问或修改组件内事件或数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bobo&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;go&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>	Vue.createApp(&#123;<br>		methods:&#123;<br><span class="javascript">			<span class="hljs-function"><span class="hljs-title">go</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">				<span class="hljs-built_in">this</span>.$refs.bobo.innerHTML=<span class="hljs-string">&#x27;ref修改成功&#x27;</span></span><br>			&#125;<br>		&#125;<br><span class="javascript">	&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h5 id="vue3-动画"><a href="#vue3-动画" class="headerlink" title="vue3-动画"></a>vue3-动画</h5><h6 id="transition标签"><a href="#transition标签" class="headerlink" title="transition标签"></a>transition标签</h6><p>使用transition标签来完成动画效果</p>
<p>transition标签需要配合name及需要动画元素的v-if来实现效果</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">v-enter-from:定义进入过渡的开始状态</span><br><span class="hljs-section">v-enter-active:定义进入过渡生效时的状态</span><br><span class="hljs-section">v-enter-to:定义进入过渡的结束状态</span><br><span class="hljs-section">v-leave-from:定义离开过渡的开始状态</span><br><span class="hljs-section">v-leave-active:定义离开过渡生效时的状态</span><br><span class="hljs-section">v-leave-to:定义离开过渡的结束状态</span><br><br>6个动画类，动画类之间不能使用其他东西，不然会失效<br></code></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br>	.abc&#123;<br><span class="css">		<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">		<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">		<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00CBFF</span>;</span><br>	&#125;<br>	.bobo-enter-from&#123;<br><span class="css">		<span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;</span><br>	&#125;<br>	.bobo-enter-active&#123;<br><span class="css">		<span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span> ease;</span><br>	&#125;<br><span class="css">	<span class="hljs-selector-class">.bobo-enter-to</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00FF7F</span>;&#125;</span><br>	<br>	.bobo-leave-from&#123;<br><span class="css">		<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br>	&#125;<br>	.bobo-leave-active&#123;<br><span class="css">		<span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span> ease;</span><br>	&#125;<br><span class="css">	<span class="hljs-selector-class">.bobo-leave-to</span>&#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00FF7F</span>;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;go&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bobo&quot;</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;abc&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>	Vue.createApp(&#123;<br><span class="javascript">		<span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">			<span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">				<span class="hljs-string">&quot;ok&quot;</span>:<span class="hljs-literal">true</span></span><br>			&#125;<br>		&#125;,<br>		methods:&#123;<br><span class="javascript">			<span class="hljs-function"><span class="hljs-title">go</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">				<span class="hljs-built_in">this</span>.ok = !<span class="hljs-built_in">this</span>.ok</span><br>			&#125;<br>		&#125;<br><span class="javascript">	&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="自定义class类名"><a href="#自定义class类名" class="headerlink" title="自定义class类名"></a>自定义class类名</h6><p>transition可以自定义class来实现动画</p>
<p>使用动画名字-class=‘自定义class名称’</p>
<p>自定义class动画会覆盖原有动画</p>
<p>duration可以设定动画持续时间</p>
<h6 id="transition生命周期"><a href="#transition生命周期" class="headerlink" title="transition生命周期"></a>transition生命周期</h6><p>进入：before-enter、enter、after-enter</p>
<p>离开：before-leave、leave、after-leave</p>
<p>所有生命周期函数的第一个参数代表的是动画元素</p>
<p>enter和leave生命周期第二个参数要调用后才会执行下一个生命周期函数</p>
<p>transition标签上的：css属性如果为false则会跳过动画</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br>	.abc&#123;<br><span class="css">		<span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">		<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">		<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00CBFF</span>;</span><br>	&#125;<br>	.aaa&#123;<br><span class="css">		<span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;</span><br>	&#125;<br>	.bbb&#123;<br><span class="css">		<span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span> ease;</span><br>	&#125;<br><span class="css">	<span class="hljs-selector-class">.ccc</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00FF7F</span>;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;go&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bobo&quot;</span> </span><br><span class="hljs-tag">		<span class="hljs-attr">enter-from-class</span>=<span class="hljs-string">&#x27;aaa&#x27;</span> <span class="hljs-attr">enter-active-class</span>=<span class="hljs-string">&quot;bbb&quot;</span> <span class="hljs-attr">enter-to-class</span>=<span class="hljs-string">&quot;ccc&quot;</span></span><br><span class="hljs-tag">		<span class="hljs-attr">leave-from-class</span>=<span class="hljs-string">&#x27;ccc&#x27;</span> <span class="hljs-attr">leave-active-class</span>=<span class="hljs-string">&quot;bbb&quot;</span> <span class="hljs-attr">leave-to-class</span>=<span class="hljs-string">&quot;aaa&quot;</span></span><br><span class="hljs-tag">        //<span class="hljs-attr">:duration</span>=<span class="hljs-string">&quot;2000&quot;</span>	这个设置整体<span class="hljs-attr">2000</span>毫秒后结束</span><br><span class="hljs-tag">        <span class="hljs-attr">:duration</span>=<span class="hljs-string">&quot;&#123;enter:2000,leave:500&#125;&quot;</span>  分开设置结束时间</span><br><span class="hljs-tag">          </span><br><span class="hljs-tag">         生命周期</span><br><span class="hljs-tag">        @<span class="hljs-attr">before-enter</span>=<span class="hljs-string">&quot;beforeEnter&quot;</span></span><br><span class="hljs-tag">		@<span class="hljs-attr">enter</span>=<span class="hljs-string">&quot;Enter&quot;</span></span><br><span class="hljs-tag">		@<span class="hljs-attr">after-enter</span>=<span class="hljs-string">&quot;afterEnter&quot;</span></span><br><span class="hljs-tag">		@<span class="hljs-attr">before-leave</span>=<span class="hljs-string">&quot;beforeLeave&quot;</span></span><br><span class="hljs-tag">		@<span class="hljs-attr">leave</span>=<span class="hljs-string">&quot;Leave&quot;</span></span><br><span class="hljs-tag">		@<span class="hljs-attr">after-leave</span>=<span class="hljs-string">&quot;afterLeave&quot;</span></span><br><span class="hljs-tag">         &gt;</span><br>			<br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;abc&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <br>		<span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>	Vue.createApp(&#123;<br><span class="javascript">		<span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">			<span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">				<span class="hljs-string">&quot;ok&quot;</span>:<span class="hljs-literal">true</span></span><br>			&#125;<br>		&#125;,<br>		methods:&#123;<br><span class="javascript">			<span class="hljs-function"><span class="hljs-title">go</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">				<span class="hljs-built_in">this</span>.ok = !<span class="hljs-built_in">this</span>.ok</span><br>			&#125;,<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">beforeEnter</span>(<span class="hljs-params">el</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;进入之前&quot;</span>,el)</span><br>            &#125;,<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">Enter</span>(<span class="hljs-params">el,done</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;进入之中&quot;</span>,el)</span><br>                done()<br>            &#125;,<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">afterEnter</span>(<span class="hljs-params">el</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;进入之后&quot;</span>,el)</span><br>            &#125;,<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">beforeLeave</span>(<span class="hljs-params">el</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;离开之前&quot;</span>,el)</span><br>            &#125;,<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">Leave</span>(<span class="hljs-params">el,done</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;离开之中&quot;</span>,el)</span><br>                done()<br>            &#125;,<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">afterLeave</span>(<span class="hljs-params">el</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;离开之后&quot;</span>,el)</span><br>            &#125;<br>            <br>		&#125;<br><span class="javascript">	&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="transition初始渲染过渡"><a href="#transition初始渲染过渡" class="headerlink" title="transition初始渲染过渡"></a>transition初始渲染过渡</h6><p>使用appear属性让动画首次过渡</p>
<p>appear-from-class首次过渡进入之前</p>
<p>appear-active-class首次过渡动画中</p>
<p>appear-to-class首次过渡结束时的状态</p>
<p>appear首次过渡只会执行一次，不会重复调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&lt;transition<br>appear<br>appear-from-class=&quot;aaa&quot;<br>appear-active-class=&quot;bbb&quot;<br>appear-to-class=&quot;ccc&quot;<br>&gt;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="多个元素的过渡"><a href="#多个元素的过渡" class="headerlink" title="多个元素的过渡"></a>多个元素的过渡</h6><p>transition标签下是不允许单独出现多个动画元素，必须有逻辑关系</p>
<p>如果有多个动画标签并且没有逻辑关系，便不会显示，并且有警告框</p>
<p>transition标签使用动画，尽量把原始类放到最上方，不然会有小问题</p>
<h6 id="过渡模式"><a href="#过渡模式" class="headerlink" title="过渡模式"></a>过渡模式</h6><p>属性：mode</p>
<p>默认：mode:”in-out”;</p>
<p>可以使用mode:”out-in”,当前动画元素执行完毕后，才会执行下一个元素</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-attribute">transition</span><br>mode:<span class="hljs-string">&quot;out-in&quot;</span><br>&gt;<br>&lt;/<span class="hljs-attribute">transition</span>&gt;<br></code></pre></td></tr></table></figure>


<h6 id="多组件之间的过渡"><a href="#多组件之间的过渡" class="headerlink" title="多组件之间的过渡"></a>多组件之间的过渡</h6><p>组件如果过渡，需要只有一个单父级，不然不会产生过渡，并且有警告框</p>
<p>如果只有一个单父级，里面可以放入任意元素，可以过渡</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;clk&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tan&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a&quot;</span>  <span class="hljs-attr">checked</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>组件A<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;clk&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bo&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;b&quot;</span>  /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span>组件B<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>		&lt;transition<br>		enter-from-class=&#x27;aaa&#x27;<br>		enter-active-class=&#x27;bbb&#x27;<br>		leave-to-class=&#x27;aaa&#x27;<br>		leave-active-class=&#x27;ccc&#x27;<br>		&gt;<br>			<span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;clk&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br>		<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>	Vue.createApp(&#123;<br><span class="javascript">		<span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">			<span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">				<span class="hljs-string">&quot;clk&quot;</span>:<span class="hljs-string">&#x27;tan&#x27;</span></span><br>			&#125;<br>		&#125;,<br>		components:&#123;<br><span class="javascript">			<span class="hljs-string">&#x27;tan&#x27;</span>:&#123;</span><br>				template:`<br><span class="handlebars"><span class="xml">					<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>组件A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br>				`<br>			&#125;,<br><span class="javascript">			<span class="hljs-string">&#x27;bo&#x27;</span>:&#123;</span><br>				template:`<br><span class="handlebars"><span class="xml">					<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;def&quot;</span>&gt;</span>组件B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br>				`<br>			&#125;<br>		&#125;<br><span class="javascript">	&#125;).mount(<span class="hljs-string">&quot;.test&quot;</span>)</span><br></code></pre></td></tr></table></figure>


<h6 id="tansition-group列表的进入与离开"><a href="#tansition-group列表的进入与离开" class="headerlink" title="tansition-group列表的进入与离开"></a>tansition-group列表的进入与离开</h6><p>标签内的元素必须包含逻辑判断或：key，不然会有警告窗</p>
<p>这个标签的生命周期和transition标签是一样的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;add&quot;</span> /&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;remove&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;remove&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>		&lt;transition-group<br>		enter-from-class=&#x27;enterFrom&#x27;<br>		enter-active-class=&#x27;enterActive&#x27;<br>		leave-to-class=&#x27;leaveFrom&#x27;<br>		leave-active-class=&#x27;leaveActive&#x27;<br>		&gt;<br>							<span class="hljs-comment">&lt;!-- key不要用index，元素出现的位置有点小问题 --&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;abc&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br><br>				&#123;&#123;item&#125;&#125;<br>			<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span><br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>	Vue.createApp(&#123;<br><span class="javascript">		<span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">			<span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">				<span class="hljs-string">&quot;list&quot;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],</span><br><span class="javascript">				<span class="hljs-string">&quot;num&quot;</span>:<span class="hljs-number">6</span></span><br>			&#125;<br>		&#125;,<br>		methods:&#123;<br><span class="javascript">			<span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">				<span class="hljs-built_in">this</span>.list.splice(<span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random()*<span class="hljs-built_in">this</span>.list.length),<span class="hljs-number">0</span>,<span class="hljs-built_in">this</span>.num)</span><br><span class="javascript">				<span class="hljs-built_in">this</span>.num++</span><br>			&#125;,<br><span class="javascript">			<span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">				<span class="hljs-built_in">this</span>.list.splice(<span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random()*<span class="hljs-built_in">this</span>.list.length),<span class="hljs-number">1</span>)</span><br>			&#125;<br>			<br>		&#125;<br><span class="javascript">	&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br></code></pre></td></tr></table></figure>


<h6 id="tansition-group列表的移动过渡"><a href="#tansition-group列表的移动过渡" class="headerlink" title="tansition-group列表的移动过渡"></a>tansition-group列表的移动过渡</h6><p>设定列表元素的位置过渡，例插入元素时其他元素被挤开，位置改变的过渡</p>
<p>在transition-group标签上设定move-class或者name-move的class来设定过渡</p>
<p>只可以设定列表的位置的过渡，其他样式不支持过渡</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs vue">&lt;transition-group<br>	move-class&#x3D;&quot;move&quot;<br>&gt;<br>    		&lt;!-- key不要用index，元素出现的位置有点小问题 --&gt;<br>	&lt;div class&#x3D;&quot;abc&quot; v-for&#x3D;&quot;item in list&quot; :key&#x3D;&quot;item&quot;&gt;<br>		&#123;&#123;item&#125;&#125;<br>	&lt;&#x2F;div&gt;<br>&lt;&#x2F;transition-group&gt;<br></code></pre></td></tr></table></figure>


<h5 id="animate（css库）"><a href="#animate（css库）" class="headerlink" title="animate（css库）"></a>animate（css库）</h5><h6 id="animate的基本使用"><a href="#animate的基本使用" class="headerlink" title="animate的基本使用"></a>animate的基本使用</h6><p>引入animate.min.css文件</p>
<p>在元素上写入相应的class名称</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/animate.min.css&quot;</span>/&gt;</span><br><br><br>//animated一定要写上<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;animated lightSpeedIn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tan&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="animate在vue上的应用"><a href="#animate在vue上的应用" class="headerlink" title="animate在vue上的应用"></a>animate在vue上的应用</h6><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span> </span><br><span class="hljs-tag">	<span class="hljs-attr">enter-active-class</span>=<span class="hljs-string">&quot;animated lightSpeedIn&quot;</span></span><br><span class="hljs-tag">	<span class="hljs-attr">leave-active-class</span>=<span class="hljs-string">&quot;animated lightSpeedOut&quot;</span></span><br><span class="hljs-tag">&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;content in list&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sky&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>		&#123;&#123;content&#125;&#125;<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h5 id="Tweenmax库-js库"><a href="#Tweenmax库-js库" class="headerlink" title="Tweenmax库(js库)"></a>Tweenmax库(js库)</h5><h6 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h6><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//从什么样子变成原始状态</span><br><span class="hljs-comment">//TweenLite可以替换成Tweenmax</span><br><span class="hljs-selector-tag">TweenLite</span><span class="hljs-selector-class">.from</span>(<span class="hljs-string">&quot;#tan&quot;</span>,<span class="hljs-number">3</span>,&#123;<br>	<span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>,<br>	<span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>,<br>	<span class="hljs-attribute">x</span>:<span class="hljs-string">&quot;200&quot;</span>,		<span class="hljs-comment">//相当于translateX平移</span><br>	<span class="hljs-attribute">rotation</span>:<span class="hljs-string">&quot;90deg&quot;</span>	<span class="hljs-comment">//旋转，类似rotate，但是这儿不能用rotate</span><br>&#125;);<br><br><span class="hljs-comment">//从原始状态变成什么样子</span><br><span class="hljs-selector-tag">TweenLite</span><span class="hljs-selector-class">.to</span>(<span class="hljs-string">&quot;#tan&quot;</span>,<span class="hljs-number">3</span>,&#123;·····&#125;);<br><br><span class="hljs-comment">//自己设定一个最开始的状态，在设定一个最终状态</span><br><span class="hljs-selector-tag">TweenLite</span><span class="hljs-selector-class">.fromTo</span>(<span class="hljs-string">&quot;#tan&quot;</span>,<span class="hljs-number">3</span>,&#123;开始状态&#125;,&#123;最终状态&#125;);<br></code></pre></td></tr></table></figure>
<h6 id="深入使用"><a href="#深入使用" class="headerlink" title="深入使用"></a>深入使用</h6><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//控制多个元素</span><br><span class="hljs-comment">//第一个参数:选择元素，第二个：总体变化时间，第三个：变化内容，第四个：单个元素变化时间</span><br><span class="hljs-selector-tag">TweenMax</span><span class="hljs-selector-class">.staggerTo</span>(<span class="hljs-string">&quot;.tan&quot;</span>,<span class="hljs-number">3</span>,&#123;<br>	<span class="hljs-attribute">width</span>:<span class="hljs-number">50</span>,<br>	<span class="hljs-attribute">height</span>:<span class="hljs-number">50</span>,<br>	<span class="hljs-attribute">backgroundColor</span>:<span class="hljs-string">&#x27;pink&#x27;</span>,<br>	<span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span><br>&#125;,<span class="hljs-selector-tag">1</span>);<br><br><span class="hljs-selector-tag">TweenMax</span><span class="hljs-selector-class">.staggerFrom</span>(<span class="hljs-string">&quot;.tan&quot;</span>,<span class="hljs-number">3</span>,&#123;...&#125;,<span class="hljs-number">0.5</span>);<br><span class="hljs-selector-tag">TweenMax</span><span class="hljs-selector-class">.staggerFromTo</span>(<span class="hljs-string">&quot;.tan&quot;</span>,<span class="hljs-number">3</span>,&#123;...&#125;,<span class="hljs-number">0.5</span>);<br><br><span class="hljs-comment">//cycle属性可以让元素循环设定参数</span><br><span class="hljs-selector-tag">TweenMax</span><span class="hljs-selector-class">.staggerTo</span>(<span class="hljs-string">&quot;.tan&quot;</span>,<span class="hljs-number">3</span>,&#123;<br>	<span class="hljs-attribute">width</span>:<span class="hljs-number">50</span>,<br>	<span class="hljs-attribute">height</span>:<span class="hljs-number">50</span>,<br>	<span class="hljs-attribute">cycle</span>:&#123;<br>		<span class="hljs-attribute">backgroundColor</span>:[<span class="hljs-string">&#x27;pink&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>],<br>		<span class="hljs-attribute">y</span>:function(index)&#123;<br>			return index*<span class="hljs-number">10</span><br>		&#125;<br>	&#125;<br>&#125;,<span class="hljs-number">0.1</span>);<br></code></pre></td></tr></table></figure>
<h6 id="tweenmax在vue中的使用"><a href="#tweenmax在vue中的使用" class="headerlink" title="tweenmax在vue中的使用"></a>tweenmax在vue中的使用</h6><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">methods:&#123;<br>	before<span class="hljs-constructor">Enter(<span class="hljs-params">el</span>)</span>&#123;<br>		<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TweenMax</span>.</span></span>from(el,<span class="hljs-number">1</span>,&#123;opacity:<span class="hljs-number">0</span>&#125;)<br>	&#125;,<br>	enter(el)&#123;<br>		<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TweenMax</span>.</span></span><span class="hljs-keyword">to</span>(el,<span class="hljs-number">1</span>,&#123;color:<span class="hljs-string">&quot;red&quot;</span>&#125;)<br>	&#125;,<br>	leave(el)&#123;<br>		<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TweenMax</span>.</span></span>from(el,<span class="hljs-number">1</span>,&#123;opacity:<span class="hljs-number">0</span>&#125;)<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h5 id="vue-cli4脚手架"><a href="#vue-cli4脚手架" class="headerlink" title="vue-cli4脚手架"></a>vue-cli4脚手架</h5><p>安装：先下载安装node.js(百度下载)（检验cmd中  node -v）</p>
<p>安装cnpm: 在cmd中输入  npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a>    （检验：cmd中 cnpm）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>安装cnpm<br>npm install -g cnpm --registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org<br><br><span class="hljs-regexp">//</span>安装cli<br>cnpm install @vue/cli -g<br><span class="hljs-regexp">//</span>安装完成后检验：vue --versiton<br><br><span class="hljs-regexp">//</span>创建项目<br>vue create 项目名<br><br><span class="hljs-regexp">//</span>进入项目文件<br>cd 项目名<br><br><span class="hljs-regexp">//</span>运行项目<br>npm run serve<br><br><span class="hljs-regexp">//</span>复制给出的地址用浏览器打开<br></code></pre></td></tr></table></figure>
<p>完整安装步骤：csdn博客(借用一下)  <a href="https://blog.csdn.net/diwang_718/article/details/102912743">https://blog.csdn.net/diwang_718/article/details/102912743</a></p>
<h6 id="vue-cli4文件关系"><a href="#vue-cli4文件关系" class="headerlink" title="vue-cli4文件关系"></a>vue-cli4文件关系</h6><p>package-lock.json    node_modules的依赖项</p>
<p>package.json    当前项目开发状态信息</p>
<p>public    存放index页面</p>
<p>style上面 不 加上scoped属性，则是全局的，加上则是局部的</p>
<h6 id="vue-cli4模块化开发"><a href="#vue-cli4模块化开发" class="headerlink" title="vue-cli4模块化开发"></a>vue-cli4模块化开发</h6><p>导出：//export</p>
<p>导入：//import</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">导出(此数据在tan.vue文件中)<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">a</span>=4<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">b</span>=5<br><span class="hljs-builtin-name">export</span> default&#123;<br>	c:6;<br>	d:7;<br>&#125;<br><br>导入（只有export时）<br>import &#123;a,b&#125; <span class="hljs-keyword">from</span> tan.vue<br><br>导入（只有<span class="hljs-builtin-name">export</span> default时）<br>import pop(名字随便起) <span class="hljs-keyword">from</span> tan.vue<br><br>导入（两者都有时）（default导入在前）<br>import pop,&#123;a,b&#125; <span class="hljs-keyword">from</span> tan.vue<br></code></pre></td></tr></table></figure>


<h5 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h5><h6 id="let声明"><a href="#let声明" class="headerlink" title="let声明"></a>let声明</h6><p>只允许声明一次，声明后可以修改</p>
<p>支持块级作用域，不会变量提升</p>
<p>例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tan&quot;</span>&gt;</span><br>		<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript">	allbtn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript">	<span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;allbtn.length;i++)&#123;</span><br><span class="javascript">		allbtn[i].onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br>			alert(i)<br>		&#125;<br>	&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="const"><a href="#const" class="headerlink" title="const"></a>const</h6><p>const必须有初始化的值，不能被修改覆盖</p>
<p>支持块级作用域，不能变量提升</p>
<p>如果const为对象时，其属性可以被修改，但本身不能被修改</p>
<h6 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h6><p>内部没有默认的arguments</p>
<p>没有变量提升，内部this指向当前作用域</p>
<p>不可以被new</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">tbz = <span class="hljs-function"><span class="hljs-params">sky</span> =&gt;</span> <span class="hljs-number">10</span><br>相当于<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tbz</span>(<span class="hljs-params">sky</span>)</span>&#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">10</span><br>&#125;<br><br>（）内可以放入多个参数<br>tbz = <span class="hljs-function">(<span class="hljs-params">x,y,z</span>) =&gt;</span> x+y+z<br>相当于<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tbz</span>(<span class="hljs-params">x,y,z</span>)</span>&#123;<br>	<span class="hljs-keyword">return</span> x+y+z<br>&#125;<br><br>还可以这样写&#123;&#125;可以写入执行语句<br>tbz = <span class="hljs-function">(<span class="hljs-params">x,y,z</span>) =&gt;</span>&#123;alert(<span class="hljs-number">1</span>);<span class="hljs-keyword">return</span> x+y+z&#125;<br><br>匿名箭头函数<br>( <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;alert(<span class="hljs-number">1</span>)&#125; )()<br></code></pre></td></tr></table></figure>


<h5 id="setup方法"><a href="#setup方法" class="headerlink" title="setup方法"></a>setup方法</h5><h6 id="setup方法的基本使用"><a href="#setup方法的基本使用" class="headerlink" title="setup方法的基本使用"></a>setup方法的基本使用</h6><p>在setup中，我们可以声明内容和输出内容</p>
<p>setup里面的值不要和data与methods或其他的输出值重叠</p>
<p>setup里面的事件是没法操作data的内容的，但是methods里面的事件可以操作setup定义的值</p>
<p>setup里面的内容改变后，不会重新渲染页面，如果页面渲染时，被改变的值得内容会被渲染上</p>
<p>setup里面的内容如果使用ref方法(需要引入)包装，那么内容改变时就会重新渲染页面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-keyword">var</span> a = ref(<span class="hljs-number">20</span>);<br>	<span class="hljs-keyword">var</span> add = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-comment">//this.a++;</span><br>		a.value++;	使用value更靠谱一些<br>	&#125;<br>	<span class="hljs-keyword">return</span> &#123;a,add&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="setup-props"><a href="#setup-props" class="headerlink" title="setup-props"></a>setup-props</h6><p>在setup参数中，第一个参数代表的是父级传入的props</p>
<p>ref的内容的修改尽量使用其变量的value属性</p>
<p>在vue中watchEffect监听会有初始化和全局化，watch监听更准确</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript">&lt;tan :title=<span class="hljs-string">&quot;title&quot;</span>&gt;&lt;/tan&gt;<br>props[<span class="hljs-string">&#x27;title&#x27;</span>]<br>或者<br>props&#123;<br>	title:<span class="hljs-built_in">String</span><br>&#125;<br><br><span class="hljs-keyword">import</span> &#123;watchEffect,watch&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br>setup(props)&#123;<br>	watchEffect(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(props.title)<br>	&#125;)<br>	watch(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>		<span class="hljs-keyword">return</span> props.title<br>	&#125;,<span class="hljs-function"><span class="hljs-params">(newValue)</span>=&gt;</span>&#123;<br>		<span class="hljs-built_in">console</span>.log(neValue)<br>	&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="setup-context"><a href="#setup-context" class="headerlink" title="setup-context"></a>setup-context</h6><p>在setup中，第二个参数为上下文对象，可以使用解构赋值</p>
<p>上下文对象的attrs为可以显示传递过来的属性，但是不可以和props属性共存</p>
<p>上下文对象的emit可以给父级发送数据，使用方式和普通emit统一</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params">props,context</span>)</span>&#123;<br>	<span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">var</span> &#123;attrs,emit&#125; =context;<br>	<span class="hljs-keyword">var</span> abc = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>		emit(<span class="hljs-string">&quot;zhangsan&quot;</span>,a) <span class="hljs-comment">//a为传递的数据</span><br>	&#125;<br>&#125;<br>或者<br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params">props,context</span>)</span>&#123;<br>	<span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>	<span class="hljs-keyword">var</span> abc = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>		context.emit(<span class="hljs-string">&quot;zhangsan&quot;</span>,a) <span class="hljs-comment">//a为传递的数据</span><br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="setup-context-solts"><a href="#setup-context-solts" class="headerlink" title="setup-context-solts"></a>setup-context-solts</h6><p>slots属性需要以函数的形式去查看插槽内容，可以通过赋值去修改    插槽内容</p>
<p>如果slot传值的话，使用solts会报错，就算使用定时器也会报错</p>
<p>slot内容发生修改，slot永远为最新值</p>
<h5 id="toRef的基本使用"><a href="#toRef的基本使用" class="headerlink" title="toRef的基本使用"></a>toRef的基本使用</h5><p>可以使用vue3的toRef方法来控制对象的某个属性</p>
<p>toRef方法进行更改原有内容后，原对象会发生改变</p>
<p>ref更改内容后，原对象不会发生改变</p>
<p>toRef方法不是响应式的，发生改变后，页面不会发生渲染</p>
<p>toRef如果放入非对象内容会报错或者不显示内容</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> arr=[<span class="hljs-string">&#x27;mmm&#x27;</span>,<span class="hljs-string">&#x27;kkk&#x27;</span>]<br><span class="hljs-keyword">var</span> sky = toRef(arr,<span class="hljs-string">&#x27;0&#x27;</span>);<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端(网易学习)</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>网易-html5+css3</title>
    <url>/2021/12/15/%E7%BD%91%E6%98%93html5+css3/</url>
    <content><![CDATA[<h5 id="css3"><a href="#css3" class="headerlink" title="css3"></a>css3</h5><h6 id="圆角样式"><a href="#圆角样式" class="headerlink" title="圆角样式"></a>圆角样式</h6><p>border-radius：10px 10px 10px 10px;</p>
<p>border-radius：50%;    圆 椭圆</p>
<p>10px是每个圆角的半径</p>
<p>1个值：四个角都是这个值</p>
<p>两个值：第一个值(左上右下)，第二个值(右上左下)</p>
<p>三个值：第一个值(左上)，第二个值(右上左下)，第二个值(右下)</p>
<p>四个值：左上，右上，右下，左下</p>
<p>单独写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-top-left-radius</span>:<span class="hljs-number">20px</span>;		左上<br><span class="hljs-attribute">border-top-right-radius</span>:<span class="hljs-number">20px</span>;		右上<br><span class="hljs-attribute">border-bottom-left-radius</span>:<span class="hljs-number">20px</span>;		左下<br><span class="hljs-attribute">border-bottom-right-radius</span>:<span class="hljs-number">20px</span>;	右下<br></code></pre></td></tr></table></figure>


<h6 id="阴影样式"><a href="#阴影样式" class="headerlink" title="阴影样式"></a>阴影样式</h6><p>box-shadow</p>
<p>可以设定无限个内外阴影</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">box-shadow:10px </span><span class="hljs-number">10</span>px <span class="hljs-number">10</span>px <span class="hljs-number">10</span>px    <span class="hljs-keyword">black,inset </span><span class="hljs-number">0</span>px <span class="hljs-number">10</span>px <span class="hljs-number">10</span>px <span class="hljs-number">10</span>px red<br>	 外阴影 x偏移,y偏移,模糊度,拓展大小,颜色  内阴影 后面参数与前面一样<br></code></pre></td></tr></table></figure>


<h6 id="滚动动画"><a href="#滚动动画" class="headerlink" title="滚动动画"></a>滚动动画</h6><p>添加下面这一段代码就可以有滚动效果了</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">html</span>&#123;<br>	scroll-behavior: smooth; <br>&#125;<br></code></pre></td></tr></table></figure>


<h6 id="过渡样式"><a href="#过渡样式" class="headerlink" title="过渡样式"></a>过渡样式</h6><p>transition</p>
<p>必须要有事件触发才会有效果</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition</span>:过渡名称，过渡时间，过渡类型，延时时间<br>transition-property: all; 过渡属性的名称（all,<span class="hljs-attribute">width</span>,<span class="hljs-attribute">height</span>）<br><span class="hljs-attribute">transition-duration</span>:<span class="hljs-number">2s</span>;	过渡时间(单位s或者ms)<br><span class="hljs-attribute">transition-timing-function</span>:		过渡类型（ease,linear,ease-in,ease-out,ease-in-out,cubic-bezier）<br>transition-delay:<span class="hljs-number">3s</span>;	定义过渡延时时间<br><br>ease,		linear,	ease-in,	ease-out,	ease-in-out，	  cubic-bezier<br>先加速后减速，匀速，	    加速，		 减速，	  先加速后减速（增强）， 贝塞尔曲线<br></code></pre></td></tr></table></figure>


<h6 id="变形（transform）"><a href="#变形（transform）" class="headerlink" title="变形（transform）"></a>变形（transform）</h6><p>缩放（scale）</p>
<p>transform:scale(2);    宽度，高度都放大2倍</p>
<p>transform:scale(0.5,2);    宽度0.5倍，高度2倍</p>
<p>transform:scaleX(0.5);    宽度0.5倍</p>
<p>transform:scaleX(0.5) scaleY(2);    宽度0.5倍，高度2倍</p>
<p>平移（translate）</p>
<p>transform:translateX(200px)        沿X轴平移200px</p>
<p>transform:translateY(200px)        沿y轴平移200px</p>
<p>transform:translate(200px,100px)        沿y轴,X轴平移200px</p>
<p>transform:translate(200px)        给一个值只往右移，相当于translate(200px,0)</p>
<p>transform:translate(50%,10%)        百分比是对应相应的宽度和高度（宽度,高度）</p>
<p>旋转（rotate）</p>
<p>transform:rotate(45deg);    放入负数就是逆时针旋转</p>
<p>transform:rotateX(45deg);    沿X轴旋转（3D）</p>
<p>transform:rotateY(45deg);    沿Y轴旋转（3D）</p>
<p>倾斜扭曲（skew）</p>
<p>transform:skew(45deg);</p>
<p>中心点（transform-origin）</p>
<p>以这个点为中心旋转(3中设置中心的方法)</p>
<p>transform-origin: left top;    以左上点为中心旋转</p>
<p>transform-origin: 10%  -10%;</p>
<p>transform-origin: 10px 20px ;</p>
<p>景深（perspective）</p>
<p>transform:perspective(800px);</p>
<p>平移X轴(translateZ)</p>
<p>拉进元素与视角的距离</p>
<p>如果在元素内部第一层子元素使用translateZ那么该元素必须具备3D空间</p>
<p>3D空间：transform-style:preserve-3d;</p>
<p>变形样式顺序</p>
<p>样式执行顺序是从左到右，不一样的顺序有不一样的效果，景深效果建议在过渡前加上</p>
<h6 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h6><p>after（元素之后）</p>
<p>before（元素之前）</p>
<p>给予content样式才会显示</p>
<p>默认为行内样式显示</p>
<p>可以加position进行定位</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#tan</span>&#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background-color</span>: red;&#125;<br><span class="hljs-selector-id">#tan</span>:after&#123;content: <span class="hljs-string">&#x27;456&#x27;</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#009B00</span>;&#125;<br><span class="hljs-selector-id">#tan</span>:before&#123;content: <span class="hljs-string">&#x27;456&#x27;</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffff7f</span>;&#125;<br></code></pre></td></tr></table></figure>


<h6 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h6><p>相邻选择器（+）</p>
<p>找到指定元素同级别的下一个元素</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima">.<span class="hljs-built_in">tan</span>+<span class="hljs-built_in">li</span>&#123;&#125;	<span class="hljs-built_in">tan</span>后面的<span class="hljs-built_in">li</span>元素<br></code></pre></td></tr></table></figure>


<p>兄弟选择器（~）</p>
<p>选择同级别后面的所有元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.class</span>~<span class="hljs-selector-tag">li</span>&#123;&#125;		#选择class后面所有的<span class="hljs-selector-tag">li</span>元素<br><span class="hljs-selector-class">.class</span>~*&#123;&#125;		#选择class后面的所有元素<br></code></pre></td></tr></table></figure>


<p>指定选择器（nth-of-type()）</p>
<p>nth-of-type()自上而下选择</p>
<p>nth-last-of-type()自下而上选择</p>
<p>参数（数字，odd，even，3n+1)</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><code class="hljs elm"><span class="hljs-title">nth</span>-<span class="hljs-keyword">of</span>-<span class="hljs-keyword">type</span>(2)	#选择第二个元素（数字从1开始）<br><span class="hljs-title">nth</span>-<span class="hljs-keyword">of</span>-<span class="hljs-keyword">type</span>(odd)	#选择奇数位的元素<br><span class="hljs-title">nth</span>-<span class="hljs-keyword">of</span>-<span class="hljs-keyword">type</span>(even)	#选择偶数位的元素<br><span class="hljs-title">nth</span>-<span class="hljs-keyword">of</span>-<span class="hljs-keyword">type</span>(3n)		#选择3的倍数的元素<br><span class="hljs-title">nth</span>-<span class="hljs-keyword">of</span>-<span class="hljs-keyword">type</span>(3n+1)	#自定义，选择3的倍数的元素+一位的元素，也可以使用-号<br></code></pre></td></tr></table></figure>


<p>子元素指定选择器（nth-child()）</p>
<p>用法跟nth-of-type差不多</p>
<p>属性选择器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[name]</span>&#123;&#125;	#选择 属性名字 为name的元素<br>选择器<span class="hljs-selector-attr">[属性名字]</span>	例：<span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[jjj]</span>&#123;&#125;<br>选择器<span class="hljs-selector-attr">[属性名字=<span class="hljs-string">&#x27;属性值&#x27;</span>]</span>&#123;&#125;	#属性值与里面的属性值相等<br>选择器<span class="hljs-selector-attr">[属性名字~=<span class="hljs-string">&#x27;属性值&#x27;</span>]</span>&#123;&#125;	#属性值里面包含这个属性值<br></code></pre></td></tr></table></figure>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">[<span class="hljs-keyword">class</span> ^= <span class="hljs-string">&#x27;abc&#x27;</span>]&#123;&#125;	#选择首字母是abc的<span class="hljs-keyword">class</span><br>[<span class="hljs-keyword">class</span> $= <span class="hljs-string">&#x27;def&#x27;</span>]&#123;&#125;	#选择尾字母是def的<span class="hljs-keyword">class</span><br>[<span class="hljs-keyword">class</span> *= <span class="hljs-string">&#x27;ghi&#x27;</span>]&#123;&#125;	#选择包含ghi的<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure>


<p>非内容选择器（not()）</p>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:not</span>(.tan,.sky)&#123;<span class="hljs-attribute">color</span>:red;&#125;	#选择所有<span class="hljs-selector-tag">div</span>，然后去掉<span class="hljs-selector-tag">tan</span>和<span class="hljs-selector-tag">sky</span><br></code></pre></td></tr></table></figure>


<p>启用禁用选择器</p>
<p>有输入，点击效果的标签才能使用</p>
<p>enabled/disabled    </p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">*:disabled&#123;border:<span class="hljs-number">1</span>px solid orange;&#125;<br><br>&lt;button <span class="hljs-keyword">type</span>=&quot;button&quot; disabled&gt;&lt;/button&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; disabled <span class="hljs-type">name</span>=&quot;&quot; id=&quot;&quot; <span class="hljs-keyword">value</span>=&quot;&quot;/&gt;<br></code></pre></td></tr></table></figure>


<h6 id="高亮选择（-selection）"><a href="#高亮选择（-selection）" class="headerlink" title="高亮选择（::selection）"></a>高亮选择（::selection）</h6><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.tan</span><span class="hljs-selector-pseudo">::selection</span>&#123;<span class="hljs-attribute">color</span>:red; <span class="hljs-attribute">background</span>:green;&#125;<br><br>支持四个属性<span class="hljs-attribute">color</span>/<span class="hljs-attribute">background</span>/<span class="hljs-attribute">cursor</span>/<span class="hljs-attribute">outline</span><br></code></pre></td></tr></table></figure>


<h6 id="javascript-query选择器"><a href="#javascript-query选择器" class="headerlink" title="javascript-query选择器"></a>javascript-query选择器</h6><figure class="highlight dart"><table><tr><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">querySelector</span>()	放入css选择器，返回符合条件的第一个<br><span class="hljs-built_in">querySelectorAll</span>()	返回所有符合条件的<br><br><span class="hljs-keyword">var</span> alldiv = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;[id=&quot;tan&quot;]&#x27;</span>);<br>	console.log(alldiv);<br>	<br><span class="hljs-keyword">var</span> alldiv = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelectorAll</span>(<span class="hljs-string">&#x27;[id=&quot;tan&quot;]&#x27;</span>);<br>		console.log(alldiv);<br></code></pre></td></tr></table></figure>


<h6 id="javascript-classList"><a href="#javascript-classList" class="headerlink" title="javascript-classList"></a>javascript-classList</h6><p>ie10才兼容</p>
<p>常用属性：add/remove/toggle/contains/forEach/item</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">leo.classList.add(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>)	<span class="hljs-comment">#添加 给leo这个元素添加a,b两个class名称</span><br>leo.calssList.remove(<span class="hljs-string">&#x27;a&#x27;</span>,b)	<span class="hljs-comment">#删除 这两个class名称</span><br>leo.classList.toggle(<span class="hljs-string">&#x27;a&#x27;</span>)	<span class="hljs-comment"># 切换 判断leo中有没有a，有就删除，没有就添加</span><br>leo.classList.contains(<span class="hljs-string">&#x27;a&#x27;</span>)	<span class="hljs-comment"># 判断是否有这个class名	返回true和false，只能放一个参数</span><br>leo.classList.<span class="hljs-keyword">forEach</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x,y,z</span>)</span>&#123;&#125;)	<span class="hljs-comment">#与数组的foEach使用一样</span><br></code></pre></td></tr></table></figure>


<h6 id="视频标签（video）"><a href="#视频标签（video）" class="headerlink" title="视频标签（video）"></a>视频标签（video）</h6><p>ie8及以上支持</p>
<p>controls 控制台/poster 封面/loop 默认循环/autoplay 自动播放/muted 禁音</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./video/斗破苍穹.mp4&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">muted</span> <span class="hljs-attr">poster</span>=<span class="hljs-string">&quot;.image/dpcq封面.png&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><br>兼容多种格式<br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controle</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>	= <span class="hljs-string">&#x27;1.mp4&#x27;</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>	= <span class="hljs-string">&#x27;1.ogv&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="音频标签（audio）"><a href="#音频标签（audio）" class="headerlink" title="音频标签（audio）"></a>音频标签（audio）</h6><p>属性：contrlos/autoplay/muted</p>
<h6 id="屏幕单位（vh-vw）"><a href="#屏幕单位（vh-vw）" class="headerlink" title="屏幕单位（vh/vw）"></a>屏幕单位（vh/vw）</h6><p>1vh代表1%的屏幕高度</p>
<p>20vw代表20%的屏幕宽度</p>
<h6 id="计算样式（calc-）"><a href="#计算样式（calc-）" class="headerlink" title="计算样式（calc()）"></a>计算样式（calc()）</h6><p>支持ie9及以上</p>
<p>可以放入加减乘除进行计算，需要前后用空格隔开</p>
<p>可以放入常用单位进行混合计算</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">width</span>:calc(<span class="hljs-number">10</span>% + <span class="hljs-number">20</span>vw +<span class="hljs-number">300</span>px);  屏幕的<span class="hljs-number">30</span>%+<span class="hljs-number">300</span>px<br></code></pre></td></tr></table></figure>


<h6 id="移动端设置"><a href="#移动端设置" class="headerlink" title="移动端设置"></a>移动端设置</h6><figure class="highlight nix"><table><tr><td class="code"><pre><code class="hljs nix">&lt;meta&gt;<span class="hljs-attr">content=&quot;width=device-width,</span> <span class="hljs-attr">initial-scale=1.0,</span> <span class="hljs-attr">maximum-scale=1.0,</span> <span class="hljs-attr">user-scalable=0&quot;</span> <span class="hljs-attr">name=&quot;viewport&quot;&lt;/meta&gt;</span><br></code></pre></td></tr></table></figure>


<h6 id="响应式基本布局（-media）"><a href="#响应式基本布局（-media）" class="headerlink" title="响应式基本布局（@media）"></a>响应式基本布局（@media）</h6><p>支持ie9及以上</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@media all and (<span class="hljs-params">width:300px</span>)&#123;语句<span class="hljs-number">1</span>&#125;		</span><span class="hljs-comment">#检测屏幕为300px时，执行语句1</span><br><span class="hljs-meta">@media screen and (<span class="hljs-params">width:300px</span>)&#123;语句<span class="hljs-number">1</span>&#125;	</span><span class="hljs-comment">#检测浏览器可视宽度为300px时，执行语句1</span><br><br><span class="hljs-meta">@media all and (<span class="hljs-params"><span class="hljs-built_in">min</span>-width:400px</span>)(<span class="hljs-params">语句<span class="hljs-number">1</span></span>)	</span><span class="hljs-comment">#检测屏幕 大于等于 400px时</span><br><span class="hljs-meta">@media all and (<span class="hljs-params"><span class="hljs-built_in">min</span>-width:400px</span>) and (<span class="hljs-params"><span class="hljs-built_in">max</span>-width:600px</span>)	</span><span class="hljs-comment">#检测屏幕 大于等于400px 小于等于600px时生效</span><br><br>link引入方式，<span class="hljs-built_in">min</span>.css里写入需要的样式<br>&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> href=<span class="hljs-string">&quot;min.css&quot;</span>/ media=<span class="hljs-string">&quot;all and (min-width:500px)&quot;</span>&gt;<br><br>横竖屏<br><span class="hljs-meta">@media all and (<span class="hljs-params">orientation:portait</span>)	竖屏</span><br><span class="hljs-meta">@media all and (<span class="hljs-params">orientation:landscape</span>)	横屏</span><br></code></pre></td></tr></table></figure>


<h6 id="弹性盒子-flex"><a href="#弹性盒子-flex" class="headerlink" title="弹性盒子(flex)"></a>弹性盒子(flex)</h6><p>支持 ie10</p>
<p>最外层元素：display:flex;</p>
<p>对内层元素发号施令</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#元素方向</span><br>flex-<span class="hljs-keyword">direction:row;	</span>	<span class="hljs-comment">#从左到右，默认值就是这个</span><br>flex-<span class="hljs-keyword">direcction:row-reverse;	</span><span class="hljs-comment">#从右到左</span><br>flex-<span class="hljs-keyword">direction:column;	</span>		<span class="hljs-comment">#从上到下</span><br>flex-<span class="hljs-keyword">direction:column-reverse;	</span><span class="hljs-comment">#从下到上</span><br></code></pre></td></tr></table></figure>


<p>分块（flex-grow）</p>
<p>不需要设置宽度</p>
<p>只针对宽度进行分块，对高度无效</p>
<p>如果所有元素都不给宽度，那么第一个元素会稍短一点</p>
<p>第一个元素给宽度，那么后面的元素就会平均分配多于的宽度</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">.<span class="hljs-built_in">tan</span>&#123;<br>	flex-grow:<span class="hljs-number">2</span>;		<span class="hljs-meta">#这个元素占两份</span><br>&#125;<br>.<span class="hljs-built_in">tan</span>&#123;<br>	flex-grow:<span class="hljs-number">4</span>;		<span class="hljs-meta">#这个元素占4份</span><br>&#125;<br></code></pre></td></tr></table></figure>


<p>分层（flex-wrap）</p>
<p>需要设置宽度，并且flex-wrap</p>
<p>默认值是nowrap</p>
<p>当值为wrap时，元素会被挤到下一层，flex-grow会以当层计算</p>
<p>flex-wrap:wrap-reverse;反向分层排序</p>
<p>轴线对齐</p>
<p>横向</p>
<p>justify-content</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">justify-content:flex-start;	<span class="hljs-comment">#轴线左对齐 默认值</span><br>justify-content:center;		<span class="hljs-comment">#轴线中心对齐</span><br>justify-content:flex-<span class="hljs-keyword">end</span>;	<span class="hljs-comment">#轴线右对齐</span><br>justify-content:<span class="hljs-literal">space</span>-<span class="hljs-keyword">between</span>;	<span class="hljs-comment">#轴线两端对齐 中间等距隔开</span><br>justify-content:<span class="hljs-literal">space</span>-<span class="hljs-keyword">around</span>;	<span class="hljs-comment">#环绕对齐	中间等距隔开，两端隔开为中间距离一半</span><br></code></pre></td></tr></table></figure>
<p>纵向</p>
<p>align-items</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">align-items</span>:flex-start;		#纵轴线 以上方对齐<br><span class="hljs-attribute">align-items</span>:center;			#以中间对齐<br><span class="hljs-attribute">align-items</span>:flex-end;		#以下方对齐<br><span class="hljs-attribute">align-items</span>:stretch;		#拉伸 如果只有一层横向轴，直接拉满纵向轴，只作用于没有高度的元素<br><span class="hljs-attribute">align-items</span>:baseline;		#以最高的<span class="hljs-attribute">line-height</span>为基准移动其他元素<br><br><span class="hljs-attribute">align-self</span>:<br></code></pre></td></tr></table></figure>


<p>自定义对齐</p>
<p>align-self:center;</p>
<p>值为align-items里的方法</p>
<p>多层排序</p>
<p>align-content</p>
<p>必须多层，单层没有意义</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir">align-<span class="hljs-symbol">content:</span>inherit;		<span class="hljs-comment">#默认值 默认平均分配高度给每一层</span><br>			 <span class="hljs-symbol">:flex-start</span>;	<span class="hljs-comment">#下一层元素紧跟在上面一层，中间没有间隔 以上边界开始</span><br>			 <span class="hljs-symbol">:flex-end</span>;		<span class="hljs-comment">#下一层元素紧跟在上面一层，中间没有间隔 以下边界开始</span><br>			 <span class="hljs-symbol">:center</span>;		<span class="hljs-comment">#下一层元素紧跟在上面一层，中间没有间隔 以中间开始</span><br>			 <span class="hljs-symbol">:space-beteen</span>; <span class="hljs-comment">#上下对齐，中间相等距离隔开</span><br>			 <span class="hljs-symbol">:space-around</span>;	<span class="hljs-comment">#上下环绕对齐</span><br></code></pre></td></tr></table></figure>


<p>排序</p>
<p>order:0;</p>
<p>定义元素的先后顺序，默认值为0</p>
<p>值越小，排序越靠前</p>
<p>值可以是负数</p>
<p>缩小比例</p>
<p>flex-shrink:1;</p>
<p>默认值为1，如果为0，则不进行缩放，负数无效</p>
<p>值越大，被压缩的比例就越大</p>
<p>如果项目控制在一层，flex-shrink为0，超出父元素宽度，会溢出</p>
<h6 id="相对单位（rem）"><a href="#相对单位（rem）" class="headerlink" title="相对单位（rem）"></a>相对单位（rem）</h6><p>rem是根据HTML标签中的font-size的大小改变的</p>
<p>html标签的font-size默认是16px,谷歌最小显示12px</p>
<p>1rem = font-size的值</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">html&#123;font-size:16px;&#125;<br><br><span class="hljs-attribute">1rem</span>=16px<br><span class="hljs-attribute">10rem</span>=160px<br></code></pre></td></tr></table></figure>


<p>rem算法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">//总宽度 = 基数 * 倍数		倍数最好大于12，因为有些低版本浏览器字体最小只能是12px<br>//320   = 16  *  20		基数一般使用16<br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>	font-size:16px;<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.documentElement.style.fontSize = innerWidth/<span class="hljs-number">16</span>+<span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h5 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h5><p>主要语句</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">animation-name</span>:name;	动画名字<br><span class="hljs-attribute">animation-duration</span>:<span class="hljs-number">2s</span>;	动画时间<br><br><span class="hljs-attribute">animation-timing-function</span>:ease;<br>动画曲线:linear,ease,ease-in.ease-out,ease-in-out,cubic-bezier<br>		匀速,先快后慢，加速，减速，正常，先快后慢（强），贝塞尔曲线<br>animation-timing-function:steps(<span class="hljs-number">3</span>,start);	步进 steps(<span class="hljs-number">3</span>,start)先走在停 steps(<span class="hljs-number">3</span>,end)先停再走<br><br><span class="hljs-attribute">animation-direction</span>:normal;	控制动画方向:normal(正常),reverse(反转),alternate(平滑轮回)，alternate-reverse(轮回反转)<br>animation-delay:<span class="hljs-number">4s</span>;		动画延时时间<br><span class="hljs-attribute">animation-iteration-count</span>:infinite;		无限循环 属性:infinite 无限，属性:<span class="hljs-number">2</span> 循环两次<br>animation-fill-mode:forwards;	填充 动画停留在哪一帧<br>forwards(初始，停留最后<span class="hljs-number">1</span>帧) backwards(从<span class="hljs-number">0</span>帧开始,停留在初始状态) both(从<span class="hljs-number">0</span>帧开始，停留在最后一帧)<br><br><span class="hljs-attribute">animation-play-state</span>:running;	动画播放(running)与暂停(paused)<br><br>简写<br><span class="hljs-attribute">animation</span>: name forwards <span class="hljs-number">2s</span> <span class="hljs-number">0.3s</span>;	<span class="hljs-comment">//前面是动画时间，后边是延时时间，其他的位置顺序可以改变</span><br><br></code></pre></td></tr></table></figure>


<h6 id="帧动画"><a href="#帧动画" class="headerlink" title="帧动画"></a>帧动画</h6><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>	<span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>	<span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>	<span class="hljs-attribute">background-color</span>:white;<br>	<span class="hljs-attribute">animation-name</span>:changes;		*第一步<br>	<span class="hljs-attribute">animation-duration</span>:<span class="hljs-number">3s</span>;		*<br>&#125;<br><br>*第二步<br><span class="hljs-keyword">@keyframes</span> changes&#123;<br>	<span class="hljs-selector-tag">from</span>&#123;<br>		<span class="hljs-attribute">background-color</span>:white;<br>	&#125;<br>	<span class="hljs-selector-tag">to</span>&#123;<br>		<span class="hljs-attribute">background-color</span>:red;<br>	&#125;<br>&#125;<br><br>第二步可以写成这样<br><span class="hljs-keyword">@keyframes</span> changes&#123;<br>	<span class="hljs-number">0%</span>&#123;<span class="hljs-attribute">background-color</span>:white;&#125;		*<span class="hljs-number">0%</span>可以不写，默认为元素背景色<br>	<span class="hljs-number">30%</span>&#123;&#125;<br>	<span class="hljs-number">70%</span>&#123;&#125;<br>	<span class="hljs-number">100%</span>&#123;<span class="hljs-attribute">background-color</span>:red;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>当有相同语句时可以合并写</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> changes&#123;<br>	<span class="hljs-number">0%</span>&#123;<span class="hljs-attribute">background-color</span>:white;&#125;<br>	<span class="hljs-number">30%</span>&#123;&#125;<br>	<span class="hljs-number">70%</span>&#123;&#125;<br>	<span class="hljs-number">100%</span>&#123;<span class="hljs-attribute">background-color</span>:red;&#125;<br>	<br>	<span class="hljs-number">30%</span>,<span class="hljs-number">70%</span>&#123;<span class="hljs-attribute">border-radius</span>:<span class="hljs-number">50%</span>&#125;	*合并写<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>多个动画应用到一个元素上</p>
<p>当属性重叠时，优先使用后添加上名字的动画</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span>&#123;<br>	<span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>	<span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>	<span class="hljs-attribute">background-color</span>:white;<br>	<span class="hljs-attribute">animation-name</span>:changes,radius,translate;		*放多个动画，都会生效，当某些属性重叠时，优先使用translate<br>	<span class="hljs-attribute">animation-duration</span>:<span class="hljs-number">3s</span>,<span class="hljs-number">2s</span>,<span class="hljs-number">1s</span>;		*定义每个动画的时间，如果某个动画没定义时间，就按第一个时间算<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端(网易学习)</category>
      </categories>
      <tags>
        <tag>html5</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马-node.js</title>
    <url>/2022/03/19/%E9%BB%91%E9%A9%AC-node-js/</url>
    <content><![CDATA[<h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><p>安装：<code>node.js 官网下载</code></p>
<p>查看版本： <code>node -v</code></p>
<h4 id="fs文件系统模块"><a href="#fs文件系统模块" class="headerlink" title="fs文件系统模块"></a>fs文件系统模块</h4><p>用来操作文件的模块</p>
<h5 id="readFile"><a href="#readFile" class="headerlink" title="readFile"></a>readFile</h5><p>读取文件</p>
<p>如果读取成功，则err的值为null</p>
<p>如果读取失败，dataStr的值为undefined，err为错误对象</p>
<h5 id="writeFile"><a href="#writeFile" class="headerlink" title="writeFile"></a>writeFile</h5><p>写入内容</p>
<p>如果写入成功，则err的值为null</p>
<p>如果写入失败，err为错误对象</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//声明并导入fs模块</span><br>const fs = require(&#x27;fs&#x27;)<br><br><span class="hljs-comment">//读取文件,path(文件路径)，options(编码格式)，callback(通过回调函数拿到结果)</span><br>fs.read<span class="hljs-constructor">File(<span class="hljs-params">path</span>[,<span class="hljs-params">options</span>],<span class="hljs-params">callback</span>(<span class="hljs-params">err</span>失败形参,<span class="hljs-params">dataStr</span>成功形参)</span>)<br><br><span class="hljs-comment">//写入内容,data是需要写入的内容</span><br>fs.write<span class="hljs-constructor">File(<span class="hljs-params">path</span>,<span class="hljs-params">data</span>[,<span class="hljs-params">options</span>],<span class="hljs-params">callback</span>(<span class="hljs-params">err</span>失败形参)</span>)	<br></code></pre></td></tr></table></figure>
<p>例，读取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">//可以将.换成__dirname</span><br>fs.readFile(<span class="hljs-string">&#x27;./files/test.text&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error,dataStr</span>)</span>&#123;<br>	<span class="hljs-keyword">if</span>(error)&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;读取失败 &#x27;</span>+error.message)<br>	&#125;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;读取成功 &#x27;</span>+dataStr)<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>例，写入</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">const fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br>fs.writeFile(<span class="hljs-string">&#x27;./files/test.text&#x27;</span>,<span class="hljs-string">&#x27;utf8&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(error)</span></span>&#123;<br>	<span class="hljs-keyword">if</span>(<span class="hljs-built_in">error</span>)&#123;<br>		<span class="hljs-keyword">return</span> console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;写入失败 &#x27;</span>+<span class="hljs-built_in">error</span>.message)<br>	&#125;<br>	console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;写入成功 &#x27;</span>+dataStr)<br>&#125;)<br></code></pre></td></tr></table></figure>


<p>读取文件用<code>__dirname</code>表示当前文件所处目录</p>
<h4 id="path路径模块"><a href="#path路径模块" class="headerlink" title="path路径模块"></a>path路径模块</h4><p>path用来处理路径的模块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br></code></pre></td></tr></table></figure>


<h5 id="path-join"><a href="#path-join" class="headerlink" title="path.join"></a><code>path.join</code></h5><p>将多路径片段拼接成一个完整的路径字符串</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><code class="hljs lasso">path.<span class="hljs-keyword">join</span>(<span class="hljs-meta">[</span><span class="hljs-params">...</span>paths<span class="hljs-meta">]</span>)<br></code></pre></td></tr></table></figure>
<figure class="highlight processing"><table><tr><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">const</span> pathStr = path.<span class="hljs-built_in">join</span>(<span class="hljs-string">&#x27;/a&#x27;</span>,<span class="hljs-string">&#x27;/b/c&#x27;</span>,<span class="hljs-string">&#x27;../&#x27;</span>,<span class="hljs-string">&#x27;/d&#x27;</span>,<span class="hljs-string">&#x27;/e&#x27;</span>)<br>console.<span class="hljs-built_in">log</span>(pathStr)	&gt;&gt;&gt; <span class="hljs-string">&#x27;\a\b\d\e&#x27;</span><br><br>tips:  <span class="hljs-string">&#x27;../&#x27;</span>	会向前走一级 <span class="hljs-string">&#x27;../../&#x27;</span>	向前走两级<br><br><span class="hljs-keyword">const</span> pat = path.<span class="hljs-built_in">join</span>(__dirname,<span class="hljs-string">&#x27;files/1.txt&#x27;</span>)	<span class="hljs-comment">//拼接路径</span><br></code></pre></td></tr></table></figure>


<h5 id="path-basename"><a href="#path-basename" class="headerlink" title="path.basename"></a><code>path.basename</code></h5><p>用来从路径字符串中，将文件名解析出来</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">path</span>.basename(<span class="hljs-built_in">path</span>[,ext])	//<span class="hljs-built_in">path</span>(路径),ext(文件扩展名)<br></code></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">const fpath = <span class="hljs-string">&#x27;/a/b/c/index.html&#x27;</span><br><br>一个参数<br><span class="hljs-selector-tag">var</span> fullname = path<span class="hljs-selector-class">.basename</span>(fpath)<br>console<span class="hljs-selector-class">.log</span>(fullname)	&gt;&gt;&gt; index.html<br><br>两个参数<br><span class="hljs-selector-tag">var</span> fullname = path<span class="hljs-selector-class">.basename</span>(fpath, <span class="hljs-string">&#x27;.html&#x27;</span>)<br>console<span class="hljs-selector-class">.log</span>(fullname)	&gt;&gt;&gt; index<br></code></pre></td></tr></table></figure>


<h5 id="path-extname"><a href="#path-extname" class="headerlink" title="path.extname"></a><code>path.extname</code></h5><p>可以获取路径中扩展名部分</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">path</span>.extname(<span class="hljs-built_in">path</span>)<br></code></pre></td></tr></table></figure>
<figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">const</span> fpath = <span class="hljs-string">&#x27;/a/b/c/index.html&#x27;</span><br><br><span class="hljs-keyword">const</span> ext = path.extname(fpath)<br>console.<span class="hljs-built_in">log</span>(ext)	&gt;&gt;&gt; <span class="hljs-string">&#x27;.html&#x27;</span><br></code></pre></td></tr></table></figure>


<h4 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h4><p>用于创建web服务器的模块，通过http模块提供的<code>http.createServer()</code>方法，就能把一台普通的电脑变成一个web服务器</p>
<h5 id="创建web服务器"><a href="#创建web服务器" class="headerlink" title="创建web服务器"></a>创建web服务器</h5><h6 id="1-导入http模块"><a href="#1-导入http模块" class="headerlink" title="1.导入http模块"></a>1.导入http模块</h6><figure class="highlight isbl"><table><tr><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">const</span> <span class="hljs-variable">http</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)</span><br></code></pre></td></tr></table></figure>
<h6 id="2-创建web服务器实例"><a href="#2-创建web服务器实例" class="headerlink" title="2.创建web服务器实例"></a>2.创建web服务器实例</h6><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">const</span> <span class="hljs-keyword">server</span> = http.createServer()<br></code></pre></td></tr></table></figure>
<h6 id="3-为服务器实例绑定request事件，监听客户端请求"><a href="#3-为服务器实例绑定request事件，监听客户端请求" class="headerlink" title="3.为服务器实例绑定request事件，监听客户端请求"></a>3.为服务器实例绑定request事件，监听客户端请求</h6><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-regexp">//</span>绑定一个request事件,当有请求时，执行回调函数<br>server.<span class="hljs-literal">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-function"><span class="hljs-params">(req,res)</span>=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;有人请求了&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="4-启动服务器"><a href="#4-启动服务器" class="headerlink" title="4.启动服务器"></a>4.启动服务器</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">//调用<span class="hljs-keyword">server</span>.<span class="hljs-keyword">listen</span>(<span class="hljs-string">&#x27;端口号&#x27;</span>,<span class="hljs-string">&#x27;回调函数&#x27;</span>)<br><br><span class="hljs-keyword">server</span>.<span class="hljs-keyword">listen</span>(<span class="hljs-string">&#x27;8080&#x27;</span>,()=&gt;&#123;<br>	console.log(<span class="hljs-string">&#x27;http server running at http://127.0.0.1:8080&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>


<h5 id="req请求对象"><a href="#req请求对象" class="headerlink" title="req请求对象"></a>req请求对象</h5><p>如果想在事件处理函数中，访问与客户端相关的数据或者属性</p>
<p>可以使用以下方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">server.on(<span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req</span>)=&gt;</span>&#123;<br>	<span class="hljs-comment">//req 是请求对象，包含了客户端的相关数据与属性</span><br>	<span class="hljs-comment">//req.url	客户端的URL地址</span><br>	<span class="hljs-comment">//req.method	客户端的请求类型</span><br>	<br>	<span class="hljs-keyword">const</span> message = <span class="hljs-string">`URL:<span class="hljs-subst">$&#123;req.url&#125;</span>,method:<span class="hljs-subst">$&#123;req.method&#125;</span>`</span><br>	<span class="hljs-built_in">console</span>.log(message)<br>&#125;)<br></code></pre></td></tr></table></figure>


<h5 id="res响应对象"><a href="#res响应对象" class="headerlink" title="res响应对象"></a>res响应对象</h5><p>如果想在事件处理函数中，访问与服务器相关的数据或者属性</p>
<p>可以使用以下方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">server.on(<span class="hljs-string">&#x27;request&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req，res</span>)=&gt;</span>&#123;<br>	<span class="hljs-comment">//res 是响应对象，包含了服务端的相关数据与属性</span><br>	<br>	<span class="hljs-keyword">const</span> message = <span class="hljs-string">`URL:<span class="hljs-subst">$&#123;req.url&#125;</span>,method:<span class="hljs-subst">$&#123;req.method&#125;</span>`</span><br>	<br>	<span class="hljs-comment">//设置响应头,解决中文乱码</span><br>	res.setHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>)<br>	<span class="hljs-comment">//res.end()	向客户发送指定内容，并结束这次请求的处理过程</span><br>	res.end(message)<br>&#125;)<br></code></pre></td></tr></table></figure>


<h6 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h6><p>需要设置响应头</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">res.set<span class="hljs-constructor">Header(&#x27;Content-Type&#x27;,&#x27;<span class="hljs-params">text</span><span class="hljs-operator">/</span><span class="hljs-params">html</span>;<span class="hljs-params">charset</span>=<span class="hljs-params">utf</span>-8&#x27;)</span><br></code></pre></td></tr></table></figure>


<h5 id="根据不同的url响应不同的内容"><a href="#根据不同的url响应不同的内容" class="headerlink" title="根据不同的url响应不同的内容"></a>根据不同的url响应不同的内容</h5><h6 id="核心步骤"><a href="#核心步骤" class="headerlink" title="核心步骤"></a>核心步骤</h6><figure class="highlight delphi"><table><tr><td class="code"><pre><code class="hljs delphi"><span class="hljs-number">1</span>.获取请求的URL地址<br><span class="hljs-number">2</span>.设置默认的响应内容为 <span class="hljs-number">404</span> <br><span class="hljs-number">3</span>.判断用户请求是否为/或/<span class="hljs-keyword">index</span>.html首页<br><span class="hljs-number">4</span>.判断用户请求是否为/about.html页面<br><span class="hljs-number">5</span>.设置Content-<span class="hljs-keyword">Type</span>响应头,防止中文乱码<br><span class="hljs-number">6</span>.使用res.<span class="hljs-keyword">end</span>()，把内容响应给客户端<br></code></pre></td></tr></table></figure>
<h6 id="动态响应内容"><a href="#动态响应内容" class="headerlink" title="动态响应内容"></a>动态响应内容</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">server.on(<span class="hljs-string">&#x27;request&#x27;</span>,(req，res)=&gt;&#123;<br>	const url = req.url		<span class="hljs-regexp">//</span>获取请求的URL地址<br>	let content = <span class="hljs-string">&#x27;&lt;h1&gt;404 Not found!&lt;/h1&gt;&#x27;</span>		<span class="hljs-regexp">//</span>设置默认的响应内容为 <span class="hljs-number">404</span> <br>	<span class="hljs-keyword">if</span>(url === <span class="hljs-string">&#x27;/&#x27;</span> || url === <span class="hljs-string">&#x27;index.html&#x27;</span>)&#123;	<span class="hljs-regexp">//</span>判断用户请求是否为<span class="hljs-regexp">/或/i</span>ndex.html首页<br>		content = <span class="hljs-string">&#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span><br>	&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(url === <span class="hljs-string">&#x27;/about.html&#x27;</span>)&#123;			<span class="hljs-regexp">//</span>判断用户请求是否为/about.html页面<br>		content = <span class="hljs-string">&#x27;&lt;h1&gt;关于页面&lt;/h1&gt;&#x27;</span><br>	&#125;<br>	res.setHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>,<span class="hljs-string">&#x27;text/html;charset=utf-8&#x27;</span>)	<span class="hljs-regexp">//</span>设置Content-Type响应头,防止中文乱码<br>	res.end(content)			<span class="hljs-regexp">//</span>使用res.end()，把内容响应给客户端<br>&#125;)<br></code></pre></td></tr></table></figure>


<h5 id="将文件内容给客户端"><a href="#将文件内容给客户端" class="headerlink" title="将文件内容给客户端"></a>将文件内容给客户端</h5><figure class="highlight qml"><table><tr><td class="code"><pre><code class="hljs qml">①导入需要的模块<br>②常见基本的web服务器<br>③将资源的请求<span class="hljs-built_in">url</span>地址映射为文件的存放路径<br>④读取文件的内容响应给客户端<br>⑤优化资源的请求路径<br></code></pre></td></tr></table></figure>


<h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><h6 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h6><p>模块化是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组合、分解和更换的单元。</p>
<h6 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h6><p>①提高代码的可复用性</p>
<p>②提高代码的可维护性</p>
<p>③实现按需加载</p>
<h6 id="三大类："><a href="#三大类：" class="headerlink" title="三大类："></a>三大类：</h6><p>内置模块（官方定义，例fs,path.http模块）</p>
<p>自定义模块（自己创建的js文件）</p>
<p>第三方模块（由第三方发出来的模块，需要下载）</p>
<h6 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">内置: <span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br>自定义: <span class="hljs-keyword">const</span> custom = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./custom.js&#x27;</span>)	<span class="hljs-comment">//需要提供路径，可以省略.js</span><br>第三方: <span class="hljs-keyword">const</span> moment = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;moment&#x27;</span>)		<span class="hljs-comment">//与内置模块加载一样，需要提前下载</span><br></code></pre></td></tr></table></figure>


<h4 id="module对象"><a href="#module对象" class="headerlink" title="module对象"></a>module对象</h4><p>向外共享模块作用域中的成员，里面存储了当前模块的有关信息</p>
<h5 id="module-exports对象"><a href="#module-exports对象" class="headerlink" title="module.exports对象"></a><code>module.exports</code>对象</h5><p>将模块内的成员共享出去，供外界使用</p>
<p>外界用require方法导入自定义模块时，得到的就是<code>module.exports</code>指定的对象</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">默认<br><span class="hljs-built_in">module</span>.<span class="hljs-built_in">exports</span> = &#123;&#125;<br><br>挂载username属性<br><span class="hljs-built_in">module</span>.<span class="hljs-built_in">exports</span>.username = <span class="hljs-string">&#x27;zs&#x27;</span><br><br>挂载方法<br><span class="hljs-built_in">module</span>.<span class="hljs-built_in">exports</span>.sayhello = <span class="hljs-keyword">function</span>()&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">暴露内容<br><span class="hljs-keyword">const</span> age = <span class="hljs-number">10</span><br><br>modle.<span class="hljs-keyword">exports</span>.age = age	将age暴露到外界<br><br><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> =&#123;<br>	name:<span class="hljs-string">&quot;小黑&quot;</span>,<br>	这个对象里的内容会覆盖前面的内容<br>&#125;<br></code></pre></td></tr></table></figure>
<h5 id="exports对象"><a href="#exports对象" class="headerlink" title="exports对象"></a>exports对象</h5><p>exports和<code>module.exports</code>都指向同一个对象</p>
<p>exports是为了简化代码,写法简单一些</p>
<p>结果最终以<code>module.exports</code>为准</p>
<h5 id="防止混乱不要同时使用module-exports和exports两个模块"><a href="#防止混乱不要同时使用module-exports和exports两个模块" class="headerlink" title="防止混乱不要同时使用module.exports和exports两个模块"></a>防止混乱不要同时使用module.exports和exports两个模块</h5><h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> 包的完整名称<br></code></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">npm i 包的完整名称	<span class="hljs-regexp">//</span>简写<br></code></pre></td></tr></table></figure>
<p>安装指定版本的包</p>
<figure class="highlight mel"><table><tr><td class="code"><pre><code class="hljs mel">npm install 包的完整名称@版本号<br><br>例<br>npm install moment@2<span class="hljs-number">.22</span><span class="hljs-number">.2</span>   <span class="hljs-comment">//指定moment2.22.2版本的包</span><br></code></pre></td></tr></table></figure>
<p>安装多个包</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">npm install moment jquery	<span class="hljs-regexp">//</span>包名之间用空格隔开<br></code></pre></td></tr></table></figure>
<p>安装所有依赖包(package . json 中未下载的包)</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure>
<figure class="highlight diff"><table><tr><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-D 记录到devDependencies中，只在项目开发阶段用的到的包</span><br></code></pre></td></tr></table></figure>
<h6 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h6><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> uninstall 包的完整名称<br></code></pre></td></tr></table></figure>


<h6 id="解决下载慢的问题"><a href="#解决下载慢的问题" class="headerlink" title="解决下载慢的问题"></a>解决下载慢的问题</h6><p>第一种：</p>
<p>查看包下载地址</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">npm config get registry<br><br><span class="hljs-regexp">//</span>https:<span class="hljs-regexp">//</span>registry.npmjs.org/<br></code></pre></td></tr></table></figure>
<p>设置淘宝镜像</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">npm<span class="hljs-built_in"> config </span><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">registry</span>=https://registry.npm.taobao.org/<br></code></pre></td></tr></table></figure>
<p>第二种：</p>
<p>安装nrm小工具，可以更方便的切换下包镜像源</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>全局安装nrm<br>npm i nrm -g<br><br><span class="hljs-regexp">//</span>查看可用镜像源<br>nrm ls<br><br><span class="hljs-regexp">//</span>切换为淘宝镜像<br>nrm use taobao<br></code></pre></td></tr></table></figure>


<h6 id="包的语义化版本规范"><a href="#包的语义化版本规范" class="headerlink" title="包的语义化版本规范"></a>包的语义化版本规范</h6><p>第一位：大版本，底层更新</p>
<p>第二位：功能版本，添加了新功能</p>
<p>第三位：bug修复版本</p>
<p>版本号增长了，则后面的版本号归零</p>
<h6 id="快速创建package-json文件"><a href="#快速创建package-json文件" class="headerlink" title="快速创建package . json文件"></a>快速创建package . json文件</h6><p>package . json 存放依赖包的详细信息</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">npm init -y		<span class="hljs-regexp">//</span>在英文目录下<br></code></pre></td></tr></table></figure>
<h4 id="包"><a href="#包" class="headerlink" title="包"></a>包</h4><h5 id="包的分类"><a href="#包的分类" class="headerlink" title="包的分类"></a>包的分类</h5><h6 id="项目包"><a href="#项目包" class="headerlink" title="项目包"></a>项目包</h6><p>安装到项目的node_modules目录中的包</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>开发依赖包(记录到devDependencies中的包)<br>npm install moment -D<br><br><span class="hljs-regexp">//</span>核心依赖包(记录到dependencies中的包)<br>npm install moment<br></code></pre></td></tr></table></figure>
<h6 id="全局包"><a href="#全局包" class="headerlink" title="全局包"></a>全局包</h6><p>安装时,提供-g参数，则会安装为全局</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">npm i 包名 -g				 <span class="hljs-regexp">//</span>全局安装指定包<br>npm uninstall 包名 -g		<span class="hljs-regexp">//</span>卸载全局安装的包<br></code></pre></td></tr></table></figure>


<h5 id="moment包"><a href="#moment包" class="headerlink" title="moment包"></a>moment包</h5><p>格式化时间</p>
<h6 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h6><figure class="highlight vbscript"><table><tr><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">const</span> dt = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()<br><span class="hljs-keyword">const</span> y = dt.getFull<span class="hljs-built_in">Year</span>()<br><span class="hljs-keyword">const</span> m = dt.<span class="hljs-keyword">get</span><span class="hljs-built_in">Month</span>()+<span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> d = dt.<span class="hljs-keyword">get</span><span class="hljs-built_in">Date</span>()<br>.......................<br></code></pre></td></tr></table></figure>
<p>高级(使用包)</p>
<p>1.使用npm，安装moment包</p>
<p>2.使用require导入包</p>
<p>3.参考moment官方api对时间进行格式化</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><code class="hljs isbl"><span class="hljs-comment">//导入moment</span><br><span class="hljs-variable">const</span> <span class="hljs-variable">moment</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;moment&#x27;</span>)</span><br><br><span class="hljs-variable">const</span> <span class="hljs-variable">dt</span> = <span class="hljs-function"><span class="hljs-title">moment</span>().format(<span class="hljs-string">&#x27;YYYY-MM-DD hh:mm:ss&#x27;</span>)</span><br></code></pre></td></tr></table></figure>
<h5 id="i5ting-toc包"><a href="#i5ting-toc包" class="headerlink" title="i5ting_toc包"></a>i5ting_toc包</h5><p>将md文档转换为html页面的小工具</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>安装为全局<br>npm install -g i5ting_toc<br><br><span class="hljs-regexp">//</span>调用<br>i5ting_toc -f md文件路径 -o<br></code></pre></td></tr></table></figure>
<h5 id="规范的包结构"><a href="#规范的包结构" class="headerlink" title="规范的包结构"></a>规范的包结构</h5><p>1.包必须以单独的目录而存在</p>
<p>2.包的顶级目录 下要必须包含package.json这个包管理配置文件</p>
<p>3.package.json 中必须包含name，version，main这三个属性，分别代表包的名字、版本号、包的入口。</p>
<h5 id="开发包"><a href="#开发包" class="headerlink" title="开发包"></a>开发包</h5><h6 id="一：基本结构"><a href="#一：基本结构" class="headerlink" title="一：基本结构"></a>一：基本结构</h6><p>1.新建newtest文件夹，作为包的根目录</p>
<p>2.newtest文件下创建三个文件</p>
<p>​    ① package . json(包管理配置文件)</p>
<p>​    ②index . js(包的入口文件)</p>
<p>​    ③README . md(包的文档说明)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">package.json<br>---------------------------<br><br>&#123;<br>	<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;tan-package&quot;</span>,	<span class="hljs-regexp">//</span>包名，不能重复<br>	<span class="hljs-string">&quot;version&quot;</span>:<span class="hljs-string">&quot;1.0.0&quot;</span>,		<span class="hljs-regexp">//</span>版本号<br>	<span class="hljs-string">&quot;nain&quot;</span>:<span class="hljs-string">&quot;index.js&quot;</span>,		<span class="hljs-regexp">//</span>入口文件<br>	<span class="hljs-string">&quot;description&quot;</span>:<span class="hljs-string">&quot;摘要&quot;</span>,		<span class="hljs-regexp">//</span>检索时的摘要<br>	<span class="hljs-string">&quot;keywords&quot;</span>:[<span class="hljs-string">&quot;javascript&quot;</span>,<span class="hljs-string">&quot;时间&quot;</span>,<span class="hljs-string">&quot;js&quot;</span>],		<span class="hljs-regexp">//</span>搜索关键字<br>	<span class="hljs-string">&quot;license&quot;</span>:<span class="hljs-string">&quot;ISC&quot;</span>,		<span class="hljs-regexp">//</span>开源协议<br>&#125;<br></code></pre></td></tr></table></figure>
<h6 id="二：编写"><a href="#二：编写" class="headerlink" title="二：编写"></a>二：编写</h6><h6 id="三：发布"><a href="#三：发布" class="headerlink" title="三：发布"></a>三：发布</h6><p>切换到根目录下</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> publish<br></code></pre></td></tr></table></figure>
<h4 id="模块加载机制"><a href="#模块加载机制" class="headerlink" title="模块加载机制"></a>模块加载机制</h4><p>模块在第一次加载后，会被缓存，多次调用不会多次执行</p>
<p>内置模块会优先加载，优先级最高</p>
<p>自定义模块加载必须以 ./开头的路径标识符</p>
<p>省略扩展名会按以下顺序补全：[确切的文件] js json node</p>
<h4 id="express"><a href="#express" class="headerlink" title="express"></a>express</h4><p>web开发框架（https模块的进一步封装）</p>
<h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><p>安装</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> i express@<span class="hljs-number">4</span>.<span class="hljs-number">17</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p>创建基本web服务器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//导入express</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">//创建web服务器</span><br><span class="hljs-keyword">const</span> app = express()<br><br><span class="hljs-comment">//监听客户端的get和post请求，并响应内容</span><br>app.get(<span class="hljs-string">&#x27;/user&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>	<span class="hljs-comment">//调用res.send，向客户端响应json对象</span><br>	res.send(&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-attr">age</span>:<span class="hljs-string">&quot;16&quot;</span>,<span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;男&quot;</span>&#125;)<br>&#125;)<br>app.post(<span class="hljs-string">&#x27;/user&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>	<span class="hljs-comment">//调用res.send，向客户端响应文本字符串</span><br>	res.send(<span class="hljs-string">&#x27;请求成功&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">//调用app.listen接口，启动服务器</span><br>app.listen(<span class="hljs-number">80</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;express服务器已经启动&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="监听客户端的get和post请求"><a href="#监听客户端的get和post请求" class="headerlink" title="监听客户端的get和post请求"></a>监听客户端的get和post请求</h6><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">app.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>,(req,<span class="hljs-keyword">res</span>)=&gt;&#123;<br>	//调用<span class="hljs-keyword">res</span>.send，向客户端响应json对象<br>	<span class="hljs-keyword">res</span>.send(&#123;name:<span class="hljs-string">&quot;张三&quot;</span>,age:<span class="hljs-string">&quot;16&quot;</span>,gender:<span class="hljs-string">&quot;男&quot;</span>&#125;)<br>&#125;)<br>app.post(<span class="hljs-string">&#x27;/user&#x27;</span>,(req,<span class="hljs-keyword">res</span>)=&gt;&#123;<br>	//调用<span class="hljs-keyword">res</span>.send，向客户端响应文本字符串<br>	<span class="hljs-keyword">res</span>.send(<span class="hljs-string">&#x27;请求成功&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="获取URL中携带的参数"><a href="#获取URL中携带的参数" class="headerlink" title="获取URL中携带的参数"></a>获取URL中携带的参数</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>获取静态参数<br>app.get(<span class="hljs-string">&#x27;/user&#x27;</span>,(req,res)=&gt;&#123;<br>	<span class="hljs-regexp">//</span>req.query默认是一个空对象，得到网址后面发送的参数<br>	<span class="hljs-regexp">//</span>客户端使用 ?name=zs&amp;age=<span class="hljs-number">20</span> 向服务器发送参数<br>	res.send(req.query)<br>&#125;)<br><br><span class="hljs-regexp">//</span>获取动态参数<br>app.get(<span class="hljs-string">&#x27;/user/:id/:name&#x27;</span>,(req,res)=&gt;&#123;<br>	<span class="hljs-regexp">//</span>req.params默认是一个空对象，得到网址后面发送的参数<br>	<span class="hljs-regexp">//</span>客户端使用 /<span class="hljs-number">20</span> 向服务器发送参数<br>	res.send(req.params)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h5 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h5><p><code>express.static</code></p>
<p>将静态资源对外开放</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">app.use(express.static(<span class="hljs-string">&#x27;public&#x27;</span>))<br><br><span class="hljs-regexp">//</span>文件<br><span class="hljs-regexp">//</span>public<span class="hljs-regexp">/js/i</span>ndex.js<br><br><span class="hljs-regexp">//</span>访问：http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/js/i</span>ndex.js<br></code></pre></td></tr></table></figure>
<p>如果要托管多个静态资源，多次调用<code>express.static()</code></p>
<p>如果有同名的文件，优先显示前面托管的静态资源</p>
<h6 id="挂载路径前缀"><a href="#挂载路径前缀" class="headerlink" title="挂载路径前缀"></a>挂载路径前缀</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>前缀是自定义的，通常与文件名相同<br>app.use(<span class="hljs-string">&#x27;/public&#x27;</span>,express.static(<span class="hljs-string">&#x27;public&#x27;</span>))<br><br><br><span class="hljs-regexp">//</span>文件<br><span class="hljs-regexp">//</span>public<span class="hljs-regexp">/js/i</span>ndex.js<br><span class="hljs-regexp">//</span>访问：http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/public/</span>js/index.js<br></code></pre></td></tr></table></figure>
<h5 id="nodemon"><a href="#nodemon" class="headerlink" title="nodemon"></a>nodemon</h5><p>监听项目文件的变动，自动重启项目</p>
<p>安装(需要全局安装)</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i nodemon -g<br></code></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight dsconfig"><table><tr><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">nodemon</span> 文件路径<br><br>//报错 <span class="hljs-string">nodemon</span> : 无法加载文件系统上禁止运行脚本<br>以管理员身份运行<span class="hljs-string">powershell</span><br><span class="hljs-string"></span>执行 <span class="hljs-built_in">set-ExecutionPolicy</span> <span class="hljs-string">RemoteSigned</span><br></code></pre></td></tr></table></figure>
<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>客户端 请求与服务器处理函数之间的映射关系</p>
<p>express路由分为3部分，分别为：请求的类型，请求的url地址，处理函数</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">app.<span class="hljs-keyword">METHOD</span>(<span class="hljs-type">PATH</span>,<span class="hljs-keyword">HANDLER</span>)<br>	类型	 地址   处理函数<br></code></pre></td></tr></table></figure>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript">app.get(<span class="hljs-string">&#x27;/user&#x27;</span>,<span class="hljs-function"><span class="hljs-params">(req,res)</span>=&gt;</span>&#123;<br>	res.send(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h5 id="模块化路由"><a href="#模块化路由" class="headerlink" title="模块化路由"></a>模块化路由</h5><figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript">①创建路由模块对应的.js文件<br>②调用express.Router()函数创建路由对象<br>③向路由对象挂载具体的路由<br>④使用<span class="hljs-built_in">module</span>.<span class="hljs-built_in">exports</span>向外共享路由对象<br>⑤使用app.use()函数注册路由模块<br></code></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">router.js<br>--------------------------------<br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-comment">//创建路由对象</span><br><span class="hljs-keyword">const</span> router = express.Router()<br><span class="hljs-comment">//挂载具体的路由</span><br>router.get(<span class="hljs-string">&#x27;/user/list&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>	res.send(<span class="hljs-string">&#x27;获取用户列表&#x27;</span>)<br>&#125;)<br>router.post(<span class="hljs-string">&#x27;/user/addlist&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>	res.send(<span class="hljs-string">&#x27;添加用户&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">//向外导出路由对象</span><br>moudle.exports=router<br><br>app.js<br>---------------------------<br><span class="hljs-comment">//注册路由</span><br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router.js&#x27;</span>)<br>app.use(router)<br><br><span class="hljs-comment">//也可以添加前缀</span><br>app.use(<span class="hljs-string">&#x27;/api&#x27;</span>,router)<br></code></pre></td></tr></table></figure>
<h4 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h4><p>当一个请求到达express的服务器后，可以连续调用多个中间件，从而对这次请求进行预处理</p>
<p>多个中间件会共享一份req和res.可以在上游的中间件统一添加自定义属性和方法，供下游中间件或路由使用</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">app.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,fuction(req,<span class="hljs-keyword">res</span>,<span class="hljs-keyword">next</span>)&#123;<span class="hljs-keyword">next</span>()&#125;)<br><br>//tip 中间件必须包含<span class="hljs-keyword">next</span>参数，而路由只包含req，<span class="hljs-keyword">res</span><br></code></pre></td></tr></table></figure>
<h5 id="全局生效中间件"><a href="#全局生效中间件" class="headerlink" title="全局生效中间件"></a>全局生效中间件</h5><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">const mv = <span class="hljs-keyword">function</span>(req,res,<span class="hljs-keyword">next</span>)&#123;<br>	<span class="hljs-regexp">//</span>可以在req上自定义属性，且可以分享个给后面的所有路由<br>	req.requestTime = Date.now()<br>	<span class="hljs-keyword">next</span>()<br>&#125;<br><br>app.use(mv)<br></code></pre></td></tr></table></figure>
<p>定义多个中间件</p>
<p>使用<code>app.use()</code>连续定义多个全局中间件，会按照定义顺序依次调用</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><code class="hljs moonscript">app.use(<span class="hljs-function"><span class="hljs-params">(req,res,<span class="hljs-built_in">next</span>)</span>=&gt;</span>&#123;<br>	console.log(<span class="hljs-string">&#x27;这是第一个中间件&#x27;</span>)<br>	<span class="hljs-built_in">next</span>()<br>&#125;)<br>app.use(<span class="hljs-function"><span class="hljs-params">(req,res,<span class="hljs-built_in">next</span>)</span>=&gt;</span>&#123;<br>	console.log(<span class="hljs-string">&#x27;这是第二个中间件&#x27;</span>)<br>	<span class="hljs-built_in">next</span>()<br>&#125;)<br></code></pre></td></tr></table></figure>
<h5 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h5><p>不使用<code>app.use()</code>定义的中间件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">const mv1 = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req,res,next)</span>&#123;</span><br>	console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;中间件&#x27;</span>)<br>	<span class="hljs-keyword">next</span>()<br>&#125;<br><br>//MV1这个中间件只能在这个路由中生效<br>app.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,mv1,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req,res)</span>&#123;</span><br>	<span class="hljs-keyword">res</span>.send(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>多个局部中间件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">app.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,mv1，mv2,mv3,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req,res)</span>&#123;</span><br>	<span class="hljs-keyword">res</span>.send(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>&#125;)<br>或<br>app.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>,[mv1，mv2,mv3],<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(req,res)</span>&#123;</span><br>	<span class="hljs-keyword">res</span>.send(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h5 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类"></a>中间件的分类</h5><h6 id="应用级别中间件"><a href="#应用级别中间件" class="headerlink" title="应用级别中间件"></a>应用级别中间件</h6><p>通过<code>app.use()或app.get()或app.post()</code>,绑定到app实例上的中间件</p>
<h6 id="路由级别中间件"><a href="#路由级别中间件" class="headerlink" title="路由级别中间件"></a>路由级别中间件</h6><p>绑定到<code>express.Router()</code>实例上的中间件</p>
<h6 id="错误级别中间件"><a href="#错误级别中间件" class="headerlink" title="错误级别中间件"></a>错误级别中间件</h6><p>用来捕获整个项目中发生的异常错误，防止项目异常崩溃</p>
<p>有四个形参（err,req,res,next）</p>
<p><strong>必须注册到所有路由之后</strong></p>
<h6 id="内置级别中间件"><a href="#内置级别中间件" class="headerlink" title="内置级别中间件"></a>内置级别中间件</h6><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">express<span class="hljs-selector-class">.static</span> <span class="hljs-comment">//快速托管静态资源的内置中间件（无兼容性）</span><br><br>express<span class="hljs-selector-class">.json</span> <span class="hljs-comment">//解析json格式的请求数据（4.16.0+）</span><br>app<span class="hljs-selector-class">.use</span>(express<span class="hljs-selector-class">.json</span>())<br><br>express<span class="hljs-selector-class">.urlencoded</span> <span class="hljs-comment">//解析URL -encooded格式请求数据（4.16.0+）</span><br>app<span class="hljs-selector-class">.use</span>(express<span class="hljs-selector-class">.urlencoded</span>(&#123;extended:false&#125;))<br></code></pre></td></tr></table></figure>
<p><code>express.json</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = express()<br><br>app.use(express.json())	<span class="hljs-comment">//配置解析中间件</span><br>app.use(express.urlencoded(&#123;<span class="hljs-attr">extended</span>:<span class="hljs-literal">false</span>&#125;))	<span class="hljs-comment">//另一种解析格式</span><br><br>app.post(<span class="hljs-string">&#x27;/user&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>	<span class="hljs-comment">//req.body这个属性可以获取客户端发送过来的请求体数据</span><br>	<span class="hljs-comment">//默认情况下，不配置河西表单数据中间件，req.body为undefined</span><br>	<span class="hljs-built_in">console</span>.log(req.body)<br>	res.send(<span class="hljs-string">&#x27;ok&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>


<h6 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h6><p>非express官方内置的</p>
<p>常用:body-parser</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">npm install body-parser	<span class="hljs-comment">//安装</span><br><span class="hljs-comment">//导入</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>)<br>app.<span class="hljs-keyword">use</span>(parser.urlencoded(&#123;extended:<span class="hljs-literal">false</span>&#125;))	<span class="hljs-comment">//调用</span><br></code></pre></td></tr></table></figure>
<h5 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h5><p>①定义中间件</p>
<p>②监听req的data事件</p>
<p>③监听req的end事件</p>
<p>④使用querystring模块解析请求体数据</p>
<p>⑤将解析出来的数据对象挂载为req.body</p>
<p>⑥将自定义中间件封装为模块</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">//导入处理字符串的querystring模块</span><br><span class="hljs-keyword">const</span> qs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;querystring&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = express()<br><br>app.use(<span class="hljs-function">(<span class="hljs-params">req,res,next</span>)=&gt;</span>&#123;<br>    <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment">//监听req的data事件</span><br>    req.on(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">chunk</span>)=&gt;</span>&#123;<br>        str += chunk<br>    &#125;)<br>    <span class="hljs-comment">//监听req的end事件</span><br>    req.on(<span class="hljs-string">&#x27;end&#x27;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>        req.body = qs.parse(str)    <span class="hljs-comment">//将字符串解析成JSON</span><br>        <span class="hljs-built_in">console</span>.log(req.body)<br>        next()<br>    &#125;)<br>&#125;)<br><br>app.post(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>	res.send(req.body)<br>&#125;)<br><br>app.listen(<span class="hljs-number">80</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>	<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>封装成模块</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">mybodyparser.js<br>-------------------<br>const qs = require(<span class="hljs-emphasis">&#x27;querystring&#x27;</span>)<br>funxtion mybodyparser(req,res,next)&#123;<br><span class="hljs-code">	.......</span><br>&#125;<br>moudle.exports = mybodyparser<br><br>===============================<br><br>app.js<br>------------------------<br>const mybodyparser = require(<span class="hljs-emphasis">&#x27;./mybodyparser.js&#x27;</span>)<br>app.use(mybodyparser)<br></code></pre></td></tr></table></figure>


<h4 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h4><h5 id="创建API路由模块"><a href="#创建API路由模块" class="headerlink" title="创建API路由模块"></a>创建API路由模块</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//router.js</span><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> router = express.Router()<br><br><span class="hljs-built_in">module</span>.export = router<br></code></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//app.js</span><br><span class="hljs-comment">//--------------------</span><br><span class="hljs-keyword">const</span> apiRouter = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;./router.js&#x27;</span>)<br>app.<span class="hljs-keyword">use</span>(<span class="hljs-string">&#x27;/api&#x27;</span>,router)<br></code></pre></td></tr></table></figure>
<h5 id="编写GET接口"><a href="#编写GET接口" class="headerlink" title="编写GET接口"></a>编写GET接口</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//apiRouter.js</span><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> router = express.Router()<br><br>router.get(<span class="hljs-string">&#x27;/get&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>	<span class="hljs-keyword">const</span> query = req.query	<span class="hljs-comment">//获取客服端查询字符</span><br>	res.send(&#123;<br>		status:<span class="hljs-number">0</span>,<br>		msg:<span class="hljs-string">&#x27;GET请求成功&#x27;</span>,<br>		data: query<br>	&#125;)<br>&#125;)<br><br><span class="hljs-built_in">module</span>.export = router<br></code></pre></td></tr></table></figure>
<h5 id="编写POST接口"><a href="#编写POST接口" class="headerlink" title="编写POST接口"></a>编写POST接口</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//apiRouter.js</span><br><span class="hljs-comment">//---------------------------</span><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> router = express.Router()<br><br>router.get(<span class="hljs-string">&#x27;/post&#x27;</span>,<span class="hljs-function">(<span class="hljs-params">req,res</span>)=&gt;</span>&#123;<br>	<span class="hljs-comment">//这之前要配置解析中间件</span><br>	<span class="hljs-keyword">const</span> query = req.body	<span class="hljs-comment">//获取客服端查询字符</span><br>	res.send(&#123;<br>		status:<span class="hljs-number">0</span>,<br>		msg:<span class="hljs-string">&#x27;POST请求成功&#x27;</span>,<br>		data: query<br>	&#125;)<br>&#125;)<br><br><span class="hljs-built_in">module</span>.export = router<br></code></pre></td></tr></table></figure>
<h5 id="JSONP接口"><a href="#JSONP接口" class="headerlink" title="JSONP接口"></a><code>JSONP</code>接口</h5><p>为了防止冲突，<code>jsonp</code>接口必须放到<code>cors</code>中间件之前</p>
<p><code>jsop</code>只支持<code>get</code>请求</p>
<p>实现J<code>SONP</code>接口的步骤</p>
<p>①获取客户端发送过来的回调函数的名字</p>
<p>②得到要通过<code>JSONP</code>形式发送给客户端的数据</p>
<p>③根据前两步得到的数据，拼接出一个函数调用的字符串</p>
<p>④把上一步拼接得到的字符串，响应给客户端的<code>&lt;script&gt;</code>标签进行解析执行</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">app</span>.<span class="hljs-built_in">get</span>(&#x27;/api/jsonp&#x27;(req,res)=&gt;&#123;<br>	<span class="hljs-keyword">const</span> funcName = req.<span class="hljs-keyword">query</span>.callback <span class="hljs-comment">//得到函数名</span><br>	<span class="hljs-keyword">const</span> data = &#123;name:&#x27;zs&#x27;,age:22&#125;   <span class="hljs-comment">//发给客户端的数据</span><br>	<span class="hljs-keyword">const</span> scriptStr = `<span class="hljs-variable">$&#123;funcName&#125;</span>(<span class="hljs-variable">$&#123;JSON</span>.stringify(data)&#125;)` <span class="hljs-comment">//拼接出函数的调用</span><br>	res.send(scriptStr) <span class="hljs-comment">//响应给客户端</span><br>&#125;)<br><br><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(cors()) <span class="hljs-comment">//后面使用cors</span><br></code></pre></td></tr></table></figure>


<h5 id="解决跨域问题"><a href="#解决跨域问题" class="headerlink" title="解决跨域问题"></a>解决跨域问题</h5><p>安装cors</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i cors<br></code></pre></td></tr></table></figure>
<p>导入并注册</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><code class="hljs isbl"><span class="hljs-comment">//要在路由之前导入注册</span><br><span class="hljs-variable">const</span> <span class="hljs-variable">cors</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;cors&#x27;</span>)</span><br><span class="hljs-variable">app.use</span>(<span class="hljs-function"><span class="hljs-title">cors</span>())</span><br></code></pre></td></tr></table></figure>
<h5 id="跨域资源共享（cors三个响应头）"><a href="#跨域资源共享（cors三个响应头）" class="headerlink" title="跨域资源共享（cors三个响应头）"></a>跨域资源共享（<code>cors</code>三个响应头）</h5><p>1.<code>Access-Control-Allow-Origin</code></p>
<p>指定允许访问该资源的外域<code>URL</code></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="hljs-string">&#x27;http://baibu.com&#x27;</span>) <span class="hljs-regexp">//</span>只允许百度访问<br><br>res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>) <span class="hljs-regexp">//</span>所有网站都可以访问<br></code></pre></td></tr></table></figure>
<p>2.<code>Access-Control-Allow-Headers</code></p>
<p>默认情况下，<code>cors</code>仅支持客户端向服务器发送9个请求头</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">Accept、 Accept-Language、 Content-Language、 DPR、 Downlink、 Save-Data、 Viewport-Width、 Width 、Content-<span class="hljs-constructor">Type(值仅限于<span class="hljs-params">text</span><span class="hljs-operator">/</span><span class="hljs-params">plain</span>、<span class="hljs-params">multipart</span><span class="hljs-operator">/</span><span class="hljs-params">form</span>-<span class="hljs-params">data</span>、<span class="hljs-params">application</span><span class="hljs-operator">/</span><span class="hljs-params">x</span>-<span class="hljs-params">www</span>-<span class="hljs-params">form</span>-<span class="hljs-params">urlencoded</span> 三者之一)</span><br><br><span class="hljs-comment">//使用</span><br>res.set<span class="hljs-constructor">Header(&#x27;Access-Control-Allow-Headers&#x27;,&#x27;Content-Type, X-Custom-Header&#x27;)</span><br></code></pre></td></tr></table></figure>
<p>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 <code>Access-Control-Allow-Headers</code> 对额外的请求头进行声明，否则这次请求会失败！</p>
<p>3.<code>Access-Control-Alow-Methods</code></p>
<p>默认情况下，<code>CORS</code>仅支持客户端发起<code>GET</code>、<code>POST</code>、<code>HEAD</code>请求。如果客户端希望通过<code>PUT</code>、<code>DELETE</code>等方式请求服务器的资源，则需要在服务器端，通过<code>Access-Control-Alow-Methods</code>来指明实际请求所允许使用的 <code>HTTP</code>方法。</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="hljs-string">&#x27;*&#x27;</span>) <span class="hljs-regexp">//</span>允许所有的请求方法<br><br>res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="hljs-string">&#x27;POST,GET,DELETE&#x27;</span>) <span class="hljs-regexp">//</span>只允许post,get，<span class="hljs-keyword">delete</span>方法<br></code></pre></td></tr></table></figure>


<h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><p>用来组织、存储、和管理数据的仓库</p>
<p>数据结构：数据库(database)、数据表(table)、数据行(row)、字段(filed)</p>
<h5 id="相关软件"><a href="#相关软件" class="headerlink" title="相关软件"></a>相关软件</h5><p>MySQL Server：专门用来提供数据存储和服务的软件</p>
<p>MySQL Workbench: 可视化的MySQL管理工具</p>
<h6 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h6><p>dataType类型</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">int <span class="hljs-comment">//整数</span><br><span class="hljs-function"><span class="hljs-title">varchar</span><span class="hljs-params">(len)</span></span>	<span class="hljs-comment">//字符串</span><br><span class="hljs-function"><span class="hljs-title">tinyint</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>	<span class="hljs-comment">//布尔值</span><br></code></pre></td></tr></table></figure>
<p>字段的特殊标识</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">PK</span><span class="hljs-params">(Primary Key)</span></span>	<span class="hljs-comment">//主键、唯一标识</span><br><span class="hljs-function"><span class="hljs-title">NN</span><span class="hljs-params">(Not Null)</span></span>	<span class="hljs-comment">//值不允许为空</span><br><span class="hljs-function"><span class="hljs-title">UQ</span><span class="hljs-params">(Unique)</span></span>		<span class="hljs-comment">//值唯一</span><br><span class="hljs-function"><span class="hljs-title">AI</span><span class="hljs-params">(Auto Increment)</span></span><span class="hljs-comment">//值自动增长</span><br></code></pre></td></tr></table></figure>
<h6 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h6><p>select 查询</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//查询所有内容</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tablename<br><br><span class="hljs-comment">//查询字段</span><br><span class="hljs-keyword">select</span> field1,field2 <span class="hljs-keyword">from</span> tablename<br></code></pre></td></tr></table></figure>
<p>insert into插入</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">insert</span> into tablename(field<span class="hljs-number">1</span>,field<span class="hljs-number">2</span>) values(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure>
<p>update更新</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">update tablename <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">field1</span>=新值，field2=新值 where field = 某值<br>				  要修改的内容          判断条件<br></code></pre></td></tr></table></figure>
<p>delete删除</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> tablename <span class="hljs-keyword">where</span> fiele=值<br>				 			条件<br></code></pre></td></tr></table></figure>
<h6 id="where子句"><a href="#where子句" class="headerlink" title="where子句"></a>where子句</h6><p>可用于查询，删除，修改</p>
<p>运算符</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">=等于  &lt;&gt;不等于(或 != )<br>&gt;		&lt;<br>&lt;=		&lt;=<br>BETWEEN 在某个范围<br>LIKE 	搜素某种模式,模糊搜索<br></code></pre></td></tr></table></figure>
<h6 id="and和or"><a href="#and和or" class="headerlink" title="and和or"></a>and和or</h6><p>and:必须同时满足多个条件</p>
<p>or:只要满足一个条件即可</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//id大于3，小于4的用户</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id&gt;<span class="hljs-number">3</span> and id&lt;<span class="hljs-number">4</span><br><br><span class="hljs-comment">//id&gt;3,或者性别为男的用户</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id&gt;<span class="hljs-number">3</span> or sex=<span class="hljs-string">&#x27;男&#x27;</span><br></code></pre></td></tr></table></figure>
<h6 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h6><p>对指定的结果集进行排序</p>
<p>升序：默认 加[asc]</p>
<p>降序：加上DESC</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//升序：asc可加可不加</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users  <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id<br><br><span class="hljs-comment">//降序：</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users  <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">desc</span><br></code></pre></td></tr></table></figure>
<p>多重排序</p>
<p>第一个字段为主排序，后面字段小范围排序(asc可省略)</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> status <span class="hljs-keyword">desc</span>,username <span class="hljs-keyword">asc</span><br></code></pre></td></tr></table></figure>
<h6 id="count"><a href="#count" class="headerlink" title="count"></a>count</h6><p>统计条数</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//id&gt;3的有多少</span><br><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id&gt;<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>
<h6 id="as-别名"><a href="#as-别名" class="headerlink" title="as  别名"></a>as  别名</h6><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">as</span> total <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id&gt;<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>
<h4 id="项目中操作MySQL"><a href="#项目中操作MySQL" class="headerlink" title="项目中操作MySQL"></a>项目中操作MySQL</h4><p>1.安装MySQL数据库的第三方模块(mysql)</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">npm init -y <span class="hljs-regexp">//</span>初始化，用于记录使用了哪些包<br><br>npm install mysql<br></code></pre></td></tr></table></figure>
<p>2.通过mysql模块连接到mysql数据库</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">const mysql = require(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br><br>const db = mysql.creatPool(&#123;<br>	host:<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,		<span class="hljs-regexp">//</span>数据库的ip地址<br>	user:<span class="hljs-string">&#x27;root&#x27;</span>,			<span class="hljs-regexp">//</span>登录数据库的账号<br>	passworld:<span class="hljs-string">&#x27;admin123&#x27;</span>,	<span class="hljs-regexp">//</span>登录密码<br>	database:<span class="hljs-string">&#x27;my_db_01&#x27;</span>,	<span class="hljs-regexp">//</span>指定要操作的数据表<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>3.通过mysql模块执行SQL语句</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.<span class="hljs-keyword">query</span>(&#x27;select 1&#x27;,(<span class="hljs-keyword">err</span>,results)=&gt;&#123;<br>	<span class="hljs-comment">//报错就输出err.message</span><br>	<span class="hljs-keyword">if</span>(<span class="hljs-keyword">err</span>) <span class="hljs-keyword">return</span> console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">err</span>.message)<br>	<span class="hljs-comment">//成功输出results</span><br>	console.<span class="hljs-built_in">log</span>(results)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h6><p>返回的是一个数组</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> sqlstr = &#x27;select * from users&#x27;<br><span class="hljs-keyword">db</span>.<span class="hljs-keyword">query</span>(sqlstr,(<span class="hljs-keyword">err</span>,results)=&gt;&#123;<br>	<span class="hljs-comment">//报错就输出err.message</span><br>	<span class="hljs-keyword">if</span>(<span class="hljs-keyword">err</span>) <span class="hljs-keyword">return</span> console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">err</span>.message)<br>	<span class="hljs-comment">//成功输出results</span><br>	console.<span class="hljs-built_in">log</span>(results)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h6><p>返回的是一个对象</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">const <span class="hljs-keyword">user</span> = &#123;username:<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-keyword">password</span>:<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>//待执行的<span class="hljs-keyword">SQL</span>语句，？代表占位符<br>const sqlstr = <span class="hljs-string">&#x27;insert into users (username,password) values (?,?)&#x27;</span><br><br>db.query(sqlstr,[<span class="hljs-keyword">user</span>.username,<span class="hljs-keyword">user</span>.<span class="hljs-keyword">password</span>],(err,results)=&gt;&#123;<br>	<span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> console.log(err.message)<br>	<span class="hljs-keyword">if</span>(results.affectedRows === <span class="hljs-number">1</span>)&#123;console.log(<span class="hljs-string">&#x27;插入成功&#x27;</span>)&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>简便写法(数据与字段一一对应时)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user = &#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;小明&#x27;</span>,<span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br><span class="hljs-comment">//待执行的SQL语句，？代表占位符</span><br><span class="hljs-keyword">const</span> sqlstr = <span class="hljs-string">&#x27;insert into users set ?&#x27;</span><br><br>db.query(sqlstr,user,<span class="hljs-function">(<span class="hljs-params">err,results</span>)=&gt;</span>&#123;<br>	<span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err.message)<br>	<span class="hljs-keyword">if</span>(results.affectedRows === <span class="hljs-number">1</span>)&#123;<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;插入成功&#x27;</span>)&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">const <span class="hljs-keyword">user</span> = &#123;id:<span class="hljs-number">10</span>,username:<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-keyword">password</span>:<span class="hljs-string">&#x27;000&#x27;</span>&#125;<br><br>const sqlstr = <span class="hljs-string">&#x27;update users set username=? ,password=? where id=?&#x27;</span><br><br>db.query(sqlstr,[<span class="hljs-keyword">user</span>.username,<span class="hljs-keyword">user</span>.<span class="hljs-keyword">password</span>，<span class="hljs-keyword">user</span>.id],(err,results)=&gt;&#123;<br>	<span class="hljs-keyword">if</span>(err) <span class="hljs-keyword">return</span> console.log(err.message)<br>	<span class="hljs-keyword">if</span>(results.affectedRows === <span class="hljs-number">1</span>)&#123;console.log(<span class="hljs-string">&#x27;更新成功&#x27;</span>)&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>简写(数据与字段一一对应时)</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> user = &#123;id:10,username:&#x27;aaa&#x27;,password:&#x27;000&#x27;&#125;<br><br><span class="hljs-keyword">const</span> sqlstr = &#x27;<span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> ? where id=?&#x27;<br><br><span class="hljs-keyword">db</span>.<span class="hljs-keyword">query</span>(sqlstr,[user,user.id],(<span class="hljs-keyword">err</span>,results)=&gt;&#123;<br>	<span class="hljs-keyword">if</span>(<span class="hljs-keyword">err</span>) <span class="hljs-keyword">return</span> console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">err</span>.message)<br>	<span class="hljs-keyword">if</span>(results.affectedRows === 1)&#123;console.<span class="hljs-built_in">log</span>(&#x27;更新成功&#x27;)&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><p>根据id这样的唯一标识，来删除对应的数据</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> sqlstr = &#x27;delete from users where id=?&#x27;<br><br><span class="hljs-comment">//当只有一个?的时候，可以直接写值，否则要加[]</span><br><span class="hljs-keyword">db</span>.<span class="hljs-keyword">query</span>(sqlstr,7,(<span class="hljs-keyword">err</span>,results)=&gt;&#123;<br>	<span class="hljs-keyword">if</span>(<span class="hljs-keyword">err</span>) <span class="hljs-keyword">return</span> console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">err</span>.message)<br>	<span class="hljs-keyword">if</span>(results.affectedRows === 1)&#123;console.<span class="hljs-built_in">log</span>(&#x27;删除成功&#x27;)&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="标记删除-重要，一般使用这个方法"><a href="#标记删除-重要，一般使用这个方法" class="headerlink" title="标记删除(重要，一般使用这个方法)"></a>标记删除(重要，一般使用这个方法)</h6><p>通常不直接使用delete语句删除，而是通过修改字段来标记删除</p>
<p>例:添加字段，status,</p>
<p>status=0时，存在用户</p>
<p>status为1时，表示用户已被删除</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> sqlstr = &#x27;<span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> status=? where id=?&#x27;<br><br><span class="hljs-keyword">db</span>.<span class="hljs-keyword">query</span>(sqlstr,[1,6],(<span class="hljs-keyword">err</span>,results)=&gt;&#123;<br>	<span class="hljs-keyword">if</span>(<span class="hljs-keyword">err</span>) <span class="hljs-keyword">return</span> console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">err</span>.message)<br>	<span class="hljs-keyword">if</span>(results.affectedRows === 1)&#123;console.<span class="hljs-built_in">log</span>(&#x27;删除成功&#x27;)&#125;<br>&#125;)<br></code></pre></td></tr></table></figure>
<h4 id="web开发模式"><a href="#web开发模式" class="headerlink" title="web开发模式"></a>web开发模式</h4><h5 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h5><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><p>前端耗时少：服务器生成页面，浏览器渲染，移动端省电</p>
<p>有利于SEO：服务器响应的是完整页面，爬虫更易爬取，有利于SEO</p>
<h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><p>占用服务器资源。服务器完成页面的拼接，如果请求过多，会对服务器造成一定的压力</p>
<p>不利于前后端分离，开发效率低，使用服务器渲染，无法进行分工合作，尤其对前端复杂度搞得项目，不利于项目的高效开发</p>
<h5 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h5><p>依赖于ajax技术，后端负责提供API接口与，前端负责调用接口的开发模式</p>
<h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><p>开发体检好：前端专注于UI页面的开发，后端专注于API的开发</p>
<p>用户体验好：局部刷新</p>
<p>减轻了服务器端的渲染压力：页面最终是在用户浏览器中生成</p>
<h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><p>不利于SEO(解决方案：利用vue,react前端框架的SSR技术可以解决)</p>
<h4 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h4><p>服务器渲染推荐使用session认证机制</p>
<p>前端分离推荐使用Jwt认证机制</p>
<h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><p>存储在用户浏览器中不超过<strong>4kb</strong>的字符串</p>
<p>由<strong>一个名、一个值</strong>和其他几个用于控制Cookie<strong>有效期</strong>、<strong>安全性</strong>、<strong>使用范围</strong>的<strong>可选属性</strong>组成</p>
<p>不同域名的Cookie是相互独立的</p>
<p>客户端发起请求时，会自动把当前域名下未过期的Cookie发送到服务器</p>
<p>不具有安全性，容易被伪造</p>
<h6 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h6><p>自动发送、域名独立、过期时限、4kb限制</p>
<h6 id="提高身份认证的安全性"><a href="#提高身份认证的安全性" class="headerlink" title="提高身份认证的安全性"></a>提高身份认证的安全性</h6><p>会员卡+刷卡认证的设计理念，是session认证机制的精髓</p>
<h6 id="session的工作原理"><a href="#session的工作原理" class="headerlink" title="session的工作原理"></a>session的工作原理</h6><p>客户端提交账号密码后，服务器会生成一个cookie给客户端，客户端再次发起请求时，通过请求头自动发送当前域名下的cookie，把当前用户对应的页面内容响应给浏览器</p>
<h5 id="express中使用session认证"><a href="#express中使用session认证" class="headerlink" title="express中使用session认证"></a>express中使用session认证</h5><p>安装：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> express-session<br></code></pre></td></tr></table></figure>
<p>配置</p>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.use</span>(session(&#123;<br>	<span class="hljs-attribute">secret</span>:<span class="hljs-string">&#x27;keyboard cat&#x27;</span>,	<span class="hljs-comment">//secret属性值可以为任意字符，用于加密</span><br>	<span class="hljs-attribute">resave</span>:false,			<span class="hljs-comment">//固定写法</span><br>    <span class="hljs-attribute">saveUninitialized</span>:true	<span class="hljs-comment">//固定写法</span><br>&#125;))<br></code></pre></td></tr></table></figure>
<p>向session中存储数据</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">app.post(<span class="hljs-string">&#x27;/api/login&#x27;</span>,(req,res)=&gt;&#123;<br>	//判断用户提交的登录信息是否正确<br>	<span class="hljs-keyword">if</span>(req.body.username !== <span class="hljs-string">&#x27;admin&#x27;</span> || req.body.<span class="hljs-keyword">password</span> !== <span class="hljs-string">&#x27;000000&#x27;</span>)&#123;<br>		<span class="hljs-keyword">return</span> res.send(&#123;status:<span class="hljs-number">1</span>,msg:<span class="hljs-string">&#x27;登录失败&#x27;</span>&#125;)<br>	&#125;<br>	//express-<span class="hljs-keyword">session</span>中间件配置成功后，才能调用req,<span class="hljs-keyword">session</span><br>	req.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">user</span> = req.body	//将用户的信息，存储到<span class="hljs-keyword">session</span>中<br>	req.<span class="hljs-keyword">session</span>.islogin = <span class="hljs-keyword">true</span>	//将用户的登录状态存储到<span class="hljs-keyword">session</span>中<br>	<br>	res.send(&#123;status:<span class="hljs-number">0</span>,msg:<span class="hljs-string">&#x27;登录成功&#x27;</span>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>从session中取数据</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">app.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;/api/username&#x27;</span>,(req,<span class="hljs-keyword">res</span>)=&gt;&#123;<br>	//判断用户是否登录<br>	<span class="hljs-keyword">if</span>(!req.session.islogin)&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">res</span>.send(&#123;statu<span class="hljs-variable">s:1</span>,ms<span class="hljs-variable">g:</span><span class="hljs-string">&#x27;fail&#x27;</span>&#125;)<br>	&#125;<br>	<br>	<span class="hljs-keyword">res</span>.send(&#123;statu<span class="hljs-variable">s:0</span>,ms<span class="hljs-variable">g:</span><span class="hljs-string">&#x27;success&#x27;</span>,username:req.session.user.username&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>
<p>清空session</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">app<span class="hljs-selector-class">.post</span>(<span class="hljs-string">&#x27;/api/logout&#x27;</span>,(req,res)=&gt;&#123;<br>	req<span class="hljs-selector-class">.session</span><span class="hljs-selector-class">.destroy</span>()<br>	res<span class="hljs-selector-class">.send</span>(&#123;<br>		status:<span class="hljs-number">0</span>,<br>		msg:<span class="hljs-string">&#x27;退出登录成功&#x27;</span><br>	&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>
<h5 id="JWT认证机制"><a href="#JWT认证机制" class="headerlink" title="JWT认证机制"></a>JWT认证机制</h5><p>JSON Web Token:目前最流行的跨域认证解决方案。</p>
<h6 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h6><p>用户的信息通过Token字符串的形式，保存在客户端浏览器中。服务器通过还原Token字符串的形式来认证用户的身份。</p>
<h6 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h6><p>Header(头部)、Signature(签名)、安全相关部分，保证token的安全性</p>
<p>Payload(有效载荷)：真正的用户信息，是加密过后的字符串</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">Header<span class="hljs-selector-class">.Payload</span><span class="hljs-selector-class">.Signature</span>	<span class="hljs-comment">//用英文“.”分割</span><br></code></pre></td></tr></table></figure>
<h6 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h6><p>存储到localStorage或sessionStorge中</p>
<p>此后的每一次通信，都会带上这个JWT字符串，</p>
<p>推荐把JWT放在http请求头的Authorization字段中，格式如下</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">Authorization:</span>Bearer<span class="hljs-params">&lt;token&gt;</span><br></code></pre></td></tr></table></figure>
<h5 id="在express中使用JWT"><a href="#在express中使用JWT" class="headerlink" title="在express中使用JWT"></a>在express中使用JWT</h5><h6 id="安装JWT相关的包"><a href="#安装JWT相关的包" class="headerlink" title="安装JWT相关的包"></a>安装JWT相关的包</h6><p>jsonwebtoken:生成JWT字符串</p>
<p>express-jwt:将JWT还原成JSON对象</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span><span class="hljs-keyword">jsonwebtoken </span>express-<span class="hljs-keyword">jwt</span><br></code></pre></td></tr></table></figure>
<h6 id="导入："><a href="#导入：" class="headerlink" title="导入："></a>导入：</h6><figure class="highlight isbl"><table><tr><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">const</span> <span class="hljs-variable">jsonwebtoken</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="hljs-variable">const</span> <span class="hljs-variable">expressjwt</span> = <span class="hljs-function"><span class="hljs-title">require</span>(<span class="hljs-string">&#x27;express-jwt&#x27;</span>)</span><br></code></pre></td></tr></table></figure>
<h6 id="定义secret秘钥"><a href="#定义secret秘钥" class="headerlink" title="定义secret秘钥"></a>定义secret秘钥</h6><figure class="highlight actionscript"><table><tr><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> secretKey = <span class="hljs-string">&#x27;haha^_^&#x27;</span>   <span class="hljs-comment">//字符串自定义</span><br></code></pre></td></tr></table></figure>
<h6 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h6><p>在登录成功后生成</p>
<p>调用<code>jwt.sign(用户的信息对象，加密的秘钥，token的有效期)</code>生成</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">const tokenStr = jwt.sign(&#123;username:userinfo.username&#125;,secretKey,&#123;expiresIn:<span class="hljs-string">&#x27;30s&#x27;</span>&#125;)<br><br><span class="hljs-regexp">//</span>响应给客户端<br>res.send(&#123;<br>	status:<span class="hljs-number">200</span>,<br>	message:<span class="hljs-string">&#x27;登录成功&#x27;</span>,<br>	token:tokenStr	<span class="hljs-regexp">//</span>要发送给客户端的token字符串<br>&#125;)<br></code></pre></td></tr></table></figure>
<h6 id="还原为JSON对象"><a href="#还原为JSON对象" class="headerlink" title="还原为JSON对象"></a>还原为JSON对象</h6><p>通过express-jwt中间件，自动将客户端发送的Token解析还原成JSON对象</p>
<p>密码不要放到Token中</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">app</span>.<span class="hljs-keyword">use</span>(expressJWT(&#123;secret:secretKey&#125;).unless(&#123;path:[/^\/api\<span class="hljs-comment">//]&#125;))</span><br>		注册为全局	解析<span class="hljs-keyword">Token</span>中间件		指定哪些接口不需要权限<br></code></pre></td></tr></table></figure>
<h6 id="获取用户信息"><a href="#获取用户信息" class="headerlink" title="获取用户信息"></a>获取用户信息</h6><p>配置成功后：解析出来的用户信息，挂载到req.user上</p>
<h6 id="捕获解析JWT失败后产生的错误"><a href="#捕获解析JWT失败后产生的错误" class="headerlink" title="捕获解析JWT失败后产生的错误"></a>捕获解析JWT失败后产生的错误</h6><p>如果Token字符串过期或不合法，会产生一个解析失败的错误，影响项目运行，通过express的错误中间件捕获这个错误</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">app.use((err,req,<span class="hljs-keyword">res</span>,<span class="hljs-keyword">next</span>)=&gt;&#123;<br>	//token解析失败导致的错误<br>	<span class="hljs-keyword">if</span>(err.name === <span class="hljs-string">&#x27;UnauthorizedError&#x27;</span>)&#123;<br>		<span class="hljs-keyword">return</span>　<span class="hljs-keyword">res</span>.send(&#123;statu<span class="hljs-variable">s:401</span>,message:<span class="hljs-string">&#x27;无效的token&#x27;</span>&#125;)<br>	&#125;<br>	//其他原因导致的错误<br>	<span class="hljs-keyword">res</span>.send(&#123;statu<span class="hljs-variable">s:500</span>,message:<span class="hljs-string">&#x27;未知错误&#x27;</span>&#125;)<br><br>&#125;)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django-MVC模式</title>
    <url>/2021/02/20/Django-MVC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h3><p>动态的程序设计,使后续对程序的修改和扩展简化,并使程序某一部分的重复利用成为可能</p>
<p>M: Model,代表数据存取层</p>
<p>V: View,系统中显示什么,怎么显示</p>
<p>C: Controller,根据用户输入和需要访问的类型</p>
<h3 id="MTV模式"><a href="#MTV模式" class="headerlink" title="MTV模式"></a>MTV模式</h3><p>MTV模式是以Django为框架的网站模式</p>
<p>M: Model,数据存取层</p>
<p>T : Template,表现层</p>
<p>V: View,业务逻辑层</p>
<p>请求响应流程</p>
<p><img src="/img/QQ%E6%88%AA%E5%9B%BE20210220092928.png"></p>
<p>自定义模板位置</p>
<p>目的:模板目录位置不在应用内部</p>
<p>​        便于统一维护模板</p>
<p>编辑: 设置settings.py文件中的templates的值</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml">TEMPLATES = [</span><br><span class="xml">    &#123;</span><br><span class="xml">        &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;,</span><br><span class="xml">        &#x27;DIRS&#x27;: [os.path.join(BASE_DIR,&#x27;templates&#x27;)],   #将模板目录指定为根目录里的templates</span><br><span class="xml">        &#x27;APP_DIRS&#x27;: False,  #每个项目里面不在配置模板目录</span><br><span class="xml">        &#x27;OPTIONS&#x27;: &#123;</span><br><span class="xml">            &#x27;context_processors&#x27;: [</span><br><span class="xml">                &#x27;django.template.context_processors.debug&#x27;,</span><br><span class="xml">                &#x27;django.template.context_processors.request&#x27;,</span><br><span class="xml">                &#x27;django.contrib.auth.context_processors.auth&#x27;,</span><br><span class="xml">                &#x27;django.contrib.messages.context_processors.messages&#x27;,</span><br><span class="xml">            ],</span><br><span class="xml">        &#125;,</span><br><span class="xml">    &#125;,</span><br><span class="xml">]</span><br></code></pre></td></tr></table></figure>
<p>静态文件</p>
<p>下载botstrap解压后将里面的fonts,js,css文件夹放入static文件夹里</p>
<p>点击跳转跳转配置</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml">#<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">url</span></span> &#x27;blog:blog_title&#x27; %&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>小博丨博客<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><br><span class="xml">#修改mysite下的urls.py文件</span><br><span class="xml">urlpatterns = [</span><br><span class="xml">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="xml">    path(&#x27;blog/&#x27;,include(&#x27;blog.urls&#x27;,namespace=&#x27;blog&#x27;)),     #在这儿加上namespace=&#x27;blog&#x27;</span><br><span class="xml">]</span><br><br><span class="xml">#修改blog下的urls.py文件</span><br><span class="xml">app_name = &#x27;blog&#x27;	#增加这一行</span><br><br><span class="xml">urlpatterns = [</span><br><span class="xml">    path(&#x27;&#x27;, views.blog_title,name=&#x27;blog_title&#x27;),   #这儿加上name=&#x27;blog_title&#x27;</span><br><span class="xml">    path(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">int:article_id</span>&gt;</span>&#x27;, views.blog_article,name=&#x27;blog_article&#x27;)	#这儿加上name=&#x27;blog_article&#x27;</span><br><span class="xml">]</span><br></code></pre></td></tr></table></figure>
<p>点击 小博丨博客  会跳转到 blog_title页面</p>
<p>引入html文件</p>
<p>base.html 如何引入刚刚写好的header与footer</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;header.html&#x27; %&#125;</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;footer.html&#x27; %&#125;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-ORM语法</title>
    <url>/2021/02/16/Django-ORM%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Django-ORM基本语法"><a href="#Django-ORM基本语法" class="headerlink" title="Django-ORM基本语法"></a>Django-ORM基本语法</h1><p>在cmd中进入根目录(myproject),进入交互交互模式</p>
<h5 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h5><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> <span class="hljs-keyword">shell</span>    #进入交互模式<br></code></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 引入模块</span><br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br><span class="hljs-keyword">from</span> blog.models <span class="hljs-keyword">import</span> BlogArticles<br></code></pre></td></tr></table></figure>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"># 获得User中的用户名为damin的对象<br>admin = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span>objects.get(username=&#x27;admin&#x27;)   #username = &#x27;用户名&#x27; 这个用户名必须在数据库里存在<br><br>#创建一篇博客文章<br>bolg = <span class="hljs-constructor">BlogArticles(<span class="hljs-params">title</span>=&#x27;<span class="hljs-params">hello</span> <span class="hljs-params">world</span>&#x27;,<span class="hljs-params">author</span>=<span class="hljs-params">admin</span>,<span class="hljs-params">body</span>=&#x27;<span class="hljs-params">hello</span>,<span class="hljs-params">i</span> <span class="hljs-params">am</span> <span class="hljs-params">coming</span>&#x27;)</span><br><br>#保存,不要忘记,不能省略,保存后数据表中就有这篇文章了<br>blog.save<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure>


<h5 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Blogs = BlogArticles.objects.<span class="hljs-built_in">all</span>()   <span class="hljs-comment">#查询所有文章</span><br>Blogs      <span class="hljs-comment">#执行这个就可以获得所有文章的title</span><br><br><span class="hljs-comment"># 循环出所有文章</span><br><span class="hljs-keyword">for</span> blog <span class="hljs-keyword">in</span> blogs:<br>    print(blog.<span class="hljs-built_in">id</span>,blog.publish,blog.title,blog.author)<br>    <br>    <br><span class="hljs-comment">#查询ID为1的文章</span><br>b = BlogArticles.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>)<br>b<br><br><span class="hljs-comment">#查询作者admin写的文章</span><br>BlogArticles.objects.<span class="hljs-built_in">filter</span>(author=admin)<br><br><span class="hljs-comment"># 反向查询,根据用户名查询用户发布的文章</span><br>admin.blog_posts.<span class="hljs-built_in">all</span>()<br></code></pre></td></tr></table></figure>
<h5 id="修改保存操作"><a href="#修改保存操作" class="headerlink" title="修改保存操作"></a>修改保存操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改操作</span><br>b = BlogArticles.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>)<br>b<br>b.title=<span class="hljs-string">&#x27;新的文章名&#x27;</span><br>b.save()    <span class="hljs-comment">#保存</span><br><br><span class="hljs-comment">#删除操作</span><br>b.delete()<br></code></pre></td></tr></table></figure>


<h5 id="官方文档查询操作链接"><a href="#官方文档查询操作链接" class="headerlink" title="官方文档查询操作链接"></a>官方文档查询操作链接</h5><p><a href="https://docs.djangoproject.com/zh-hans/3.0/topics/db/queries/">https://docs.djangoproject.com/zh-hans/3.0/topics/db/queries/</a></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-个人信息</title>
    <url>/2021/02/28/Django-%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-ajax</title>
    <url>/2021/03/01/Django-ajax/</url>
    <content><![CDATA[<p>AJAX: Asynchronous JavaScript and XML,异步JavaScript和XML.</p>
<p>​    用JavaScript向服务器发送必要数据</p>
<p>​        XML</p>
<p>​        JSON</p>
<p>​    接受服务器的反馈</p>
<p>​    优点:不更新整个页面的前提下维护数据</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-内置登录退出</title>
    <url>/2021/02/21/Django-%E5%86%85%E7%BD%AE%E7%99%BB%E5%BD%95%E9%80%80%E5%87%BA/</url>
    <content><![CDATA[<p>内置应用</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">INSTALLED_APPS</span><br></code></pre></td></tr></table></figure>


<p>认证逻辑封装在中间件csrf</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">MIDDLEWARE</span><br></code></pre></td></tr></table></figure>


<p>身份验证系统官方网站文档</p>
<p><a href="https://docs.djangoproject.com/en/3.0/topics/auth/default/#all-authentication-views">https://docs.djangoproject.com/en/3.0/topics/auth/default/#all-authentication-views</a> ·</p>
<p>显示用户登录状态</p>
<figure class="highlight q"><table><tr><td class="code"><pre><code class="hljs q">auth.<span class="hljs-built_in">views</span>.LoginView<br></code></pre></td></tr></table></figure>


<p>显示退出状态</p>
<figure class="highlight q"><table><tr><td class="code"><pre><code class="hljs q">auth.<span class="hljs-built_in">views</span>.LogoutView<br></code></pre></td></tr></table></figure>


<p>打开account目录下的urls ,添加代码</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> <span class="hljs-type">path</span><br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><span class="hljs-keyword">from</span> django.contrib.auth <span class="hljs-keyword">import</span> views <span class="hljs-keyword">as</span> auth_views		#添加这一句<br><br>app_name = <span class="hljs-string">&#x27;account&#x27;</span><br><br>urlpatterns = [<br>   # path(<span class="hljs-string">&#x27;login/&#x27;</span>, views.user_login,<span class="hljs-type">name</span>=<span class="hljs-string">&#x27;user_login&#x27;</span>),		#添加这下面的两句<br>    path(<span class="hljs-string">&#x27;login/&#x27;</span>,auth_views.LoginView.as_view(template_name=<span class="hljs-string">&#x27;account/login2.html&#x27;</span>),<span class="hljs-type">name</span>=<span class="hljs-string">&#x27;user_login&#x27;</span>),	#登录<br>    path(<span class="hljs-string">&#x27;logout/&#x27;</span>, auth_views.LogoutView.as_view(template_name=<span class="hljs-string">&#x27;account/logout.html&#x27;</span>), <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;user_logout&#x27;</span>),	#退出<br>]<br></code></pre></td></tr></table></figure>


<p>强制登录后转到blog页面</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#settings.py末尾添加下面代码</span><br><br><span class="hljs-attr">LOGIN_REDIRECT_URL</span> = <span class="hljs-string">&#x27;/blog/&#x27;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-图文编辑</title>
    <url>/2021/03/02/Django-%E5%9B%BE%E6%96%87%E7%BC%96%E8%BE%91/</url>
    <content><![CDATA[<p>目标</p>
<p>​    注册用户发布博客</p>
<p>​    使用Markdown编辑器实现图文编辑</p>
<p>开发流程</p>
<ol>
<li>创建模型类BlogArtucles   (已有)</li>
<li>创建blog应用的forms.py文件</li>
<li>编写视图函数,处理用户提交的表单</li>
<li>设置路由</li>
<li>编写前端模板</li>
<li>设置发布博客的入口链接</li>
</ol>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>安装-Django</title>
    <url>/2021/02/15/Django-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="1-安装Django"><a href="#1-安装Django" class="headerlink" title="1.安装Django"></a>1.安装Django</h3><h5 id="1-1安装Django"><a href="#1-1安装Django" class="headerlink" title="1.1安装Django"></a>1.1安装Django</h5><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> Django<br></code></pre></td></tr></table></figure>
<h5 id="1-2指定安装Django版本"><a href="#1-2指定安装Django版本" class="headerlink" title="1.2指定安装Django版本"></a>1.2指定安装Django版本</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">pip install Django==<span class="hljs-number">2.2</span>        <span class="hljs-comment">#指定2.2的版本</span><br></code></pre></td></tr></table></figure>
<h5 id="1-3查验版本"><a href="#1-3查验版本" class="headerlink" title="1.3查验版本"></a>1.3查验版本</h5><p>进入Python交互模式后输入以下指令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> django<br>django.get_version()<br></code></pre></td></tr></table></figure>
<h3 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h3><h5 id="2-1创建项目目录"><a href="#2-1创建项目目录" class="headerlink" title="2.1创建项目目录"></a>2.1创建项目目录</h5><p>​    进入目录</p>
<p>​    执行创建项目命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">mkdir myproject       <span class="hljs-comment"># 创建目录</span><br>cd myproject    <span class="hljs-comment">#进入目录</span><br><br>django-admin startproject mysite .   <span class="hljs-comment"># mysite 是项目名称 可以自己修改,mysite后面的那个点不要忽略了,意思是在当前文件夹下创建项目</span><br></code></pre></td></tr></table></figure>
<p>此刻 myproject 文件夹下应该有以下文件或文件夹</p>
<p>manage.py       mysite</p>
<h5 id="2-2执行运行项目指令"><a href="#2-2执行运行项目指令" class="headerlink" title="2.2执行运行项目指令"></a>2.2执行运行项目指令</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Python manage.py runserver<br></code></pre></td></tr></table></figure>
<p>​    执行成功后打开返回的网址</p>
<p>​    一般是这个网址( <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> )</p>
<p>​    打开后能看见一个绿色的小火箭就说明成功了</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-应用与路由</title>
    <url>/2021/02/15/Django-%E5%BA%94%E7%94%A8%E4%B8%8E%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h3 id="1-项目与应用"><a href="#1-项目与应用" class="headerlink" title="1.项目与应用"></a>1.项目与应用</h3><h5 id="1-1创建应用"><a href="#1-1创建应用" class="headerlink" title="1.1创建应用"></a>1.1创建应用</h5><p>​     django-admin 可以查看Django命令</p>
<p>​    一个项目可以对应多个应用</p>
<p>​    在项目根目录(myproject)下创建应用:blog</p>
<p>​    执行以下命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">python manage.py startapp blog<br></code></pre></td></tr></table></figure>
<p>​    用 编辑器(vscode,pycharm) 打开myproject文件夹</p>
<p>​    在blog目录下会有以下已经自动生成的py文件,这就体现出了Django框    架的意义了</p>
<h5 id="1-2-文件说明"><a href="#1-2-文件说明" class="headerlink" title="1.2 文件说明"></a>1.2 文件说明</h5><p>settings.py    主要是对项目做一些初始化的设置,针对整个项目进行有关参数的配置,在settings文件的INSTALLED_APPS里面末尾添加应用名字  ‘blog’  不要忘记 逗号.</p>
<p>​                        在77行有一个DATABASE,这个是设置数据库的,我们这边使用默认设置.</p>
<p>​                        26行的DEBUG 在开发模式下需要改成 DEBUG=True,在生产环境下DEBUG=False</p>
<p>​                        107 行    LANGUAGE_CODE = ‘zh-hans’   显示中文</p>
<p>​                                        TIME_ZONE = ‘Asia/Shanghai’   设置时区(东八区)</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml">INSTALLED_APPS = [</span><br><span class="xml">    &#x27;django.contrib.admin&#x27;,</span><br><span class="xml">    &#x27;django.contrib.auth&#x27;,</span><br><span class="xml">    &#x27;django.contrib.contenttypes&#x27;,</span><br><span class="xml">    &#x27;django.contrib.sessions&#x27;,</span><br><span class="xml">    &#x27;django.contrib.messages&#x27;,</span><br><span class="xml">    &#x27;django.contrib.staticfiles&#x27;,</span><br><span class="xml">    &#x27;blog&#x27;,     #在这儿添加,这个在settings.py文件的33行</span><br><span class="xml">]</span><br></code></pre></td></tr></table></figure>
<p>urls.py    这个文件是用来配置URL的,将里面末尾代码修改成以下这样</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml">from django.contrib import admin</span><br><span class="xml">from django.urls import path,include</span><br><br><span class="xml">urlpatterns = [</span><br><span class="xml">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="xml">    path(&#x27;blog/&#x27;,include(&#x27;blog.urls&#x27;)),</span><br><span class="xml">]</span><br></code></pre></td></tr></table></figure>
<p>admin.py    可以自定义Django管理工具</p>
<p>app.py       对应用的一些配置</p>
<p>models.py    数据模型文件</p>
<p>tests.py       测试文档</p>
<p>views.py    用于保存响应各种请求的函数或者类</p>
<h3 id="2-编辑应用"><a href="#2-编辑应用" class="headerlink" title="2.编辑应用"></a>2.编辑应用</h3><p>在views.py 文件中简单写一个视图函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">home</span>(<span class="hljs-params">request</span>):</span>   <span class="hljs-comment"># request 必不可少</span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br></code></pre></td></tr></table></figure>
<p>在urls.py文件中配置一下路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>,views.home),<br>]<br></code></pre></td></tr></table></figure>
<p>保存上面所有修改的文件</p>
<h3 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h3><p>​    执行 </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Python manage runserver</span><br></code></pre></td></tr></table></figure>
<p>打开返回的网址 <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> </p>
<p>需要在网址后面加上 blog    <a href="http://127.0.0.1:8000/blog">http://127.0.0.1:8000/blog</a>   </p>
<p>这样就成功的创建了一个项目</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-密码</title>
    <url>/2021/02/26/Django-%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-模型与超管</title>
    <url>/2021/02/16/Django-%E6%A8%A1%E5%9E%8B%E4%B8%8E%E8%B6%85%E7%AE%A1/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="1-模型"><a href="#1-模型" class="headerlink" title="1.模型"></a>1.模型</h3><h5 id="1-1网页内容来源"><a href="#1-1网页内容来源" class="headerlink" title="1.1网页内容来源"></a>1.1网页内容来源</h5><ul>
<li><p>​    静态: 直接写到HTML文件中</p>
</li>
<li><p>​    动态: 来自数据库</p>
<p>​            使用sql语句读取数据库</p>
<p>​            Django通过ORM实现对数据库的读写</p>
<p>​            </p>
</li>
</ul>
<h5 id="1-2-ORM"><a href="#1-2-ORM" class="headerlink" title="1.2  ORM"></a>1.2  ORM</h5><p>​    ORM优点: 可移植性强,安全性好,查询语法简单</p>
<p>​    ORM实现方法</p>
<ul>
<li><p>编写数据类型</p>
</li>
<li><p>位置:models.py(也可以是其他文件)</p>
</li>
<li><p>继承:django.db.models.Model</p>
</li>
<li><p>对应的数据表: appname_modelname,     (都是小写字母)</p>
</li>
<li><p>创建数据表库: 迁移操作</p>
<p>​    Python manage.py makemigrations</p>
<p>​    python manage.py  migrate</p>
</li>
</ul>
<p>在models.py文件下写入以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone    <span class="hljs-comment">#引入时间模块</span><br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlogArticles</span>(<span class="hljs-params">models.Model</span>):</span>    <span class="hljs-comment"># 定义模型类名称BlogArticles,继承models.Model类</span><br>    title = models.CharField(max_length=<span class="hljs-number">300</span>)    <span class="hljs-comment"># 字段 每一个字段后面都有一个field类的实例</span><br>    author = models.ForeignKey(User, on_delete=models.CASCADE,related_name=<span class="hljs-string">&#x27;blog_posts&#x27;</span>)<br>    body = models.TextField()       <br>    <span class="hljs-comment">#字段类型查看网址 https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#model-field-types</span><br><br>    publish = models.DateTimeField(default=timezone.now)     <span class="hljs-comment"># 字段</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mata</span>:</span>                            <span class="hljs-comment"># 内部类</span><br>        orderby = (<span class="hljs-string">&#x27;-publish&#x27;</span>,)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.title<br></code></pre></td></tr></table></figure>
<p><img src="/img/QQ%E6%88%AA%E5%9B%BE20210216144907.png"></p>
<p> author = models.ForeignKey(User, on_delete=models.CASCADE,<br>        related_name=’blog_posts’)        </p>
<p>​         ForeignKey:外键,—对多(多对一)关系</p>
<p>​        User:被关联的类</p>
<p>​        on_delete=models.CASCADE:联级删除</p>
<p>​        related_name=‘blog _posts’: User的实例以blog _posts属性反向查询到BlogArticles的实例</p>
<h5 id="1-3-迁移数据"><a href="#1-3-迁移数据" class="headerlink" title="1.3 迁移数据"></a>1.3 迁移数据</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">python manage.py mekemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure>
<p>查看数据表结构</p>
<p>​        可视化方法   :<a href="https://sqlitestudio.pl/index.rvt">https://sqlitestudio.pl/index.rvt</a></p>
<p>​        sqlite操作界面</p>
<h3 id="2-超管"><a href="#2-超管" class="headerlink" title="2.超管"></a>2.超管</h3><h5 id="2-1创建超管并登录界面"><a href="#2-1创建超管并登录界面" class="headerlink" title="2.1创建超管并登录界面"></a>2.1创建超管并登录界面</h5><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> createsuperuser  #创建超管 并按照提示设置用户名,邮箱,密码<br><br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> runserver   #运行项目<br></code></pre></td></tr></table></figure>
<p>运行项目并用浏览器打开这个网址   <a href="http://localhost:8000/admin/">http://localhost:8000/admin/</a></p>
<h5 id="2-2将blog模型增加到管理应用里面"><a href="#2-2将blog模型增加到管理应用里面" class="headerlink" title="2.2将blog模型增加到管理应用里面"></a>2.2将blog模型增加到管理应用里面</h5><p>编辑blog下面的admin.py文件,编辑如下</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> <span class="hljs-keyword">admin</span><br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> BlogArticles<br><br><span class="hljs-keyword">admin</span>.site.register(BlogArticles)<br></code></pre></td></tr></table></figure>
<p>保存后刷新上面的网页,就可以发布博客了</p>
<p>如果想要博客列表展示更多信息可以修改admin.py下的代码,例如</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> <span class="hljs-keyword">admin</span><br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> BlogArticles<br><br><span class="hljs-keyword">class</span> BlogArticlesAdmin(<span class="hljs-keyword">admin</span>.ModelAdmin):<br>    list_display = (<span class="hljs-string">&#x27;title&#x27;</span>,<span class="hljs-string">&#x27;author&#x27;</span>,<span class="hljs-string">&#x27;publish&#x27;</span>)<br>    list_filter = (<span class="hljs-string">&#x27;publish&#x27;</span>,<span class="hljs-string">&#x27;author&#x27;</span>)<br>    search_fields = (<span class="hljs-string">&#x27;title&#x27;</span>,<span class="hljs-string">&#x27;body&#x27;</span>)<br>    raw_id_fields = (<span class="hljs-string">&#x27;author&#x27;</span>,)<br>    date_hierarchy = <span class="hljs-string">&#x27;publish&#x27;</span><br>    ordering = [<span class="hljs-string">&#x27;-publish&#x27;</span>,<span class="hljs-string">&#x27;author&#x27;</span>]<br><br><span class="hljs-keyword">admin</span>.site.register(BlogArticles,BlogArticlesAdmin)<br></code></pre></td></tr></table></figure>
<p>保存,刷新网页</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-注册</title>
    <url>/2021/02/22/Django-%E6%B3%A8%E5%86%8C/</url>
    <content><![CDATA[<p><img src="/img/QQ%E6%88%AA%E5%9B%BE20210222115557.png"></p>
<p>模型类前面已经编写好了的</p>
<h3 id="编写表单类"><a href="#编写表单类" class="headerlink" title="编写表单类"></a>编写表单类</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User  	<span class="hljs-comment">#引入模型类</span><br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> fields<br><span class="hljs-keyword">from</span> django.forms.widgets <span class="hljs-keyword">import</span> PasswordInput<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginForm</span>(<span class="hljs-params">forms.Form</span>):</span><br>    username = forms.CharField()<br>    password = forms.CharField(widget=forms.PasswordInput)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegistrationForm</span>(<span class="hljs-params">forms.ModelForm</span>):</span>		<span class="hljs-comment">#ModelForm 这个类可以保存数据</span><br>    password = forms.CharField(widget=forms.PasswordInput)<br>    password1 = forms.CharField(widget=forms.PasswordInput)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = User<br>        fields = (<span class="hljs-string">&#x27;username&#x27;</span>,<span class="hljs-string">&#x27;email&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clean_password2</span>(<span class="hljs-params">self</span>):</span>			<span class="hljs-comment">#验证某个字段都是使用clean字段命名</span><br>        cd = self.cleaned_data<br>        <span class="hljs-keyword">if</span> cd[<span class="hljs-string">&#x27;password&#x27;</span>] != cd[<span class="hljs-string">&#x27;password2&#x27;</span>]:<br>            <span class="hljs-keyword">raise</span> forms.ValidationError(<span class="hljs-string">&#x27;password do not math.&#x27;</span>)<br>        <span class="hljs-keyword">return</span> cd[<span class="hljs-string">&#x27;password2&#x27;</span>]<br><br></code></pre></td></tr></table></figure>


<h3 id="编写注册的视图函数"><a href="#编写注册的视图函数" class="headerlink" title="编写注册的视图函数"></a>编写注册的视图函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">register</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        user_form = RegistrationForm()<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;account/register.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;form&#x27;</span>:user_form&#125;)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        user_form = RegistrationForm(request.POSt)<br>        <span class="hljs-keyword">if</span> user_form.is_valid():<br>            new_user = user_form.save(commit=<span class="hljs-literal">False</span>)<br>            new_user.set_password(user_form.cleaned_data[<span class="hljs-string">&#x27;password&#x27;</span>])<br>            new_user.save()<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;恭喜你,注册成功了~~~&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;注册失败&#x27;</span>)<br></code></pre></td></tr></table></figure>


<h3 id="编写注册的模板"><a href="#编写注册的模板" class="headerlink" title="编写注册的模板"></a>编写注册的模板</h3><figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">extends</span></span> &#x27;base.html&#x27; %&#125;</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> title %&#125;</span><span class="xml">Register</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content %&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;row text-center&#x27;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-horizontal&#x27;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;post&#x27;</span>&gt;</span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">csrf_token</span></span> %&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; form.username &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; form.email &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; form.password &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>确认密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; form.password2 &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; profile.phone &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;submit&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;btn btn-primary btn-lg&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;注册&#x27;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br><br></code></pre></td></tr></table></figure>


<h3 id="配置URL"><a href="#配置URL" class="headerlink" title="配置URL"></a>配置URL</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">path</span><span class="hljs-params">(<span class="hljs-string">&#x27;register/&#x27;</span>,views.register,name=<span class="hljs-string">&#x27;user_register&#x27;</span>)</span></span>                 <span class="hljs-selector-id">#urls</span>.py里添加<br></code></pre></td></tr></table></figure>


<p>创建phone字段与用户表进行关联</p>
<p>创建模型</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> <span class="hljs-keyword">User</span><br><br><span class="hljs-keyword">class</span> UserProfile(models.Model):<br>    <span class="hljs-keyword">user</span> = models.OneToOneField(<span class="hljs-keyword">User</span>,on_delete=models.<span class="hljs-keyword">CASCADE</span>,<span class="hljs-keyword">unique</span>=<span class="hljs-keyword">True</span>)<br>    phone = models.CharField(max_length=<span class="hljs-number">20</span>,<span class="hljs-keyword">null</span>=<span class="hljs-keyword">True</span>)<br><br>    def __str__(self):<br>        <span class="hljs-keyword">return</span> &quot;user &#123;&#125;&quot;.format(self.<span class="hljs-keyword">user</span>.username)<br></code></pre></td></tr></table></figure>


<p>迁移数据</p>
<p>cmd 打开项目根目录,执行命令</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations account<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate account<br></code></pre></td></tr></table></figure>


<p>在forms.py 添加</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">UserProfileForm</span>(<span class="hljs-title">forms</span>.<span class="hljs-type">ModelForm</span>):</span><br><span class="hljs-class">    <span class="hljs-keyword">class</span> <span class="hljs-type">Meta</span>:</span><br><span class="hljs-class">        model = <span class="hljs-type">UserProfile</span></span><br><span class="hljs-class">        fields = (&#x27;<span class="hljs-title">phone&#x27;</span>,)</span><br></code></pre></td></tr></table></figure>


<p>重写views.py</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe">from django.shortcuts <span class="hljs-keyword">import</span> render<br>from django.http <span class="hljs-keyword">import</span> HttpResponse<br>from django.contrib.auth <span class="hljs-keyword">import</span> authenticate, login<br>from .forms <span class="hljs-keyword">import</span> LoginForm, RegistrationForm, UserProfileForm<br><br>def user_login(request):<span class="hljs-type"></span><br><span class="hljs-type">    if request</span>.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<span class="hljs-type"></span><br><span class="hljs-type">        login_form </span>= LoginForm()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;account/login.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: <span class="hljs-type">login_form</span>&#125;)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<span class="hljs-type"></span><br><span class="hljs-type">        login_form </span>= LoginForm(request.POST)<br>        <span class="hljs-keyword">if</span> login_form.is_valid():<span class="hljs-type"></span><br><span class="hljs-type">            cd </span>= login_form.cleaned_data<br>            user = authenticate(username=cd[<span class="hljs-string">&#x27;username&#x27;</span>], password=cd[<span class="hljs-string">&#x27;password&#x27;</span>])<br>            <span class="hljs-keyword">if</span> user:<span class="hljs-type"></span><br><span class="hljs-type">                login</span>(request, user)<br>                <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;Wellcom You. You have logined the website.&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<span class="hljs-type"></span><br><span class="hljs-type">                return HttpResponse</span>(<span class="hljs-string">&#x27;Sorry, Your username or password is not right.&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<span class="hljs-type"></span><br><span class="hljs-type">            return HttpResponse</span>(<span class="hljs-string">&#x27;Invalid login.&#x27;</span>)<br><br>def register(request):<span class="hljs-type"></span><br><span class="hljs-type">    if request</span>.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<span class="hljs-type"></span><br><span class="hljs-type">        user_form </span>= RegistrationForm()<br>        userprofile_form = UserProfileForm() 		<span class="hljs-meta">#new</span><br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;account/register.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;form&#x27;</span>:<span class="hljs-type">user_form</span>,<br>        <span class="hljs-string">&#x27;profile&#x27;</span>:<span class="hljs-type">userprofile_form</span>&#125;)		<span class="hljs-meta"># new</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<span class="hljs-type"></span><br><span class="hljs-type">        user_form </span>= RegistrationForm(request.POST)<br>        userprofile_form = UserProfileForm(request.POST)		<span class="hljs-meta">#new</span><br>        <span class="hljs-keyword">if</span> user_form.is_valid() * userprofile_form.is_valid():<span class="hljs-type"></span><br><span class="hljs-type">            new_user </span>= user_form.save(commit=False)<br>            <span class="hljs-keyword">new</span><span class="hljs-type">_user</span>.set_password(user_form.cleaned_data[<span class="hljs-string">&#x27;password&#x27;</span>])<br>            <span class="hljs-keyword">new</span><span class="hljs-type">_user</span>.save()<br>            <span class="hljs-meta">#new</span><br>            <span class="hljs-keyword">new</span><span class="hljs-type">_profile</span> = userprofile_form.save(commit=False)<br>            <span class="hljs-keyword">new</span><span class="hljs-type">_profile</span>.user = <span class="hljs-keyword">new</span><span class="hljs-type">_user</span><br><span class="hljs-type"></span>            <span class="hljs-keyword">new</span><span class="hljs-type">_profile</span>.save()<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;恭喜你,注册成功了~~~&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<span class="hljs-type"></span><br><span class="hljs-type">            return HttpResponse</span>(<span class="hljs-string">&#x27;注册失败&#x27;</span>)<br><br></code></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>模板语法</title>
    <url>/2021/02/18/Django-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h3><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">var_name</span>&#125;&#125;</span><span class="xml">       变量样式</span><br></code></pre></td></tr></table></figure>
<p>当模板引擎遇到一个变量,他将从context中获取这个变量的值,然后用值替换他本身</p>
<h3 id="2-标签"><a href="#2-标签" class="headerlink" title="2.标签"></a>2.标签</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">&#123;% <span class="hljs-keyword">tag</span> <span class="hljs-title">%&#125;        标签样式</span><br></code></pre></td></tr></table></figure>


<p>django自带了很多内置标签</p>
<h5 id="for循环标签"><a href="#for循环标签" class="headerlink" title="for循环标签"></a>for循环标签</h5><figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> blog <span class="hljs-keyword">in</span> blogs %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; blog.title &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="xml">  </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
<h5 id="条件标签"><a href="#条件标签" class="headerlink" title="条件标签"></a>条件标签</h5><figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> blog %&#125;</span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> blog <span class="hljs-keyword">in</span> blogs %&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; blog.title &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br><span class="xml">	<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">else</span></span> %&#125;</span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这儿什么都没有<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br></code></pre></td></tr></table></figure>
<h3 id="3-模板继承"><a href="#3-模板继承" class="headerlink" title="3.模板继承"></a>3.模板继承</h3><p>建立一个包含网站所有公共元素的基本骨架,在里面可以定义一些区块,模板的字模板可以重写这些区块.</p>
<h6 id="base-html-创建基本骨架模板"><a href="#base-html-创建基本骨架模板" class="headerlink" title="base.html      创建基本骨架模板"></a>base.html      创建基本骨架模板</h6><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>blog titles<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   &#123;% block content %&#125;<br>    <br>   &#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>


<p>muban1.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&#123;% extends &quot;base.html&quot; %&#125;<br>&#123;% block content %&#125;<br>	&#123;% for blog in blogs %&#125;<br>    	<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;blog.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <br>    &#123;% endfor %&#125;<br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>


<p>这样base.html中的     地方就会被模板1取代.</p>
<h6 id="优化blog应用"><a href="#优化blog应用" class="headerlink" title="优化blog应用"></a>优化blog应用</h6><p>在templates文件下创建base.html</p>
<p>在settings.py末尾加入以下代码,并在myproject文件下创建static/images  ,该文件夹放入需要的图片</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">STATICFILES_DIRS</span> = [<br>    os.path.join(BASE_DIR,<span class="hljs-string">&quot;static&quot;</span>)<br>]<br></code></pre></td></tr></table></figure>
<p>引入图片</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">load</span></span> static %&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">static</span></span> &#x27;./images/图片名.png&#x27; %&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure>


<p>响应详细内容</p>
<p>​    添上超链接</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> blog <span class="hljs-keyword">in</span> blogs %&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; blog.id &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; blog.title &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>	#这个地方加上a标签</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="xml">  </span><br></code></pre></td></tr></table></figure>
<p>​    响应内容请求的视图函数</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">blog_article</span><span class="hljs-params">(request,article_id)</span></span><span class="hljs-symbol">:</span><br>    article = BlogArticles.objects.get(id=article_id)<br>    pub = article.publish<br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;blog/content.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;article&#x27;</span><span class="hljs-symbol">:article</span>,<span class="hljs-string">&#x27;publish&#x27;</span><span class="hljs-symbol">:pub</span>&#125;)<br></code></pre></td></tr></table></figure>
<p>​    编写前端模板页面</p>
<p>​    对应的URL配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">urlpatterns</span> = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.blog_title),<br>    path(<span class="hljs-string">&#x27;&lt;int:article_id&gt;&#x27;</span>, views.blog_article)     <span class="hljs-comment">#写上这一行</span><br>]<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-模板输出</title>
    <url>/2021/03/08/Flask-%E6%A8%A1%E6%9D%BF%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h4 id="目标-模板输出"><a href="#目标-模板输出" class="headerlink" title="目标:    模板输出"></a>目标:    模板输出</h4><ol>
<li><h6 id="创建templates目录"><a href="#创建templates目录" class="headerlink" title="创建templates目录"></a>创建templates目录</h6><p>在myflask文件下创建templates文件夹</p>
<p>templates文件夹用于存放HTML文件</p>
</li>
<li><h6 id="创建html文件模板"><a href="#创建html文件模板" class="headerlink" title="创建html文件模板"></a>创建html文件模板</h6><p>将写好的模板放到templates目录下</p>
</li>
<li><h6 id="网页上输出模板"><a href="#网页上输出模板" class="headerlink" title="网页上输出模板"></a>网页上输出模板</h6><p>编写app.py</p>
<p>​    引入模块 render_templates</p>
<p>​    编写路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,render_template<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)  <span class="hljs-comment">#index.html需要自己写好</span><br></code></pre></td></tr></table></figure></li>
<li><h6 id="加载静态文件"><a href="#加载静态文件" class="headerlink" title="加载静态文件"></a>加载静态文件</h6><p>创建static目录(flask目录下)</p>
<p>static目录下放入js css  img fonts 等文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 通过static 可以引入css等</span><br>&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;static/css/bootstrap.css&quot;</span>/&gt;<br></code></pre></td></tr></table></figure>
<p>url_for 可以根据视图函数生成URL</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">视图函数</span>,默认值) &#125;&#125;</span><br><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">&quot;static&quot;</span>,<span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;资源路径&quot;</span>) &#125;&#125;</span><br><br><span class="xml">#例子</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">&quot;static&quot;</span>,<span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;css/bootstrap.css&quot;</span>) &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><br></code></pre></td></tr></table></figure>

<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="xml">#例子</span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">&quot;login&quot;</span>) &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">&quot;register&quot;</span>) &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-表单</title>
    <url>/2021/02/21/Django-%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<p>表单:用于收集不同类型的用户输入</p>
<p>​    是一个包含表单元素的区域。<br>​    表单元素是允许用户在表单中输入内容，比如:文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等。<br>​    表单使用表单标签( <form>)来设置</p>
<p>目标:实现登录</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs Django"><span class="xml"># 配置setting.py</span><br><span class="xml">INSTALLED_APPS=[</span><br><span class="xml">	&#x27;account&#x27;,          #在括号里加上account, 其他不修改</span><br><span class="xml">]</span><br><br><span class="xml">#配置根目录下的urls.py</span><br><span class="xml">urlpatterns = [ </span><br><span class="xml">	path(&#x27;account/&#x27;,include(&#x27;account.urls&#x27;,namespace=&#x27;account&#x27;))	#添加这一行</span><br><span class="xml">]</span><br><br><span class="xml">#在account目录下创建urls.py文件并写入以下代码</span><br><br><span class="xml">from django.urls import path</span><br><span class="xml">from . import views</span><br><br><span class="xml">app_name = &#x27;account&#x27;</span><br><br><span class="xml">urlpatterns = [</span><br><span class="xml">    path(&#x27;login/&#x27;, views.user_login,name=&#x27;user_login&#x27;),</span><br><span class="xml">]</span><br><br><span class="xml"># account目录下创建forms.py并写入以下代码</span><br><br><span class="xml">from django import forms</span><br><br><span class="xml">class LoginForm(forms.Form):</span><br><span class="xml">    username = forms.CharField()</span><br><span class="xml">    password = forms.CharField(widget=forms.PasswordInput)</span><br><br></code></pre></td></tr></table></figure>


<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">代码意思<br>login_form = LoginForm	#创建实例<br>login_form		#待填写的表单<br>login_form.as_p()		#以p标签包裹的表单<br>login_form.as_table()		#以表格形式的表单<br>login_form.is_bound			#返回<span class="hljs-literal">False</span>则表单为空,返回<span class="hljs-literal">True</span>则不为空<br><br>user1 =  &#123;<span class="hljs-string">&#x27;username&#x27;</span>:<span class="hljs-string">&#x27;admin&#x27;</span> ,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;12456&#x27;</span>&#125;<br>user1_form = LoginForm(user1)<br>user1_form.is_bound		<br>user1_form.is_valid()		#提供的数据是否完整,完整返回<span class="hljs-literal">True</span><br>user1_form.cleaned_date		#获取表单的值<br><br>user.is_authenticated		#用户已登录返回true,没登录返回false<br><br><br>函数意思<br>authenticate		#检查用户是不是我们网站的用户,以及用户名是否正确<br><br></code></pre></td></tr></table></figure>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml">点击登录就会跳转到登录页面</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">url</span></span> &#x27;account:user_login&#x27; %&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>flask-起步</title>
    <url>/2021/03/08/flask-%E8%B5%B7%E6%AD%A5/</url>
    <content><![CDATA[<h4 id="创建flask工程目录"><a href="#创建flask工程目录" class="headerlink" title="创建flask工程目录"></a>创建flask工程目录</h4><ol>
<li><h6 id="创建目录-进入目录"><a href="#创建目录-进入目录" class="headerlink" title="创建目录,进入目录"></a>创建目录,进入目录</h6><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mkdir myflask 		<span class="hljs-comment">#创建文件夹</span><br><span class="hljs-built_in">cd</span> myflask			<span class="hljs-comment">#进入目录</span><br></code></pre></td></tr></table></figure></li>
<li><h6 id="安装虚拟环境pipenv-配置pipenv-可以不用安装-这步可以省略"><a href="#安装虚拟环境pipenv-配置pipenv-可以不用安装-这步可以省略" class="headerlink" title="安装虚拟环境pipenv,配置pipenv(可以不用安装,这步可以省略)"></a>安装虚拟环境pipenv,配置pipenv(可以不用安装,这步可以省略)</h6><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> pipenv		<span class="hljs-comment">#安装pipenv</span><br><br><span class="hljs-comment">#在myflask目录下执行下面代码</span><br>pipenv <span class="hljs-keyword">install</span>		<span class="hljs-comment">#创建虚拟环境</span><br><br><span class="hljs-keyword">set</span> PIPENV_VENV_IN_PROJECT=<span class="hljs-number">1</span>	<span class="hljs-comment">#配置虚拟环境,linux系统将set 改为export,Windows系统项目不能在C盘</span><br><br>pipenv <span class="hljs-keyword">install</span>		<span class="hljs-comment">#在执行一遍</span><br><br></code></pre></td></tr></table></figure></li>
<li><h6 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h6><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">pipenv <span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure>
<p>安装flask模块</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">pipenv <span class="hljs-keyword">install</span> flask<br></code></pre></td></tr></table></figure>
<p>退出虚拟环境</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure>
<p>进入flask运行环境</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">flask <span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure>
<p>#启动内置服务器,host(IP)和port(端口)可以不写</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">flask <span class="hljs-built_in">run</span>  <span class="hljs-comment">--host **** --port**   </span><br><br><span class="hljs-comment">#	Ctrl+c  中断服务器</span><br></code></pre></td></tr></table></figure>

</li>
<li><h6 id="创建app-py入口文件"><a href="#创建app-py入口文件" class="headerlink" title="创建app.py入口文件"></a>创建app.py入口文件</h6><p>​    1.myflask目录下创建一个名为app.py的文件名</p>
<p>​    2.实例化flask对象</p>
<p>​    3.创建视图函数</p>
<p>​    4.创建路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-comment">#实例化flask对象</span><br>app = Flask(__name__)<br><br><span class="hljs-comment">#路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure>
<p>写好上面的代码后,执行flask run 运行</p>
</li>
<li><h6 id="进入开发模式"><a href="#进入开发模式" class="headerlink" title="进入开发模式"></a>进入开发模式</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#mac</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">FLASK_ENV</span>=development<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">FLASK_DEBUG</span>=<span class="hljs-literal">True</span><br><br><span class="hljs-comment">#windows</span><br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">FLASK_ENV</span>=development<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">FLASK_DEBUG</span>=<span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>






</li>
</ol>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-视图函数和模板</title>
    <url>/2021/02/17/Django-%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h3 id="本章目标"><a href="#本章目标" class="headerlink" title="本章目标"></a>本章目标</h3><p>​    1.编写视图函数 </p>
<p>​    2.编写前端模板 </p>
<p>​    3.设置应用内的路由</p>
<h3 id="1-视图函数"><a href="#1-视图函数" class="headerlink" title="1.视图函数"></a>1.视图函数</h3><p>​        概念:当用户向服务器发起一个请求时,接收用户请求的应用程序,并根据请求响应,返回一些信息.</p>
<p>​        分类:—基于函数的视图 —基于类的视图</p>
<p>​        放置位置: views.py</p>
<p>编写基于函数的视图</p>
<p>在views.py文件下写入以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> BlogArticles<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">blog_title</span>(<span class="hljs-params">request</span>):</span>	<span class="hljs-comment"># request 是 用户请求所有信息的对象</span><br>    blogs = BlogArticles.objects.<span class="hljs-built_in">all</span>()   <span class="hljs-comment">#读出BlogArticles模型类中的所有信息</span><br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;blog/titles.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;blogs&#x27;</span>:blogs&#125;)<br></code></pre></td></tr></table></figure>
<p><img src="/img/QQ%E6%88%AA%E5%9B%BE20210218111255.png"></p>
<p><img src="/img/render-20210218112456.png"></p>
<h3 id="2-模板"><a href="#2-模板" class="headerlink" title="2.模板"></a>2.模板</h3><p>模板规定:使用默认规定</p>
<p>默认规定位置:setting.py文件中,55行左右的TEMPLATES里</p>
<p>在blog文件夹下创建一个templates文件夹,在templates文件夹下创建blog文件夹并放入titles.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>blog titles<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            &#123;% for blog in blogs %&#125;    #在网页中循环出blog标题<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;blog.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <br>            &#123;% endfor %&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>在blog应用下的urls中写入路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.blog_title),<br>]<br></code></pre></td></tr></table></figure>
<p>启动应用  python manage.py runserver</p>
<p>打开返回的网址,在网址后面加上blog就行了(127.0.0.1:8000/blog/) </p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-快速搭建静态博客</title>
    <url>/2021/02/13/hexo-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>第一步 </p>
<p>​    1.注册一个github账号   github.com</p>
<p>​    2.创建公开代码仓库</p>
<p>第二步</p>
<p>​    1.安装 nodejs 与 npm</p>
<p>​        到node官方网站下载安装包,直接安装就行,node安装好后npm也就安装好了</p>
<p>​        官方网站: <a href="https://nodejs.org/">https://nodejs.org</a></p>
<p>​    2.安装hexo</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure>

<p>​    3.本地创建目录:github-blog</p>
<p>​    4.进入目录并初始化目录,执行以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> github-blog<br>hexo init<br>npm install<br></code></pre></td></tr></table></figure>
<p> 5.启动服务         执行以下代码</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure>
<p> 6.在浏览器中打开cmd返回的网址,这就是初始博客网页</p>
<p>第三步  上传第一篇文章</p>
<p>​    1.在github-blog目录中  执行以下代码</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">npm i <span class="hljs-comment">--save hexo-deployer-git</span><br></code></pre></td></tr></table></figure>
<p>​    2.编辑: _config.yml</p>
<p>​        在github-blog目录下找到 _config.yml 文件并打开</p>
<p>​        在这个文件末尾添加</p>
<p>​            </p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> https: <span class="hljs-comment">//github.com/username/username.github.io</span><br><span class="hljs-symbol">    branch:</span> master<br></code></pre></td></tr></table></figure>
<p>​        注意:  上面repo后面的网址填写github上自己创建个人公开仓库的网址</p>
<p>​    3.在github-blog目录中   </p>
<p>​                     执行:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d-g</span><br></code></pre></td></tr></table></figure>
<p>​        进入隐藏目录:  执行以下代码</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">.deploy_git</span><br></code></pre></td></tr></table></figure>
<p>​        声明github账号:  执行以下代码</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.email“youremail@github”<br>git config <span class="hljs-keyword">user</span>.name“yourname”<br></code></pre></td></tr></table></figure>
<p>​            注意: 上面yourname 和 youremail@github  填自己的用户名与邮箱</p>
<p>​        返回github-blog目录:</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">cd</span></span> ..<br>hexo d<br></code></pre></td></tr></table></figure>
<ol start="4">
<li><p>还是在github-blog目录中</p>
<p>   执行: hexo new “my-first-git”       # 引号里的是文章名</p>
<p>执行上面一步后,会得到一个路径</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">hexo new <span class="hljs-string">&quot;my-first-git&quot;</span>               # 执行这一句,得到下面两句<br><span class="hljs-builtin-name">INFO</span>  Validating config<br><span class="hljs-builtin-name">INFO</span>  Created: D:\python--start\github-blog\source\_posts\my-first-git.md<br></code></pre></td></tr></table></figure>
<p>到D:\python–start\github-blog\source_posts中打开  my-first-git.md文件 在这个文件中就可以写上自己的文章</p>
<p>5.git到远程仓库里</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d -g</span><br></code></pre></td></tr></table></figure>
<p>喝杯茶什么的就可以到远程仓库里看看了,这样就完成了上传文章.</p>
</li>
</ol>
<p>第四步  更换主题</p>
<p>​    1.到   <a href="https://hexo.io/themes/">https://hexo.io/themes/</a>   网站中找到自己需要的主题</p>
<p>​    2.按照文档说明操作就可以更换主题了</p>
<p>​        </p>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-模板语法</title>
    <url>/2021/03/09/Flask-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>MVC模式</p>
<p>M -model     数据模型</p>
<p>V -view    视图模板</p>
<p>C  -控制器     业务逻辑控制既视图函数</p>
<p>变量标记</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;  &#125;&#125;</span><br><span class="xml">变量输出以</span><span class="hljs-template-variable">&#123;&#123; &#125;&#125;</span><span class="xml">包裹</span><br><span class="xml">变量  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">变量名</span> &#125;&#125;</span><span class="xml">  比如</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">myname</span> &#125;&#125;</span><br><span class="xml">对象  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">obj.属性</span> &#125;&#125;</span><br><span class="xml">字典  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">dict</span>[&#x27;key&#x27;] &#125;&#125;</span><br><span class="xml">列表  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">list</span>[i] &#125;&#125;</span><br><span class="xml">函数  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">func</span>() &#125;&#125;</span><br></code></pre></td></tr></table></figure>


<p>语句执行</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span>  <span class="hljs-meta">%</span>&#125;<br></code></pre></td></tr></table></figure>


<p>注释标签</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">&#123;#  #&#125;<br></code></pre></td></tr></table></figure>


<p>条件语句</p>
<p>根据条件选择显示不同的html部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">if</span> condition %&#125;<br>	html<br>&#123;% <span class="hljs-keyword">elif</span> condition %&#125;<br>	html<br>&#123;% <span class="hljs-keyword">else</span> %&#125;<br>	html<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure>


<p>for循环语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items %&#125;<br>	html &#123;&#123; item &#125;&#125; html<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure>


<p>模板继承</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">#父模板 base.html<br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>       <br>&#123;% block nav %&#125;<br>html<br>&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br>&#123;% endblock %&#125;<br><br>&#123;% block footer %&#125;<br>html<br>&#123;% endfooter %&#125;<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml">#子模板</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">extends</span></span> &quot;base.html&quot; %&#125;</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content %&#125;</span><br><span class="xml">页面内容</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br></code></pre></td></tr></table></figure>


<p>模板全局变量</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#上下文处理函数</span><br><br><span class="hljs-variable">@app</span>.context_processor<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">account</span><span class="hljs-params">()</span></span><span class="hljs-symbol">:</span><br>	username=<span class="hljs-string">&quot;小博&quot;</span><br>	<span class="hljs-keyword">return</span>&#123;<span class="hljs-string">&quot;username&quot;</span><span class="hljs-symbol">:username</span>&#125;<br><br><span class="hljs-comment">#每个视图函数执行的时候,会自动执行该函数,接收该变量并渲染模板</span><br><br><br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-GET与POST</title>
    <url>/2021/03/12/Flask-GET%E4%B8%8EPOST/</url>
    <content><![CDATA[<h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>get方式提交数据是通过URL地址传递数据</p>
<p>例: http:127.0.0.1:5000/?username=xiaobo&amp;password=123456</p>
<p>在服务器端通过request对象接收数据</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#获取username , password</span><br>request.args.<span class="hljs-builtin-name">get</span>(<span class="hljs-string">&#x27;username&#x27;</span>)<br>request.args.<span class="hljs-builtin-name">get</span>(<span class="hljs-string">&#x27;password&#x27;</span>)<br><br><span class="hljs-comment">#本次提交数据的方式</span><br>request.method<br></code></pre></td></tr></table></figure>


<h6 id="网址美化"><a href="#网址美化" class="headerlink" title="网址美化"></a>网址美化</h6><p>1.通过问号传递的网址最方便,但是不美观</p>
<p>​    例  :    http:127.0.0.1:5000/?username=xiaobo&amp;password=123456</p>
<p>2.传递参数像path路径一样的网址,更美观,爬虫更喜欢</p>
<p>​    http:127.0.0.1:5000/xiaobo/123456/</p>
<p>​    方法 : 制定相关路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.rote(<span class="hljs-params"><span class="hljs-string">&quot;/&lt;username&gt;/&lt;password&gt;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>(<span class="hljs-params">username,password</span>):</span><br>    print(username,password)<br></code></pre></td></tr></table></figure>


<h4 id="POST-安全"><a href="#POST-安全" class="headerlink" title="POST(安全)"></a>POST(安全)</h4><p>通过 form 表单提交数据</p>
<p>form表单属性</p>
<p>​    action:  数据提交到哪个网址</p>
<p>​    method:  数据提交方式  (get和post)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>


<p>post方式提交数据需要在路由配置中添加设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/login&quot;</span>,methods=[<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;post&quot;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>():</span><br>	request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    request.values[<span class="hljs-string">&#x27;usename&#x27;</span>]    <span class="hljs-comment">#既可接受get也可接收post</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-数据库与ORM</title>
    <url>/2021/03/13/Flask-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8EORM/</url>
    <content><![CDATA[<h4 id="数据库入门-sqlite"><a href="#数据库入门-sqlite" class="headerlink" title="数据库入门(sqlite)"></a>数据库入门(sqlite)</h4><h6 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h6><p>​    1.关系型数据库–以文件方式永久存储到磁盘</p>
<p>​    2.非关系型数据库–存储在内存,访问速度快,通常用来做队列,缓存类服务</p>
<h6 id="安装插件sqlalchemy"><a href="#安装插件sqlalchemy" class="headerlink" title="安装插件sqlalchemy"></a>安装插件sqlalchemy</h6><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">pipenv <span class="hljs-keyword">install</span> flask-sqlalchemy<br></code></pre></td></tr></table></figure>
<p>sqlalchemy资料查询 : <a href="https://pypi.org/project/Flask-SQLAlchemy/">https://pypi.org/project/Flask-SQLAlchemy/</a></p>
<h6 id="创建数据库对象"><a href="#创建数据库对象" class="headerlink" title="创建数据库对象"></a>创建数据库对象</h6><figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">#导入模块<br><span class="hljs-keyword">from</span> flask_sqlalchemy <span class="hljs-keyword">import</span> SQLAlchemy<br><br>app = Flask(__name__)<br><br>#配置数据库<br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="hljs-literal">True</span><br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_DATABASE_URL&#x27;</span>]=<span class="hljs-string">&quot;sqlite:///my.db&quot;</span><br>db = SQLAlchemy(app)<br></code></pre></td></tr></table></figure>


<h6 id="SQLite数据库管理软件"><a href="#SQLite数据库管理软件" class="headerlink" title="SQLite数据库管理软件"></a>SQLite数据库管理软件</h6><p>为了方便观察创建数据表的过程,可以安装sqlite管理模块</p>
<p>安装: pip install sqlite-web</p>
<p>这是一款通过web界面的方式管理数据库</p>
<p>使用: sqlite_web SQLite 数据库文件路径,就可以管理数据库</p>
<h6 id="定义数据表模型"><a href="#定义数据表模型" class="headerlink" title="定义数据表模型"></a>定义数据表模型</h6><figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">User</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Model</span>):</span><br><span class="hljs-class">    id = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Integer</span>, <span class="hljs-title">primary_key</span>=<span class="hljs-type">True</span>)</span><br><span class="hljs-class">    username = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    password = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    realname = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    sex = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Integer</span>)</span><br><span class="hljs-class">    mylike = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    city = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    intro = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br></code></pre></td></tr></table></figure>
<p>db.Column(字段类型,可选参数)</p>
<p>​        字段类型 : 整数型:Integer </p>
<p>​        字符串型 : String </p>
<p>​        文本型 : Text </p>
<p>​        期 : DateTime </p>
<p>​        primary_key : 是否为主键</p>
<h6 id="进入交互式环境创建数据表"><a href="#进入交互式环境创建数据表" class="headerlink" title="进入交互式环境创建数据表"></a>进入交互式环境创建数据表</h6><p>创建完模型后,只是创建了python对象,</p>
<p>但是并没有创建数据库,需要通过db.create_all()创建数据表</p>
<figure class="highlight capnproto"><table><tr><td class="code"><pre><code class="hljs capnproto">flask shell			<span class="hljs-comment">#进如交互式环境</span><br><span class="hljs-keyword">from</span> app <span class="hljs-keyword">import</span> db	<span class="hljs-comment">#引入db对象</span><br>db.create_all()		<span class="hljs-comment">#创建数据表</span><br></code></pre></td></tr></table></figure>
<figure class="highlight vala"><table><tr><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#新建一个终端,输入下面代码,my.db是自己创建的数据库名</span><br><span class="hljs-meta">#打开给的网址</span><br><span class="hljs-meta">#运行可视化数据库管理软件</span><br><br>sqlite_web my.db<br></code></pre></td></tr></table></figure>


<h6 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h6><p>通过是实例化对象创建模型</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#实例对象</span><br>user1 = User(<span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;王麻子&#x27;</span>, <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-attribute">realname</span>=<span class="hljs-string">&#x27;真.王麻子&#x27;</span>)<br>user2 = User(<span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;张二狗&#x27;</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27;12345&#x27;</span>,realname=&#x27;真.张二狗&#x27;)<br><br><span class="hljs-comment">#提交到数据库</span><br><span class="hljs-comment">#db.session.add 	添加到数据库  </span><br><span class="hljs-comment">#db.session.commit()	将添加的数据保存</span><br>db.session.<span class="hljs-builtin-name">add</span>(user1)<br>db.session.<span class="hljs-builtin-name">add</span>(user2)<br>db.session.commit()<br></code></pre></td></tr></table></figure>


<p>例</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> flask import Flask,render_template,request<br><span class="hljs-keyword">from</span> flask_sqlalchemy import SQLAlchemy<br><br>@app.route(<span class="hljs-string">&quot;/reg&quot;</span>,methods=[<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>])<br>def register():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        realname = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br>        sex      = request.form[<span class="hljs-string">&#x27;sex&#x27;</span>]<br>        mylike   = <span class="hljs-string">&#x27; &#x27;</span>.join(request.form.getlist(<span class="hljs-string">&#x27;like&#x27;</span>))<br>        city     = request.form[<span class="hljs-string">&#x27;city&#x27;</span>]<br>        intro    = request.form[<span class="hljs-string">&#x27;intro&#x27;</span>]<br>       <span class="hljs-built_in"> user </span>= User(<span class="hljs-attribute">realname</span>=realname,<br>                    <span class="hljs-attribute">username</span>=username,<br>                    <span class="hljs-attribute">password</span>=password,<br>                    <span class="hljs-attribute">sex</span>=sex,<br>                    <span class="hljs-attribute">mylike</span>=mylike,<br>                    <span class="hljs-attribute">city</span>=city,<br>                    <span class="hljs-attribute">intro</span>=intro<br>                    )<br>        db.session.<span class="hljs-builtin-name">add</span>(user)<br>        db.session.commit()<br>        <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;用户创建成功&#x27;</span>)<br>    return render_template(<span class="hljs-string">&quot;register.html&quot;</span>)<br></code></pre></td></tr></table></figure>


<h4 id="增删改查-CURD"><a href="#增删改查-CURD" class="headerlink" title="增删改查(CURD)"></a>增删改查(CURD)</h4><p>​        1.用户列表</p>
<p>​        2.用户信息删除与修改</p>
<p>​        3.用户条件查询</p>
<p>​        4.页面跳转</p>
<h6 id="批量创建用户"><a href="#批量创建用户" class="headerlink" title="批量创建用户"></a>批量创建用户</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">def createBatchUsers():<br>    surname = list(&quot;爱的机会哈给大家哈市哈卡交安设施卡活动卡萨号打卡机年卡时间按当年无活动进行核查自己吃那么芜湖擦我能打梦三救护车&quot;)<br>    citys   = [<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-string">&#x27;福建&#x27;</span>,<span class="hljs-string">&#x27;重庆&#x27;</span>,<span class="hljs-string">&#x27;山西&#x27;</span>,<span class="hljs-string">&#x27;成都&#x27;</span>]<br>    mylikes  = [<span class="hljs-string">&#x27;睡觉&#x27;</span>, <span class="hljs-string">&#x27;跳绳&#x27;</span>, <span class="hljs-string">&#x27;跑步&#x27;</span>, <span class="hljs-string">&#x27;打篮球&#x27;</span>, <span class="hljs-string">&#x27;跳芭蕾&#x27;</span>, <span class="hljs-string">&#x27;乒乓球&#x27;</span>]<br>    <span class="hljs-keyword">import</span> random<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>        random.shuffle(surname)<br>        intro    = <span class="hljs-string">&#x27;该用户什么都没有留下&#x27;</span><br>        <span class="hljs-keyword">password</span> = <span class="hljs-string">&#x27;88888888&#x27;</span><br>        username = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(surname[:<span class="hljs-number">6</span>])<br>        sex      = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>        realname = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(surname[:<span class="hljs-number">3</span>])<br>        city     = citys[random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)]<br>        mylike   = <span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-keyword">join</span>(mylikes[random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)])<br>        <span class="hljs-keyword">user</span> = <span class="hljs-keyword">User</span>(username=username,<br>                    realname=realname,<br>                    sex     =sex,<br>                    city    =city,<br>                    mylike  =mylike,<br>                    <span class="hljs-keyword">password</span>=<span class="hljs-keyword">password</span>,<br>                    intro   =intro<br>                    )<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">user</span>)<br>    db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br>def createBatchUsers():<br>    surname = list(&quot;爱的机会哈给大家哈市哈卡交安设施卡活动卡萨号打卡机年卡时间按当年无活动进行核查自己吃那么芜湖擦我能打梦三救护车&quot;)<br>    citys   = [<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-string">&#x27;福建&#x27;</span>,<span class="hljs-string">&#x27;重庆&#x27;</span>,<span class="hljs-string">&#x27;山西&#x27;</span>,<span class="hljs-string">&#x27;成都&#x27;</span>]<br>    mylikes  = [<span class="hljs-string">&#x27;睡觉&#x27;</span>, <span class="hljs-string">&#x27;跳绳&#x27;</span>, <span class="hljs-string">&#x27;跑步&#x27;</span>, <span class="hljs-string">&#x27;打篮球&#x27;</span>, <span class="hljs-string">&#x27;跳芭蕾&#x27;</span>, <span class="hljs-string">&#x27;乒乓球&#x27;</span>]<br>    <span class="hljs-keyword">import</span> random<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>        random.shuffle(surname)<br>        intro    = <span class="hljs-string">&#x27;该用户什么都没有留下&#x27;</span><br>        <span class="hljs-keyword">password</span> = <span class="hljs-string">&#x27;88888888&#x27;</span><br>        username = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(surname[:<span class="hljs-number">6</span>])<br>        sex      = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>        realname = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(surname[:<span class="hljs-number">3</span>])<br>        city     = citys[random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)]<br>        mylike   = <span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-keyword">join</span>(mylikes[:random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)])<br>        <span class="hljs-keyword">user</span> = <span class="hljs-keyword">User</span>(username=username,<br>                    realname=realname,<br>                    sex     =sex,<br>                    city    =city,<br>                    mylike  =mylike,<br>                    <span class="hljs-keyword">password</span>=<span class="hljs-keyword">password</span>,<br>                    intro   =intro<br>                    )<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">user</span>)<br>    db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br></code></pre></td></tr></table></figure>
<figure class="highlight capnproto"><table><tr><td class="code"><pre><code class="hljs capnproto"><span class="hljs-comment">#进入flask shell 环境执行函数</span><br><br>flask shell<br><span class="hljs-keyword">from</span> app <span class="hljs-keyword">import</span> createBatchUsers<br>createBatchUsers()<br></code></pre></td></tr></table></figure>
<p>批量用户就创建好了</p>
<p>可以在数据库可视化网页里查看</p>
<p>#运行可视化数据库管理软件  sqlite_web my.db</p>
<h6 id="读取操作"><a href="#读取操作" class="headerlink" title="读取操作"></a>读取操作</h6><p>查询通过query对象方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">User.query.查询方法    #<span class="hljs-keyword">User</span> 是函数名<br><br>查询方法<br><span class="hljs-keyword">all</span>()  获得所有记录<br><span class="hljs-keyword">first</span>()  获得第一条记录，找不到返回<span class="hljs-keyword">None</span><br><span class="hljs-keyword">one</span>()  返回唯一一条记录，没有或者有多条则报错<br><span class="hljs-keyword">get</span>(id)  传入主键ID，返回相匹配的记录，没有返回<span class="hljs-keyword">None</span> <br><span class="hljs-built_in">count</span>()  返回查询结果总数<br>one_or_none  与<span class="hljs-keyword">one</span>（）一样，如果结果不唯一，返回<span class="hljs-keyword">None</span><br><br><br>模板与视图准备<br><br>模板：提供一个用户列表显示模板（用<span class="hljs-keyword">for</span>循环出所有记录）<br>路由：提供访问路径<br>视图函数：通过模型对象查询结果，并将结果赋予模板变量<br>	例：<br>	<span class="hljs-variable">@app</span>.route(&quot;/userlist&quot;, methods<span class="hljs-operator">=</span>[&quot;get&quot;] )<br>    def userlist():<br>        users <span class="hljs-operator">=</span> User.query.all()<br>        <span class="hljs-keyword">return</span> render_template(&quot;user/user_list.html&quot;, users<span class="hljs-operator">=</span>users)<br></code></pre></td></tr></table></figure>


<h6 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h6><p>删除记录通过db.session.delete(记录对象)删除</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">delete</span>(记录对象)		#删除操作<br><br>#单个删除<br>user1 = <span class="hljs-keyword">User</span>.query.<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>)	#查询ID为<span class="hljs-number">1</span>的记录<br>db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">delete</span>(user1)	#删除ID为<span class="hljs-number">1</span>的记录<br>db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()			#保存数据库<br><br>#批量删除<br>users = <span class="hljs-keyword">User</span>.query.<span class="hljs-keyword">all</span>()<br>[db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">delete</span>(<span class="hljs-keyword">user</span>) <span class="hljs-keyword">for</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">in</span> users]<br>db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br><br>模板与视图准备<br><br>模板：提供一个用户列表显示模板<br><br>路由：通常删除需要传递一个被删除对象的ID<br>	@app route(&quot;/delete_user/&lt;int:user_id&gt;&quot;)<br><br>视图函数：<br>	def deleteUser(user_id):<br>	pass<br>	<span class="hljs-keyword">return</span> redirect(url_for(&quot;userlist&quot;))		#这儿要引入flask里的 redirect(跳转函数)，url_for 模块<br>	<br>	例：<br>	@app.route(&quot;/user_delete/&lt;int:user_id&gt;&quot;)<br>    def deleteUser(user_id):<br>        <span class="hljs-keyword">user</span> = <span class="hljs-keyword">User</span>.query.<span class="hljs-keyword">get</span>(user_id)<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">delete</span>(<span class="hljs-keyword">user</span>)<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br>        <span class="hljs-keyword">return</span> redirect(url_for(&quot;userlist&quot;))	# 这一句要理解，如果用render_template返回模板，刷新页面会报错<br><br></code></pre></td></tr></table></figure>


<h6 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h6><p>通过模型类查询对象更新记录</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">比如：<br>user1 =db.query.<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>)<br>user1.<span class="hljs-keyword">password</span> = &quot;12345&quot;<br>db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br>就可以将记录中的<span class="hljs-keyword">password</span>字段修改<br><br>例：<br>@app.route(&quot;/useredit/&lt;int:user_id&gt;&quot;,methods = [&quot;get&quot;,&quot;post&quot;])<br>def editUser(user_id):<br>    <span class="hljs-keyword">user</span> = <span class="hljs-keyword">User</span>.query.<span class="hljs-keyword">get</span>(user_id)<br>    <span class="hljs-keyword">if</span> request.<span class="hljs-keyword">method</span> == &quot;POST&quot;:<br>        <span class="hljs-keyword">user</span>.username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        <span class="hljs-keyword">user</span>.realname = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        <span class="hljs-keyword">user</span>.sex      = request.form[<span class="hljs-string">&#x27;sex&#x27;</span>]<br>        <span class="hljs-keyword">user</span>.city     = request.form[<span class="hljs-string">&#x27;city&#x27;</span>]<br>        <span class="hljs-keyword">user</span>.mylike   = <span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-keyword">join</span>(request.form.getlist(<span class="hljs-string">&#x27;like&#x27;</span>))<br>        <span class="hljs-keyword">user</span>.intro    = request.form[<span class="hljs-string">&#x27;intro&#x27;</span>]<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;userlist&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(&quot;user/edit_user.html&quot;, <span class="hljs-keyword">user</span>=<span class="hljs-keyword">user</span>)<br></code></pre></td></tr></table></figure>


<h6 id="条件检索"><a href="#条件检索" class="headerlink" title="条件检索"></a>条件检索</h6><p>User.query.查询条件.查询方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">查询条件方法<br><span class="hljs-built_in">filter</span>()  		使用规则过滤<br>filter_by()		比<span class="hljs-built_in">filter</span>更方便使用<br>order_by()		结果排序<br>limit(limit)	只查询limit条<br>group_by()		查询分组<br>offset()		在原查询基础上偏移记录数，返回新的记录<br><br><span class="hljs-built_in">filter</span>() 方法的使用<br><span class="hljs-built_in">filter</span>(User.username==<span class="hljs-string">&#x27;小博&#x27;</span>)					查找User中username值为小博的用户<br><span class="hljs-built_in">filter</span>(User.age&gt;<span class="hljs-number">20</span>)								查找User中age值大于<span class="hljs-number">20</span>的用户<br><span class="hljs-built_in">filter</span>(User.city != <span class="hljs-string">&#x27;010&#x27;</span>)						查找city值不为010的用户<br><span class="hljs-built_in">filter</span>(User.city.in_[<span class="hljs-string">&#x27;010&#x27;</span>,<span class="hljs-string">&#x27;021&#x27;</span>])				查找city中 010 021 的用户<br><span class="hljs-built_in">filter</span>(~User.city.in_([<span class="hljs-string">&#x27;010&#x27;</span>,<span class="hljs-string">&#x27;021&#x27;</span>]))			查找city中不为 010 021 的用户<br><span class="hljs-built_in">filter</span>(User.mylike.like(<span class="hljs-string">&#x27;%钓鱼%&#x27;</span>))				查找mylike包含钓鱼的用户<br><span class="hljs-built_in">filter</span>(User.username==<span class="hljs-string">&quot;小博&quot;</span>,User.age&gt;<span class="hljs-number">20</span>)  		用户名为小博且 age 大于<span class="hljs-number">20</span>的用户<br><span class="hljs-built_in">filter</span>((条件<span class="hljs-number">1</span>)|(条件<span class="hljs-number">2</span>))								满足条件<span class="hljs-number">1</span>或者条件<span class="hljs-number">2</span>的用户<br><br>filter_by()  方法<br>filter_by(username=<span class="hljs-string">&quot;小博&quot;</span>)			查找username值为 小博 的用户<br>filter_by(username=<span class="hljs-string">&quot;小博&quot;</span>，sex=<span class="hljs-number">1</span>)		查找username值为 小博 且sex值为 <span class="hljs-number">1</span> 的用户<br><br><br>模板：<br>提供一个搜索表单<br>路由：<br>如果是post提交，一定要在路由中添加POST方法<br>视图：<br>如果接收到POST数据，就要检查用户提交的数据，生成检索条件<br><br>例：<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/userlist&quot;</span>, methods=[<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;post&quot;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">userlist</span>():</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        q = request.form[<span class="hljs-string">&#x27;q&#x27;</span>]<br>        <span class="hljs-comment">#精确查找</span><br>        <span class="hljs-comment"># condition = &#123;request.form[&#x27;field&#x27;]:q&#125;</span><br>        <span class="hljs-comment"># users = User.query.filter_by(**condition).all()</span><br>        <span class="hljs-comment">#模糊查找</span><br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;field&#x27;</span>] == <span class="hljs-string">&quot;realname&quot;</span>:<br>            condition = User.realname.like(<span class="hljs-string">&#x27;%%%s%%&#x27;</span> %q)<br>        <span class="hljs-keyword">else</span>:<br>            condition = User.username.like(<span class="hljs-string">&#x27;%%%s%%&#x27;</span> %q)<br>        print(q)<br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;order&#x27;</span>] == <span class="hljs-string">&quot;1&quot;</span>:<br>            order = User.<span class="hljs-built_in">id</span>.asc()   <span class="hljs-comment">#升序</span><br>        <span class="hljs-keyword">else</span>:<br>            order = User.<span class="hljs-built_in">id</span>.desc()  <span class="hljs-comment">#降序</span><br>        sex = User.sex == request.form[<span class="hljs-string">&#x27;sex&#x27;</span>]   <span class="hljs-comment">#性别筛选</span><br>        users = User.query.<span class="hljs-built_in">filter</span>(condition,sex).order_by(order).<span class="hljs-built_in">all</span>()      <span class="hljs-comment">#获取经过筛选的列表</span><br>    <span class="hljs-keyword">else</span>:<br>        users = User.query.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;user/user_list.html&quot;</span>, users=users)<br><br></code></pre></td></tr></table></figure>


<h6 id="分页显示"><a href="#分页显示" class="headerlink" title="分页显示"></a>分页显示</h6><p>当记录很多的时候，一页显示不完就需要分页显示</p>
<p>result = User.query.查询条件.paginate(pagelndex,pageSize)</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">result包含下列信息<br><br>items			<span class="hljs-meta">#当前记录查询</span><br>page			<span class="hljs-meta">#当前页数</span><br>per_page		<span class="hljs-meta">#每页显示多少条记录即pageSize</span><br>pages			<span class="hljs-meta">#总页数</span><br>total			<span class="hljs-meta">#记录总数量</span><br>iter_pages()	<span class="hljs-meta">#生成翻页页码</span><br>prev()			<span class="hljs-meta">#前一页对象</span><br><span class="hljs-keyword">next</span>()			<span class="hljs-meta">#后一页对象</span><br>next_num		<span class="hljs-meta">#下一页</span><br>prev_num		<span class="hljs-meta">#上一页</span><br>has_prev		<span class="hljs-meta">#是否存在上一页</span><br>has_next		<span class="hljs-meta">#是否存在下一页</span><br><br>例：<br>@app.route(<span class="hljs-string">&quot;/userlist&quot;</span>, methods=[<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;post&quot;</span>])<br>def userlist():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        q = request.form[<span class="hljs-string">&#x27;q&#x27;</span>]<br>        <span class="hljs-meta">#精确查找</span><br>        <span class="hljs-meta"># condition = &#123;request.form[&#x27;field&#x27;]:q&#125;</span><br>        <span class="hljs-meta"># users = User.query.filter_by(**condition).all()</span><br>        <span class="hljs-meta">#模糊查找</span><br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;field&#x27;</span>] == <span class="hljs-string">&quot;realname&quot;</span>:<br>            condition = User.realname.<span class="hljs-keyword">like</span>(<span class="hljs-string">&#x27;%%%s%%&#x27;</span> %q)<br>        <span class="hljs-keyword">else</span>:<br>            condition = User.username.<span class="hljs-keyword">like</span>(<span class="hljs-string">&#x27;%%%s%%&#x27;</span> %q)<br>        <span class="hljs-keyword">print</span>(q)<br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;order&#x27;</span>] == <span class="hljs-string">&quot;1&quot;</span>:<br>            <span class="hljs-keyword">order</span> = User.id.<span class="hljs-keyword">asc</span>()   <span class="hljs-meta">#升序</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">order</span> = User.id.<span class="hljs-keyword">desc</span>()  <span class="hljs-meta">#降序</span><br>        sex = User.sex == request.form[<span class="hljs-string">&#x27;sex&#x27;</span>]   <span class="hljs-meta">#性别筛选</span><br>        users = User.query.filter(condition,sex).order_by(<span class="hljs-keyword">order</span>).paginate(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)     <span class="hljs-meta">#获取经过筛选的列表</span><br>    <span class="hljs-keyword">else</span>:<br>        page = request.args.get(<span class="hljs-string">&#x27;page&#x27;</span>,<span class="hljs-number">1</span>)<br>        users = User.query.paginate(<span class="hljs-built_in">int</span>(page),<span class="hljs-number">10</span>)       <span class="hljs-meta">#paginate(页数，显示条数，是否显示错误信息)</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;user/user_list.html&quot;</span>,<br>                           users=users.items,<br>                           pages=users.pages,<br>                           total=users.total,<br>                           pageList=users.iter_pages(),         <span class="hljs-meta">#显示页码</span><br>                           prevpage=users.prev_num,             <span class="hljs-meta">#上一页</span><br>                           nextpage=users.next_num,             <span class="hljs-meta">#下一页</span><br>                           hasprev=users.has_prev,<br>                           hasnext=users.has_next<br>                           )<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>错误解决方法</title>
    <url>/2021/03/14/%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>bug解决</category>
      </categories>
      <tags>
        <tag>错误</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask代码重构</title>
    <url>/2021/03/21/Flask%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84/</url>
    <content><![CDATA[<h4 id="本课目标"><a href="#本课目标" class="headerlink" title="本课目标"></a>本课目标</h4><p>​    重构代码</p>
<p>​    Blueprint类</p>
<p>​    增加发布文章功能</p>
<p>​    Flask-migrate扩展</p>
<h4 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h4><h6 id="文件分类："><a href="#文件分类：" class="headerlink" title="文件分类："></a>文件分类：</h6><p>​    扩展库–放置db对象一类的库对象</p>
<p>​    模型库–放置如User模型的代码</p>
<p>​    辅助库–放置开发辅助性工具</p>
<p>​    视图函数–放置视图函数定义</p>
<h6 id="扩展库文件："><a href="#扩展库文件：" class="headerlink" title="扩展库文件："></a>扩展库文件：</h6><p>​    创建libs.py文件（文件名可自定义）</p>
<p>​    在libs.py中创建db对象</p>
<p>​    导入SQLAlchemy模块   from flask_sqlalchemy import SQLAlchemy</p>
<p>​    实例化 db=SQLAlchemy()</p>
<p>​    当前实例化的时候，不用传入参数：app</p>
<p>​    可以在其他需要使用db对象的时候，从libs导入对象</p>
<p>​        举例：</p>
<p>​            在app.py中，导入db对象，对其进行初始化</p>
<p>​            init_app是SQLAlchemy扩展提供的一个接口方法</p>
<p>​            通过init_app可以在app初始化的时候。配置扩展的参数</p>
<p>​            通过init_app方法，将db对象绑定到app进行初始化，这样在APP中定义的数据库参数就可以被db接收</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">from libs import <span class="hljs-keyword">db</span><br><span class="hljs-keyword">db</span>.init_app(<span class="hljs-keyword">app</span>)<br></code></pre></td></tr></table></figure>


<h6 id="模型库"><a href="#模型库" class="headerlink" title="模型库"></a>模型库</h6><p>​    新增一个models.py文件，用来存放模型类代码。</p>
<p>​        创建models.py文件，并在其中创建User模型</p>
<p>​        模型文件需要导入libs中的db对象</p>
<h6 id="辅助库"><a href="#辅助库" class="headerlink" title="辅助库"></a>辅助库</h6><p>​    新增一个utils.py文件，专门用来存放工具类代码</p>
<p>​        创建utils.py文件</p>
<p>​        将批量创建用户函数迁移到该文件中</p>
<h6 id="视图函数库"><a href="#视图函数库" class="headerlink" title="视图函数库"></a>视图函数库</h6><p>​    创建view文件夹，并在下面创建article，users，admin等py文件</p>
<h6 id="Blueprint对象（蓝本对象）"><a href="#Blueprint对象（蓝本对象）" class="headerlink" title="Blueprint对象（蓝本对象）"></a>Blueprint对象（蓝本对象）</h6><p>路由定义是通过@app实例.route方法定义的</p>
<p>通过Blueprint对象，可以在app实例尚未创建的时候，就编写好路由，等待app实例创建好后，将这些路由添加到app实例中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#在user.py里编辑</span><br>记得将本文件里的@app.route改成user_app.route<br>		     相关的url_for()也要修改 如将url_for(<span class="hljs-string">&#x27;userlist&#x27;</span>)改成url_for(<span class="hljs-string">&#x27;user_app.userlist&#x27;</span>)<br><span class="hljs-comment">#例：</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint<br><br>user_app = Blueprint(<span class="hljs-string">&quot;user_app&quot;</span>,__name__)<br><br><span class="hljs-meta">@user_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/reg&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">register</span>():</span><br>	<span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;小博来了&quot;</span>)<br></code></pre></td></tr></table></figure>


<h4 id="增加发布文章功能"><a href="#增加发布文章功能" class="headerlink" title="增加发布文章功能"></a>增加发布文章功能</h4><ol>
<li><p>创建模板</p>
</li>
<li><p>创建文章模型</p>
</li>
<li><p>更新数据库</p>
</li>
<li><p>（编写视图函数与路由）在views目录中创建articles.py文件，与文章相关的视图函数与路由放在此文件中</p>
</li>
<li><p>在app.py中注册articles蓝本对象实例</p>
</li>
</ol>
<h6 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h6><p>在templates目录下新建articles文件夹，放入需要的模板</p>
<h6 id="创建文章模型"><a href="#创建文章模型" class="headerlink" title="创建文章模型"></a>创建文章模型</h6><figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta">#在models.py中</span><br><br><span class="hljs-title">from</span> datetime <span class="hljs-keyword">import</span> datetime										#导入时间模块<br><span class="hljs-title">from</span> libs <span class="hljs-keyword">import</span> db													#导入db模块<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Article</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Model</span>):</span><br><span class="hljs-class">    id = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Integer</span>, <span class="hljs-title">primary_key</span>=<span class="hljs-type">True</span>)                    #主键</span><br><span class="hljs-class">    title = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)                                    #文章标题</span><br><span class="hljs-class">    intro = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)                                    #文章简介</span><br><span class="hljs-class">    content = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Text</span>)                                    #文章内容</span><br><span class="hljs-class">    author = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)                                   #作者</span><br><span class="hljs-class">    pubdate = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">DateTime</span>, <span class="hljs-title">default</span>=<span class="hljs-title">datetime</span>.<span class="hljs-title">utcnow</span>)       #发布时间</span><br></code></pre></td></tr></table></figure>


<h6 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h6><p>模型添加后，必须要在数据库生成相应的表</p>
<p>开发环境可以删除数据库重建，生产环境下必须在不破坏现有的数据库下更新数据库</p>
<ol>
<li>安装数据库管理插件： pipenv install flask-migrate</li>
<li>安装后在app.py中创建实例：migrate = Migrate(app,db)       需要导入flask-migrate中的Migrate模块</li>
<li>初始化数据库迁移环境，在命令行执行：flask db init</li>
<li>创建迁移数据：flask db migrate -m “更新说明”</li>
<li>更新数据库：flask db upgrade </li>
</ol>
<h6 id="编写视图函数与路由"><a href="#编写视图函数与路由" class="headerlink" title="编写视图函数与路由"></a>编写视图函数与路由</h6><p>视图函数：</p>
<ol>
<li>文章详细显示</li>
<li>文章管理列表</li>
<li>添加文章</li>
<li>删除文章</li>
</ol>
<p>蓝本对象实例：相应的url_for也要修改</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">from views.articles import article_app<br><br>app.register<span class="hljs-constructor">_blueprint(<span class="hljs-params">article_app</span>, <span class="hljs-params">url_prefix</span>=<span class="hljs-string">&quot;/article&quot;</span>)</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-一对多关系</title>
    <url>/2021/03/24/Flask-%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h4 id="分类管理"><a href="#分类管理" class="headerlink" title="分类管理"></a>分类管理</h4><ol>
<li>创建分类模型（M）</li>
<li>创建分类模板（V）</li>
<li>创建分类视图（C）</li>
</ol>
<h6 id="分类模型"><a href="#分类模型" class="headerlink" title="分类模型"></a>分类模型</h6><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span>(<span class="hljs-params">db.Model</span>):</span><br>    cate_id = db.Column(db.Integer, primary_key=<span class="hljs-literal">True</span>)<br>    cate_name = db.Column(db.String, unique=<span class="hljs-literal">True</span>)             <span class="hljs-comment">#unique=True 表示此字段不能重复</span><br>    cate_order = db.Column(db.Integer, default=<span class="hljs-number">0</span>)             <span class="hljs-comment">#排序</span><br></code></pre></td></tr></table></figure>
<h6 id="分类模板"><a href="#分类模板" class="headerlink" title="分类模板"></a>分类模板</h6><p>添加增删改查的模板</p>
<h6 id="分类视图"><a href="#分类视图" class="headerlink" title="分类视图"></a>分类视图</h6><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 分类视图部分</span><br><span class="hljs-comment"># 添加分类</span><br><span class="hljs-meta">@article_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/add_cate&quot;</span>, methods=[<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addCate</span>():</span><br>    message = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        cate_name = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        cate_order    = request.form[<span class="hljs-string">&#x27;order&#x27;</span>]<br>        category = Category(<br>                    cate_name=cate_name,<br>                    cate_order=cate_order,<br>         )<br>        <span class="hljs-keyword">try</span>:<br>            db.session.add(category)<br>            db.session.commit()<br>            message = cate_name+<span class="hljs-string">&quot;添加成功&quot;</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            message = <span class="hljs-string">&quot;发生了错误:&quot;</span> + <span class="hljs-built_in">str</span>(e)<br>            <span class="hljs-comment"># 如果插入失败，进行回滚操作,就是撤销刚刚对数据库的操作</span><br>            db.session.rollback()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;category/add.html&quot;</span>, message=message)<br><br><br><span class="hljs-comment"># 获得分类列表</span><br><span class="hljs-meta">@article_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/cate_list&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cateList</span>():</span><br>    cates = Category.query.order_by(Category.cate_order.desc()).<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;category/list.html&quot;</span>, cates=cates )<br><br><br><span class="hljs-comment"># 删除分类</span><br><span class="hljs-meta">@article_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/cate_delete/&lt;int:cate_id&gt;&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deleteCate</span>(<span class="hljs-params">cate_id</span>):</span><br>    cate = Category.query.get(cate_id)<br>    db.session.delete(cate)<br>    db.session.commit()<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;.cateList&quot;</span>))<br><br><br><span class="hljs-comment"># 分类修改</span><br><span class="hljs-meta">@article_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/cate_edit/&lt;int:cate_id&gt;&quot;</span>, methods=[<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">editCate</span>(<span class="hljs-params">cate_id</span>):</span><br>    category = Category.query.get(cate_id)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        category.cate_name = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        category.cate_order = request.form[<span class="hljs-string">&#x27;order&#x27;</span>]<br>        db.session.commit()<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;.cateList&quot;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;category/edit.html&quot;</span>, category=category)<br><br></code></pre></td></tr></table></figure>


<p>用上下文管理器使每个页面都执行下面这个函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.context_processor</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getCatelist</span>():</span><br>    cates = Category.query.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span>&#123;<span class="hljs-string">&quot;cates&quot;</span>: cates&#125;<br></code></pre></td></tr></table></figure>


<h4 id="数据表关系"><a href="#数据表关系" class="headerlink" title="数据表关系"></a>数据表关系</h4><h6 id="模型关系"><a href="#模型关系" class="headerlink" title="模型关系"></a>模型关系</h6><p>我们已经建立了多个模型：用户模型，文章模型，分类模型。</p>
<p>我们该如何给他们建立起联系呢</p>
<p>联系：每个文章都有一个作者，每个文章都属于一个分类</p>
<h6 id="数据表的关系"><a href="#数据表的关系" class="headerlink" title="数据表的关系"></a>数据表的关系</h6><ul>
<li><p>主表：自己的主键或者唯一键是另一个表的外键</p>
</li>
<li><p>从表：自己的某一个字段值是另一个表的主键或者唯一键</p>
</li>
<li><p>外键：必须对应关联表中的主键或者具有唯一值得字段</p>
</li>
<li><p>关联关系</p>
<p>一对多关系：一个作者可以对应多条文章</p>
<p>多对一关系：多个文章属于一个作者</p>
</li>
</ul>
<h6 id="模型关系创建"><a href="#模型关系创建" class="headerlink" title="模型关系创建"></a>模型关系创建</h6><p>在从表定义外键： db.Foreignkey(“主表.主键名”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#例</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Article</span>(<span class="hljs-params">db.Model</span>):</span><br>    ......<br>    cate_id = db.Column(db.Integer,db.ForeignKey(<span class="hljs-string">&#x27;Category.cate_id&#x27;</span>))<br></code></pre></td></tr></table></figure>
<p>在主表中定义关系：db.relationship(“从表模型名”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#例</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span>(<span class="hljs-params">db.Model</span>):</span><br>    ......<br>    articles = db.relationship(<span class="hljs-string">&quot;Article&quot;</span>)<br></code></pre></td></tr></table></figure>
<p>两个表关联后记得更新数据表</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span>. 创建迁移数据：flask <span class="hljs-built_in">db</span> migrate -m <span class="hljs-string">&quot;更新说明&quot;</span><br><span class="hljs-number">2</span>. 更新数据库：flask <span class="hljs-built_in">db</span> upgrade <br></code></pre></td></tr></table></figure>
<p>由于创建关系是，修改了字段，sqlite修改字段支持不在友好，需要修改一下app.py中的migrate对象。</p>
<p>在MySQL中就没有这个问题，不需要修改。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#修改migrate对象</span><br><span class="hljs-attr">migrate</span> = Migrate(app,db,render_as_batch=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure>
<p>级联删除  还没有弄清楚</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql安装与入门</title>
    <url>/2021/03/31/mysql%E5%AE%89%E8%A3%85%E4%B8%8E%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>MySQL与MariaDB可以互相替代，有一些兼容性问题</p>
<h3 id="MySQL下载与安装（windows）"><a href="#MySQL下载与安装（windows）" class="headerlink" title="MySQL下载与安装（windows）"></a>MySQL下载与安装（windows）</h3><ol>
<li>打开<a href="http://www.mysql.com网页,进行下载相关版本,选择zip/">www.mysql.com网页，进行下载相关版本,选择ZIP</a> Archive下载</li>
<li>将下载好的文件解压缩</li>
<li>打开文件夹bin目录，其中MySQL.exe 是 运行MySQL客户端，mysqld.exe是 运行mysql服务器</li>
</ol>
<p>运行mysql</p>
<ol>
<li><p>初始化数据库date目录</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript">打开cmd进入到bin目录执行以下命令<br>initialize是初始化，<span class="hljs-built_in">console</span>是显示输出，用于查看初始密码（这两个不能少）<br><br>mysqld.exe --initialize --<span class="hljs-built_in">console</span><br><br>得到root@localhost:后面跟的密码（记住这个密码）<br></code></pre></td></tr></table></figure></li>
<li><p>运行服务器</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">mysqld.exe <span class="hljs-comment">--console</span><br></code></pre></td></tr></table></figure></li>
<li><p>连接mysql服务器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">mysql<span class="hljs-selector-class">.exe</span> -u root -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure>
<p>然后输入上面的密码，显示mysql &gt;就连接成功了</p>
<p>修改密码：在mysql&gt;后边输入：alter user user() identified by ‘123456’;  #123456就是密码</p>
</li>
<li><p>将mysql安装成服务（在bin目录下执行以下命令）（必须在管理员身份运行cmd）</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">mysqld.exe <span class="hljs-keyword">install</span>			<span class="hljs-comment">#安装服务</span><br><br>mysqld.exe --<span class="hljs-keyword">remove</span> mysql	<span class="hljs-comment">#卸载服务（需要卸载时运行它）</span><br></code></pre></td></tr></table></figure>


<p>   在windows开始处搜索 服务 ，打开服务，找到mysql点击以下，选择启动服务。</p>
</li>
<li><p>配置文件</p>
<p>在mysql安装目录下创建my.ini文件，内容如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[client]</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">default-character-set</span>=utf8<br><br><span class="hljs-section">[mysqld]</span><br><br><span class="hljs-comment">#设置自己mysql的安装目录</span><br><span class="hljs-comment">#basedir=D:\mysql-5.7.28-winx64</span><br><span class="hljs-attr">basedir</span>=C:\Users\<span class="hljs-number">15486</span>\c-exe\mysql\mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">28</span>-winx64<br><br><span class="hljs-comment">#设置为mysql的数据目录（date就是数据目录）</span><br><span class="hljs-comment">#datadir=D:\mysql-5.7.28-winx64\data</span><br><span class="hljs-attr">datadir</span>=C:\Users\<span class="hljs-number">15486</span>\c-exe\mysql\mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">28</span>-winx64\data<br><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">character_set_server</span>=utf8<br><br><span class="hljs-comment">#服务器接收的数据包大小限制</span><br><span class="hljs-attr">max_allowed_packet</span>=<span class="hljs-number">8</span>M<br></code></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="sql语句入门"><a href="#sql语句入门" class="headerlink" title="sql语句入门"></a>sql语句入门</h3><h6 id="SQL组成–DDL"><a href="#SQL组成–DDL" class="headerlink" title="SQL组成–DDL"></a>SQL组成–DDL</h6><p>​    数据定义语言，通过这些语句来创建数据库，数据表，字段，主键，索引等等，包含：create、drop、alter等</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">create</span> database dbname；		<span class="hljs-meta">#创建数据库，dbname为数据库名</span><br><span class="hljs-keyword">show</span> databases；				<span class="hljs-meta">#查看有哪些数据库</span><br><span class="hljs-keyword">use</span> dbname；					<span class="hljs-meta">#选择数据库</span><br><span class="hljs-keyword">show</span> tables；				<span class="hljs-meta">#查看数据表</span><br><span class="hljs-keyword">show</span> fields from users;		<span class="hljs-meta">#查看数据表明细（users是数据表名）</span><br><span class="hljs-built_in">drop</span> database dbname；		<span class="hljs-meta">#删除数据库</span><br><br><br><br>tips：每个语句后面记得加封号（；），不然会报错<br></code></pre></td></tr></table></figure>

<h6 id="SQL组成–DML"><a href="#SQL组成–DML" class="headerlink" title="SQL组成–DML"></a>SQL组成–DML</h6><p>​    数据库操作语言，通过这些语句来插入，更新，删除数据，包含： insert、update、delete等</p>
<h6 id="SQL组成–DQL"><a href="#SQL组成–DQL" class="headerlink" title="SQL组成–DQL"></a>SQL组成–DQL</h6><p>​    数据库查询语言，通过这些语句检索数据，包含： select、order by、group by等</p>
<h6 id="SQL组成–DCL"><a href="#SQL组成–DCL" class="headerlink" title="SQL组成–DCL"></a>SQL组成–DCL</h6><p>​    数据库控制语言，通过这些语句控制数据访问权限，包含：grant等</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql创建数据表</title>
    <url>/2021/04/01/mysql%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E8%A1%A8/</url>
    <content><![CDATA[<h6 id="存储引擎（mysql）"><a href="#存储引擎（mysql）" class="headerlink" title="存储引擎（mysql）"></a>存储引擎（mysql）</h6><ul>
<li><strong>innodb引擎</strong>：mysql默认的引擎，支持事务，行锁（大多数情况下）</li>
<li><strong>myisam引擎</strong>：早期默认的引擎，查询速度快，不支持事务，只能锁表（经常读，写入少）</li>
<li><strong>memory引擎</strong>：内存引擎，用于需要快速访问的临时数据（临时性数据，需要快速读取写入，不常用）</li>
</ul>
<h6 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h6><p>不同的编码方式占用不同的字节，utf-8中文占用3个字节。</p>
<p>如果程序与数据库的编码不一致，可能导致乱码</p>
<p><strong>大多数情况下，网页，程序，数据库都选用utf-8，以保持一致</strong></p>
<h6 id="DDL建表语句"><a href="#DDL建表语句" class="headerlink" title="DDL建表语句"></a>DDL建表语句</h6><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">#建表格式<br>create table tablename(<br>	fieldname1 filedtype constrains,<br>    fieldname1 filedtype constrains,<br> #   字段名      字段类型    约束，<br>    ............,<br>    primary key ( &#96;key_field&#96;)<br>);<br><br><br>#修改数据表<br>增加字段：<br>alter table &#96;table名&#96;<br>add column &#96;filedname&#96; fieldtype constrains;<br><br>add column &#96;filedname&#96; fieldtype constrains after &#96;username&#96;;	#将此字段增加到username之后<br><br>删除字段：<br>alter table &#96;table名&#96;<br>drop column &#96;filed&#96;;<br></code></pre></td></tr></table></figure>
<p>字段类型：<a href="https://blog.csdn.net/weixin_31534091/article/details/113608053?utm_source=app&amp;app_version=4.5.5%EF%BC%88%E6%9D%A5%E8%87%AACSDN%E7%94%A8%E6%88%B7%EF%BC%89">https://blog.csdn.net/weixin_31534091/article/details/113608053?utm_source=app&amp;app_version=4.5.5（来自CSDN用户）</a></p>
<p>创建一个用户数据表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create table users(<br>	&#96;user_id&#96; int not null,<br>    &#96;username&#96; char(25) not null,<br>    &#96;realname&#96; char(25) not null,<br>    &#96;password&#96; char(64) not null,<br>    &#96;register_date&#96; datetime not null,<br>    primary key(&#96;user_id&#96;)<br>);<br></code></pre></td></tr></table></figure>


<h6 id="图形化管理工具（mysql-workbench）"><a href="#图形化管理工具（mysql-workbench）" class="headerlink" title="图形化管理工具（mysql workbench）"></a>图形化管理工具（mysql workbench）</h6><p>建表的可视化，可视化建表</p>
<p>下载mysql workbench并安装（在mysql下载页面可以找到它）</p>
<p>安装与使用教程：<a href="https://blog.csdn.net/zs1342084776/article/details/88701261?utm_source=app&amp;app_version=4.5.5%EF%BC%88%E8%BD%AC%E8%87%AACSDN%E7%94%A8%E6%88%B7%EF%BC%89">https://blog.csdn.net/zs1342084776/article/details/88701261?utm_source=app&amp;app_version=4.5.5（转自CSDN用户）</a></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">pk</span><span class="hljs-params">(主键)</span></span><br><span class="hljs-function"><span class="hljs-title">nn</span><span class="hljs-params">(不能为NULL)</span></span><br><span class="hljs-function"><span class="hljs-title">UQ</span><span class="hljs-params">(不能重复)</span></span><br>B或BIN()<br>UN<br>ZF<br><span class="hljs-function"><span class="hljs-title">AI</span><span class="hljs-params">(自增长，每插入一个数据，ID会增加)</span></span><br>G<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-插入语句insert与SQLAlchemy原理</title>
    <url>/2021/04/04/mysql-%E6%8F%92%E5%85%A5%E8%AF%AD%E5%8F%A5insert%E4%B8%8ESQLAlchemy%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h6 id="插入语句（DML）"><a href="#插入语句（DML）" class="headerlink" title="插入语句（DML）"></a>插入语句（DML）</h6><ol>
<li><p>第一种写法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> (field1,field2,field3 ......)<br><span class="hljs-keyword">values</span>(val1,val2,val3 .....)<br><br>注：<span class="hljs-keyword">table</span>是表名，field是字段名，<span class="hljs-keyword">values</span>是值，插入值的时候字符串要加引号<br>不用列出所有字段，只需要列出需要赋值的字段，赋上相应的值就行，没有列出的字段使用默认值<br></code></pre></td></tr></table></figure></li>
<li><p>第二种写法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span><br><span class="hljs-keyword">values</span> (val1,val2,val3 ......)<br><br>注：值与字段数量必须匹配，且一一对应。<br></code></pre></td></tr></table></figure></li>
<li><p>第三种写法</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">insert into table <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">field1</span>=val1 , <span class="hljs-attribute">field2</span>=val2 <span class="hljs-built_in">..</span>.<br><br>注：字段名与值一一对应写出来，不容易写错，明了。<br></code></pre></td></tr></table></figure>


</li>
</ol>
<h6 id="mysql连接服务器"><a href="#mysql连接服务器" class="headerlink" title="mysql连接服务器"></a>mysql连接服务器</h6><p>安装连接器</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> mysql-connector-python<br></code></pre></td></tr></table></figure>
<p>通过mysql驱动连接数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.connector		<span class="hljs-comment">#导入模块</span><br><br><span class="hljs-comment">#连接数据库,其中user，passWord，host，database分别代表的是数据库的用户名，密码，IP，数据库名。</span><br>cnx = mysql.connector.connector(user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                               password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>                               host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                               database=<span class="hljs-string">&#x27;mydb&#x27;</span>)<br></code></pre></td></tr></table></figure>
<p>创建游标对象cursor</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">cursor = cnx.cursor()<br><br><span class="hljs-comment">#通过cursor对象执行SQL语句</span><br><span class="hljs-comment">#比如： </span><br>cursor.execute()		<span class="hljs-comment">#执行sql语句</span><br>cursor.fetchall()		<span class="hljs-comment">#执行查询</span><br><br>cnx.commit()			<span class="hljs-comment">#事务提交</span><br>cnx.rollback()			<span class="hljs-comment">#事务回滚</span><br><br>cursor.close()			<span class="hljs-comment">#关闭游标，重置所有结果</span><br><br>cnx.close()				<span class="hljs-comment">#释放连接资源</span><br></code></pre></td></tr></table></figure>
<p>事务</p>
<p>事务通常是需要执行一组sql语句</p>
<p>innodb是一个事务型的存储引擎</p>
<p>事务特性（ACID）</p>
<p>A ：atomicity  – 原子性，操作不可分割</p>
<p>C ：consistency   – 一致性，操作前后数据的完整性保持一致</p>
<p>I：isolation  – 隔离性，不同事务之间不影响</p>
<p>D：durability  – 持久性，事务执行后，对数据的更改是永久保存的</p>
<h6 id="python创建数据表"><a href="#python创建数据表" class="headerlink" title="python创建数据表"></a>python创建数据表</h6><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.connector <span class="hljs-keyword">as</span> connector<br><br>cnx = connector.connect(user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                                password=<span class="hljs-string">&#x27;tbz1548638666&#x27;</span>,<br>                                host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                                database=<span class="hljs-string">&#x27;mydb&#x27;</span>)<br><br>cursor = cnx.cursor()<br><br>sql = <span class="hljs-string">&quot;create table books(&quot;</span>\<br>      <span class="hljs-string">&quot;`book_id` int not null,&quot;</span>\<br>      <span class="hljs-string">&quot;`book_name` char(25) not null,&quot;</span>\<br>      <span class="hljs-string">&quot;`book_autor` char(25) not null,&quot;</span>\<br>      <span class="hljs-string">&quot;`book_pubdate` datetime not null,&quot;</span>\<br>      <span class="hljs-string">&quot;primary key (`book_id`) )&quot;</span><br><span class="hljs-keyword">try</span>:<br>    cursor.execute(sql)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    print(sql)<br>    print(e)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&quot;数据表创建成功&quot;</span>)<br><br>cursor.close()<br>cnx.close()<br></code></pre></td></tr></table></figure>


<h6 id="执行插入"><a href="#执行插入" class="headerlink" title="执行插入"></a>执行插入</h6><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.conmector <span class="hljs-keyword">as</span> connector<br>sql = <span class="hljs-string">&quot;INSERT INTO</span><br><span class="hljs-string">`mydb`.`users`&quot;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-查询语句</title>
    <url>/2021/04/05/mysql-%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>select语句</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> <span class="hljs-number">10</span> * <span class="hljs-number">10</span>			#计算<span class="hljs-number">10</span>*<span class="hljs-number">10</span><br><span class="hljs-attribute">select</span> <span class="hljs-number">10</span> * <span class="hljs-number">10</span> as num   #num=<span class="hljs-number">10</span>*<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure>


<p>从表中检索数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">检索所有字段：<br>select * from table<br><br>检索特定字段：<br>select field1, field2, field3 from table<br><br>select &#96;field1&#96; as un, &#96;field2&#96; as rn from table	#将字段重命名，便于引用<br></code></pre></td></tr></table></figure>


<p>where条件查询语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select * from table where condition<br><br>&#x3D; , &gt; , &lt; , &gt;&#x3D; , &lt;&#x3D;<br>&lt;&gt; , !&#x3D;  #这两个都是不等于<br>&lt;&#x3D;&gt;      #null相等<br>is null			#是NULL值<br>is not null		#不是NULL值<br><br>例：<br>select * from users where user_id&gt;100;<br>select * from users where user_id&lt;&gt;100;<br><br></code></pre></td></tr></table></figure>
<p>between-区间查询</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> table <span class="hljs-keyword">where</span> field <span class="hljs-keyword">between</span> <span class="hljs-built_in">min</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">max</span>;<br><br>例：<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> age <span class="hljs-keyword">between</span> <span class="hljs-number">18</span> <span class="hljs-keyword">and</span> <span class="hljs-number">25</span>;<br></code></pre></td></tr></table></figure>


<p>in -存在于指定集合</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-function"><span class="hljs-keyword">from</span> table <span class="hljs-keyword">where</span> field <span class="hljs-title">in</span> (<span class="hljs-params">x,y,z</span>)</span>;<br><br>例：<br><span class="hljs-keyword">select</span> * <span class="hljs-function"><span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id <span class="hljs-title">in</span> (<span class="hljs-params"><span class="hljs-number">2</span>,<span class="hljs-number">4</span></span>)</span>;<br></code></pre></td></tr></table></figure>


<p>模糊查询</p>
<p>like -通配符%匹配</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">%表示任意一个字符，_表示一个字符<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> field <span class="hljs-keyword">like</span> &quot;%博%&quot;;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> &quot;%博%&quot;;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> &quot;_博%&quot;;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> username <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> &quot;_博%&quot;;<br></code></pre></td></tr></table></figure>
<p>regexp - 正则匹配</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">a-z</span>]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125; <span class="hljs-meta">#3个字母</span><br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username regexp <span class="hljs-string">&quot;[a-z]+x&quot;</span><br></code></pre></td></tr></table></figure>


<p>组合查询（and ，or）</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> (username <span class="hljs-keyword">like</span> <span class="hljs-string">&quot;%博%&quot;</span>) and (user_id&gt;<span class="hljs-number">3</span>);<br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> (age&lt;<span class="hljs-number">18</span>) or (age&gt;<span class="hljs-number">60</span>)<br></code></pre></td></tr></table></figure>


<p>python中查询实例</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>

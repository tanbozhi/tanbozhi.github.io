<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django-MVC模式</title>
    <url>/2021/02/20/Django-MVC%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h3><p>动态的程序设计,使后续对程序的修改和扩展简化,并使程序某一部分的重复利用成为可能</p>
<p>M: Model,代表数据存取层</p>
<p>V: View,系统中显示什么,怎么显示</p>
<p>C: Controller,根据用户输入和需要访问的类型</p>
<h3 id="MTV模式"><a href="#MTV模式" class="headerlink" title="MTV模式"></a>MTV模式</h3><p>MTV模式是以Django为框架的网站模式</p>
<p>M: Model,数据存取层</p>
<p>T : Template,表现层</p>
<p>V: View,业务逻辑层</p>
<p>请求响应流程</p>
<p><img src="/img/QQ%E6%88%AA%E5%9B%BE20210220092928.png"></p>
<p>自定义模板位置</p>
<p>目的:模板目录位置不在应用内部</p>
<p>​        便于统一维护模板</p>
<p>编辑: 设置settings.py文件中的templates的值</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml">TEMPLATES = [</span><br><span class="xml">    &#123;</span><br><span class="xml">        &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;,</span><br><span class="xml">        &#x27;DIRS&#x27;: [os.path.join(BASE_DIR,&#x27;templates&#x27;)],   #将模板目录指定为根目录里的templates</span><br><span class="xml">        &#x27;APP_DIRS&#x27;: False,  #每个项目里面不在配置模板目录</span><br><span class="xml">        &#x27;OPTIONS&#x27;: &#123;</span><br><span class="xml">            &#x27;context_processors&#x27;: [</span><br><span class="xml">                &#x27;django.template.context_processors.debug&#x27;,</span><br><span class="xml">                &#x27;django.template.context_processors.request&#x27;,</span><br><span class="xml">                &#x27;django.contrib.auth.context_processors.auth&#x27;,</span><br><span class="xml">                &#x27;django.contrib.messages.context_processors.messages&#x27;,</span><br><span class="xml">            ],</span><br><span class="xml">        &#125;,</span><br><span class="xml">    &#125;,</span><br><span class="xml">]</span><br></code></pre></td></tr></table></figure>
<p>静态文件</p>
<p>下载botstrap解压后将里面的fonts,js,css文件夹放入static文件夹里</p>
<p>点击跳转跳转配置</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml">#<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">url</span></span> &#x27;blog:blog_title&#x27; %&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>小博丨博客<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><br><span class="xml">#修改mysite下的urls.py文件</span><br><span class="xml">urlpatterns = [</span><br><span class="xml">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="xml">    path(&#x27;blog/&#x27;,include(&#x27;blog.urls&#x27;,namespace=&#x27;blog&#x27;)),     #在这儿加上namespace=&#x27;blog&#x27;</span><br><span class="xml">]</span><br><br><span class="xml">#修改blog下的urls.py文件</span><br><span class="xml">app_name = &#x27;blog&#x27;	#增加这一行</span><br><br><span class="xml">urlpatterns = [</span><br><span class="xml">    path(&#x27;&#x27;, views.blog_title,name=&#x27;blog_title&#x27;),   #这儿加上name=&#x27;blog_title&#x27;</span><br><span class="xml">    path(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">int:article_id</span>&gt;</span>&#x27;, views.blog_article,name=&#x27;blog_article&#x27;)	#这儿加上name=&#x27;blog_article&#x27;</span><br><span class="xml">]</span><br></code></pre></td></tr></table></figure>
<p>点击 小博丨博客  会跳转到 blog_title页面</p>
<p>引入html文件</p>
<p>base.html 如何引入刚刚写好的header与footer</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;header.html&#x27; %&#125;</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;footer.html&#x27; %&#125;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-ajax</title>
    <url>/2021/03/01/Django-ajax/</url>
    <content><![CDATA[<p>AJAX: Asynchronous JavaScript and XML,异步JavaScript和XML.</p>
<p>​    用JavaScript向服务器发送必要数据</p>
<p>​        XML</p>
<p>​        JSON</p>
<p>​    接受服务器的反馈</p>
<p>​    优点:不更新整个页面的前提下维护数据</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-ORM语法</title>
    <url>/2021/02/16/Django-ORM%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Django-ORM基本语法"><a href="#Django-ORM基本语法" class="headerlink" title="Django-ORM基本语法"></a>Django-ORM基本语法</h1><p>在cmd中进入根目录(myproject),进入交互交互模式</p>
<h5 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h5><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> <span class="hljs-keyword">shell</span>    #进入交互模式<br></code></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 引入模块</span><br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br><span class="hljs-keyword">from</span> blog.models <span class="hljs-keyword">import</span> BlogArticles<br></code></pre></td></tr></table></figure>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"># 获得User中的用户名为damin的对象<br>admin = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span>objects.get(username=&#x27;admin&#x27;)   #username = &#x27;用户名&#x27; 这个用户名必须在数据库里存在<br><br>#创建一篇博客文章<br>bolg = <span class="hljs-constructor">BlogArticles(<span class="hljs-params">title</span>=&#x27;<span class="hljs-params">hello</span> <span class="hljs-params">world</span>&#x27;,<span class="hljs-params">author</span>=<span class="hljs-params">admin</span>,<span class="hljs-params">body</span>=&#x27;<span class="hljs-params">hello</span>,<span class="hljs-params">i</span> <span class="hljs-params">am</span> <span class="hljs-params">coming</span>&#x27;)</span><br><br>#保存,不要忘记,不能省略,保存后数据表中就有这篇文章了<br>blog.save<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure>


<h5 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Blogs = BlogArticles.objects.<span class="hljs-built_in">all</span>()   <span class="hljs-comment">#查询所有文章</span><br>Blogs      <span class="hljs-comment">#执行这个就可以获得所有文章的title</span><br><br><span class="hljs-comment"># 循环出所有文章</span><br><span class="hljs-keyword">for</span> blog <span class="hljs-keyword">in</span> blogs:<br>    print(blog.<span class="hljs-built_in">id</span>,blog.publish,blog.title,blog.author)<br>    <br>    <br><span class="hljs-comment">#查询ID为1的文章</span><br>b = BlogArticles.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>)<br>b<br><br><span class="hljs-comment">#查询作者admin写的文章</span><br>BlogArticles.objects.<span class="hljs-built_in">filter</span>(author=admin)<br><br><span class="hljs-comment"># 反向查询,根据用户名查询用户发布的文章</span><br>admin.blog_posts.<span class="hljs-built_in">all</span>()<br></code></pre></td></tr></table></figure>
<h5 id="修改保存操作"><a href="#修改保存操作" class="headerlink" title="修改保存操作"></a>修改保存操作</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改操作</span><br>b = BlogArticles.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>)<br>b<br>b.title=<span class="hljs-string">&#x27;新的文章名&#x27;</span><br>b.save()    <span class="hljs-comment">#保存</span><br><br><span class="hljs-comment">#删除操作</span><br>b.delete()<br></code></pre></td></tr></table></figure>


<h5 id="官方文档查询操作链接"><a href="#官方文档查询操作链接" class="headerlink" title="官方文档查询操作链接"></a>官方文档查询操作链接</h5><p><a href="https://docs.djangoproject.com/zh-hans/3.0/topics/db/queries/">https://docs.djangoproject.com/zh-hans/3.0/topics/db/queries/</a></p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-个人信息</title>
    <url>/2021/02/28/Django-%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>安装-Django</title>
    <url>/2021/02/15/Django-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="1-安装Django"><a href="#1-安装Django" class="headerlink" title="1.安装Django"></a>1.安装Django</h3><h5 id="1-1安装Django"><a href="#1-1安装Django" class="headerlink" title="1.1安装Django"></a>1.1安装Django</h5><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> Django<br></code></pre></td></tr></table></figure>
<h5 id="1-2指定安装Django版本"><a href="#1-2指定安装Django版本" class="headerlink" title="1.2指定安装Django版本"></a>1.2指定安装Django版本</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">pip install Django==<span class="hljs-number">2.2</span>        <span class="hljs-comment">#指定2.2的版本</span><br></code></pre></td></tr></table></figure>
<h5 id="1-3查验版本"><a href="#1-3查验版本" class="headerlink" title="1.3查验版本"></a>1.3查验版本</h5><p>进入Python交互模式后输入以下指令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> django<br>django.get_version()<br></code></pre></td></tr></table></figure>
<h3 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h3><h5 id="2-1创建项目目录"><a href="#2-1创建项目目录" class="headerlink" title="2.1创建项目目录"></a>2.1创建项目目录</h5><p>​    进入目录</p>
<p>​    执行创建项目命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">mkdir myproject       <span class="hljs-comment"># 创建目录</span><br>cd myproject    <span class="hljs-comment">#进入目录</span><br><br>django-admin startproject mysite .   <span class="hljs-comment"># mysite 是项目名称 可以自己修改,mysite后面的那个点不要忽略了,意思是在当前文件夹下创建项目</span><br></code></pre></td></tr></table></figure>
<p>此刻 myproject 文件夹下应该有以下文件或文件夹</p>
<p>manage.py       mysite</p>
<h5 id="2-2执行运行项目指令"><a href="#2-2执行运行项目指令" class="headerlink" title="2.2执行运行项目指令"></a>2.2执行运行项目指令</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Python manage.py runserver<br></code></pre></td></tr></table></figure>
<p>​    执行成功后打开返回的网址</p>
<p>​    一般是这个网址( <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> )</p>
<p>​    打开后能看见一个绿色的小火箭就说明成功了</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-内置登录退出</title>
    <url>/2021/02/21/Django-%E5%86%85%E7%BD%AE%E7%99%BB%E5%BD%95%E9%80%80%E5%87%BA/</url>
    <content><![CDATA[<p>内置应用</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">INSTALLED_APPS</span><br></code></pre></td></tr></table></figure>


<p>认证逻辑封装在中间件csrf</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">MIDDLEWARE</span><br></code></pre></td></tr></table></figure>


<p>身份验证系统官方网站文档</p>
<p><a href="https://docs.djangoproject.com/en/3.0/topics/auth/default/#all-authentication-views">https://docs.djangoproject.com/en/3.0/topics/auth/default/#all-authentication-views</a> ·</p>
<p>显示用户登录状态</p>
<figure class="highlight q"><table><tr><td class="code"><pre><code class="hljs q">auth.<span class="hljs-built_in">views</span>.LoginView<br></code></pre></td></tr></table></figure>


<p>显示退出状态</p>
<figure class="highlight q"><table><tr><td class="code"><pre><code class="hljs q">auth.<span class="hljs-built_in">views</span>.LogoutView<br></code></pre></td></tr></table></figure>


<p>打开account目录下的urls ,添加代码</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> <span class="hljs-type">path</span><br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><span class="hljs-keyword">from</span> django.contrib.auth <span class="hljs-keyword">import</span> views <span class="hljs-keyword">as</span> auth_views		#添加这一句<br><br>app_name = <span class="hljs-string">&#x27;account&#x27;</span><br><br>urlpatterns = [<br>   # path(<span class="hljs-string">&#x27;login/&#x27;</span>, views.user_login,<span class="hljs-type">name</span>=<span class="hljs-string">&#x27;user_login&#x27;</span>),		#添加这下面的两句<br>    path(<span class="hljs-string">&#x27;login/&#x27;</span>,auth_views.LoginView.as_view(template_name=<span class="hljs-string">&#x27;account/login2.html&#x27;</span>),<span class="hljs-type">name</span>=<span class="hljs-string">&#x27;user_login&#x27;</span>),	#登录<br>    path(<span class="hljs-string">&#x27;logout/&#x27;</span>, auth_views.LogoutView.as_view(template_name=<span class="hljs-string">&#x27;account/logout.html&#x27;</span>), <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;user_logout&#x27;</span>),	#退出<br>]<br></code></pre></td></tr></table></figure>


<p>强制登录后转到blog页面</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#settings.py末尾添加下面代码</span><br><br><span class="hljs-attr">LOGIN_REDIRECT_URL</span> = <span class="hljs-string">&#x27;/blog/&#x27;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-密码</title>
    <url>/2021/02/26/Django-%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-图文编辑</title>
    <url>/2021/03/02/Django-%E5%9B%BE%E6%96%87%E7%BC%96%E8%BE%91/</url>
    <content><![CDATA[<p>目标</p>
<p>​    注册用户发布博客</p>
<p>​    使用Markdown编辑器实现图文编辑</p>
<p>开发流程</p>
<ol>
<li>创建模型类BlogArtucles   (已有)</li>
<li>创建blog应用的forms.py文件</li>
<li>编写视图函数,处理用户提交的表单</li>
<li>设置路由</li>
<li>编写前端模板</li>
<li>设置发布博客的入口链接</li>
</ol>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-模型与超管</title>
    <url>/2021/02/16/Django-%E6%A8%A1%E5%9E%8B%E4%B8%8E%E8%B6%85%E7%AE%A1/</url>
    <content><![CDATA[<p>[TOC]</p>
<h3 id="1-模型"><a href="#1-模型" class="headerlink" title="1.模型"></a>1.模型</h3><h5 id="1-1网页内容来源"><a href="#1-1网页内容来源" class="headerlink" title="1.1网页内容来源"></a>1.1网页内容来源</h5><ul>
<li><p>​    静态: 直接写到HTML文件中</p>
</li>
<li><p>​    动态: 来自数据库</p>
<p>​            使用sql语句读取数据库</p>
<p>​            Django通过ORM实现对数据库的读写</p>
<p>​            </p>
</li>
</ul>
<h5 id="1-2-ORM"><a href="#1-2-ORM" class="headerlink" title="1.2  ORM"></a>1.2  ORM</h5><p>​    ORM优点: 可移植性强,安全性好,查询语法简单</p>
<p>​    ORM实现方法</p>
<ul>
<li><p>编写数据类型</p>
</li>
<li><p>位置:models.py(也可以是其他文件)</p>
</li>
<li><p>继承:django.db.models.Model</p>
</li>
<li><p>对应的数据表: appname_modelname,     (都是小写字母)</p>
</li>
<li><p>创建数据表库: 迁移操作</p>
<p>​    Python manage.py makemigrations</p>
<p>​    python manage.py  migrate</p>
</li>
</ul>
<p>在models.py文件下写入以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone    <span class="hljs-comment">#引入时间模块</span><br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlogArticles</span>(<span class="hljs-params">models.Model</span>):</span>    <span class="hljs-comment"># 定义模型类名称BlogArticles,继承models.Model类</span><br>    title = models.CharField(max_length=<span class="hljs-number">300</span>)    <span class="hljs-comment"># 字段 每一个字段后面都有一个field类的实例</span><br>    author = models.ForeignKey(User, on_delete=models.CASCADE,related_name=<span class="hljs-string">&#x27;blog_posts&#x27;</span>)<br>    body = models.TextField()       <br>    <span class="hljs-comment">#字段类型查看网址 https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#model-field-types</span><br><br>    publish = models.DateTimeField(default=timezone.now)     <span class="hljs-comment"># 字段</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mata</span>:</span>                            <span class="hljs-comment"># 内部类</span><br>        orderby = (<span class="hljs-string">&#x27;-publish&#x27;</span>,)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.title<br></code></pre></td></tr></table></figure>
<p><img src="/img/QQ%E6%88%AA%E5%9B%BE20210216144907.png"></p>
<p> author = models.ForeignKey(User, on_delete=models.CASCADE,<br>        related_name=’blog_posts’)        </p>
<p>​         ForeignKey:外键,—对多(多对一)关系</p>
<p>​        User:被关联的类</p>
<p>​        on_delete=models.CASCADE:联级删除</p>
<p>​        related_name=‘blog _posts’: User的实例以blog _posts属性反向查询到BlogArticles的实例</p>
<h5 id="1-3-迁移数据"><a href="#1-3-迁移数据" class="headerlink" title="1.3 迁移数据"></a>1.3 迁移数据</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">python manage.py mekemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure>
<p>查看数据表结构</p>
<p>​        可视化方法   :<a href="https://sqlitestudio.pl/index.rvt">https://sqlitestudio.pl/index.rvt</a></p>
<p>​        sqlite操作界面</p>
<h3 id="2-超管"><a href="#2-超管" class="headerlink" title="2.超管"></a>2.超管</h3><h5 id="2-1创建超管并登录界面"><a href="#2-1创建超管并登录界面" class="headerlink" title="2.1创建超管并登录界面"></a>2.1创建超管并登录界面</h5><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> createsuperuser  #创建超管 并按照提示设置用户名,邮箱,密码<br><br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> runserver   #运行项目<br></code></pre></td></tr></table></figure>
<p>运行项目并用浏览器打开这个网址   <a href="http://localhost:8000/admin/">http://localhost:8000/admin/</a></p>
<h5 id="2-2将blog模型增加到管理应用里面"><a href="#2-2将blog模型增加到管理应用里面" class="headerlink" title="2.2将blog模型增加到管理应用里面"></a>2.2将blog模型增加到管理应用里面</h5><p>编辑blog下面的admin.py文件,编辑如下</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> <span class="hljs-keyword">admin</span><br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> BlogArticles<br><br><span class="hljs-keyword">admin</span>.site.register(BlogArticles)<br></code></pre></td></tr></table></figure>
<p>保存后刷新上面的网页,就可以发布博客了</p>
<p>如果想要博客列表展示更多信息可以修改admin.py下的代码,例如</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> <span class="hljs-keyword">admin</span><br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> BlogArticles<br><br><span class="hljs-keyword">class</span> BlogArticlesAdmin(<span class="hljs-keyword">admin</span>.ModelAdmin):<br>    list_display = (<span class="hljs-string">&#x27;title&#x27;</span>,<span class="hljs-string">&#x27;author&#x27;</span>,<span class="hljs-string">&#x27;publish&#x27;</span>)<br>    list_filter = (<span class="hljs-string">&#x27;publish&#x27;</span>,<span class="hljs-string">&#x27;author&#x27;</span>)<br>    search_fields = (<span class="hljs-string">&#x27;title&#x27;</span>,<span class="hljs-string">&#x27;body&#x27;</span>)<br>    raw_id_fields = (<span class="hljs-string">&#x27;author&#x27;</span>,)<br>    date_hierarchy = <span class="hljs-string">&#x27;publish&#x27;</span><br>    ordering = [<span class="hljs-string">&#x27;-publish&#x27;</span>,<span class="hljs-string">&#x27;author&#x27;</span>]<br><br><span class="hljs-keyword">admin</span>.site.register(BlogArticles,BlogArticlesAdmin)<br></code></pre></td></tr></table></figure>
<p>保存,刷新网页</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-注册</title>
    <url>/2021/02/22/Django-%E6%B3%A8%E5%86%8C/</url>
    <content><![CDATA[<p><img src="/img/QQ%E6%88%AA%E5%9B%BE20210222115557.png"></p>
<p>模型类前面已经编写好了的</p>
<h3 id="编写表单类"><a href="#编写表单类" class="headerlink" title="编写表单类"></a>编写表单类</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User  	<span class="hljs-comment">#引入模型类</span><br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> fields<br><span class="hljs-keyword">from</span> django.forms.widgets <span class="hljs-keyword">import</span> PasswordInput<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginForm</span>(<span class="hljs-params">forms.Form</span>):</span><br>    username = forms.CharField()<br>    password = forms.CharField(widget=forms.PasswordInput)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegistrationForm</span>(<span class="hljs-params">forms.ModelForm</span>):</span>		<span class="hljs-comment">#ModelForm 这个类可以保存数据</span><br>    password = forms.CharField(widget=forms.PasswordInput)<br>    password1 = forms.CharField(widget=forms.PasswordInput)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = User<br>        fields = (<span class="hljs-string">&#x27;username&#x27;</span>,<span class="hljs-string">&#x27;email&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clean_password2</span>(<span class="hljs-params">self</span>):</span>			<span class="hljs-comment">#验证某个字段都是使用clean字段命名</span><br>        cd = self.cleaned_data<br>        <span class="hljs-keyword">if</span> cd[<span class="hljs-string">&#x27;password&#x27;</span>] != cd[<span class="hljs-string">&#x27;password2&#x27;</span>]:<br>            <span class="hljs-keyword">raise</span> forms.ValidationError(<span class="hljs-string">&#x27;password do not math.&#x27;</span>)<br>        <span class="hljs-keyword">return</span> cd[<span class="hljs-string">&#x27;password2&#x27;</span>]<br><br></code></pre></td></tr></table></figure>


<h3 id="编写注册的视图函数"><a href="#编写注册的视图函数" class="headerlink" title="编写注册的视图函数"></a>编写注册的视图函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">register</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        user_form = RegistrationForm()<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;account/register.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;form&#x27;</span>:user_form&#125;)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        user_form = RegistrationForm(request.POSt)<br>        <span class="hljs-keyword">if</span> user_form.is_valid():<br>            new_user = user_form.save(commit=<span class="hljs-literal">False</span>)<br>            new_user.set_password(user_form.cleaned_data[<span class="hljs-string">&#x27;password&#x27;</span>])<br>            new_user.save()<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;恭喜你,注册成功了~~~&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;注册失败&#x27;</span>)<br></code></pre></td></tr></table></figure>


<h3 id="编写注册的模板"><a href="#编写注册的模板" class="headerlink" title="编写注册的模板"></a>编写注册的模板</h3><figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">extends</span></span> &#x27;base.html&#x27; %&#125;</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> title %&#125;</span><span class="xml">Register</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content %&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;row text-center&#x27;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-horizontal&#x27;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;post&#x27;</span>&gt;</span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">csrf_token</span></span> %&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; form.username &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; form.email &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; form.password &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>确认密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; form.password2 &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; profile.phone &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;submit&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;btn btn-primary btn-lg&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;注册&#x27;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br><br></code></pre></td></tr></table></figure>


<h3 id="配置URL"><a href="#配置URL" class="headerlink" title="配置URL"></a>配置URL</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">path</span><span class="hljs-params">(<span class="hljs-string">&#x27;register/&#x27;</span>,views.register,name=<span class="hljs-string">&#x27;user_register&#x27;</span>)</span></span>                 <span class="hljs-selector-id">#urls</span>.py里添加<br></code></pre></td></tr></table></figure>


<p>创建phone字段与用户表进行关联</p>
<p>创建模型</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> <span class="hljs-keyword">User</span><br><br><span class="hljs-keyword">class</span> UserProfile(models.Model):<br>    <span class="hljs-keyword">user</span> = models.OneToOneField(<span class="hljs-keyword">User</span>,on_delete=models.<span class="hljs-keyword">CASCADE</span>,<span class="hljs-keyword">unique</span>=<span class="hljs-keyword">True</span>)<br>    phone = models.CharField(max_length=<span class="hljs-number">20</span>,<span class="hljs-keyword">null</span>=<span class="hljs-keyword">True</span>)<br><br>    def __str__(self):<br>        <span class="hljs-keyword">return</span> &quot;user &#123;&#125;&quot;.format(self.<span class="hljs-keyword">user</span>.username)<br></code></pre></td></tr></table></figure>


<p>迁移数据</p>
<p>cmd 打开项目根目录,执行命令</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations account<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate account<br></code></pre></td></tr></table></figure>


<p>在forms.py 添加</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">UserProfileForm</span>(<span class="hljs-title">forms</span>.<span class="hljs-type">ModelForm</span>):</span><br><span class="hljs-class">    <span class="hljs-keyword">class</span> <span class="hljs-type">Meta</span>:</span><br><span class="hljs-class">        model = <span class="hljs-type">UserProfile</span></span><br><span class="hljs-class">        fields = (&#x27;<span class="hljs-title">phone&#x27;</span>,)</span><br></code></pre></td></tr></table></figure>


<p>重写views.py</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe">from django.shortcuts <span class="hljs-keyword">import</span> render<br>from django.http <span class="hljs-keyword">import</span> HttpResponse<br>from django.contrib.auth <span class="hljs-keyword">import</span> authenticate, login<br>from .forms <span class="hljs-keyword">import</span> LoginForm, RegistrationForm, UserProfileForm<br><br>def user_login(request):<span class="hljs-type"></span><br><span class="hljs-type">    if request</span>.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<span class="hljs-type"></span><br><span class="hljs-type">        login_form </span>= LoginForm()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;account/login.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: <span class="hljs-type">login_form</span>&#125;)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<span class="hljs-type"></span><br><span class="hljs-type">        login_form </span>= LoginForm(request.POST)<br>        <span class="hljs-keyword">if</span> login_form.is_valid():<span class="hljs-type"></span><br><span class="hljs-type">            cd </span>= login_form.cleaned_data<br>            user = authenticate(username=cd[<span class="hljs-string">&#x27;username&#x27;</span>], password=cd[<span class="hljs-string">&#x27;password&#x27;</span>])<br>            <span class="hljs-keyword">if</span> user:<span class="hljs-type"></span><br><span class="hljs-type">                login</span>(request, user)<br>                <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;Wellcom You. You have logined the website.&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<span class="hljs-type"></span><br><span class="hljs-type">                return HttpResponse</span>(<span class="hljs-string">&#x27;Sorry, Your username or password is not right.&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<span class="hljs-type"></span><br><span class="hljs-type">            return HttpResponse</span>(<span class="hljs-string">&#x27;Invalid login.&#x27;</span>)<br><br>def register(request):<span class="hljs-type"></span><br><span class="hljs-type">    if request</span>.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<span class="hljs-type"></span><br><span class="hljs-type">        user_form </span>= RegistrationForm()<br>        userprofile_form = UserProfileForm() 		<span class="hljs-meta">#new</span><br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;account/register.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;form&#x27;</span>:<span class="hljs-type">user_form</span>,<br>        <span class="hljs-string">&#x27;profile&#x27;</span>:<span class="hljs-type">userprofile_form</span>&#125;)		<span class="hljs-meta"># new</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<span class="hljs-type"></span><br><span class="hljs-type">        user_form </span>= RegistrationForm(request.POST)<br>        userprofile_form = UserProfileForm(request.POST)		<span class="hljs-meta">#new</span><br>        <span class="hljs-keyword">if</span> user_form.is_valid() * userprofile_form.is_valid():<span class="hljs-type"></span><br><span class="hljs-type">            new_user </span>= user_form.save(commit=False)<br>            <span class="hljs-keyword">new</span><span class="hljs-type">_user</span>.set_password(user_form.cleaned_data[<span class="hljs-string">&#x27;password&#x27;</span>])<br>            <span class="hljs-keyword">new</span><span class="hljs-type">_user</span>.save()<br>            <span class="hljs-meta">#new</span><br>            <span class="hljs-keyword">new</span><span class="hljs-type">_profile</span> = userprofile_form.save(commit=False)<br>            <span class="hljs-keyword">new</span><span class="hljs-type">_profile</span>.user = <span class="hljs-keyword">new</span><span class="hljs-type">_user</span><br><span class="hljs-type"></span>            <span class="hljs-keyword">new</span><span class="hljs-type">_profile</span>.save()<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;恭喜你,注册成功了~~~&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<span class="hljs-type"></span><br><span class="hljs-type">            return HttpResponse</span>(<span class="hljs-string">&#x27;注册失败&#x27;</span>)<br><br></code></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-应用与路由</title>
    <url>/2021/02/15/Django-%E5%BA%94%E7%94%A8%E4%B8%8E%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h3 id="1-项目与应用"><a href="#1-项目与应用" class="headerlink" title="1.项目与应用"></a>1.项目与应用</h3><h5 id="1-1创建应用"><a href="#1-1创建应用" class="headerlink" title="1.1创建应用"></a>1.1创建应用</h5><p>​     django-admin 可以查看Django命令</p>
<p>​    一个项目可以对应多个应用</p>
<p>​    在项目根目录(myproject)下创建应用:blog</p>
<p>​    执行以下命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">python manage.py startapp blog<br></code></pre></td></tr></table></figure>
<p>​    用 编辑器(vscode,pycharm) 打开myproject文件夹</p>
<p>​    在blog目录下会有以下已经自动生成的py文件,这就体现出了Django框    架的意义了</p>
<h5 id="1-2-文件说明"><a href="#1-2-文件说明" class="headerlink" title="1.2 文件说明"></a>1.2 文件说明</h5><p>settings.py    主要是对项目做一些初始化的设置,针对整个项目进行有关参数的配置,在settings文件的INSTALLED_APPS里面末尾添加应用名字  ‘blog’  不要忘记 逗号.</p>
<p>​                        在77行有一个DATABASE,这个是设置数据库的,我们这边使用默认设置.</p>
<p>​                        26行的DEBUG 在开发模式下需要改成 DEBUG=True,在生产环境下DEBUG=False</p>
<p>​                        107 行    LANGUAGE_CODE = ‘zh-hans’   显示中文</p>
<p>​                                        TIME_ZONE = ‘Asia/Shanghai’   设置时区(东八区)</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml">INSTALLED_APPS = [</span><br><span class="xml">    &#x27;django.contrib.admin&#x27;,</span><br><span class="xml">    &#x27;django.contrib.auth&#x27;,</span><br><span class="xml">    &#x27;django.contrib.contenttypes&#x27;,</span><br><span class="xml">    &#x27;django.contrib.sessions&#x27;,</span><br><span class="xml">    &#x27;django.contrib.messages&#x27;,</span><br><span class="xml">    &#x27;django.contrib.staticfiles&#x27;,</span><br><span class="xml">    &#x27;blog&#x27;,     #在这儿添加,这个在settings.py文件的33行</span><br><span class="xml">]</span><br></code></pre></td></tr></table></figure>
<p>urls.py    这个文件是用来配置URL的,将里面末尾代码修改成以下这样</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml">from django.contrib import admin</span><br><span class="xml">from django.urls import path,include</span><br><br><span class="xml">urlpatterns = [</span><br><span class="xml">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="xml">    path(&#x27;blog/&#x27;,include(&#x27;blog.urls&#x27;)),</span><br><span class="xml">]</span><br></code></pre></td></tr></table></figure>
<p>admin.py    可以自定义Django管理工具</p>
<p>app.py       对应用的一些配置</p>
<p>models.py    数据模型文件</p>
<p>tests.py       测试文档</p>
<p>views.py    用于保存响应各种请求的函数或者类</p>
<h3 id="2-编辑应用"><a href="#2-编辑应用" class="headerlink" title="2.编辑应用"></a>2.编辑应用</h3><p>在views.py 文件中简单写一个视图函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">home</span>(<span class="hljs-params">request</span>):</span>   <span class="hljs-comment"># request 必不可少</span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br></code></pre></td></tr></table></figure>
<p>在urls.py文件中配置一下路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>,views.home),<br>]<br></code></pre></td></tr></table></figure>
<p>保存上面所有修改的文件</p>
<h3 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h3><p>​    执行 </p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Python manage runserver</span><br></code></pre></td></tr></table></figure>
<p>打开返回的网址 <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> </p>
<p>需要在网址后面加上 blog    <a href="http://127.0.0.1:8000/blog">http://127.0.0.1:8000/blog</a>   </p>
<p>这样就成功的创建了一个项目</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>模板语法</title>
    <url>/2021/02/18/Django-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h3><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">var_name</span>&#125;&#125;</span><span class="xml">       变量样式</span><br></code></pre></td></tr></table></figure>
<p>当模板引擎遇到一个变量,他将从context中获取这个变量的值,然后用值替换他本身</p>
<h3 id="2-标签"><a href="#2-标签" class="headerlink" title="2.标签"></a>2.标签</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">&#123;% <span class="hljs-keyword">tag</span> <span class="hljs-title">%&#125;        标签样式</span><br></code></pre></td></tr></table></figure>


<p>django自带了很多内置标签</p>
<h5 id="for循环标签"><a href="#for循环标签" class="headerlink" title="for循环标签"></a>for循环标签</h5><figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> blog <span class="hljs-keyword">in</span> blogs %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; blog.title &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="xml">  </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
<h5 id="条件标签"><a href="#条件标签" class="headerlink" title="条件标签"></a>条件标签</h5><figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> blog %&#125;</span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> blog <span class="hljs-keyword">in</span> blogs %&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; blog.title &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br><span class="xml">	<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">else</span></span> %&#125;</span><br><span class="xml">	<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这儿什么都没有<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br></code></pre></td></tr></table></figure>
<h3 id="3-模板继承"><a href="#3-模板继承" class="headerlink" title="3.模板继承"></a>3.模板继承</h3><p>建立一个包含网站所有公共元素的基本骨架,在里面可以定义一些区块,模板的字模板可以重写这些区块.</p>
<h6 id="base-html-创建基本骨架模板"><a href="#base-html-创建基本骨架模板" class="headerlink" title="base.html      创建基本骨架模板"></a>base.html      创建基本骨架模板</h6><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>blog titles<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   &#123;% block content %&#125;<br>    <br>   &#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>


<p>muban1.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">&#123;% extends &quot;base.html&quot; %&#125;<br>&#123;% block content %&#125;<br>	&#123;% for blog in blogs %&#125;<br>    	<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;blog.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <br>    &#123;% endfor %&#125;<br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure>


<p>这样base.html中的     地方就会被模板1取代.</p>
<h6 id="优化blog应用"><a href="#优化blog应用" class="headerlink" title="优化blog应用"></a>优化blog应用</h6><p>在templates文件下创建base.html</p>
<p>在settings.py末尾加入以下代码,并在myproject文件下创建static/images  ,该文件夹放入需要的图片</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">STATICFILES_DIRS</span> = [<br>    os.path.join(BASE_DIR,<span class="hljs-string">&quot;static&quot;</span>)<br>]<br></code></pre></td></tr></table></figure>
<p>引入图片</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">load</span></span> static %&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">static</span></span> &#x27;./images/图片名.png&#x27; %&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure>


<p>响应详细内容</p>
<p>​    添上超链接</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> blog <span class="hljs-keyword">in</span> blogs %&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; blog.id &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; blog.title &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>	#这个地方加上a标签</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="xml">  </span><br></code></pre></td></tr></table></figure>
<p>​    响应内容请求的视图函数</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">blog_article</span><span class="hljs-params">(request,article_id)</span></span><span class="hljs-symbol">:</span><br>    article = BlogArticles.objects.get(id=article_id)<br>    pub = article.publish<br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;blog/content.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;article&#x27;</span><span class="hljs-symbol">:article</span>,<span class="hljs-string">&#x27;publish&#x27;</span><span class="hljs-symbol">:pub</span>&#125;)<br></code></pre></td></tr></table></figure>
<p>​    编写前端模板页面</p>
<p>​    对应的URL配置</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">urlpatterns</span> = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.blog_title),<br>    path(<span class="hljs-string">&#x27;&lt;int:article_id&gt;&#x27;</span>, views.blog_article)     <span class="hljs-comment">#写上这一行</span><br>]<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-表单</title>
    <url>/2021/02/21/Django-%E8%A1%A8%E5%8D%95/</url>
    <content><![CDATA[<p>表单:用于收集不同类型的用户输入</p>
<p>​    是一个包含表单元素的区域。<br>​    表单元素是允许用户在表单中输入内容，比如:文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等。<br>​    表单使用表单标签( <form>)来设置</p>
<p>目标:实现登录</p>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs Django"><span class="xml"># 配置setting.py</span><br><span class="xml">INSTALLED_APPS=[</span><br><span class="xml">	&#x27;account&#x27;,          #在括号里加上account, 其他不修改</span><br><span class="xml">]</span><br><br><span class="xml">#配置根目录下的urls.py</span><br><span class="xml">urlpatterns = [ </span><br><span class="xml">	path(&#x27;account/&#x27;,include(&#x27;account.urls&#x27;,namespace=&#x27;account&#x27;))	#添加这一行</span><br><span class="xml">]</span><br><br><span class="xml">#在account目录下创建urls.py文件并写入以下代码</span><br><br><span class="xml">from django.urls import path</span><br><span class="xml">from . import views</span><br><br><span class="xml">app_name = &#x27;account&#x27;</span><br><br><span class="xml">urlpatterns = [</span><br><span class="xml">    path(&#x27;login/&#x27;, views.user_login,name=&#x27;user_login&#x27;),</span><br><span class="xml">]</span><br><br><span class="xml"># account目录下创建forms.py并写入以下代码</span><br><br><span class="xml">from django import forms</span><br><br><span class="xml">class LoginForm(forms.Form):</span><br><span class="xml">    username = forms.CharField()</span><br><span class="xml">    password = forms.CharField(widget=forms.PasswordInput)</span><br><br></code></pre></td></tr></table></figure>


<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">代码意思<br>login_form = LoginForm	#创建实例<br>login_form		#待填写的表单<br>login_form.as_p()		#以p标签包裹的表单<br>login_form.as_table()		#以表格形式的表单<br>login_form.is_bound			#返回<span class="hljs-literal">False</span>则表单为空,返回<span class="hljs-literal">True</span>则不为空<br><br>user1 =  &#123;<span class="hljs-string">&#x27;username&#x27;</span>:<span class="hljs-string">&#x27;admin&#x27;</span> ,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;12456&#x27;</span>&#125;<br>user1_form = LoginForm(user1)<br>user1_form.is_bound		<br>user1_form.is_valid()		#提供的数据是否完整,完整返回<span class="hljs-literal">True</span><br>user1_form.cleaned_date		#获取表单的值<br><br>user.is_authenticated		#用户已登录返回true,没登录返回false<br><br><br>函数意思<br>authenticate		#检查用户是不是我们网站的用户,以及用户名是否正确<br><br></code></pre></td></tr></table></figure>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml">点击登录就会跳转到登录页面</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">url</span></span> &#x27;account:user_login&#x27; %&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-GET与POST</title>
    <url>/2021/03/12/Flask-GET%E4%B8%8EPOST/</url>
    <content><![CDATA[<h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>get方式提交数据是通过URL地址传递数据</p>
<p>例: http:127.0.0.1:5000/?username=xiaobo&amp;password=123456</p>
<p>在服务器端通过request对象接收数据</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#获取username , password</span><br>request.args.<span class="hljs-builtin-name">get</span>(<span class="hljs-string">&#x27;username&#x27;</span>)<br>request.args.<span class="hljs-builtin-name">get</span>(<span class="hljs-string">&#x27;password&#x27;</span>)<br><br><span class="hljs-comment">#本次提交数据的方式</span><br>request.method<br></code></pre></td></tr></table></figure>


<h6 id="网址美化"><a href="#网址美化" class="headerlink" title="网址美化"></a>网址美化</h6><p>1.通过问号传递的网址最方便,但是不美观</p>
<p>​    例  :    http:127.0.0.1:5000/?username=xiaobo&amp;password=123456</p>
<p>2.传递参数像path路径一样的网址,更美观,爬虫更喜欢</p>
<p>​    http:127.0.0.1:5000/xiaobo/123456/</p>
<p>​    方法 : 制定相关路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.rote(<span class="hljs-params"><span class="hljs-string">&quot;/&lt;username&gt;/&lt;password&gt;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>(<span class="hljs-params">username,password</span>):</span><br>    print(username,password)<br></code></pre></td></tr></table></figure>


<h4 id="POST-安全"><a href="#POST-安全" class="headerlink" title="POST(安全)"></a>POST(安全)</h4><p>通过 form 表单提交数据</p>
<p>form表单属性</p>
<p>​    action:  数据提交到哪个网址</p>
<p>​    method:  数据提交方式  (get和post)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>


<p>post方式提交数据需要在路由配置中添加设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/login&quot;</span>,methods=[<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;post&quot;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>():</span><br>	request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    request.values[<span class="hljs-string">&#x27;usename&#x27;</span>]    <span class="hljs-comment">#既可接受get也可接收post</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Django-视图函数和模板</title>
    <url>/2021/02/17/Django-%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h3 id="本章目标"><a href="#本章目标" class="headerlink" title="本章目标"></a>本章目标</h3><p>​    1.编写视图函数 </p>
<p>​    2.编写前端模板 </p>
<p>​    3.设置应用内的路由</p>
<h3 id="1-视图函数"><a href="#1-视图函数" class="headerlink" title="1.视图函数"></a>1.视图函数</h3><p>​        概念:当用户向服务器发起一个请求时,接收用户请求的应用程序,并根据请求响应,返回一些信息.</p>
<p>​        分类:—基于函数的视图 —基于类的视图</p>
<p>​        放置位置: views.py</p>
<p>编写基于函数的视图</p>
<p>在views.py文件下写入以下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> BlogArticles<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">blog_title</span>(<span class="hljs-params">request</span>):</span>	<span class="hljs-comment"># request 是 用户请求所有信息的对象</span><br>    blogs = BlogArticles.objects.<span class="hljs-built_in">all</span>()   <span class="hljs-comment">#读出BlogArticles模型类中的所有信息</span><br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;blog/titles.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;blogs&#x27;</span>:blogs&#125;)<br></code></pre></td></tr></table></figure>
<p><img src="/img/QQ%E6%88%AA%E5%9B%BE20210218111255.png"></p>
<p><img src="/img/render-20210218112456.png"></p>
<h3 id="2-模板"><a href="#2-模板" class="headerlink" title="2.模板"></a>2.模板</h3><p>模板规定:使用默认规定</p>
<p>默认规定位置:setting.py文件中,55行左右的TEMPLATES里</p>
<p>在blog文件夹下创建一个templates文件夹,在templates文件夹下创建blog文件夹并放入titles.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>blog titles<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            &#123;% for blog in blogs %&#125;    #在网页中循环出blog标题<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;blog.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <br>            &#123;% endfor %&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>在blog应用下的urls中写入路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.blog_title),<br>]<br></code></pre></td></tr></table></figure>
<p>启动应用  python manage.py runserver</p>
<p>打开返回的网址,在网址后面加上blog就行了(127.0.0.1:8000/blog/) </p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-一对多关系</title>
    <url>/2021/03/24/Flask-%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h4 id="分类管理"><a href="#分类管理" class="headerlink" title="分类管理"></a>分类管理</h4><ol>
<li>创建分类模型（M）</li>
<li>创建分类模板（V）</li>
<li>创建分类视图（C）</li>
</ol>
<h6 id="分类模型"><a href="#分类模型" class="headerlink" title="分类模型"></a>分类模型</h6><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span>(<span class="hljs-params">db.Model</span>):</span><br>    cate_id = db.Column(db.Integer, primary_key=<span class="hljs-literal">True</span>)<br>    cate_name = db.Column(db.String, unique=<span class="hljs-literal">True</span>)             <span class="hljs-comment">#unique=True 表示此字段不能重复</span><br>    cate_order = db.Column(db.Integer, default=<span class="hljs-number">0</span>)             <span class="hljs-comment">#排序</span><br></code></pre></td></tr></table></figure>
<h6 id="分类模板"><a href="#分类模板" class="headerlink" title="分类模板"></a>分类模板</h6><p>添加增删改查的模板</p>
<h6 id="分类视图"><a href="#分类视图" class="headerlink" title="分类视图"></a>分类视图</h6><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 分类视图部分</span><br><span class="hljs-comment"># 添加分类</span><br><span class="hljs-meta">@article_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/add_cate&quot;</span>, methods=[<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addCate</span>():</span><br>    message = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        cate_name = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        cate_order    = request.form[<span class="hljs-string">&#x27;order&#x27;</span>]<br>        category = Category(<br>                    cate_name=cate_name,<br>                    cate_order=cate_order,<br>         )<br>        <span class="hljs-keyword">try</span>:<br>            db.session.add(category)<br>            db.session.commit()<br>            message = cate_name+<span class="hljs-string">&quot;添加成功&quot;</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            message = <span class="hljs-string">&quot;发生了错误:&quot;</span> + <span class="hljs-built_in">str</span>(e)<br>            <span class="hljs-comment"># 如果插入失败，进行回滚操作,就是撤销刚刚对数据库的操作</span><br>            db.session.rollback()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;category/add.html&quot;</span>, message=message)<br><br><br><span class="hljs-comment"># 获得分类列表</span><br><span class="hljs-meta">@article_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/cate_list&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cateList</span>():</span><br>    cates = Category.query.order_by(Category.cate_order.desc()).<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;category/list.html&quot;</span>, cates=cates )<br><br><br><span class="hljs-comment"># 删除分类</span><br><span class="hljs-meta">@article_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/cate_delete/&lt;int:cate_id&gt;&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deleteCate</span>(<span class="hljs-params">cate_id</span>):</span><br>    cate = Category.query.get(cate_id)<br>    db.session.delete(cate)<br>    db.session.commit()<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;.cateList&quot;</span>))<br><br><br><span class="hljs-comment"># 分类修改</span><br><span class="hljs-meta">@article_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/cate_edit/&lt;int:cate_id&gt;&quot;</span>, methods=[<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">editCate</span>(<span class="hljs-params">cate_id</span>):</span><br>    category = Category.query.get(cate_id)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        category.cate_name = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        category.cate_order = request.form[<span class="hljs-string">&#x27;order&#x27;</span>]<br>        db.session.commit()<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;.cateList&quot;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;category/edit.html&quot;</span>, category=category)<br><br></code></pre></td></tr></table></figure>


<p>用上下文管理器使每个页面都执行下面这个函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.context_processor</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getCatelist</span>():</span><br>    cates = Category.query.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span>&#123;<span class="hljs-string">&quot;cates&quot;</span>: cates&#125;<br></code></pre></td></tr></table></figure>


<h4 id="数据表关系"><a href="#数据表关系" class="headerlink" title="数据表关系"></a>数据表关系</h4><h6 id="模型关系"><a href="#模型关系" class="headerlink" title="模型关系"></a>模型关系</h6><p>我们已经建立了多个模型：用户模型，文章模型，分类模型。</p>
<p>我们该如何给他们建立起联系呢</p>
<p>联系：每个文章都有一个作者，每个文章都属于一个分类</p>
<h6 id="数据表的关系"><a href="#数据表的关系" class="headerlink" title="数据表的关系"></a>数据表的关系</h6><ul>
<li><p>主表：自己的主键或者唯一键是另一个表的外键</p>
</li>
<li><p>从表：自己的某一个字段值是另一个表的主键或者唯一键</p>
</li>
<li><p>外键：必须对应关联表中的主键或者具有唯一值得字段</p>
</li>
<li><p>关联关系</p>
<p>一对多关系：一个作者可以对应多条文章</p>
<p>多对一关系：多个文章属于一个作者</p>
</li>
</ul>
<h6 id="模型关系创建"><a href="#模型关系创建" class="headerlink" title="模型关系创建"></a>模型关系创建</h6><p>在从表定义外键： db.Foreignkey(“主表.主键名”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#例</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Article</span>(<span class="hljs-params">db.Model</span>):</span><br>    ......<br>    cate_id = db.Column(db.Integer,db.ForeignKey(<span class="hljs-string">&#x27;Category.cate_id&#x27;</span>))<br></code></pre></td></tr></table></figure>
<p>在主表中定义关系：db.relationship(“从表模型名”)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#例</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span>(<span class="hljs-params">db.Model</span>):</span><br>    ......<br>    articles = db.relationship(<span class="hljs-string">&quot;Article&quot;</span>)<br></code></pre></td></tr></table></figure>
<p>两个表关联后记得更新数据表</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span>. 创建迁移数据：flask <span class="hljs-built_in">db</span> migrate -m <span class="hljs-string">&quot;更新说明&quot;</span><br><span class="hljs-number">2</span>. 更新数据库：flask <span class="hljs-built_in">db</span> upgrade <br></code></pre></td></tr></table></figure>
<p>由于创建关系是，修改了字段，sqlite修改字段支持不在友好，需要修改一下app.py中的migrate对象。</p>
<p>在MySQL中就没有这个问题，不需要修改。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#修改migrate对象</span><br><span class="hljs-attr">migrate</span> = Migrate(app,db,render_as_batch=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure>
<p>级联删除  还没有弄清楚</p>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-模板语法</title>
    <url>/2021/03/09/Flask-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>MVC模式</p>
<p>M -model     数据模型</p>
<p>V -view    视图模板</p>
<p>C  -控制器     业务逻辑控制既视图函数</p>
<p>变量标记</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;  &#125;&#125;</span><br><span class="xml">变量输出以</span><span class="hljs-template-variable">&#123;&#123; &#125;&#125;</span><span class="xml">包裹</span><br><span class="xml">变量  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">变量名</span> &#125;&#125;</span><span class="xml">  比如</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">myname</span> &#125;&#125;</span><br><span class="xml">对象  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">obj.属性</span> &#125;&#125;</span><br><span class="xml">字典  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">dict</span>[&#x27;key&#x27;] &#125;&#125;</span><br><span class="xml">列表  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">list</span>[i] &#125;&#125;</span><br><span class="xml">函数  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">func</span>() &#125;&#125;</span><br></code></pre></td></tr></table></figure>


<p>语句执行</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span>  <span class="hljs-meta">%</span>&#125;<br></code></pre></td></tr></table></figure>


<p>注释标签</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">&#123;#  #&#125;<br></code></pre></td></tr></table></figure>


<p>条件语句</p>
<p>根据条件选择显示不同的html部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">if</span> condition %&#125;<br>	html<br>&#123;% <span class="hljs-keyword">elif</span> condition %&#125;<br>	html<br>&#123;% <span class="hljs-keyword">else</span> %&#125;<br>	html<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure>


<p>for循环语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items %&#125;<br>	html &#123;&#123; item &#125;&#125; html<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure>


<p>模板继承</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">#父模板 base.html<br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>       <br>&#123;% block nav %&#125;<br>html<br>&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br>&#123;% endblock %&#125;<br><br>&#123;% block footer %&#125;<br>html<br>&#123;% endfooter %&#125;<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="xml">#子模板</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">extends</span></span> &quot;base.html&quot; %&#125;</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content %&#125;</span><br><span class="xml">页面内容</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br></code></pre></td></tr></table></figure>


<p>模板全局变量</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#上下文处理函数</span><br><br><span class="hljs-variable">@app</span>.context_processor<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">account</span><span class="hljs-params">()</span></span><span class="hljs-symbol">:</span><br>	username=<span class="hljs-string">&quot;小博&quot;</span><br>	<span class="hljs-keyword">return</span>&#123;<span class="hljs-string">&quot;username&quot;</span><span class="hljs-symbol">:username</span>&#125;<br><br><span class="hljs-comment">#每个视图函数执行的时候,会自动执行该函数,接收该变量并渲染模板</span><br><br><br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-数据库与ORM</title>
    <url>/2021/03/13/Flask-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8EORM/</url>
    <content><![CDATA[<h4 id="数据库入门-sqlite"><a href="#数据库入门-sqlite" class="headerlink" title="数据库入门(sqlite)"></a>数据库入门(sqlite)</h4><h6 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h6><p>​    1.关系型数据库–以文件方式永久存储到磁盘</p>
<p>​    2.非关系型数据库–存储在内存,访问速度快,通常用来做队列,缓存类服务</p>
<h6 id="安装插件sqlalchemy"><a href="#安装插件sqlalchemy" class="headerlink" title="安装插件sqlalchemy"></a>安装插件sqlalchemy</h6><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">pipenv <span class="hljs-keyword">install</span> flask-sqlalchemy<br></code></pre></td></tr></table></figure>
<p>sqlalchemy资料查询 : <a href="https://pypi.org/project/Flask-SQLAlchemy/">https://pypi.org/project/Flask-SQLAlchemy/</a></p>
<h6 id="创建数据库对象"><a href="#创建数据库对象" class="headerlink" title="创建数据库对象"></a>创建数据库对象</h6><figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">#导入模块<br><span class="hljs-keyword">from</span> flask_sqlalchemy <span class="hljs-keyword">import</span> SQLAlchemy<br><br>app = Flask(__name__)<br><br>#配置数据库<br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="hljs-literal">True</span><br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_DATABASE_URL&#x27;</span>]=<span class="hljs-string">&quot;sqlite:///my.db&quot;</span><br>db = SQLAlchemy(app)<br></code></pre></td></tr></table></figure>


<h6 id="SQLite数据库管理软件"><a href="#SQLite数据库管理软件" class="headerlink" title="SQLite数据库管理软件"></a>SQLite数据库管理软件</h6><p>为了方便观察创建数据表的过程,可以安装sqlite管理模块</p>
<p>安装: pip install sqlite-web</p>
<p>这是一款通过web界面的方式管理数据库</p>
<p>使用: sqlite_web SQLite 数据库文件路径,就可以管理数据库</p>
<h6 id="定义数据表模型"><a href="#定义数据表模型" class="headerlink" title="定义数据表模型"></a>定义数据表模型</h6><figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">User</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Model</span>):</span><br><span class="hljs-class">    id = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Integer</span>, <span class="hljs-title">primary_key</span>=<span class="hljs-type">True</span>)</span><br><span class="hljs-class">    username = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    password = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    realname = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    sex = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Integer</span>)</span><br><span class="hljs-class">    mylike = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    city = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    intro = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br></code></pre></td></tr></table></figure>
<p>db.Column(字段类型,可选参数)</p>
<p>​        字段类型 : 整数型:Integer </p>
<p>​        字符串型 : String </p>
<p>​        文本型 : Text </p>
<p>​        期 : DateTime </p>
<p>​        primary_key : 是否为主键</p>
<h6 id="进入交互式环境创建数据表"><a href="#进入交互式环境创建数据表" class="headerlink" title="进入交互式环境创建数据表"></a>进入交互式环境创建数据表</h6><p>创建完模型后,只是创建了python对象,</p>
<p>但是并没有创建数据库,需要通过db.create_all()创建数据表</p>
<figure class="highlight capnproto"><table><tr><td class="code"><pre><code class="hljs capnproto">flask shell			<span class="hljs-comment">#进如交互式环境</span><br><span class="hljs-keyword">from</span> app <span class="hljs-keyword">import</span> db	<span class="hljs-comment">#引入db对象</span><br>db.create_all()		<span class="hljs-comment">#创建数据表</span><br></code></pre></td></tr></table></figure>
<figure class="highlight vala"><table><tr><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#新建一个终端,输入下面代码,my.db是自己创建的数据库名</span><br><span class="hljs-meta">#打开给的网址</span><br><span class="hljs-meta">#运行可视化数据库管理软件</span><br><br>sqlite_web my.db<br></code></pre></td></tr></table></figure>


<h6 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h6><p>通过是实例化对象创建模型</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#实例对象</span><br>user1 = User(<span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;王麻子&#x27;</span>, <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-attribute">realname</span>=<span class="hljs-string">&#x27;真.王麻子&#x27;</span>)<br>user2 = User(<span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;张二狗&#x27;</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27;12345&#x27;</span>,realname=&#x27;真.张二狗&#x27;)<br><br><span class="hljs-comment">#提交到数据库</span><br><span class="hljs-comment">#db.session.add 	添加到数据库  </span><br><span class="hljs-comment">#db.session.commit()	将添加的数据保存</span><br>db.session.<span class="hljs-builtin-name">add</span>(user1)<br>db.session.<span class="hljs-builtin-name">add</span>(user2)<br>db.session.commit()<br></code></pre></td></tr></table></figure>


<p>例</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> flask import Flask,render_template,request<br><span class="hljs-keyword">from</span> flask_sqlalchemy import SQLAlchemy<br><br>@app.route(<span class="hljs-string">&quot;/reg&quot;</span>,methods=[<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>])<br>def register():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        realname = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br>        sex      = request.form[<span class="hljs-string">&#x27;sex&#x27;</span>]<br>        mylike   = <span class="hljs-string">&#x27; &#x27;</span>.join(request.form.getlist(<span class="hljs-string">&#x27;like&#x27;</span>))<br>        city     = request.form[<span class="hljs-string">&#x27;city&#x27;</span>]<br>        intro    = request.form[<span class="hljs-string">&#x27;intro&#x27;</span>]<br>       <span class="hljs-built_in"> user </span>= User(<span class="hljs-attribute">realname</span>=realname,<br>                    <span class="hljs-attribute">username</span>=username,<br>                    <span class="hljs-attribute">password</span>=password,<br>                    <span class="hljs-attribute">sex</span>=sex,<br>                    <span class="hljs-attribute">mylike</span>=mylike,<br>                    <span class="hljs-attribute">city</span>=city,<br>                    <span class="hljs-attribute">intro</span>=intro<br>                    )<br>        db.session.<span class="hljs-builtin-name">add</span>(user)<br>        db.session.commit()<br>        <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;用户创建成功&#x27;</span>)<br>    return render_template(<span class="hljs-string">&quot;register.html&quot;</span>)<br></code></pre></td></tr></table></figure>


<h4 id="增删改查-CURD"><a href="#增删改查-CURD" class="headerlink" title="增删改查(CURD)"></a>增删改查(CURD)</h4><p>​        1.用户列表</p>
<p>​        2.用户信息删除与修改</p>
<p>​        3.用户条件查询</p>
<p>​        4.页面跳转</p>
<h6 id="批量创建用户"><a href="#批量创建用户" class="headerlink" title="批量创建用户"></a>批量创建用户</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">def createBatchUsers():<br>    surname = list(&quot;爱的机会哈给大家哈市哈卡交安设施卡活动卡萨号打卡机年卡时间按当年无活动进行核查自己吃那么芜湖擦我能打梦三救护车&quot;)<br>    citys   = [<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-string">&#x27;福建&#x27;</span>,<span class="hljs-string">&#x27;重庆&#x27;</span>,<span class="hljs-string">&#x27;山西&#x27;</span>,<span class="hljs-string">&#x27;成都&#x27;</span>]<br>    mylikes  = [<span class="hljs-string">&#x27;睡觉&#x27;</span>, <span class="hljs-string">&#x27;跳绳&#x27;</span>, <span class="hljs-string">&#x27;跑步&#x27;</span>, <span class="hljs-string">&#x27;打篮球&#x27;</span>, <span class="hljs-string">&#x27;跳芭蕾&#x27;</span>, <span class="hljs-string">&#x27;乒乓球&#x27;</span>]<br>    <span class="hljs-keyword">import</span> random<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>        random.shuffle(surname)<br>        intro    = <span class="hljs-string">&#x27;该用户什么都没有留下&#x27;</span><br>        <span class="hljs-keyword">password</span> = <span class="hljs-string">&#x27;88888888&#x27;</span><br>        username = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(surname[:<span class="hljs-number">6</span>])<br>        sex      = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>        realname = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(surname[:<span class="hljs-number">3</span>])<br>        city     = citys[random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)]<br>        mylike   = <span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-keyword">join</span>(mylikes[random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)])<br>        <span class="hljs-keyword">user</span> = <span class="hljs-keyword">User</span>(username=username,<br>                    realname=realname,<br>                    sex     =sex,<br>                    city    =city,<br>                    mylike  =mylike,<br>                    <span class="hljs-keyword">password</span>=<span class="hljs-keyword">password</span>,<br>                    intro   =intro<br>                    )<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">user</span>)<br>    db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br>def createBatchUsers():<br>    surname = list(&quot;爱的机会哈给大家哈市哈卡交安设施卡活动卡萨号打卡机年卡时间按当年无活动进行核查自己吃那么芜湖擦我能打梦三救护车&quot;)<br>    citys   = [<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-string">&#x27;福建&#x27;</span>,<span class="hljs-string">&#x27;重庆&#x27;</span>,<span class="hljs-string">&#x27;山西&#x27;</span>,<span class="hljs-string">&#x27;成都&#x27;</span>]<br>    mylikes  = [<span class="hljs-string">&#x27;睡觉&#x27;</span>, <span class="hljs-string">&#x27;跳绳&#x27;</span>, <span class="hljs-string">&#x27;跑步&#x27;</span>, <span class="hljs-string">&#x27;打篮球&#x27;</span>, <span class="hljs-string">&#x27;跳芭蕾&#x27;</span>, <span class="hljs-string">&#x27;乒乓球&#x27;</span>]<br>    <span class="hljs-keyword">import</span> random<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>        random.shuffle(surname)<br>        intro    = <span class="hljs-string">&#x27;该用户什么都没有留下&#x27;</span><br>        <span class="hljs-keyword">password</span> = <span class="hljs-string">&#x27;88888888&#x27;</span><br>        username = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(surname[:<span class="hljs-number">6</span>])<br>        sex      = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>        realname = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(surname[:<span class="hljs-number">3</span>])<br>        city     = citys[random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)]<br>        mylike   = <span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-keyword">join</span>(mylikes[:random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)])<br>        <span class="hljs-keyword">user</span> = <span class="hljs-keyword">User</span>(username=username,<br>                    realname=realname,<br>                    sex     =sex,<br>                    city    =city,<br>                    mylike  =mylike,<br>                    <span class="hljs-keyword">password</span>=<span class="hljs-keyword">password</span>,<br>                    intro   =intro<br>                    )<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">user</span>)<br>    db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br></code></pre></td></tr></table></figure>
<figure class="highlight capnproto"><table><tr><td class="code"><pre><code class="hljs capnproto"><span class="hljs-comment">#进入flask shell 环境执行函数</span><br><br>flask shell<br><span class="hljs-keyword">from</span> app <span class="hljs-keyword">import</span> createBatchUsers<br>createBatchUsers()<br></code></pre></td></tr></table></figure>
<p>批量用户就创建好了</p>
<p>可以在数据库可视化网页里查看</p>
<p>#运行可视化数据库管理软件  sqlite_web my.db</p>
<h6 id="读取操作"><a href="#读取操作" class="headerlink" title="读取操作"></a>读取操作</h6><p>查询通过query对象方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">User.query.查询方法    #<span class="hljs-keyword">User</span> 是函数名<br><br>查询方法<br><span class="hljs-keyword">all</span>()  获得所有记录<br><span class="hljs-keyword">first</span>()  获得第一条记录，找不到返回<span class="hljs-keyword">None</span><br><span class="hljs-keyword">one</span>()  返回唯一一条记录，没有或者有多条则报错<br><span class="hljs-keyword">get</span>(id)  传入主键ID，返回相匹配的记录，没有返回<span class="hljs-keyword">None</span> <br><span class="hljs-built_in">count</span>()  返回查询结果总数<br>one_or_none  与<span class="hljs-keyword">one</span>（）一样，如果结果不唯一，返回<span class="hljs-keyword">None</span><br><br><br>模板与视图准备<br><br>模板：提供一个用户列表显示模板（用<span class="hljs-keyword">for</span>循环出所有记录）<br>路由：提供访问路径<br>视图函数：通过模型对象查询结果，并将结果赋予模板变量<br>	例：<br>	<span class="hljs-variable">@app</span>.route(&quot;/userlist&quot;, methods<span class="hljs-operator">=</span>[&quot;get&quot;] )<br>    def userlist():<br>        users <span class="hljs-operator">=</span> User.query.all()<br>        <span class="hljs-keyword">return</span> render_template(&quot;user/user_list.html&quot;, users<span class="hljs-operator">=</span>users)<br></code></pre></td></tr></table></figure>


<h6 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h6><p>删除记录通过db.session.delete(记录对象)删除</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">delete</span>(记录对象)		#删除操作<br><br>#单个删除<br>user1 = <span class="hljs-keyword">User</span>.query.<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>)	#查询ID为<span class="hljs-number">1</span>的记录<br>db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">delete</span>(user1)	#删除ID为<span class="hljs-number">1</span>的记录<br>db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()			#保存数据库<br><br>#批量删除<br>users = <span class="hljs-keyword">User</span>.query.<span class="hljs-keyword">all</span>()<br>[db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">delete</span>(<span class="hljs-keyword">user</span>) <span class="hljs-keyword">for</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">in</span> users]<br>db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br><br>模板与视图准备<br><br>模板：提供一个用户列表显示模板<br><br>路由：通常删除需要传递一个被删除对象的ID<br>	@app route(&quot;/delete_user/&lt;int:user_id&gt;&quot;)<br><br>视图函数：<br>	def deleteUser(user_id):<br>	pass<br>	<span class="hljs-keyword">return</span> redirect(url_for(&quot;userlist&quot;))		#这儿要引入flask里的 redirect(跳转函数)，url_for 模块<br>	<br>	例：<br>	@app.route(&quot;/user_delete/&lt;int:user_id&gt;&quot;)<br>    def deleteUser(user_id):<br>        <span class="hljs-keyword">user</span> = <span class="hljs-keyword">User</span>.query.<span class="hljs-keyword">get</span>(user_id)<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">delete</span>(<span class="hljs-keyword">user</span>)<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br>        <span class="hljs-keyword">return</span> redirect(url_for(&quot;userlist&quot;))	# 这一句要理解，如果用render_template返回模板，刷新页面会报错<br><br></code></pre></td></tr></table></figure>


<h6 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h6><p>通过模型类查询对象更新记录</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">比如：<br>user1 =db.query.<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>)<br>user1.<span class="hljs-keyword">password</span> = &quot;12345&quot;<br>db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br>就可以将记录中的<span class="hljs-keyword">password</span>字段修改<br><br>例：<br>@app.route(&quot;/useredit/&lt;int:user_id&gt;&quot;,methods = [&quot;get&quot;,&quot;post&quot;])<br>def editUser(user_id):<br>    <span class="hljs-keyword">user</span> = <span class="hljs-keyword">User</span>.query.<span class="hljs-keyword">get</span>(user_id)<br>    <span class="hljs-keyword">if</span> request.<span class="hljs-keyword">method</span> == &quot;POST&quot;:<br>        <span class="hljs-keyword">user</span>.username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        <span class="hljs-keyword">user</span>.realname = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        <span class="hljs-keyword">user</span>.sex      = request.form[<span class="hljs-string">&#x27;sex&#x27;</span>]<br>        <span class="hljs-keyword">user</span>.city     = request.form[<span class="hljs-string">&#x27;city&#x27;</span>]<br>        <span class="hljs-keyword">user</span>.mylike   = <span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-keyword">join</span>(request.form.getlist(<span class="hljs-string">&#x27;like&#x27;</span>))<br>        <span class="hljs-keyword">user</span>.intro    = request.form[<span class="hljs-string">&#x27;intro&#x27;</span>]<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;userlist&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(&quot;user/edit_user.html&quot;, <span class="hljs-keyword">user</span>=<span class="hljs-keyword">user</span>)<br></code></pre></td></tr></table></figure>


<h6 id="条件检索"><a href="#条件检索" class="headerlink" title="条件检索"></a>条件检索</h6><p>User.query.查询条件.查询方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">查询条件方法<br><span class="hljs-built_in">filter</span>()  		使用规则过滤<br>filter_by()		比<span class="hljs-built_in">filter</span>更方便使用<br>order_by()		结果排序<br>limit(limit)	只查询limit条<br>group_by()		查询分组<br>offset()		在原查询基础上偏移记录数，返回新的记录<br><br><span class="hljs-built_in">filter</span>() 方法的使用<br><span class="hljs-built_in">filter</span>(User.username==<span class="hljs-string">&#x27;小博&#x27;</span>)					查找User中username值为小博的用户<br><span class="hljs-built_in">filter</span>(User.age&gt;<span class="hljs-number">20</span>)								查找User中age值大于<span class="hljs-number">20</span>的用户<br><span class="hljs-built_in">filter</span>(User.city != <span class="hljs-string">&#x27;010&#x27;</span>)						查找city值不为010的用户<br><span class="hljs-built_in">filter</span>(User.city.in_[<span class="hljs-string">&#x27;010&#x27;</span>,<span class="hljs-string">&#x27;021&#x27;</span>])				查找city中 010 021 的用户<br><span class="hljs-built_in">filter</span>(~User.city.in_([<span class="hljs-string">&#x27;010&#x27;</span>,<span class="hljs-string">&#x27;021&#x27;</span>]))			查找city中不为 010 021 的用户<br><span class="hljs-built_in">filter</span>(User.mylike.like(<span class="hljs-string">&#x27;%钓鱼%&#x27;</span>))				查找mylike包含钓鱼的用户<br><span class="hljs-built_in">filter</span>(User.username==<span class="hljs-string">&quot;小博&quot;</span>,User.age&gt;<span class="hljs-number">20</span>)  		用户名为小博且 age 大于<span class="hljs-number">20</span>的用户<br><span class="hljs-built_in">filter</span>((条件<span class="hljs-number">1</span>)|(条件<span class="hljs-number">2</span>))								满足条件<span class="hljs-number">1</span>或者条件<span class="hljs-number">2</span>的用户<br><br>filter_by()  方法<br>filter_by(username=<span class="hljs-string">&quot;小博&quot;</span>)			查找username值为 小博 的用户<br>filter_by(username=<span class="hljs-string">&quot;小博&quot;</span>，sex=<span class="hljs-number">1</span>)		查找username值为 小博 且sex值为 <span class="hljs-number">1</span> 的用户<br><br><br>模板：<br>提供一个搜索表单<br>路由：<br>如果是post提交，一定要在路由中添加POST方法<br>视图：<br>如果接收到POST数据，就要检查用户提交的数据，生成检索条件<br><br>例：<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/userlist&quot;</span>, methods=[<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;post&quot;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">userlist</span>():</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        q = request.form[<span class="hljs-string">&#x27;q&#x27;</span>]<br>        <span class="hljs-comment">#精确查找</span><br>        <span class="hljs-comment"># condition = &#123;request.form[&#x27;field&#x27;]:q&#125;</span><br>        <span class="hljs-comment"># users = User.query.filter_by(**condition).all()</span><br>        <span class="hljs-comment">#模糊查找</span><br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;field&#x27;</span>] == <span class="hljs-string">&quot;realname&quot;</span>:<br>            condition = User.realname.like(<span class="hljs-string">&#x27;%%%s%%&#x27;</span> %q)<br>        <span class="hljs-keyword">else</span>:<br>            condition = User.username.like(<span class="hljs-string">&#x27;%%%s%%&#x27;</span> %q)<br>        print(q)<br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;order&#x27;</span>] == <span class="hljs-string">&quot;1&quot;</span>:<br>            order = User.<span class="hljs-built_in">id</span>.asc()   <span class="hljs-comment">#升序</span><br>        <span class="hljs-keyword">else</span>:<br>            order = User.<span class="hljs-built_in">id</span>.desc()  <span class="hljs-comment">#降序</span><br>        sex = User.sex == request.form[<span class="hljs-string">&#x27;sex&#x27;</span>]   <span class="hljs-comment">#性别筛选</span><br>        users = User.query.<span class="hljs-built_in">filter</span>(condition,sex).order_by(order).<span class="hljs-built_in">all</span>()      <span class="hljs-comment">#获取经过筛选的列表</span><br>    <span class="hljs-keyword">else</span>:<br>        users = User.query.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;user/user_list.html&quot;</span>, users=users)<br><br></code></pre></td></tr></table></figure>


<h6 id="分页显示"><a href="#分页显示" class="headerlink" title="分页显示"></a>分页显示</h6><p>当记录很多的时候，一页显示不完就需要分页显示</p>
<p>result = User.query.查询条件.paginate(pagelndex,pageSize)</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">result包含下列信息<br><br>items			<span class="hljs-meta">#当前记录查询</span><br>page			<span class="hljs-meta">#当前页数</span><br>per_page		<span class="hljs-meta">#每页显示多少条记录即pageSize</span><br>pages			<span class="hljs-meta">#总页数</span><br>total			<span class="hljs-meta">#记录总数量</span><br>iter_pages()	<span class="hljs-meta">#生成翻页页码</span><br>prev()			<span class="hljs-meta">#前一页对象</span><br><span class="hljs-keyword">next</span>()			<span class="hljs-meta">#后一页对象</span><br>next_num		<span class="hljs-meta">#下一页</span><br>prev_num		<span class="hljs-meta">#上一页</span><br>has_prev		<span class="hljs-meta">#是否存在上一页</span><br>has_next		<span class="hljs-meta">#是否存在下一页</span><br><br>例：<br>@app.route(<span class="hljs-string">&quot;/userlist&quot;</span>, methods=[<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;post&quot;</span>])<br>def userlist():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        q = request.form[<span class="hljs-string">&#x27;q&#x27;</span>]<br>        <span class="hljs-meta">#精确查找</span><br>        <span class="hljs-meta"># condition = &#123;request.form[&#x27;field&#x27;]:q&#125;</span><br>        <span class="hljs-meta"># users = User.query.filter_by(**condition).all()</span><br>        <span class="hljs-meta">#模糊查找</span><br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;field&#x27;</span>] == <span class="hljs-string">&quot;realname&quot;</span>:<br>            condition = User.realname.<span class="hljs-keyword">like</span>(<span class="hljs-string">&#x27;%%%s%%&#x27;</span> %q)<br>        <span class="hljs-keyword">else</span>:<br>            condition = User.username.<span class="hljs-keyword">like</span>(<span class="hljs-string">&#x27;%%%s%%&#x27;</span> %q)<br>        <span class="hljs-keyword">print</span>(q)<br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;order&#x27;</span>] == <span class="hljs-string">&quot;1&quot;</span>:<br>            <span class="hljs-keyword">order</span> = User.id.<span class="hljs-keyword">asc</span>()   <span class="hljs-meta">#升序</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">order</span> = User.id.<span class="hljs-keyword">desc</span>()  <span class="hljs-meta">#降序</span><br>        sex = User.sex == request.form[<span class="hljs-string">&#x27;sex&#x27;</span>]   <span class="hljs-meta">#性别筛选</span><br>        users = User.query.filter(condition,sex).order_by(<span class="hljs-keyword">order</span>).paginate(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)     <span class="hljs-meta">#获取经过筛选的列表</span><br>    <span class="hljs-keyword">else</span>:<br>        page = request.args.get(<span class="hljs-string">&#x27;page&#x27;</span>,<span class="hljs-number">1</span>)<br>        users = User.query.paginate(<span class="hljs-built_in">int</span>(page),<span class="hljs-number">10</span>)       <span class="hljs-meta">#paginate(页数，显示条数，是否显示错误信息)</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;user/user_list.html&quot;</span>,<br>                           users=users.items,<br>                           pages=users.pages,<br>                           total=users.total,<br>                           pageList=users.iter_pages(),         <span class="hljs-meta">#显示页码</span><br>                           prevpage=users.prev_num,             <span class="hljs-meta">#上一页</span><br>                           nextpage=users.next_num,             <span class="hljs-meta">#下一页</span><br>                           hasprev=users.has_prev,<br>                           hasnext=users.has_next<br>                           )<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-模板输出</title>
    <url>/2021/03/08/Flask-%E6%A8%A1%E6%9D%BF%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h4 id="目标-模板输出"><a href="#目标-模板输出" class="headerlink" title="目标:    模板输出"></a>目标:    模板输出</h4><ol>
<li><h6 id="创建templates目录"><a href="#创建templates目录" class="headerlink" title="创建templates目录"></a>创建templates目录</h6><p>在myflask文件下创建templates文件夹</p>
<p>templates文件夹用于存放HTML文件</p>
</li>
<li><h6 id="创建html文件模板"><a href="#创建html文件模板" class="headerlink" title="创建html文件模板"></a>创建html文件模板</h6><p>将写好的模板放到templates目录下</p>
</li>
<li><h6 id="网页上输出模板"><a href="#网页上输出模板" class="headerlink" title="网页上输出模板"></a>网页上输出模板</h6><p>编写app.py</p>
<p>​    引入模块 render_templates</p>
<p>​    编写路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,render_template<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)  <span class="hljs-comment">#index.html需要自己写好</span><br></code></pre></td></tr></table></figure></li>
<li><h6 id="加载静态文件"><a href="#加载静态文件" class="headerlink" title="加载静态文件"></a>加载静态文件</h6><p>创建static目录(flask目录下)</p>
<p>static目录下放入js css  img fonts 等文件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 通过static 可以引入css等</span><br>&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;static/css/bootstrap.css&quot;</span>/&gt;<br></code></pre></td></tr></table></figure>
<p>url_for 可以根据视图函数生成URL</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">视图函数</span>,默认值) &#125;&#125;</span><br><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">&quot;static&quot;</span>,<span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;资源路径&quot;</span>) &#125;&#125;</span><br><br><span class="xml">#例子</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">&quot;static&quot;</span>,<span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;css/bootstrap.css&quot;</span>) &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><br></code></pre></td></tr></table></figure>

<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="xml">#例子</span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">&quot;login&quot;</span>) &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">&quot;register&quot;</span>) &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask代码重构</title>
    <url>/2021/03/21/Flask%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84/</url>
    <content><![CDATA[<h4 id="本课目标"><a href="#本课目标" class="headerlink" title="本课目标"></a>本课目标</h4><p>​    重构代码</p>
<p>​    Blueprint类</p>
<p>​    增加发布文章功能</p>
<p>​    Flask-migrate扩展</p>
<h4 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h4><h6 id="文件分类："><a href="#文件分类：" class="headerlink" title="文件分类："></a>文件分类：</h6><p>​    扩展库–放置db对象一类的库对象</p>
<p>​    模型库–放置如User模型的代码</p>
<p>​    辅助库–放置开发辅助性工具</p>
<p>​    视图函数–放置视图函数定义</p>
<h6 id="扩展库文件："><a href="#扩展库文件：" class="headerlink" title="扩展库文件："></a>扩展库文件：</h6><p>​    创建libs.py文件（文件名可自定义）</p>
<p>​    在libs.py中创建db对象</p>
<p>​    导入SQLAlchemy模块   from flask_sqlalchemy import SQLAlchemy</p>
<p>​    实例化 db=SQLAlchemy()</p>
<p>​    当前实例化的时候，不用传入参数：app</p>
<p>​    可以在其他需要使用db对象的时候，从libs导入对象</p>
<p>​        举例：</p>
<p>​            在app.py中，导入db对象，对其进行初始化</p>
<p>​            init_app是SQLAlchemy扩展提供的一个接口方法</p>
<p>​            通过init_app可以在app初始化的时候。配置扩展的参数</p>
<p>​            通过init_app方法，将db对象绑定到app进行初始化，这样在APP中定义的数据库参数就可以被db接收</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">from libs import <span class="hljs-keyword">db</span><br><span class="hljs-keyword">db</span>.init_app(<span class="hljs-keyword">app</span>)<br></code></pre></td></tr></table></figure>


<h6 id="模型库"><a href="#模型库" class="headerlink" title="模型库"></a>模型库</h6><p>​    新增一个models.py文件，用来存放模型类代码。</p>
<p>​        创建models.py文件，并在其中创建User模型</p>
<p>​        模型文件需要导入libs中的db对象</p>
<h6 id="辅助库"><a href="#辅助库" class="headerlink" title="辅助库"></a>辅助库</h6><p>​    新增一个utils.py文件，专门用来存放工具类代码</p>
<p>​        创建utils.py文件</p>
<p>​        将批量创建用户函数迁移到该文件中</p>
<h6 id="视图函数库"><a href="#视图函数库" class="headerlink" title="视图函数库"></a>视图函数库</h6><p>​    创建view文件夹，并在下面创建article，users，admin等py文件</p>
<h6 id="Blueprint对象（蓝本对象）"><a href="#Blueprint对象（蓝本对象）" class="headerlink" title="Blueprint对象（蓝本对象）"></a>Blueprint对象（蓝本对象）</h6><p>路由定义是通过@app实例.route方法定义的</p>
<p>通过Blueprint对象，可以在app实例尚未创建的时候，就编写好路由，等待app实例创建好后，将这些路由添加到app实例中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#在user.py里编辑</span><br>记得将本文件里的@app.route改成user_app.route<br>		     相关的url_for()也要修改 如将url_for(<span class="hljs-string">&#x27;userlist&#x27;</span>)改成url_for(<span class="hljs-string">&#x27;user_app.userlist&#x27;</span>)<br><span class="hljs-comment">#例：</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint<br><br>user_app = Blueprint(<span class="hljs-string">&quot;user_app&quot;</span>,__name__)<br><br><span class="hljs-meta">@user_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/reg&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">register</span>():</span><br>	<span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;小博来了&quot;</span>)<br></code></pre></td></tr></table></figure>


<h4 id="增加发布文章功能"><a href="#增加发布文章功能" class="headerlink" title="增加发布文章功能"></a>增加发布文章功能</h4><ol>
<li><p>创建模板</p>
</li>
<li><p>创建文章模型</p>
</li>
<li><p>更新数据库</p>
</li>
<li><p>（编写视图函数与路由）在views目录中创建articles.py文件，与文章相关的视图函数与路由放在此文件中</p>
</li>
<li><p>在app.py中注册articles蓝本对象实例</p>
</li>
</ol>
<h6 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h6><p>在templates目录下新建articles文件夹，放入需要的模板</p>
<h6 id="创建文章模型"><a href="#创建文章模型" class="headerlink" title="创建文章模型"></a>创建文章模型</h6><figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta">#在models.py中</span><br><br><span class="hljs-title">from</span> datetime <span class="hljs-keyword">import</span> datetime										#导入时间模块<br><span class="hljs-title">from</span> libs <span class="hljs-keyword">import</span> db													#导入db模块<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Article</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Model</span>):</span><br><span class="hljs-class">    id = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Integer</span>, <span class="hljs-title">primary_key</span>=<span class="hljs-type">True</span>)                    #主键</span><br><span class="hljs-class">    title = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)                                    #文章标题</span><br><span class="hljs-class">    intro = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)                                    #文章简介</span><br><span class="hljs-class">    content = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Text</span>)                                    #文章内容</span><br><span class="hljs-class">    author = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)                                   #作者</span><br><span class="hljs-class">    pubdate = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">DateTime</span>, <span class="hljs-title">default</span>=<span class="hljs-title">datetime</span>.<span class="hljs-title">utcnow</span>)       #发布时间</span><br></code></pre></td></tr></table></figure>


<h6 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h6><p>模型添加后，必须要在数据库生成相应的表</p>
<p>开发环境可以删除数据库重建，生产环境下必须在不破坏现有的数据库下更新数据库</p>
<ol>
<li>安装数据库管理插件： pipenv install flask-migrate</li>
<li>安装后在app.py中创建实例：migrate = Migrate(app,db)       需要导入flask-migrate中的Migrate模块</li>
<li>初始化数据库迁移环境，在命令行执行：flask db init</li>
<li>创建迁移数据：flask db migrate -m “更新说明”</li>
<li>更新数据库：flask db upgrade </li>
</ol>
<h6 id="编写视图函数与路由"><a href="#编写视图函数与路由" class="headerlink" title="编写视图函数与路由"></a>编写视图函数与路由</h6><p>视图函数：</p>
<ol>
<li>文章详细显示</li>
<li>文章管理列表</li>
<li>添加文章</li>
<li>删除文章</li>
</ol>
<p>蓝本对象实例：相应的url_for也要修改</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">from views.articles import article_app<br><br>app.register<span class="hljs-constructor">_blueprint(<span class="hljs-params">article_app</span>, <span class="hljs-params">url_prefix</span>=<span class="hljs-string">&quot;/article&quot;</span>)</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-apache服务器</title>
    <url>/2021/04/18/Linux-apache%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h4 id="apache-httpd简介"><a href="#apache-httpd简介" class="headerlink" title="apache httpd简介"></a>apache httpd简介</h4><p>httpd web服务器是apache基金会下的一个开源服务器项目。</p>
<p>httpd服务器能够提供静态网页服务以及通过扩展提供动态程序访问</p>
<p>官方网站:<a href="http://httpd.apache.org/">http://httpd.apache.org/</a></p>
<h5 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h5><ol>
<li><p>httpd服务器可以直接通过yum命令安装。</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> httpd		<span class="hljs-comment">#安装httpd</span><br>yum <span class="hljs-keyword">install</span> vim			<span class="hljs-comment">#安装vim命令，文件编辑命令，vi的加强版</span><br></code></pre></td></tr></table></figure></li>
<li><p>服务器管理</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">apache服务器命令<br>apachectl start		<span class="hljs-comment">#启动服务器</span><br>apachectl stop		<span class="hljs-comment">#关闭服务器</span><br><br><br>Linux命令<br>reboot		<span class="hljs-comment">#重启Linux服务器</span><br><br><span class="hljs-comment">#拷host2.conf文件，命名host3.conf</span><br>cp <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/conf.d/</span>host2.conf <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/conf.d/</span>host3.conf<br>service firewalld stop	<span class="hljs-comment">#关闭防火墙</span><br><br><span class="hljs-comment">#永久打开80端口，设置后就不需要关闭防火墙</span><br>firewall-cmd --zone=public --add-port=<span class="hljs-number">80</span>/tcp --permanent<br></code></pre></td></tr></table></figure></li>
<li><p>配置文件位置</p>
<p>/etc/httpd/conf/httpd.conf</p>
</li>
</ol>
<h6 id="配置文件——详细解释"><a href="#配置文件——详细解释" class="headerlink" title="配置文件——详细解释"></a>配置文件——详细解释</h6><ul>
<li><p>Listen ip:port<br>指定web服务器绑定到哪个ip及端口号，可以只指定端口号，如80、8080</p>
</li>
<li><p>LoadModule<br>模块加载，通过加载不同的模块实现不同功能</p>
</li>
<li><p>ServerName<br>服务器名称，需要明确指定，默认注释，需要去掉注释符#并指定，才能启动httpd</p>
</li>
<li><p>Directory<br>目录权限设置块</p>
</li>
<li><p>DocumentRoot</p>
<p>指定web服务器根目录</p>
</li>
<li><p>ErrorLog错误</p>
<p>日志位置</p>
</li>
<li><lfModule log_config_module>

<p>访问日志配置</p>
</li>
<li><p>Include<br>加载其他配置文件</p>
</li>
</ul>
<h6 id="Apache修改配置后需要重启后才能生效"><a href="#Apache修改配置后需要重启后才能生效" class="headerlink" title="Apache修改配置后需要重启后才能生效."></a>Apache修改配置后需要重启后才能生效.</h6><p>1.启动httpd<br>/usr/local/apache2/bin/apachectl start</p>
<p>2.停止httpd运行<br>/usr/local/apache2/bin/apachectl stop</p>
<p>3.重启httpd（立即重启）<br>/usr/local/apache2/bin/apachectl restart</p>
<p>4.平滑重启（等待请求访问结束后重启）<br>/usr/local/apache2/bin/apachectl graceful</p>
<p>5.平滑关闭<br>/usr/local/apache2/bin/apachectl graceful-stop</p>
<h6 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h6><p>Step1:修改DocumentRoot<br>        指定web服务器根目录</p>
<p>​        文件根目录需要自己创建（mkdir -p)</p>
<p>Step2:关闭seliunx<br>        etc/selinux/config<br>        SELINUX=enforcing =&gt; SELINUX=disabled</p>
<p>Step3:重启<br>        reboot<br>Step4:启动apache web服务器<br>        apachectl start<br>Step5:关闭防火墙<br>        service firewalld stop</p>
<h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><p>Step1:创建新的web目录，比如:/wwwroot/myweb2 (mkdir/wwwroot/myweb2)</p>
<p>Step2:通过sftp命令上传网站文件到web目录，也可以下载一个winscp程序</p>
<p>Step3:创建/web/logs目录用于存放日志文件(mkdir -p/web/logs)</p>
<p>Step4:通过chown apache:apache /web/logs修改文件拥有者与属组</p>
<p>Step5:通过chmod -R 755/wwwroot/myweb2修改权限</p>
<p>Step6:在httpd.conf中添加Listen 8l端口</p>
<h6 id="sftp命令"><a href="#sftp命令" class="headerlink" title="sftp命令"></a>sftp命令</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#重新打开一个命令窗口，通过以下命令连接服务器</span><br>sfpt root@<span class="hljs-number">192.168</span>.<span class="hljs-number">107.140</span><br><br><span class="hljs-comment">#查看目录</span><br><span class="hljs-built_in">ls</span>		<span class="hljs-comment">#查看远程目录</span><br>lls		<span class="hljs-comment">#查看本地目录</span><br><br><span class="hljs-comment">#目录切换</span><br><span class="hljs-built_in">cd</span> /wwwroot/myweb	<span class="hljs-comment">#远程电脑目录切换</span><br>lcd /test			<span class="hljs-comment">#本地目录切换</span><br><br><span class="hljs-comment">#上传文件</span><br>put <span class="hljs-literal">-r</span> flask	<span class="hljs-comment">#上传文件夹</span><br>put index.html	<span class="hljs-comment">#上传文件</span><br><br><span class="hljs-comment">#删除文件（sftp里面不能执行）</span><br><span class="hljs-built_in">rmdir</span> 目录名			<span class="hljs-comment">#删除空目录</span><br><span class="hljs-built_in">rmdir</span> <span class="hljs-literal">-p</span> 目录名		<span class="hljs-comment">#删除后，若上级目录为空，上级目录也会删除</span><br><br><span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> 目录名字			<span class="hljs-comment">#删除该目录及下级目录</span><br><span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> 目录下文件名字			<span class="hljs-comment">#删除该目录下的文件</span><br></code></pre></td></tr></table></figure>


<h6 id="权限修改"><a href="#权限修改" class="headerlink" title="权限修改"></a>权限修改</h6><p>755(二进制对应    111    101    101    ) </p>
<p>111对应 ： 可读    可写    可执行</p>
<p>101就是： 可读    不可写    可执行</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#查看web目录下logs的权限</span><br><span class="hljs-keyword">ls</span> -al <span class="hljs-string">/web/logs</span> <br><br><span class="hljs-comment">#修改权限</span><br>chown -R apache<span class="hljs-function">:apache</span> <span class="hljs-string">/web</span><br></code></pre></td></tr></table></figure>
<h6 id="添加端口号"><a href="#添加端口号" class="headerlink" title="添加端口号"></a>添加端口号</h6><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/conf/</span>httpd.conf		<span class="hljs-comment">#打开文件</span><br><br>在LIsten <span class="hljs-number">80</span> 下面添加 listen <span class="hljs-number">81</span><br></code></pre></td></tr></table></figure>


<h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>1.直接IP访问服务器，不方便记忆。域名是为了方便访问服务器。<br>2.域名需要DNS服务器解析成IP地址，如果没有解析记录，就没有办法通过域名访问3.域名必须注册，常用的是国际域名。比如.com，.net，然后是国家域名.cn,com.cn，另外还有很多其他的域名，比如.io,.org..<br>4.域名结构:域名.com,二级域名: www.域名.com, api.域名.com<br>5.本地测试，可以通过架设dns服务器或者通过修改本地hosts文件来模拟域名6.apache可以通过域名绑定多个虚拟主机</p>
<p>由于域名需要解析，所以比直接使用ip要慢，因此，在我们服务器内部，尽量使用ip,比如mysql的连接，使用127.0.0.1，要比localhost要快</p>
<p>修改本地电脑的hosts文件</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#第一步：</span><br><span class="hljs-comment">#Windows系统：用管理员权限打开cmd,执行下面命令</span><br><span class="hljs-attribute">cd</span> \Windows\System<span class="hljs-number">32</span>\drivers\etc		#进入etc文件夹<br><span class="hljs-attribute">notepad</span> hosts							#用笔记本打开hosts文件<br><br><span class="hljs-comment"># mac os 系统</span><br><span class="hljs-attribute">vim</span> /etc/hosts<br><br><span class="hljs-comment">#第二步</span><br><span class="hljs-comment">#添加解析信息</span><br><span class="hljs-comment">#例</span><br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">107</span>.<span class="hljs-number">140</span>    xiaobo.com<br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">107</span>.<span class="hljs-number">140</span>    bobo.com<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-mysql主从复制</title>
    <url>/2021/05/02/Linux-mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<p>主从复制</p>
<p>主从复制就是一台主Mysql服务器，能够接受数据的写入与读取，另外可能还有多台从节点Mysql服务器，他们不能被直接写入数据，只能通过主节点的二进制日志复制数据，为外部程序提供数据读取服务，是Mysql集群部署最简单的一种</p>
<p>1.主从复制依赖于Mysql的二进制日志</p>
<p>2.从服务器首先复制主服务器的二进制日志</p>
<p>3.然后从该二进制日志中恢复数据到从库</p>
<p>4.复制二进制日志过程默认是异步的，所以从数据库上的数据相对主数据库来讲，有一定的延迟。但是最终，两者的数据是一致的</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>http协议</title>
    <url>/2021/06/04/Linux-http%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h4 id="http请求头"><a href="#http请求头" class="headerlink" title="http请求头"></a>http请求头</h4><p>http协议是应用层协议-超文本传输协议。<br>http协议用于互联网之间的文件传输，如何请求文件，如何返回文件</p>
<p>http协议是建立在tcp协议之上的协议<br>http协议是无状态协议，请求应答结束，连接即关闭，下一次的请求与应答重新进行tcp连接</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-mysql安装</title>
    <url>/2021/05/01/Linux-mysql%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="在Linux系统中安装mysql"><a href="#在Linux系统中安装mysql" class="headerlink" title="在Linux系统中安装mysql"></a>在Linux系统中安装mysql</h3><p>下载历史版本5.7.28的版本<br>找到下载地址后右键下载，复制下载链接</p>
<h6 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h6><p>#yum install wget</p>
<h6 id="用命令下载mysql安装包"><a href="#用命令下载mysql安装包" class="headerlink" title="用命令下载mysql安装包"></a>用命令下载mysql安装包</h6><p>-c 后边是mysql下载链接地址<br>wget -c <a href="https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz">https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz</a></p>
<p>#经过上面的操作，就得到了一个mysql二进制安装包</p>
<h6 id="安装二进制包"><a href="#安装二进制包" class="headerlink" title="安装二进制包"></a>安装二进制包</h6><p>Step1-解压缩二进制包:</p>
<p>#tar zxvf mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz</p>
<p>Step2-拷贝到/usr/local/下:</p>
<p>#cp mysql-5.7.28-linux-glibc2.12-x86_64/usr/local/mysql</p>
<p>Step3-编辑配置文件:</p>
<p>#vim /etc/my.cnf</p>
<p>Step4-创建data目录:</p>
<p>#mkdir /usr/local/mysql/data</p>
<p>Step5-创建mysql运行用户组</p>
<p>#groupadd mysql</p>
<p>Step6-创建mysql运行用户</p>
<p>#useradd -g mysql -d /usr/local/mysql -s /sbin/nologin -M mysql</p>
<p>Step7 -  运行初始化(首先要进入mysql目录)(初始化后记得拷贝下密码)</p>
<p>#./bin/mysqld –initialize</p>
<p>Step8-更改/usr/local/mysql属主与属组</p>
<p>#chown -R mysql:mysql /usr/local/mysql</p>
<p>Step9-运行服务器:</p>
<p>#support-files/mysql.server start</p>
<p>Step10 -加入系统服务:</p>
<p>#cp support-files/mysql.server /etc/init.d/mysqld</p>
<p>Step11-开机启动:</p>
<p>#chkconfig –add mysqld</p>
<p>登录mysql</p>
<p>./bin/mysql -u root -h localhost -p</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-nginx代理配置</title>
    <url>/2021/05/01/Linux-nginx%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Nginx代理模式</p>
<p>正向代理</p>
<p>比如我们使用的vpn，就是一种代理，通过vpn我们就可以一种特别的通道上网vpn的代理模式是正向代理，代理层是透明的，上网时感觉不到这一层代理</p>
<p>反向代理</p>
<p>在反向代理中，客户端只知道代理节点，将请求发给代理节点，由代理节点决定将请求发给哪个服务器节点，代理节点就是访问目标服务器</p>
<p>nginx作为web服务器使用时，可以看作是一个文件分发服务器</p>
<p>在反向代理模式下，用户将请求发送到nginx服务器，nginx决定将用户请求转发到节点的某一台服务器节点组成对用户来讲是不透明的，用户只知道nginx服务器的存在</p>
<p>当nginx代理请求时，它将请求发送到指定的代理服务器，获取响应，并将其发送回客户端。可以使用指定的协议将请求代理到HTTP服务器或非HTTP服务器。<br>1.代理到HTTP服务器使用Proxy协议<br>2.代理到非HTTP服务器支持的协议包括FastCGl，uwsgi，SCGI和memcached。</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-nginx服务器</title>
    <url>/2021/04/21/Linux-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h4 id="nginx简介"><a href="#nginx简介" class="headerlink" title="nginx简介"></a>nginx简介</h4><p>nginx  [engine x]不仅仅是HTTP服务器</p>
<p>还可以作为反向代理服务器,以及IMAP/POP3/SMTP服务器，Nginx是由lgor Sysoev为俄罗斯访问量第二的rambler.ru站点开发的</p>
<p>特点:占用内存少，并发能力强，主要原因是采用了epoll机制</p>
<h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><ol>
<li><p>配置yum源</p>
<p>配置文件位置:/etc/yum.repos.d/nginx.repo</p>
<p>配置文件内容:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[nginx-stable]</span><br><br><span class="hljs-attr">name</span>=nginx stable repo<br><br><span class="hljs-attr">baseurl</span>=http://nginx.org/packages/centos/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/<br><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><br><span class="hljs-attr">gpgkey</span>=https://nginx.org/keys/nginx_signing.key<br><br><span class="hljs-attr">module_hotfixes</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

</li>
<li><p>yum安装</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> yum-utils<br>   yum <span class="hljs-keyword">install</span> nginx<br></code></pre></td></tr></table></figure>



</li>
</ol>
<p>安装完成后，打开配置文件vim /etc/nginx/nginx.conf</p>
<p>配置文件含义</p>
<p>user nginx; -进程用户名</p>
<p>worker_processes 1;-进程数，一般与cpu数一致</p>
<p>error_log /var/log/nginx/error.log warn;    错误日志存放路径</p>
<p>pid /var/run/nginx.pid;    进程的ID</p>
<p>events {worker_connections 1024; }     worker_connections表示每个worker进程的最大的连接数</p>
<p>http {</p>
<p>include/etc/nginx/mime.types;支持的资源媒体类型</p>
<p>default_type application/octet-stream;默认文件类型为字节流</p>
<p>log_format main …..”;    日志格式</p>
<p>access_log /var/log/nginx/access.log main;    服务器日志路径</p>
<p>sendfile on;静态文件传输优化</p>
<p>keepalive_timeout 65;连接保持时间</p>
<p>#gzip on;</p>
<p>include /etc/nginx/conf.d/*.conf;加载配置}</p>
<p>主要修改server文件</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">复制上方   <span class="hljs-keyword">include</span>后边路径下的    <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span>*.conf  目录下的defoult.conf文件<br><br>例：复制文件     cp <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span><span class="hljs-regexp">/default.conf /</span>etc<span class="hljs-regexp">/nginx/</span>conf.d/myweb.conf<br><br>打开刚刚复制的文件，按下面修改<br>server &#123;<br>    listen       <span class="hljs-number">80</span>;<br>    server_name  localhost;		#将此处的localhost修改为自己的域名<br><br>    #access_log  <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>host.access.log  main;<br><br>    location / &#123;<br>        root   <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html;	#此处为自己网页的根目录<br>        index  index.html index.htm;<br>    &#125;<br>    <br> 修改后示例<br> server &#123;<br>    listen       <span class="hljs-number">80</span>;<br>    server_name  xiaobo.com;<br><br>    #access_log  <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>host.access.log  main;<br><br>    location / &#123;<br>        root   <span class="hljs-regexp">/wwwroot/my</span>web;<br>        index  index.html index.htm;<br>    &#125;<br></code></pre></td></tr></table></figure>
<p>修改完成后，重启nginx，就可以访问域名了</p>
<h4 id="nginx主进程控制"><a href="#nginx主进程控制" class="headerlink" title="nginx主进程控制"></a>nginx主进程控制</h4><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">nginx修改配置后需要重启后才能生效.<br><br>1.启动nginx<br>nginx<br><br>⒉快速停止nginx运行<br>nginx -s stop<br><br>3.重启加载<br>nginx -s <span class="hljs-keyword">reload</span><br><br>4.正常关闭<br>nginxnginx -s <span class="hljs-keyword">quit</span><br><br>5.重新打开日志<br>nginx -s reopen<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-socket编程</title>
    <url>/2021/05/02/Linux-socket%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h4><p>在实际的TCP/IP应用程序开发中，并不需要去实现细节部分，通常会由系统提供socket接口，这个接口又被称为套接字，基于这个接口就可以轻松的开发网络通讯程序<br>python标准库提供的socket模块，可以实现服务端与客户端的编程</p>
<h4 id="服务端开发"><a href="#服务端开发" class="headerlink" title="服务端开发"></a>服务端开发</h4><p>1.服务器端一直运行，直到关闭</p>
<p>2.服务器端端口是固定的</p>
<p>3.服务器端拥有固定的ip或者主机名</p>
<p>4.服务器端运行后，会等待客户端连接</p>
<p>5.一旦连接成功，就可以相互发送消息</p>
<p>1.s= socket(套接字类别, SOCK_STREAM)<br>套接字类别:AF_INET-IP寻址，AF_UNIX-文件类型套接字</p>
<p>返回一个socket对象实例</p>
<p>2.s.bind((“127.0.0.1”,8000))<br>参数是元组类型，(ip地址，端口号)</p>
<p>3.s.listen(num)<br>启动监听，如果提供了num，表示允许的最多连接数，超过的将被拒绝</p>
<p>4.socket, address = s.accept()<br>等待连接，如果有连接,返回由客户端socket对象与address信息组成的元组</p>
<p>安装Wireshark抓包工具</p>
<h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><h6 id="服务器设置（基本设置）"><a href="#服务器设置（基本设置）" class="headerlink" title="服务器设置（基本设置）"></a>服务器设置（基本设置）</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> socket import socket, AF_INET, SOCK_STREAM<br><br><span class="hljs-comment"># AF_INET  - IPV4 协议</span><br><span class="hljs-comment"># SOCK_STREAM - 套接字类型为面向连接的可靠字节流</span><br><br><span class="hljs-comment"># 创建socket对象实例</span><br>s_server = socket(AF_INET, SOCK_STREAM)<br><br><span class="hljs-comment"># 绑定IP与端口号</span><br>s_server.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, 8000))<br><br><span class="hljs-comment"># 开始监听</span><br>s_server.listen()<br><br><span class="hljs-comment"># 显示等待链接接入中</span><br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;等待链接中~~~~~~&quot;</span>)<br>client_sock, client_addr = s_server.accept()<br><span class="hljs-builtin-name">print</span>(client_sock, client_addr)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;-&quot;</span><span class="hljs-number">*50</span>)<br>client_sock.close()<br>s_server.close()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;服务器已关闭&quot;</span>)<br></code></pre></td></tr></table></figure>


<h6 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h6><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> <span class="hljs-built_in">socket</span> import *<br><br><span class="hljs-comment"># 创建实例</span><br>c_client = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM)<br><br><span class="hljs-comment"># 链接到服务器</span><br>c_client.connect((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8000</span>))<br><br><span class="hljs-comment"># 关闭链接</span><br>c_client.<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure>


<h6 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h6><p>服务器设置（主要是加上了while循环）</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl">from <span class="hljs-keyword">socket</span> import <span class="hljs-keyword">socket</span>, AF_INET, SOCK_STREAM<br><br>s_server = <span class="hljs-keyword">socket</span>(AF_INET, SOCK_STREAM)<br>s_server.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8000</span>))<br>s_server.listen()<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;等待链接中~~~~~~&quot;</span>)<br>client_sock, client_addr = s_server.accept()<br><span class="hljs-keyword">print</span>(client_sock, client_addr)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;-&quot;</span>*<span class="hljs-number">50</span>)<br><br><span class="hljs-keyword">while</span> True:<br>    message = client_sock.recv(<span class="hljs-number">1024</span>)       <span class="hljs-comment"># 读取socket的数据，如果没有读取到数据就会停留在这一句</span><br>    message = message.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)      <span class="hljs-comment"># 将读取到的message字节解码</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> message:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;exit&quot;</span>:<br>        client_sock.close()                 <span class="hljs-comment"># 发出关闭信号</span><br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;客户端消息》》&quot;</span>, message)<br>        client_sock.send(b<span class="hljs-string">&quot;continue...&quot;</span>)<br><br>s_server.close()<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;服务器已关闭&quot;</span>)<br></code></pre></td></tr></table></figure>


<p>客户端设置</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> <span class="hljs-built_in">socket</span> import *<br><br>c_client = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM)<br>c_client.connect((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8000</span>))<br><br><span class="hljs-keyword">while</span> True:<br>    message = input(<span class="hljs-string">&quot;请输入发送的消息：&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> message:<br>        continue<br>    c_client.<span class="hljs-built_in">send</span>(<span class="hljs-keyword">bytes</span>(message, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;exit&quot;</span>:<br>        break<br>    <span class="hljs-built_in">result</span> = c_client.recv(<span class="hljs-number">1024</span>)<br>    print(<span class="hljs-built_in">result</span>.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br><span class="hljs-comment"># 关闭链接</span><br>c_client.<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure>


<h4 id="udp"><a href="#udp" class="headerlink" title="udp"></a>udp</h4><h6 id="服务器设置"><a href="#服务器设置" class="headerlink" title="服务器设置"></a>服务器设置</h6><figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">from</span> socket <span class="hljs-keyword">import</span> *<br><br><span class="hljs-type">HOST</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-type">PORT</span> = <span class="hljs-number">21111</span><br><span class="hljs-type">BUFSIZE</span> = <span class="hljs-number">1024</span><br><br><span class="hljs-meta"># 创建udp服务器</span><br><span class="hljs-title">udpSerSock</span> = socket(<span class="hljs-type">AF_INET</span>, <span class="hljs-type">SOCK_DGRAM</span>)<br><span class="hljs-title">udpSerSock</span>.bind((<span class="hljs-type">HOST</span>, <span class="hljs-type">PORT</span>))<br><span class="hljs-title">while</span> <span class="hljs-type">True</span>:<br>    # recvform返回数据<span class="hljs-class"><span class="hljs-keyword">data</span>，与发送消息端的(<span class="hljs-title">ip</span>, <span class="hljs-title">port</span>)</span><br>    <span class="hljs-class"><span class="hljs-keyword">data</span>, addr = udpSerSock.recvfrom(<span class="hljs-type">BUFSIZE</span>)</span><br>    print(addr, <span class="hljs-string">&quot;&gt;&gt;&quot;</span>, <span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br>    udpSerSock.sendto(bytes(<span class="hljs-string">&quot;ok&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>), addr)<br>    <br><span class="hljs-title">udpSerSock</span>.close()<br></code></pre></td></tr></table></figure>


<h6 id="客户端设置-1"><a href="#客户端设置-1" class="headerlink" title="客户端设置"></a>客户端设置</h6><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">from socket import *<br><br>HOST = <span class="hljs-string">&quot;&quot;</span><br>PORT = <span class="hljs-number">21111</span><br>BUFSIZ = <span class="hljs-number">1024</span><br>ADDR = (HOST, PORT)<br><br><span class="hljs-comment"># 创建一个socket对象</span><br><span class="hljs-comment"># SOCK_DGRAM - 套接字类型为udp数据报</span><br>udpClient = socket(AF_INET, SOCK_DGRAM)<br><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>    <span class="hljs-keyword">message</span> = input(<span class="hljs-string">&quot;请输入:&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">message</span> ==<span class="hljs-string">&quot;quit&quot;</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">message</span>:<br>        <span class="hljs-keyword">continue</span><br>    udpClient.sendto(bytes(<span class="hljs-keyword">message</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>), ADDR)<br>    <span class="hljs-keyword">message</span>, addr = udpClient.recvfrom(<span class="hljs-number">1024</span>)<br>    print(addr, <span class="hljs-string">&quot;&gt;&gt;&quot;</span>, <span class="hljs-keyword">message</span>.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <br>udpClient.close()<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-ssh远程登录</title>
    <url>/2021/04/15/Linux-ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h4 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h4><h5 id="内网ip地址"><a href="#内网ip地址" class="headerlink" title="内网ip地址"></a>内网ip地址</h5><p>lp代表了一台主机在网络中的位置<br>每一块网卡介入互联网的时候都会分配一个ip，在自己家里每台电脑通常分配一个内部ip，内网ip可以自己定</p>
<h5 id="外网ip地址"><a href="#外网ip地址" class="headerlink" title="外网ip地址"></a>外网ip地址</h5><p>如果你的电脑通过ISP服务商连接到互联网，就会被分配一个公网ip</p>
<h5 id="ip地址规则"><a href="#ip地址规则" class="headerlink" title="ip地址规则"></a>ip地址规则</h5><h5 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h5><h5 id="OSI网络模型"><a href="#OSI网络模型" class="headerlink" title="OSI网络模型"></a>OSI网络模型</h5><h5 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h5><p>OSI</p>
<ul>
<li>应用层</li>
<li>表示层</li>
<li>会话层</li>
<li>传输层</li>
<li>网络层</li>
<li>数据链路层</li>
<li>物理层</li>
</ul>
<p>TCP/IP</p>
<ul>
<li>应用层</li>
<li>传输层</li>
<li>网络层</li>
<li>网络接口层</li>
</ul>
<h5 id="网络层与传输层"><a href="#网络层与传输层" class="headerlink" title="网络层与传输层"></a>网络层与传输层</h5><p>网络层负责将数据根据传输协议打包成数据包进行传输(主机到主机)传输层负责将数据在不同主机的应用进程之间进行传输。<br>有两个协议: tcp与udp协议<br>tcp协议称为可靠协议udp协议为非可靠协议</p>
<h5 id="应用层与端口"><a href="#应用层与端口" class="headerlink" title="应用层与端口"></a>应用层与端口</h5><p>主机接受到网络传来的数据，还需要对应的应用程序来将数据包重新还原为原来的数据格式。<br>ip只能定位主机，数据包到达主机后，交给哪个应用处理，需要依靠端口来分辨常用的一些网络协议端口</p>
<h4 id="ip命令"><a href="#ip命令" class="headerlink" title="ip命令"></a>ip命令</h4><h6 id="ip-addr命令"><a href="#ip-addr命令" class="headerlink" title="#ip addr命令"></a>#ip addr命令</h6><p>ip命令可以查看本机网络ip配置</p>
<p>命令格式： # ip addr</p>
<h6 id="修改网卡配置"><a href="#修改网卡配置" class="headerlink" title="修改网卡配置"></a>修改网卡配置</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">网卡配置:执行vi /etc/sysconfig/network-scripts/ifcfg-enp0s3<br><br>修改以下参数<br><br>将内网IP设为固定ip:<br><br><span class="hljs-attribute">BOOTPROTO</span>=static     静态分配 <br><br><span class="hljs-attribute">ONBOOT</span>=<span class="hljs-literal">yes</span><br><br><span class="hljs-attribute">NETMASK</span>=255.255.255.0    掩码<br><br><span class="hljs-comment">#下面两条需要根据实际情况修改</span><br><br><span class="hljs-attribute">IPADDR</span>=172.17.191.140<br><br><span class="hljs-attribute">GATEWAY</span>=172.17.191.254     网关<br><br><br></code></pre></td></tr></table></figure>


<h6 id="重启network服务（网络服务）"><a href="#重启network服务（网络服务）" class="headerlink" title="重启network服务（网络服务）"></a>重启network服务（网络服务）</h6><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#centos 8 的版本</span><br><span class="hljs-attribute">nmcli</span> c reload<br><span class="hljs-attribute">nmcli</span> c up enp<span class="hljs-number">0</span>s<span class="hljs-number">3</span>		#enp<span class="hljs-number">0</span>s<span class="hljs-number">3</span>是网卡标识符<br><br><span class="hljs-comment">#centos 7 的版本</span><br><span class="hljs-attribute">service</span> network restart<br></code></pre></td></tr></table></figure>


<h4 id="ssh命令"><a href="#ssh命令" class="headerlink" title="ssh命令"></a>ssh命令</h4><p>1.SSH为Secure Shell的缩写<br>2.SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议3.几乎所有的linux都支持SSH，SSH由客户端与服务器组成<br>4.通过SSH可以安全的进行远程登录，远程拷贝，远程上传，默认端口是22</p>
<p>mac与linux自带ssh客户端<br>windows下如果你不能使用该命令可以安装putty</p>
<p>基本使用方式：</p>
<p>#ssh -l 用户名 主机名</p>
<p>举例:<br>以root身份远程登陆到192.168.1.100主机#ssh -l root 192.168.1.100<br>第一次登陆，会有一个询问窗口，</p>
<p>回复yes即可,密码 为root密码</p>
<p>安装httpd时出现以下错误（yum安装错误）</p>
<p>已加载插件：fastestmirror<br>Determining fastest mirrors<br>Could not retrieve mirrorlist <a href="http://mirrorlist.centos.org/?release=7&amp;arch=x86_64&amp;repo=os&amp;infra=stock">http://mirrorlist.centos.org/?release=7&amp;arch=x86_64&amp;repo=os&amp;infra=stock</a> error was<br>14: curl#6 - “Could not resolve host: mirrorlist.centos.org; 未知的错误”</p>
<p>需要在在网卡配置里添加DNS=114.114.114.114</p>
<p>错误：远程主机标识已更改，</p>
<p>执行下面语句，然后重新连接</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">ssh-keygen -R host		<span class="hljs-meta">#host为主机名</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-tcpip协议</title>
    <url>/2021/05/02/Linux-tcpip%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>wsgi协议</title>
    <url>/2021/06/04/Linux-wsgi%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-多线程</title>
    <url>/2021/05/31/Linux-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程?"></a>什么是进程?</h4><p>我们每运行一个程序，就是创建一个进程。每个进程运行的时候会向系统申请资源:内存空间，cpu时间，进程之间的资源相互独立</p>
<h4 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程?"></a>什么是线程?</h4><p>当一个进程运行的时候，它内部就会存在一个主线程。线程就是程序内部需要完成的任务。在只有一个线程的情况，这些任务需要按照次序，逐个完成。所有线程共享进程资源。</p>
<h4 id="threading模块（多线程模块）"><a href="#threading模块（多线程模块）" class="headerlink" title="threading模块（多线程模块）"></a>threading模块（多线程模块）</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, active_count, current_thread, <span class="hljs-keyword">local</span><br>Thread  <span class="hljs-comment">--线程对象，通过该对象创建线程</span><br>		t = Thread(target=func, arges=(param1,param2), kwargs=&#123;&#125;)<br>		t为线程实例：<br>		t.<span class="hljs-keyword">start</span>() <span class="hljs-comment">--开始运行该线程</span><br>		t.<span class="hljs-keyword">join</span>()  <span class="hljs-comment">--其他线程必须等待此线程完成后才能运行</span><br>		<br>active_count  <span class="hljs-comment">--函数，返回当前活动的线程数</span><br>current_thread <span class="hljs-comment">--函数，当前该线程</span><br><span class="hljs-keyword">local</span>  		   <span class="hljs-comment">--函数，线程局部变量</span><br><span class="hljs-keyword">lock</span>		   <span class="hljs-comment">--锁对象</span><br></code></pre></td></tr></table></figure>


<h6 id="多线程的使用"><a href="#多线程的使用" class="headerlink" title="多线程的使用"></a>多线程的使用</h6><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">from</span> threading import Thread<br><span class="hljs-selector-tag">from</span> random import randint<br><span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">time</span> import sleep, <span class="hljs-selector-tag">time</span><br><br><br>def myprint(num):<br>    # <span class="hljs-built_in">sleep</span>(<span class="hljs-built_in">randint</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;threading:&quot;</span>, num)<br><br><br>def <span class="hljs-built_in">main</span>():<br>    for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        t = <span class="hljs-built_in">Thread</span>(target=myprint, args=(i,))   # 创建线程<br>        t.<span class="hljs-built_in">start</span>()                               # 开始线程<br>        t.<span class="hljs-built_in">join</span>()      # 当前线程结束后，才会执行下一个进程，这个开启后下面的main stop 也会等所有线程结束后才会执行<br><br>if __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    time_1 = <span class="hljs-built_in">time</span>()<br>    <span class="hljs-built_in">main</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;main stop...&quot;</span>)       # 这句话会立即执行，可以在main函数还没有执行结束就执行<br>    time_2 = <span class="hljs-built_in">time</span>()<br>    <span class="hljs-built_in">print</span>(time_2 - time_1)<br></code></pre></td></tr></table></figure>


<h6 id="线程局部变量的使用"><a href="#线程局部变量的使用" class="headerlink" title="线程局部变量的使用"></a>线程局部变量的使用</h6><figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta"># -*- coding=utf-8 -*-</span><br><br><span class="hljs-title">from</span> threading <span class="hljs-keyword">import</span> Thread, current_thread, local<br><span class="hljs-title">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-title">from</span> time <span class="hljs-keyword">import</span>  sleep<br><br><span class="hljs-meta"># 线程局部对象</span><br><span class="hljs-meta"># 线程局部对象可以被所有线程访问，比如local_data，可以被所有线程访问</span><br><span class="hljs-meta"># 但是线程局部对象的属性只能被定义该属性的线程自身访问，比如local_data的data属性，只能被自己的线程访问与修改，即使</span><br><span class="hljs-meta"># 所有的线程中都包含同名的local_data.data属性，因此这个data实际上只是线程内部的局部变量</span><br><span class="hljs-meta"># 借助线性局部对象可以简化代码逻辑，保持线程间变量隔离</span><br><span class="hljs-title">local_data</span> = local()<br><span class="hljs-class"><span class="hljs-keyword">data</span> = 0</span><br><span class="hljs-title">def</span> set_data():<br><br>    local_data.<span class="hljs-class"><span class="hljs-keyword">data</span> = randint(0,100)</span><br>    print(current_thread().name+<span class="hljs-string">&quot;::data=&quot;</span>+str(local_data.<span class="hljs-class"><span class="hljs-keyword">data</span>))</span><br>    sleep(randint(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>))<br>    print(current_thread().name+<span class="hljs-string">&quot;:: after_sleep::data=&quot;</span>+str(local_data.<span class="hljs-class"><span class="hljs-keyword">data</span>))</span><br>    # local_data.<span class="hljs-class"><span class="hljs-keyword">data</span> = <span class="hljs-keyword">data</span></span><br>    out()<br><br><span class="hljs-title">def</span> out():<br>    print(local_data.<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br><br><br><span class="hljs-title">def</span> main():<br>    for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):<br>        t1 = <span class="hljs-type">Thread</span>(target=set_data)<br>        t1.start()<br><br><br><br><span class="hljs-title">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure>


<h6 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h6><p>所有线程可以共享同一个进程内的资源，如果同时操作某一个对象，就可能发生混乱，这时候可以通过加锁解决<br>线程锁通过Lock对象实例实现l = Lock()<br>包含两个实例方法:l.acquire()-加锁l.release()-解锁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock, current_thread<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br>lock = Lock()<br>number = [<span class="hljs-number">0</span>]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loop</span>(<span class="hljs-params">i</span>):</span><br>    lock.acquire()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> i &gt; number[-<span class="hljs-number">1</span>]:<br>            sleep(randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>))<br>            number.append(i)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">finally</span>:<br>        print(<span class="hljs-string">&quot;thread %s ended.&quot;</span> % current_thread().name, number, <span class="hljs-string">&quot;\r\n&quot;</span>)<br>        lock.release()<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        t = Thread(target=loop, args=(i,))<br>        t.start()<br>   <br><br></code></pre></td></tr></table></figure>


<h6 id="如何多客户端链接socket"><a href="#如何多客户端链接socket" class="headerlink" title="如何多客户端链接socket"></a>如何多客户端链接socket</h6><p>中心思想：将客户链接语句加入到循环中，进来一个客户就创建一个线程</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-多进程</title>
    <url>/2021/06/04/Linux-%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<h4 id="python多线程问题"><a href="#python多线程问题" class="headerlink" title="python多线程问题"></a>python多线程问题</h4><p>1.在线程部分，多线程插入数列必须加锁。如果多线程使用一个变量，会导致变量的引用计数错乱，导致程序崩溃。</p>
<p>2.同一时刻只能有一个线程在CPU执行，因此python的多线程不适合CPU密集型任务，只适合I/O密集型任务。</p>
<p>计算机密集线程：CPU计算会占用全部CPU</p>
<p>I/O密集型线程：进行少量的CPU计算，大部分等待I/O（网络、硬盘）</p>
<h4 id="多进程（multiprocessing模块）"><a href="#多进程（multiprocessing模块）" class="headerlink" title="多进程（multiprocessing模块）"></a>多进程（multiprocessing模块）</h4><p>多进程可以发挥多个CPU，各进程互不干扰</p>
<p>multiprocessing模块是python的标准库，用于提供多进程编程</p>
<p>多进程与多线程使用方法差不多，可以互相参考</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">from multiprocessing import Process<br><br>p1 = <span class="hljs-constructor">Process(<span class="hljs-params">target</span>=<span class="hljs-params">func</span>, <span class="hljs-params">args</span>=(<span class="hljs-params">param1</span>,<span class="hljs-operator">...</span>)</span>)<br>p1.start<span class="hljs-literal">()</span><br><br>每个进程都会被分配一个Pid，Linux可以通过PS命令查看，也可以在python中使用os.getpid<span class="hljs-literal">()</span>函数获得进程id<br>multiprocessing.cpu<span class="hljs-constructor">_count()</span>	#获取CPU数量或CPU线程数<br>multiprocessing.<span class="hljs-constructor">Pool(<span class="hljs-params">size</span>)</span>	#创建进程池，会创建多个进程，并根据需要进行分配<br></code></pre></td></tr></table></figure>


<h4 id="多进程的创建"><a href="#多进程的创建" class="headerlink" title="多进程的创建"></a>多进程的创建</h4><figure class="highlight nix"><table><tr><td class="code"><pre><code class="hljs nix">from multiprocessing <span class="hljs-built_in">import</span> Process<br><span class="hljs-built_in">import</span> os, random<br><br><br>def tests(i):<br>    print(<span class="hljs-string">&quot;子进程&quot;</span>, i,<span class="hljs-string">&quot;:&quot;</span>, os.getpid())<br><br><br><span class="hljs-keyword">if</span> <span class="hljs-attr">__name__</span> == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    print(<span class="hljs-string">&quot;主进程&quot;</span>, os.getpid())				<span class="hljs-comment">#默认的主进程</span><br>    <span class="hljs-attr">p1</span> = Process(<span class="hljs-attr">target=tests,</span> <span class="hljs-attr">args=(10,))</span>	  <span class="hljs-comment">#创建子进程1</span><br>    <span class="hljs-attr">p2</span> = Process(<span class="hljs-attr">target=tests,</span> <span class="hljs-attr">args=(20,))</span>	  <span class="hljs-comment">#创建子进程2</span><br>    p1.start()		<span class="hljs-comment">#开始子进程1</span><br>    p2.start()		<span class="hljs-comment">#开始子进程2</span><br><br></code></pre></td></tr></table></figure>


<h4 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h4><p>让多个进程访问同一个变量，使得进程间共享数据。</p>
<p>我们这儿主要使用<strong>进程间队列</strong>来实现。</p>
<h6 id="队列（queue）"><a href="#队列（queue）" class="headerlink" title="队列（queue）"></a>队列（queue）</h6><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">q</span> = multiprocessing<span class="hljs-selector-class">.Queue</span>()		#实例化<br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.put</span>()							#向队列中写入数据（用于生产者进程）<br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.get</span>()							#向队列中读取数据（用于消费者进程）<br><br></code></pre></td></tr></table></figure>


<h4 id="进程池（Pool）"><a href="#进程池（Pool）" class="headerlink" title="进程池（Pool）"></a>进程池（Pool）</h4><p>进程池可以简化多进程代码，可以以下创建多个进程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> multiprocessing<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">task</span>(<span class="hljs-params">i</span>):</span><br>    print(<span class="hljs-string">&#x27;Run task %s ==&gt; (%s)...&#x27;</span> % (os.getpid(), i))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    print(<span class="hljs-string">&#x27;Parent process %s.&#x27;</span> % os.getpid())<br>    size = multiprocessing.cpu_count()<br>    <span class="hljs-comment"># 创建size个子进程</span><br>    <span class="hljs-comment"># 每个子进程根据任务执行情况会被复用</span><br>    <span class="hljs-comment"># 创建进程需要申请cpu时间，内存空间，关闭进程还需要释放这些资源，整个过程比创建线程费时</span><br>    <span class="hljs-comment"># 因此通常需要预先创建几个进程</span><br>    p = multiprocessing.Pool(size)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        p.apply_async(task, args=(i,))<br><br>    print(<span class="hljs-string">&quot;Waiting for all subprocesses done&quot;</span>)<br>    <span class="hljs-comment">#    调用close后不能继续添加进程</span><br>    p.close()<br>    <span class="hljs-comment">#    等待所有子进程执行完毕后执行</span><br>    p.join()<br>    print(<span class="hljs-string">&quot;All subprocesses done.&quot;</span>, <span class="hljs-string">&quot;cpu数量：&quot;</span>, size)<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>flask-起步</title>
    <url>/2021/03/08/flask-%E8%B5%B7%E6%AD%A5/</url>
    <content><![CDATA[<h4 id="创建flask工程目录"><a href="#创建flask工程目录" class="headerlink" title="创建flask工程目录"></a>创建flask工程目录</h4><ol>
<li><h6 id="创建目录-进入目录"><a href="#创建目录-进入目录" class="headerlink" title="创建目录,进入目录"></a>创建目录,进入目录</h6><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mkdir myflask 		<span class="hljs-comment">#创建文件夹</span><br><span class="hljs-built_in">cd</span> myflask			<span class="hljs-comment">#进入目录</span><br></code></pre></td></tr></table></figure></li>
<li><h6 id="安装虚拟环境pipenv-配置pipenv-可以不用安装-这步可以省略"><a href="#安装虚拟环境pipenv-配置pipenv-可以不用安装-这步可以省略" class="headerlink" title="安装虚拟环境pipenv,配置pipenv(可以不用安装,这步可以省略)"></a>安装虚拟环境pipenv,配置pipenv(可以不用安装,这步可以省略)</h6><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> pipenv		<span class="hljs-comment">#安装pipenv</span><br><br><span class="hljs-comment">#在myflask目录下执行下面代码</span><br>pipenv <span class="hljs-keyword">install</span>		<span class="hljs-comment">#创建虚拟环境</span><br><br><span class="hljs-keyword">set</span> PIPENV_VENV_IN_PROJECT=<span class="hljs-number">1</span>	<span class="hljs-comment">#配置虚拟环境,linux系统将set 改为export,Windows系统项目不能在C盘</span><br><br>pipenv <span class="hljs-keyword">install</span>		<span class="hljs-comment">#在执行一遍</span><br><br></code></pre></td></tr></table></figure></li>
<li><h6 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h6><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">pipenv <span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure>
<p>安装flask模块</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">pipenv <span class="hljs-keyword">install</span> flask<br></code></pre></td></tr></table></figure>
<p>退出虚拟环境</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure>
<p>进入flask运行环境</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">flask <span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure>
<p>#启动内置服务器,host(IP)和port(端口)可以不写</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">flask <span class="hljs-built_in">run</span>  <span class="hljs-comment">--host **** --port**   </span><br><br><span class="hljs-comment">#	Ctrl+c  中断服务器</span><br></code></pre></td></tr></table></figure>

</li>
<li><h6 id="创建app-py入口文件"><a href="#创建app-py入口文件" class="headerlink" title="创建app.py入口文件"></a>创建app.py入口文件</h6><p>​    1.myflask目录下创建一个名为app.py的文件名</p>
<p>​    2.实例化flask对象</p>
<p>​    3.创建视图函数</p>
<p>​    4.创建路由</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-comment">#实例化flask对象</span><br>app = Flask(__name__)<br><br><span class="hljs-comment">#路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure>
<p>写好上面的代码后,执行flask run 运行</p>
</li>
<li><h6 id="进入开发模式"><a href="#进入开发模式" class="headerlink" title="进入开发模式"></a>进入开发模式</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#mac</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">FLASK_ENV</span>=development<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">FLASK_DEBUG</span>=<span class="hljs-literal">True</span><br><br><span class="hljs-comment">#windows</span><br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">FLASK_ENV</span>=development<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">FLASK_DEBUG</span>=<span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>






</li>
</ol>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-虚拟机安装</title>
    <url>/2021/04/15/Linux-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h4 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h4><p>VirtualBox由oracle公司出品，可以在window、linux、macos上运行</p>
<p>官方网站: <a href="https://www.virtualbox.org/">https://www.virtualbox.org/</a></p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>Linux是系统内核，单独使用linux内核会很困难，因此许多厂家以linux内核版本为基础，开发了功能丰富的组件，<br>常见的linux发行版本:</p>
<ol>
<li><p>Red Hat Linux(免费版Fedora Core，用于测试新内核)官方网址: http: //<a href="http://www.redhat.com/">www.redhat.com/</a><br>官方网址:<a href="https://getfedora.org/">https://getfedora.org/</a></p>
</li>
<li><p>Debian Linux<br>官方网址: <a href="http://www.debian.org/">http://www.debian.org/</a></p>
</li>
<li><p>Ubuntu Linux(在Debian的基础上改良的桌面工作环境)<br>官方网址: <a href="http://www.ubuntulinux.org/%E3%80%82">http://www.ubuntulinux.org/。</a></p>
</li>
<li><p>Centos (Red Hat的收费版的社区版，功能接近一致，不收费)<br>官方网址:<a href="https://www.centos.org/">https://www.centos.org/</a><br><a href="http://mirrors.163.com/centos/7.7.1908/isos/x86_64/">http://mirrors.163.com/centos/7.7.1908/isos/x86_64/</a></p>
</li>
</ol>
<h4 id="Linux文件组织"><a href="#Linux文件组织" class="headerlink" title="Linux文件组织"></a>Linux文件组织</h4><p>liunx没有盘符的概念，所有目录，文件都在/根目录下</p>
<p>主要的文件夹介绍:<br>/bin系统命令</p>
<p>/boot系统启动命令</p>
<p>/etc配置文件<br>/home普通用户主目录</p>
<p>/root root用户目录</p>
<p>/usr用户安装程序</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/02/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-update与delete语句</title>
    <url>/2021/04/06/mysql-update%E4%B8%8Edelete%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h6 id="delete语句"><a href="#delete语句" class="headerlink" title="delete语句"></a>delete语句</h6><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">#将符合<span class="hljs-keyword">condition</span>的记录删除<br><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">condition</span><br><br>例：<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users limit <span class="hljs-number">10</span>  	#删除<span class="hljs-number">10</span>条会员记录<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">&gt;</span><span class="hljs-number">10</span> <span class="hljs-keyword">and</span> id<span class="hljs-operator">&lt;</span><span class="hljs-number">15</span>		#删除id为<span class="hljs-number">10</span><span class="hljs-operator">~</span><span class="hljs-number">15</span>的记录<br></code></pre></td></tr></table></figure>


<h6 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#update用于更新数据表的记录</span><br><br>update table <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">field1</span>=new_val1,field2=new_val2 where condition<br><br>例：将<span class="hljs-attribute">ID</span>=3的会员名改为笑哈哈，性别改为女。<br>update<span class="hljs-built_in"> users </span><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">username</span>=<span class="hljs-string">&quot;笑哈哈&quot;</span>，sex=&quot;女&quot; where <span class="hljs-attribute">user_id</span>=3<br></code></pre></td></tr></table></figure>


<h6 id="delete-–-mysql实例"><a href="#delete-–-mysql实例" class="headerlink" title="delete – mysql实例"></a>delete – mysql实例</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> mysql.connector <span class="hljs-keyword">as</span> connector<br><br>cnx = connector.<span class="hljs-keyword">connect</span>(<span class="hljs-keyword">user</span>=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                        <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;tbz1548638666&#x27;</span>,<br>                        host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                        <span class="hljs-keyword">database</span>=<span class="hljs-string">&#x27;mydb&#x27;</span>)<br><br><span class="hljs-keyword">cursor</span> = cnx.<span class="hljs-keyword">cursor</span>()<br><br><span class="hljs-keyword">sql</span> = &quot;delete from users where realname like &#x27;%啦%&#x27;&quot;<br><span class="hljs-keyword">cursor</span>.<span class="hljs-keyword">execute</span>(<span class="hljs-keyword">sql</span>)<br>cnx.<span class="hljs-keyword">commit</span>()        #这句不能少<br>res = <span class="hljs-keyword">cursor</span>.rowcount<br>print(res)<br><br><span class="hljs-keyword">cursor</span>.<span class="hljs-keyword">close</span>()<br>cnx.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure>


<h6 id="delete-–-sqlalcheny实例"><a href="#delete-–-sqlalcheny实例" class="headerlink" title="delete – sqlalcheny实例"></a>delete – sqlalcheny实例</h6><figure class="highlight haskell"><table><tr><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta"># 需要安装SQLAlchemy，pymysql模块</span><br><br><span class="hljs-title">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine, Column, Integer, String, Enum<br><span class="hljs-title">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> sessionmaker<br><span class="hljs-title">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base<br><br><span class="hljs-meta"># 创建数据库引擎</span><br><span class="hljs-title">engine</span> = create_engine(<span class="hljs-string">&quot;mysql+pymysql://root:tbz1548638666@localhost/mydb&quot;</span>)<br><br><span class="hljs-meta">#创建会话对象，根据不同数据库引擎创建对应的会话对象</span><br><span class="hljs-type">Session</span> = sessionmaker(bind=engine)<br><br><span class="hljs-meta">#创建会话对象实例</span><br><span class="hljs-title">session</span> = <span class="hljs-type">Session</span>()<br><br><span class="hljs-meta">#Base为映射基类</span><br><span class="hljs-type">Base</span> = declarative_base()<br><br><span class="hljs-meta">#数据表模型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Users</span>(<span class="hljs-type">Base</span>):</span><br><span class="hljs-class">    __tablename__ = &quot;users&quot;</span><br><span class="hljs-class">    user_id = <span class="hljs-type">Column</span>(<span class="hljs-type">Integer</span>, <span class="hljs-title">primary_key</span>=<span class="hljs-type">True</span>)</span><br><span class="hljs-class">    username = <span class="hljs-type">Column</span>(<span class="hljs-type">String(25)</span>)</span><br><span class="hljs-class">    realname = <span class="hljs-type">Column</span>(<span class="hljs-type">String(25)</span>)</span><br><span class="hljs-class">    password = <span class="hljs-type">Column</span>(<span class="hljs-type">String(64)</span>)</span><br><span class="hljs-class"></span><br><span class="hljs-class"></span><br><span class="hljs-class">#以上都是准备</span><br><span class="hljs-class">#下面才是重点，删除的重点</span><br><span class="hljs-class"></span><br><span class="hljs-class">#获取用户</span><br><span class="hljs-class">def getUsers():</span><br><span class="hljs-class">	objs = session.query(<span class="hljs-type">Users</span>).filter(<span class="hljs-type">Users</span>.<span class="hljs-title">user_id</span> &gt;= 2, <span class="hljs-type">Users</span>.<span class="hljs-title">user_id</span> &lt;= 8).all()</span><br><span class="hljs-class">	return objs</span><br><span class="hljs-class"></span><br><span class="hljs-class">#删除得到的数据中的第一条</span><br><span class="hljs-class">session.delete(<span class="hljs-title">getUsers</span>()[0])</span><br><span class="hljs-class">session.commit()</span><br><span class="hljs-class"></span><br><span class="hljs-class">#修改数据</span><br><span class="hljs-class">#getUsers()[0].username=&quot;欢天喜地一家人&quot;	#修改第一条数据，getUsers()[0] 是一个对象，修改前先找到对象</span><br><span class="hljs-class">#session.commit()</span><br></code></pre></td></tr></table></figure>


<h6 id="update-mysql-实例"><a href="#update-mysql-实例" class="headerlink" title="update - mysql 实例"></a>update - mysql 实例</h6><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.connector <span class="hljs-keyword">as</span> connector<br><br>cnx = connector.connect(user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                        password=<span class="hljs-string">&#x27;tbz1548638666&#x27;</span>,<br>                        host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                        database=<span class="hljs-string">&#x27;mydb&#x27;</span>)<br><br>cursor = cnx.cursor()<br><br><span class="hljs-comment">#查询函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getUser</span>(<span class="hljs-params">user_id</span>):</span><br>    <span class="hljs-comment"># user_id = user_id</span><br>    sql = (<span class="hljs-string">&quot;select * from users where user_id=&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(user_id))<br>    cursor.execute(sql)<br>    res = cursor.fetchone()<br>    print(res)<br><br><span class="hljs-comment">#修改函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">updateUser</span>(<span class="hljs-params">user_id</span>):</span><br>    sql1 = <span class="hljs-string">&quot;update users set sex=&#x27;女&#x27; where user_id=&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(user_id)<br>    <span class="hljs-keyword">try</span>:<br>        cursor.execute(sql1)<br>        cnx.commit()<br>        print(<span class="hljs-string">&quot;修改成功&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        cnx.rollback()<br>        print(<span class="hljs-string">&quot;修改失败:&quot;</span>,e)<br><br><br>userid = <span class="hljs-number">2</span>			<span class="hljs-comment">#修改id为2的用户信息</span><br>getUser(userid) 	<span class="hljs-comment">#修改前</span><br>updateUser(userid)	<span class="hljs-comment">#修改</span><br>getUser(userid)		<span class="hljs-comment">#修改后</span><br><br><span class="hljs-comment">#关闭连接资源</span><br>cursor.close()<br>cnx.close()<br></code></pre></td></tr></table></figure>


<h6 id="update-sqlalchemy实例"><a href="#update-sqlalchemy实例" class="headerlink" title="update - sqlalchemy实例"></a>update - sqlalchemy实例</h6><p>在delete – sqlalcheny实例的最后</p>
<h6 id="锁的概念（行锁）"><a href="#锁的概念（行锁）" class="headerlink" title="锁的概念（行锁）"></a>锁的概念（行锁）</h6><p>通常情况下，update的时候，innodb引擎会给这一行加锁，mysql会自动加锁</p>
<p>例：当多人同时修改一个数据时，如何只保留第一个人修改的内容</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">update<span class="hljs-built_in"> users </span><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">age</span>=10 where <span class="hljs-attribute">user_id</span>=2 <span class="hljs-keyword">and</span> age is <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure>
<p>当age为空时可以修改，当age不为空时，不可修改，这个方法可以用作抽奖。</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-快速搭建静态博客</title>
    <url>/2021/02/13/hexo-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>第一步 </p>
<p>​    1.注册一个github账号   github.com</p>
<p>​    2.创建公开代码仓库</p>
<p>第二步</p>
<p>​    1.安装 nodejs 与 npm</p>
<p>​        到node官方网站下载安装包,直接安装就行,node安装好后npm也就安装好了</p>
<p>​        官方网站: <a href="https://nodejs.org/">https://nodejs.org</a></p>
<p>​    2.安装hexo</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure>

<p>​    3.本地创建目录:github-blog</p>
<p>​    4.进入目录并初始化目录,执行以下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> github-blog<br>hexo init<br>npm install<br></code></pre></td></tr></table></figure>
<p> 5.启动服务         执行以下代码</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure>
<p> 6.在浏览器中打开cmd返回的网址,这就是初始博客网页</p>
<p>第三步  上传第一篇文章</p>
<p>​    1.在github-blog目录中  执行以下代码</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">npm i <span class="hljs-comment">--save hexo-deployer-git</span><br></code></pre></td></tr></table></figure>
<p>​    2.编辑: _config.yml</p>
<p>​        在github-blog目录下找到 _config.yml 文件并打开</p>
<p>​        在这个文件末尾添加</p>
<p>​            </p>
<figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> https: <span class="hljs-comment">//github.com/username/username.github.io</span><br><span class="hljs-symbol">    branch:</span> master<br></code></pre></td></tr></table></figure>
<p>​        注意:  上面repo后面的网址填写github上自己创建个人公开仓库的网址</p>
<p>​    3.在github-blog目录中   </p>
<p>​                     执行:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d-g</span><br></code></pre></td></tr></table></figure>
<p>​        进入隐藏目录:  执行以下代码</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">.deploy_git</span><br></code></pre></td></tr></table></figure>
<p>​        声明github账号:  执行以下代码</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.email“youremail@github”<br>git config <span class="hljs-keyword">user</span>.name“yourname”<br></code></pre></td></tr></table></figure>
<p>​            注意: 上面yourname 和 youremail@github  填自己的用户名与邮箱</p>
<p>​        返回github-blog目录:</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">cd</span></span> ..<br>hexo d<br></code></pre></td></tr></table></figure>
<ol start="4">
<li><p>还是在github-blog目录中</p>
<p>   执行: hexo new “my-first-git”       # 引号里的是文章名</p>
<p>执行上面一步后,会得到一个路径</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">hexo new <span class="hljs-string">&quot;my-first-git&quot;</span>               # 执行这一句,得到下面两句<br><span class="hljs-builtin-name">INFO</span>  Validating config<br><span class="hljs-builtin-name">INFO</span>  Created: D:\python--start\github-blog\source\_posts\my-first-git.md<br></code></pre></td></tr></table></figure>
<p>到D:\python–start\github-blog\source_posts中打开  my-first-git.md文件 在这个文件中就可以写上自己的文章</p>
<p>5.git到远程仓库里</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d -g</span><br></code></pre></td></tr></table></figure>
<p>喝杯茶什么的就可以到远程仓库里看看了,这样就完成了上传文章.</p>
</li>
</ol>
<p>第四步  更换主题</p>
<p>​    1.到   <a href="https://hexo.io/themes/">https://hexo.io/themes/</a>   网站中找到自己需要的主题</p>
<p>​    2.按照文档说明操作就可以更换主题了</p>
<p>​        </p>
<p>hexo命令</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><code class="hljs excel">hexo <span class="hljs-built_in">clean</span>  清除缓存<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-三大范式</title>
    <url>/2021/04/09/mysql-%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/</url>
    <content><![CDATA[<h6 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h6><p>在关系模型中，对数据列的一个规范要求，所有的列都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式(1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。</p>
<p><strong>简而言之，第一范式就是无重复的列。</strong></p>
<h6 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h6><p>满足第二范式(2NF）必须先满足第一范式(1NF)。第二范式(2NF）要求数据库表中的每个实例或记录必须可以被唯一的区分,即每一行代表一个不同的实体。</p>
<h6 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h6><p>第三范式(3NF）是第二范式(2NF)的一个子集，即满足第三范式(3NF）必须满足第二范式(2NF)。简而言之，第三范式(3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-插入语句insert与SQLAlchemy原理</title>
    <url>/2021/04/04/mysql-%E6%8F%92%E5%85%A5%E8%AF%AD%E5%8F%A5insert%E4%B8%8ESQLAlchemy%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h6 id="插入语句（DML）"><a href="#插入语句（DML）" class="headerlink" title="插入语句（DML）"></a>插入语句（DML）</h6><ol>
<li><p>第一种写法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> (field1,field2,field3 ......)<br><span class="hljs-keyword">values</span>(val1,val2,val3 .....)<br><br>注：<span class="hljs-keyword">table</span>是表名，field是字段名，<span class="hljs-keyword">values</span>是值，插入值的时候字符串要加引号<br>不用列出所有字段，只需要列出需要赋值的字段，赋上相应的值就行，没有列出的字段使用默认值<br></code></pre></td></tr></table></figure></li>
<li><p>第二种写法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span><br><span class="hljs-keyword">values</span> (val1,val2,val3 ......)<br><br>注：值与字段数量必须匹配，且一一对应。<br></code></pre></td></tr></table></figure></li>
<li><p>第三种写法</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">insert into table <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">field1</span>=val1 , <span class="hljs-attribute">field2</span>=val2 <span class="hljs-built_in">..</span>.<br><br>注：字段名与值一一对应写出来，不容易写错，明了。<br></code></pre></td></tr></table></figure>


</li>
</ol>
<h6 id="mysql连接服务器"><a href="#mysql连接服务器" class="headerlink" title="mysql连接服务器"></a>mysql连接服务器</h6><p>安装连接器</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> mysql-connector-python<br></code></pre></td></tr></table></figure>
<p>通过mysql驱动连接数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.connector		<span class="hljs-comment">#导入模块</span><br><br><span class="hljs-comment">#连接数据库,其中user，passWord，host，database分别代表的是数据库的用户名，密码，IP，数据库名。</span><br>cnx = mysql.connector.connector(user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                               password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>                               host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                               database=<span class="hljs-string">&#x27;mydb&#x27;</span>)<br></code></pre></td></tr></table></figure>
<p>创建游标对象cursor</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">cursor = cnx.cursor()<br><br><span class="hljs-comment">#通过cursor对象执行SQL语句</span><br><span class="hljs-comment">#比如： </span><br>cursor.execute()		<span class="hljs-comment">#执行sql语句</span><br>cursor.fetchall()		<span class="hljs-comment">#执行查询</span><br><br>cnx.commit()			<span class="hljs-comment">#事务提交</span><br>cnx.rollback()			<span class="hljs-comment">#事务回滚</span><br><br>cursor.close()			<span class="hljs-comment">#关闭游标，重置所有结果</span><br><br>cnx.close()				<span class="hljs-comment">#释放连接资源</span><br></code></pre></td></tr></table></figure>
<p>事务</p>
<p>事务通常是需要执行一组sql语句</p>
<p>innodb是一个事务型的存储引擎</p>
<p>事务特性（ACID）</p>
<p>A ：atomicity  – 原子性，操作不可分割</p>
<p>C ：consistency   – 一致性，操作前后数据的完整性保持一致</p>
<p>I：isolation  – 隔离性，不同事务之间不影响</p>
<p>D：durability  – 持久性，事务执行后，对数据的更改是永久保存的</p>
<h6 id="python创建数据表"><a href="#python创建数据表" class="headerlink" title="python创建数据表"></a>python创建数据表</h6><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.connector <span class="hljs-keyword">as</span> connector<br><br>cnx = connector.connect(user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                                password=<span class="hljs-string">&#x27;tbz1548638666&#x27;</span>,<br>                                host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                                database=<span class="hljs-string">&#x27;mydb&#x27;</span>)<br><br>cursor = cnx.cursor()<br><br>sql = <span class="hljs-string">&quot;create table books(&quot;</span>\<br>      <span class="hljs-string">&quot;`book_id` int not null,&quot;</span>\<br>      <span class="hljs-string">&quot;`book_name` char(25) not null,&quot;</span>\<br>      <span class="hljs-string">&quot;`book_autor` char(25) not null,&quot;</span>\<br>      <span class="hljs-string">&quot;`book_pubdate` datetime not null,&quot;</span>\<br>      <span class="hljs-string">&quot;primary key (`book_id`) )&quot;</span><br><span class="hljs-keyword">try</span>:<br>    cursor.execute(sql)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    print(sql)<br>    print(e)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&quot;数据表创建成功&quot;</span>)<br><br>cursor.close()<br>cnx.close()<br></code></pre></td></tr></table></figure>


<h6 id="执行插入"><a href="#执行插入" class="headerlink" title="执行插入"></a>执行插入</h6><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.conmector <span class="hljs-keyword">as</span> connector<br>sql = <span class="hljs-string">&quot;INSERT INTO</span><br><span class="hljs-string">`mydb`.`users`&quot;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-数据库管理</title>
    <url>/2021/04/14/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h4 id="用户授权（DCL）"><a href="#用户授权（DCL）" class="headerlink" title="用户授权（DCL）"></a>用户授权（DCL）</h4><p>对已存在用户授权：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">mysql&gt;&gt;&gt;grant privileges_type <span class="hljs-literal">on</span> dbname.tablename <span class="hljs-keyword">to</span> username@host<br></code></pre></td></tr></table></figure>


<p>创建新用户并授权：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">mysql&gt;&gt;&gt;grant privileges_type <span class="hljs-literal">on</span> dbname.tablename <span class="hljs-keyword">to</span> username@host identified <span class="hljs-keyword">by</span><span class="hljs-string">&#x27;password&#x27;</span><br></code></pre></td></tr></table></figure>


<p>权限类型</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">privileges_type:</span><br>	<span class="hljs-attr">all privileges:</span> <span class="hljs-string">所有权限</span><br>	<span class="hljs-attr">select:</span> <span class="hljs-string">读取权限</span><br>	<span class="hljs-attr">delete:</span> <span class="hljs-string">删除权限</span><br>	<span class="hljs-attr">update:</span> <span class="hljs-string">更新权限</span><br>	<span class="hljs-attr">create:</span> <span class="hljs-string">创建权限</span><br>	<span class="hljs-attr">drop:</span> <span class="hljs-string">删除数据库，数据表权限</span><br></code></pre></td></tr></table></figure>


<h4 id="日志类型与配置"><a href="#日志类型与配置" class="headerlink" title="日志类型与配置"></a>日志类型与配置</h4><h6 id="日志类型："><a href="#日志类型：" class="headerlink" title="日志类型："></a>日志类型：</h6><ul>
<li>错误日志 - 记录数据库启动与停止，以及运行过程中发生的错误</li>
<li>二进制日志 - 记录了所有ddl与dml的语句，不包括select语句，即数据发生变化的过程</li>
<li>通用日志 - 记录了客户端的所有语句，一般情况下不开启</li>
<li>慢查询日志 - 记录了数据库查询超过一定时间的语句</li>
</ul>
<h6 id="日志配置："><a href="#日志配置：" class="headerlink" title="日志配置："></a>日志配置：</h6><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># my.cnf</span><br><span class="hljs-comment">#开启通用日志</span><br><span class="hljs-attr">general_log</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#通用日志地址</span><br><span class="hljs-attr">general_log_file</span>=/usr/local/mysql/logs/general.log<br><span class="hljs-comment">#开启慢查询日志</span><br><span class="hljs-attr">slow_query_log</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#慢查询日志地址</span><br><span class="hljs-attr">slow_query_log_file</span>=/usr/local/mysql/logs/slow.log<br><span class="hljs-comment">#慢查询阀值</span><br><span class="hljs-attr">long_query_time</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">log_output</span>= FILE<br><span class="hljs-comment">#二进制</span><br><span class="hljs-attr">--log-bin</span>=<span class="hljs-string">&quot;server_1_bin&quot;</span><br><span class="hljs-attr">server_id</span>=<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure>


<h4 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h4><h6 id="数据库备份使用mysqldump命令："><a href="#数据库备份使用mysqldump命令：" class="headerlink" title="数据库备份使用mysqldump命令："></a>数据库备份使用mysqldump命令：</h6><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#备份database库的tablename表</span><br><span class="hljs-attribute">shell</span>&gt;&gt;&gt;mysqldump -u accout -p database tablename<span class="hljs-number">1</span> tablename<span class="hljs-number">2</span> &gt;mycms.sql<br></code></pre></td></tr></table></figure>
<figure class="highlight vala"><table><tr><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#示例：</span><br><span class="hljs-meta">#1.备份mycms库的users表到mycms.sql文件中</span><br>	shell&gt;&gt;&gt;mysqldump -u root -p mycms users &gt; mycms.sql<br>	<br><span class="hljs-meta">#2.备份database库中的所有表</span><br>	shell &gt;&gt;&gt;mysqldump -u root -p mycms &gt; mycms.sql<br></code></pre></td></tr></table></figure>
<h6 id="备份多个数据库"><a href="#备份多个数据库" class="headerlink" title="备份多个数据库"></a>备份多个数据库</h6><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#备份database库的tablename表</span><br><span class="hljs-built_in">shell</span>&gt;&gt;&gt;mysqldump -u accout -p <span class="hljs-comment">--databases tablename1 tablename2 &gt;mycms.sql</span><br><br><span class="hljs-comment">#示例</span><br><span class="hljs-comment">#备份mycms，test数据库</span><br><span class="hljs-built_in">shell</span>&gt;&gt;&gt;mysqldump -u root -p <span class="hljs-comment">--databases mycms test &gt; my.sql</span><br><br><span class="hljs-comment">#备份database库中所有库</span><br><span class="hljs-built_in">shell</span>&gt;&gt;&gt;mysqldump -u root -p <span class="hljs-comment">--all-databases &gt; mycms.sql</span><br></code></pre></td></tr></table></figure>


<h6 id="备份注意："><a href="#备份注意：" class="headerlink" title="备份注意："></a>备份注意：</h6><p>备份期间，数据不应该发生变化，以保证数据的一致性</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">mysqldump <span class="hljs-literal">-u</span> <span class="hljs-literal">-p</span> <span class="hljs-literal">-l</span> <span class="hljs-operator">-f</span><br><br>在参数上加上 <span class="hljs-literal">-l</span> ,备份期间只能读不能写<br>在参数上加上 <span class="hljs-operator">-f</span> ,生成新的日志，这样在恢复数据时，可以已恢复备份后的数据<br></code></pre></td></tr></table></figure>


<h6 id="完全恢复备份"><a href="#完全恢复备份" class="headerlink" title="完全恢复备份"></a>完全恢复备份</h6><ol>
<li><p>将备份文件中的数据导入数据库(dbname:数据库名字，backupfile:备份的文件名，-u account -p :账户名)</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">mysql dbname &lt; backupfile -u account -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure></li>
<li><p>恢复备份之后到当前数据（二进制日志）</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">mysqlbinlog binlog文件 <span class="hljs-string">| mysql dbname -u root -p</span><br></code></pre></td></tr></table></figure>


</li>
</ol>
<p>日志时间点恢复</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-索引与联合查询</title>
    <url>/2021/04/11/mysql-%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><h6 id="什么是索引？"><a href="#什么是索引？" class="headerlink" title="什么是索引？"></a>什么是索引？</h6><p>MySQL中的索引是以B树（B-tree）结构为索引数据结构，各引擎使用的方式有所不同，innodb引擎以B+Tree结构构造索引</p>
<p>除了B树索引还有HASH索引</p>
<h6 id="索引策略"><a href="#索引策略" class="headerlink" title="索引策略"></a>索引策略</h6><p>分类：</p>
<ul>
<li>普通索引(INDEX)</li>
<li>唯一索引(UNIQUE)</li>
<li>独立列索引</li>
<li>多列索引</li>
<li>全文索引(FULL TEXT)</li>
<li>空间索引(SPATIAL)</li>
</ul>
<h6 id="创建与删除索引"><a href="#创建与删除索引" class="headerlink" title="创建与删除索引"></a>创建与删除索引</h6><figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql">#创建时指定索引：<br><span class="hljs-keyword">create</span> table <span class="hljs-symbol">`table_name`</span>(<br>	id int <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>	field1 int <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>	field2 char(<span class="hljs-number">25</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>	<span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span>(<span class="hljs-symbol">`id`</span>),<br>	<span class="hljs-keyword">key</span> <span class="hljs-symbol">`index_name`</span>(<span class="hljs-symbol">`field1`</span>)<br>	);<br>	<br>#为已经存在的表添加索引 ：<br>#方法一：<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span><br>	<span class="hljs-keyword">index</span> name<br><span class="hljs-keyword">on</span> table(field)<br><br>#方法二：<br><span class="hljs-keyword">alter</span> table<span class="hljs-symbol">`table`</span><br>add <span class="hljs-keyword">index</span> <span class="hljs-symbol">`index_name`</span> (<span class="hljs-symbol">`field`</span>);<br><br>#删除索引<br>alter table `table`<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> <span class="hljs-symbol">`index_name`</span>;<br><br><br><br></code></pre></td></tr></table></figure>
<p>也可以用MySQLworkbench可视化创建于删除索引</p>
<h6 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h6><ol>
<li>使用在where条件中出现的列，而不是select中出现的列</li>
<li>索引列的数据分布。如果你有100万条件记录，然后根据性别索引，每个索引依然要扫描50万，没有太大意义，但是根据省份，城市这种多样化的字段做索引就比较有意义</li>
<li>索引列长度尽量短。如果一个列的前缀索引就可以完成索引，比如真实姓名的姓部分，就可以只用姓部分做索引，而不要姓名整列做索引</li>
<li>索引不是越多越好,索引影响插入性能</li>
</ol>
<h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><h6 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h6><p>关联表之间必须有相互匹配的记录</p>
<p>隐式语法：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#user_id=1的用户的所有文章</span><br>select * <span class="hljs-keyword">from</span> users,articles<br>	where users.<span class="hljs-attribute">user_id</span>=articles.author <span class="hljs-keyword">and</span> <span class="hljs-attribute">user_id</span>=1;<br></code></pre></td></tr></table></figure>
<p>显式语法：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#user_id=1的用户的所有文章</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users<br>	<span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> articles <span class="hljs-keyword">on</span> users.user_id=articles.article_author <span class="hljs-keyword">where</span> user_id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>


<h6 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h6><p>关联表之间不需要相互匹配，分左连接，右连接</p>
<p>左连接，就是包含左边的这张表的查询记录，不管右边的表有没有对应的记录</p>
<p>查询语法：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#以用户表为基准，查询该用户的文章</span><br>select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>left join articles<br>	on users.<span class="hljs-attribute">user_id</span>=articles.article_author where <span class="hljs-attribute">user_id</span>=2<br></code></pre></td></tr></table></figure>


<h6 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h6><p>一条查询语句的结果作为另一条查询的条件</p>
<p>查询语法：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span>)<br></code></pre></td></tr></table></figure>
<p>子查询除了可以用in之外，还可以not in , != , = , exits(结果存在) , not exits(结果不存在)</p>
<h6 id="记录联合"><a href="#记录联合" class="headerlink" title="记录联合"></a>记录联合</h6><p>union all（多个查询结果拼接，必须字段数量一致）</p>
<p>查询语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">condition</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">condition</span><br></code></pre></td></tr></table></figure>


<p>union （与union all 不同的是去重复）</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-查询语句</title>
    <url>/2021/04/05/mysql-%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h4 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h4><h6 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h6><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> <span class="hljs-number">10</span> * <span class="hljs-number">10</span>			#计算<span class="hljs-number">10</span>*<span class="hljs-number">10</span><br><span class="hljs-attribute">select</span> <span class="hljs-number">10</span> * <span class="hljs-number">10</span> as num   #num=<span class="hljs-number">10</span>*<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure>


<h6 id="从表中检索数据"><a href="#从表中检索数据" class="headerlink" title="从表中检索数据"></a>从表中检索数据</h6><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">检索所有字段：<br>select * from table<br><br>检索特定字段：<br>select field1, field2, field3 from table<br><br>select &#96;field1&#96; as un, &#96;field2&#96; as rn from table	#将字段重命名，便于引用<br></code></pre></td></tr></table></figure>


<h6 id="where条件查询语句"><a href="#where条件查询语句" class="headerlink" title="where条件查询语句"></a>where条件查询语句</h6><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select * from table where condition<br><br>&#x3D; , &gt; , &lt; , &gt;&#x3D; , &lt;&#x3D;<br>&lt;&gt; , !&#x3D;  #这两个都是不等于<br>&lt;&#x3D;&gt;      #null相等<br>is null			#是NULL值<br>is not null		#不是NULL值<br><br>例：<br>select * from users where user_id&gt;100;<br>select * from users where user_id&lt;&gt;100;<br><br></code></pre></td></tr></table></figure>
<h6 id="between-区间查询"><a href="#between-区间查询" class="headerlink" title="between-区间查询"></a>between-区间查询</h6><figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> table <span class="hljs-keyword">where</span> field <span class="hljs-keyword">between</span> <span class="hljs-built_in">min</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">max</span>;<br><br>例：<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> age <span class="hljs-keyword">between</span> <span class="hljs-number">18</span> <span class="hljs-keyword">and</span> <span class="hljs-number">25</span>;<br></code></pre></td></tr></table></figure>


<h6 id="in-存在于指定集合"><a href="#in-存在于指定集合" class="headerlink" title="in -存在于指定集合"></a>in -存在于指定集合</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-function"><span class="hljs-keyword">from</span> table <span class="hljs-keyword">where</span> field <span class="hljs-title">in</span> (<span class="hljs-params">x,y,z</span>)</span>;<br><br>例：<br><span class="hljs-keyword">select</span> * <span class="hljs-function"><span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id <span class="hljs-title">in</span> (<span class="hljs-params"><span class="hljs-number">2</span>,<span class="hljs-number">4</span></span>)</span>;<br></code></pre></td></tr></table></figure>


<p>模糊查询</p>
<h6 id="like-通配符-匹配"><a href="#like-通配符-匹配" class="headerlink" title="like -通配符%匹配"></a>like -通配符%匹配</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">%表示任意一个字符，_表示一个字符<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> field <span class="hljs-keyword">like</span> &quot;%博%&quot;;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> &quot;%博%&quot;;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> &quot;_博%&quot;;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> username <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> &quot;_博%&quot;;<br></code></pre></td></tr></table></figure>
<h6 id="regexp-正则匹配"><a href="#regexp-正则匹配" class="headerlink" title="regexp - 正则匹配"></a>regexp - 正则匹配</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">a-z</span>]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125; <span class="hljs-meta">#3个字母</span><br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username regexp <span class="hljs-string">&quot;[a-z]+x&quot;</span><br></code></pre></td></tr></table></figure>


<h6 id="组合查询（and-，or）"><a href="#组合查询（and-，or）" class="headerlink" title="组合查询（and ，or）"></a>组合查询（and ，or）</h6><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> (username <span class="hljs-keyword">like</span> <span class="hljs-string">&quot;%博%&quot;</span>) and (user_id&gt;<span class="hljs-number">3</span>);<br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> (age&lt;<span class="hljs-number">18</span>) or (age&gt;<span class="hljs-number">60</span>)<br></code></pre></td></tr></table></figure>


<h4 id="查询实例"><a href="#查询实例" class="headerlink" title="查询实例"></a>查询实例</h4><h6 id="python中查询实例"><a href="#python中查询实例" class="headerlink" title="python中查询实例"></a>python中查询实例</h6><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.connector <span class="hljs-keyword">as</span> connector<br><br><span class="hljs-comment">#连接数据库</span><br>cnx = connector.connect(user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                        password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>                        host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                        database=<span class="hljs-string">&#x27;mydb&#x27;</span>)<br><br><span class="hljs-comment">#创建游标对象</span><br>cursor = cnx.cursor()<br><br><span class="hljs-comment">#sql语句</span><br>sql = <span class="hljs-string">&quot;select * from mydb.users where realname like &#x27;%博%&#x27;&quot;</span><br><br><span class="hljs-comment">#将sql语句提交并执行</span><br>cursor.execute(sql)<br><br><span class="hljs-comment">#查询到的第一条结果</span><br>res = cursor.fetchone()<br>print(<span class="hljs-string">&quot;第一条&quot;</span>)<br>print(res)<br><br><span class="hljs-comment">#将查询到的前3条记录返回，括号里是几就返回几条</span><br><span class="hljs-comment"># res1 = cursor.fetchmany(3)</span><br><span class="hljs-comment"># print(&quot;前3条&quot;)</span><br><span class="hljs-comment"># print(res1)</span><br><br><span class="hljs-comment">#查询并返回所有记录</span><br><span class="hljs-comment"># res_all = cursor.fetchall()</span><br><span class="hljs-comment"># print(&quot;所有记录&quot;)</span><br><span class="hljs-comment"># print(res_all)</span><br></code></pre></td></tr></table></figure>


<h6 id="SQLAlchemy-查询实例"><a href="#SQLAlchemy-查询实例" class="headerlink" title="SQLAlchemy-查询实例"></a>SQLAlchemy-查询实例</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"># 需要安装SQLAlchemy，pymysql模块<br><br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine, <span class="hljs-keyword">Column</span>, <span class="hljs-type">Integer</span>, String, Enum<br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> sessionmaker<br><span class="hljs-keyword">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base<br><br># 创建数据库引擎<br>engine = create_engine(&quot;mysql+pymysql://root:tbz1548638666@localhost/mydb&quot;)<br><br>#创建会话对象，根据不同数据库引擎创建对应的会话对象<br><span class="hljs-keyword">Session</span> = sessionmaker(bind=engine)<br><br>#创建会话对象实例<br><span class="hljs-keyword">session</span> = <span class="hljs-keyword">Session</span>()<br><br><span class="hljs-meta">#Base为映射基类</span><br>Base = declarative_base()<br><br>#数据表模型<br><span class="hljs-keyword">class</span> Users(Base):<br>    __tablename__ = &quot;users&quot;<br>    user_id = <span class="hljs-keyword">Column</span>(<span class="hljs-type">Integer</span>, primary_key=<span class="hljs-keyword">True</span>)<br>    username = <span class="hljs-keyword">Column</span>(String(<span class="hljs-number">25</span>))<br>    realname = <span class="hljs-keyword">Column</span>(String(<span class="hljs-number">25</span>))<br>    <span class="hljs-keyword">password</span> = <span class="hljs-keyword">Column</span>(String(<span class="hljs-number">64</span>))<br><br><br>#查询<br>res = <span class="hljs-keyword">session</span>.query(Users, Users.realname).<span class="hljs-keyword">filter</span>(Users.realname.<span class="hljs-keyword">like</span>(&quot;%啦%&quot;)).<span class="hljs-keyword">limit</span>(<span class="hljs-number">3</span>).<span class="hljs-keyword">all</span>()<br><br>print(res)<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql-统计与排序</title>
    <url>/2021/04/07/mysql-%E7%BB%9F%E8%AE%A1%E4%B8%8E%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h6 id="limit限制"><a href="#limit限制" class="headerlink" title="limit限制"></a>limit限制</h6><p>当数据很多的时候，往往需要添加限制，取出想要的结果</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">table</span> <span class="hljs-keyword">limit</span> offset_start,<span class="hljs-built_in">row_count</span><br><br>offset_start : 偏移起始位置，默认为<span class="hljs-number">0</span>，查询结果不包含起始位置<br><span class="hljs-built_in">row_count</span> : 记录数，需要查询并显示多少条记录<br><br>例：<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">10</span>  #取出前<span class="hljs-number">10</span>条记录<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>   	#也是取出前<span class="hljs-number">10</span>条记录<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>,<span class="hljs-number">15</span>  #从<span class="hljs-number">10</span>的位置往后取出<span class="hljs-number">15</span>条记录<br></code></pre></td></tr></table></figure>


<h6 id="count统计"><a href="#count统计" class="headerlink" title="count统计"></a>count统计</h6><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span>			#<span class="hljs-keyword">table</span>中总共有多少条记录<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span>			#全部列统计，相当于统计有多少条记录<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(field1) <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span>		#<span class="hljs-keyword">table</span>中 field1 字段有多少个<br><br>例：统计上海（<span class="hljs-number">021</span>）的会员数量<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> city<span class="hljs-operator">=</span><span class="hljs-number">021</span><br></code></pre></td></tr></table></figure>


<h6 id="sum-求和-—-avg-求平均值—-max-min-最大值与最小值"><a href="#sum-求和-—-avg-求平均值—-max-min-最大值与最小值" class="headerlink" title="sum-求和 —-avg-求平均值—-max,min-最大值与最小值"></a>sum-求和 —-avg-求平均值—-max,min-最大值与最小值</h6><p>sum对某个列进行求和，count是统计有多少条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(field) <span class="hljs-keyword">from</span> tables<br><br>例：统计上海会员money总额<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(money) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> city<span class="hljs-operator">=</span><span class="hljs-number">021</span><br><br>统计北京会员的age总和<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> city<span class="hljs-operator">=</span><span class="hljs-number">010</span><br><br>将<span class="hljs-built_in">sum</span>(age)替换成<span class="hljs-built_in">avg</span>(age)就可以了，其他同理<br></code></pre></td></tr></table></figure>


<h6 id="group-by-分组统计"><a href="#group-by-分组统计" class="headerlink" title="group by 分组统计"></a>group by 分组统计</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> func <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> field<br><br>例：<br>查询各个城市最有钱的<br><span class="hljs-keyword">select</span> max(<span class="hljs-type">money</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> city<br><br>统计各个城市的会员数量<br><span class="hljs-keyword">select</span> count(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> city<br><br><br>在count（<span class="hljs-number">1</span>）前加上city就可以分辨出是哪个城市有多少人<br><span class="hljs-keyword">select</span> city,count(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> city<br></code></pre></td></tr></table></figure>


<h6 id="sqlalchemy中如何查询"><a href="#sqlalchemy中如何查询" class="headerlink" title="sqlalchemy中如何查询"></a>sqlalchemy中如何查询</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># -*- coding=utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> select_sqlalchemy import session, Users<br><span class="hljs-keyword">from</span> sqlalchemy import func<br><br><br><span class="hljs-comment"># count方法不能用于分组统计</span><br><span class="hljs-comment"># res = session.query(Users).count()</span><br><br><span class="hljs-comment"># 使用func</span><br><span class="hljs-comment"># count</span><br>res = session.query(func.count(1),Users.city).group_by(Users.city).all()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;count:&quot;</span>,res)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;*&quot;</span><span class="hljs-number">*100</span>)<br><span class="hljs-comment"># avg</span><br>res = session.query(func.avg(Users.age),Users.city).group_by(Users.city).all()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;avg:&quot;</span>, res)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;*&quot;</span><span class="hljs-number">*100</span>)<br><br><span class="hljs-comment"># sum</span><br>res = session.query(func.sum(Users.age),Users.city).group_by(Users.city).all()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;sum:&quot;</span>, res)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;*&quot;</span><span class="hljs-number">*100</span>)<br><br><span class="hljs-comment">#max</span><br>res = session.query(func.max(Users.age),Users.city).group_by(Users.city).all()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;max:&quot;</span>,res)<br></code></pre></td></tr></table></figure>


<h6 id="having-对查询结果过滤"><a href="#having-对查询结果过滤" class="headerlink" title="having 对查询结果过滤"></a>having 对查询结果过滤</h6><p>where 条件语句是对field字段的值进行过滤查询，有时候我们需要对查询结果字段进行过滤，比如count的结果中大于某个值进行过滤，这时候需要having。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">as</span> num <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> field <span class="hljs-keyword">having</span> num&gt;<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure>


<h6 id="order-by-排序"><a href="#order-by-排序" class="headerlink" title="order by  排序"></a>order by  排序</h6><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">根据字段值排序<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> field <span class="hljs-keyword">desc</span>|<span class="hljs-keyword">asc</span><br><span class="hljs-keyword">desc</span>:降序<br><span class="hljs-keyword">asc</span>:升序<br><br>例：<br>根据用户ID降序排列<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span> oeder <span class="hljs-keyword">by</span> user_id <span class="hljs-keyword">desc</span><br><br>根据用户ID升序排列<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span> oeder <span class="hljs-keyword">by</span> user_id <span class="hljs-keyword">asc</span><br></code></pre></td></tr></table></figure>


<h6 id="sqlalchemy中如何查询-1"><a href="#sqlalchemy中如何查询-1" class="headerlink" title="sqlalchemy中如何查询"></a>sqlalchemy中如何查询</h6><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"># -*- coding=utf-<span class="hljs-number">8</span> -*-<br><br>from select_sqlalchemy import session, Users<br>from sqlalchemy import func<br><br><br><br>res = session.query(Users,<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Users</span>.</span></span>user_id,<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Users</span>.</span></span>username, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Users</span>.</span></span>city)\<br>             .order<span class="hljs-constructor">_by(Users.<span class="hljs-params">user_id</span>.<span class="hljs-params">desc</span>()</span>).limit(<span class="hljs-number">10000</span>).offset(<span class="hljs-number">10</span>).all<span class="hljs-literal">()</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> res:<br>    print(item)<br></code></pre></td></tr></table></figure>


<h6 id="翻页实现"><a href="#翻页实现" class="headerlink" title="翻页实现"></a>翻页实现</h6><ol>
<li>更具条件，使用count（）获得记录总数total</li>
<li>设定每页显示记录数pagesize</li>
<li>总页数计算公式：total_page=ceil(total/pagesize)</li>
<li>根据当前页数查询偏移：start = (current_page-1)*pagesize</li>
<li>使用limit获得相应的记录：limit start,pagesize</li>
</ol>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># -*- coding=utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> select_sqlalchemy import session, Users<br><span class="hljs-keyword">from</span> math import ceil<br><br><span class="hljs-comment"># 每页显示条数</span><br>PAGE_SIZE = 10<br><br><span class="hljs-comment"># 查询获得总条数</span><br>total = session.query(Users).count()<br><span class="hljs-builtin-name">print</span>(total)<br><br><span class="hljs-comment"># 根据总条数计算总页数</span><br>total_page = ceil(total/PAGE_SIZE)<br><span class="hljs-builtin-name">print</span>(total_page)<br><br><span class="hljs-comment"># 根据当前页计算start位置</span><br><span class="hljs-comment"># 第一页</span><br><span class="hljs-attribute">CURRENT_PAGE</span>=10<br><span class="hljs-comment"># limit start, offset</span><br><span class="hljs-comment"># 第一页是limit 0,10</span><br><span class="hljs-comment"># 因此计算方法为：</span><br>start = (CURRENT_PAGE-1)*PAGE_SIZE<br><br>res = session.query(Users).offset(start).limit(PAGE_SIZE).all()<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> res:<br>    <span class="hljs-builtin-name">print</span>(item.user_id, item.username)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql安装与入门</title>
    <url>/2021/03/31/mysql%E5%AE%89%E8%A3%85%E4%B8%8E%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>MySQL与MariaDB可以互相替代，有一些兼容性问题</p>
<h3 id="MySQL下载与安装（windows）"><a href="#MySQL下载与安装（windows）" class="headerlink" title="MySQL下载与安装（windows）"></a>MySQL下载与安装（windows）</h3><ol>
<li>打开<a href="http://www.mysql.com网页,进行下载相关版本,选择zip/">www.mysql.com网页，进行下载相关版本,选择ZIP</a> Archive下载</li>
<li>将下载好的文件解压缩</li>
<li>打开文件夹bin目录，其中MySQL.exe 是 运行MySQL客户端，mysqld.exe是 运行mysql服务器</li>
</ol>
<p>运行mysql</p>
<ol>
<li><p>初始化数据库date目录</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><code class="hljs coffeescript">打开cmd进入到bin目录执行以下命令<br>initialize是初始化，<span class="hljs-built_in">console</span>是显示输出，用于查看初始密码（这两个不能少）<br><br>mysqld.exe --initialize --<span class="hljs-built_in">console</span><br><br>得到root@localhost:后面跟的密码（记住这个密码）<br></code></pre></td></tr></table></figure></li>
<li><p>运行服务器</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">mysqld.exe <span class="hljs-comment">--console</span><br></code></pre></td></tr></table></figure></li>
<li><p>连接mysql服务器</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">mysql<span class="hljs-selector-class">.exe</span> -u root -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure>
<p>然后输入上面的密码，显示mysql &gt;就连接成功了</p>
<p>修改密码：在mysql&gt;后边输入：alter user user() identified by ‘123456’;  #123456就是密码</p>
</li>
<li><p>将mysql安装成服务（在bin目录下执行以下命令）（必须在管理员身份运行cmd）</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">mysqld.exe <span class="hljs-keyword">install</span>			<span class="hljs-comment">#安装服务</span><br><br>mysqld.exe --<span class="hljs-keyword">remove</span> mysql	<span class="hljs-comment">#卸载服务（需要卸载时运行它）</span><br></code></pre></td></tr></table></figure>


<p>   在windows开始处搜索 服务 ，打开服务，找到mysql点击以下，选择启动服务。</p>
</li>
<li><p>配置文件</p>
<p>在mysql安装目录下创建my.ini文件，内容如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[client]</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">default-character-set</span>=utf8<br><br><span class="hljs-section">[mysqld]</span><br><br><span class="hljs-comment">#设置自己mysql的安装目录</span><br><span class="hljs-comment">#basedir=D:\mysql-5.7.28-winx64</span><br><span class="hljs-attr">basedir</span>=C:\Users\<span class="hljs-number">15486</span>\c-exe\mysql\mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">28</span>-winx64<br><br><span class="hljs-comment">#设置为mysql的数据目录（date就是数据目录）</span><br><span class="hljs-comment">#datadir=D:\mysql-5.7.28-winx64\data</span><br><span class="hljs-attr">datadir</span>=C:\Users\<span class="hljs-number">15486</span>\c-exe\mysql\mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">28</span>-winx64\data<br><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">character_set_server</span>=utf8<br><br><span class="hljs-comment">#服务器接收的数据包大小限制</span><br><span class="hljs-attr">max_allowed_packet</span>=<span class="hljs-number">8</span>M<br></code></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="sql语句入门"><a href="#sql语句入门" class="headerlink" title="sql语句入门"></a>sql语句入门</h3><h6 id="SQL组成–DDL"><a href="#SQL组成–DDL" class="headerlink" title="SQL组成–DDL"></a>SQL组成–DDL</h6><p>​    数据定义语言，通过这些语句来创建数据库，数据表，字段，主键，索引等等，包含：create、drop、alter等</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">create</span> database dbname；		<span class="hljs-meta">#创建数据库，dbname为数据库名</span><br><span class="hljs-keyword">show</span> databases；				<span class="hljs-meta">#查看有哪些数据库</span><br><span class="hljs-keyword">use</span> dbname；					<span class="hljs-meta">#选择数据库</span><br><span class="hljs-keyword">show</span> tables；				<span class="hljs-meta">#查看数据表</span><br><span class="hljs-keyword">show</span> fields from users;		<span class="hljs-meta">#查看数据表明细（users是数据表名）</span><br><span class="hljs-built_in">drop</span> database dbname；		<span class="hljs-meta">#删除数据库</span><br><br><br><br>tips：每个语句后面记得加封号（；），不然会报错<br></code></pre></td></tr></table></figure>

<h6 id="SQL组成–DML"><a href="#SQL组成–DML" class="headerlink" title="SQL组成–DML"></a>SQL组成–DML</h6><p>​    数据库操作语言，通过这些语句来插入，更新，删除数据，包含： insert、update、delete等</p>
<h6 id="SQL组成–DQL"><a href="#SQL组成–DQL" class="headerlink" title="SQL组成–DQL"></a>SQL组成–DQL</h6><p>​    数据库查询语言，通过这些语句检索数据，包含： select、order by、group by等</p>
<h6 id="SQL组成–DCL"><a href="#SQL组成–DCL" class="headerlink" title="SQL组成–DCL"></a>SQL组成–DCL</h6><p>​    数据库控制语言，通过这些语句控制数据访问权限，包含：grant等</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-数组</title>
    <url>/2021/06/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h4 id="数组：array"><a href="#数组：array" class="headerlink" title="数组：array"></a>数组：array</h4><h6 id="array创建实例："><a href="#array创建实例：" class="headerlink" title="array创建实例："></a>array创建实例：</h6><figure class="highlight smali"><table><tr><td class="code"><pre><code class="hljs smali">from<span class="hljs-built_in"> array </span>import array<br>myarray1 = array.array(<span class="hljs-string">&quot;i&quot;</span>,[1,2,3,4])			<span class="hljs-comment">#i是类型码</span><br>myarray2 = array.array(<span class="hljs-string">&quot;u&quot;</span>,[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>])<br></code></pre></td></tr></table></figure>


<h6 id="array-aray类型特点"><a href="#array-aray类型特点" class="headerlink" title="array.aray类型特点"></a>array.aray类型特点</h6><p>1.成员只能是字符、整数、浮点数类型</p>
<p>2.所有的成员必须是统一的类型</p>
<p>3.可以通过array.typecodes查看类型码</p>
<h6 id="array的使用"><a href="#array的使用" class="headerlink" title="array的使用"></a>array的使用</h6><figure class="highlight golo"><table><tr><td class="code"><pre><code class="hljs golo"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">array</span><br><br>myarray1 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;i&quot;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>])<br>myarray2 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;u&quot;</span>, &#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">23</span>, <span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-number">24</span>,<span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-number">25</span>&#125;)<br>myarray3 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;i&quot;</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>])<br>myarray4 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;i&quot;</span>, [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>])<br><br><span class="hljs-comment"># 以下依次是 统计、插入、弹出、删除、翻转、添加数组、获取最小index</span><br>myarray1.count(<span class="hljs-number">3</span>)   <span class="hljs-comment"># myarray中3出现了几次</span><br>myarray1.insert(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)      <span class="hljs-comment"># 括号中0代表在第一个位置添加，10代表添加10</span><br>myarray1.pop(<span class="hljs-number">0</span>)             <span class="hljs-comment"># 弹出第一个数</span><br>myarray3.remove(<span class="hljs-number">2</span>)          <span class="hljs-comment"># 删除数组中第一个为2的数</span><br>myarray1.reverse()          <span class="hljs-comment"># 翻转顺序</span><br>myarray4.extend(myarray1)   <span class="hljs-comment"># 将数组1添加到数组4中</span><br>myarray3.index(<span class="hljs-number">3</span>)           <span class="hljs-comment"># 获取3的最小序列数</span><br><br><span class="hljs-keyword">print</span>(myarray1)<br><span class="hljs-keyword">print</span>(myarray3)<br><span class="hljs-keyword">print</span>(myarray4)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;已完成&quot;</span>)<br><br><span class="hljs-keyword">print</span>(<br>    <span class="hljs-string">&quot;字节&quot;</span>, myarray1.itemsize, <span class="hljs-string">&quot;\n&quot;</span>      <span class="hljs-comment"># 查看数组1的每一项占几个字节</span><br>    <span class="hljs-string">&quot;类型码&quot;</span>, myarray1.typecode, <span class="hljs-string">&quot;\n&quot;</span>      <span class="hljs-comment"># 数组使用的类型码</span><br>    <span class="hljs-string">&quot;内存地址，成员数量&quot;</span>, myarray1.buffer_info()   <span class="hljs-comment"># 返回内存地址和成员数量</span><br><br>)<br><br><span class="hljs-comment"># 创建数组的3种方式</span><br><br><span class="hljs-comment"># 1.从字节创建</span><br>myarray5 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;i&quot;</span>, [])<br>myarray5.frombytes(b<span class="hljs-string">&quot;tanbozhi&quot;</span>)     <span class="hljs-comment"># 在数组5中写入tanbozhi</span><br><span class="hljs-keyword">print</span>(myarray5.tobytes())           <span class="hljs-comment"># 将字节转换成文字</span><br><br><span class="hljs-comment"># 2.从文件创建</span><br><span class="hljs-comment"># 获取N个对象，取决于typecode</span><br>myarray6 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;i&quot;</span>, [])<br>myarray6.fromfile(open(<span class="hljs-string">&quot;myarray_1.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>), <span class="hljs-number">10</span>)      <span class="hljs-comment"># 从文件中读出数据，10：其中i代表4个字节，这儿读取10个i，也就是40个字节</span><br><span class="hljs-keyword">print</span>(myarray6.tobytes())                               <span class="hljs-comment"># 将字节转换成文字</span><br><span class="hljs-comment"># 写入文件</span><br>myarray6.tofile(open(<span class="hljs-string">&quot;myarray_2.txt&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>))<br><br><span class="hljs-comment"># 3.列表追加</span><br>myarray7 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;i&quot;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>myarray7.fromlist([<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>])<br><span class="hljs-keyword">print</span>(myarray7)<br><br><span class="hljs-comment"># 对数组的每一项进行字节对调，此方法只支持1,2,4,8字节的值</span><br>myarray7.byteswap()<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;字节交换：&quot;</span>, myarray7.tobytes())<br><br><span class="hljs-comment"># 转换为普通列表</span><br>myarray1.tolist()<br><span class="hljs-comment"># 转换为Unicode字符串,转换后可以切片什么的都可以</span><br><span class="hljs-comment">#myarray1.tounicode()   数组5转换不了unicode这儿会报错</span><br><br><span class="hljs-comment">#查看内存大小</span><br>sys.getsizeof(myarray1)<br><span class="hljs-comment"># array数组的内存占用会比列表内存占用小</span><br></code></pre></td></tr></table></figure>


<h4 id="array与list的区别"><a href="#array与list的区别" class="headerlink" title="array与list的区别"></a>array与list的区别</h4><h6 id="array与list在底层中都是以动态数组实现"><a href="#array与list在底层中都是以动态数组实现" class="headerlink" title="array与list在底层中都是以动态数组实现"></a>array与list在底层中都是以动态数组实现</h6><p>1.列表是指针数组</p>
<p>2.数组是值数组</p>
<p>说明:在C语言中(cpython),数组都是由一段连续的内存空间组成，<br>动态数组在运行中，可以修改长度</p>
<p><strong>静态数组</strong>：申请后，内存空间保持不变</p>
<p><strong>动态数组</strong>：申请后，内存空间可以改变，空间不够时会重新申请一倍的空间并将原来的数据复制过来，释放原数组</p>
<p><strong>列表的存储方式</strong>：列表的每一项存储的是相应元素的内存地址，根据地址找到相应的元素</p>
<p><strong>array的存储方式</strong>：直接存储元素值</p>
<p>相同的元素组成，array占用的内存要小。为什么array可以直接存储元素值，而列表不行呢，因为array类型统一，可以预测数组大小，而list类型值不可预测，无法预测所需内存空间大小，使用指针地址可以避免</p>
<h4 id="数组的时间复杂度"><a href="#数组的时间复杂度" class="headerlink" title="数组的时间复杂度"></a>数组的时间复杂度</h4><p>用O表示</p>
<p>在计算机中执行程序，都需要耗费CPU一定的运算时间，有的时候耗费时间与数据量存在关系，可能是线性关系，对数关系，指数关系，衡量这种关系通常用一种称为O(n)的方法<br>比如:O(1),就是表示，不管多少数据，操作的时间都是与1个数据一样<br>o(n),就是表示，随着数据量增加(n在增加)，那么所耗的时间也随着增加n倍</p>
<p>数组各项操作时间复杂度</p>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">复杂度</th>
</tr>
</thead>
<tbody><tr>
<td align="center">从第i个位置访问</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="center">在第i个位置替换</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="center">从末尾插入数据</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="center">从末尾删除</td>
<td align="center">O(1)</td>
</tr>
<tr>
<td align="center">从第i个位置插入</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="center">从第i个位置删除</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="center">增加容量</td>
<td align="center">O(n)</td>
</tr>
<tr>
<td align="center">减小容量</td>
<td align="center">O(n)</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-栈</title>
    <url>/2021/06/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
    <content><![CDATA[<h4 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h4><p>什么是栈</p>
<p>栈的python实现</p>
<h4 id="什么是栈？"><a href="#什么是栈？" class="headerlink" title="什么是栈？"></a>什么是栈？</h4><p>栈是一种线性表（**<em>后进先出**</em>）</p>
<p>1.栈中必须有第一个元素与最后一个元素</p>
<p>2.对栈的操作只能从某一端操作，即栈顶(top)</p>
<p>3.栈的数据访问遵从LIFO (last-in first-out)协议</p>
<h4 id="栈的python实现"><a href="#栈的python实现" class="headerlink" title="栈的python实现"></a>栈的python实现</h4><p>主要方法列表</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">s.isEmpty()</td>
<td align="center">栈是否为空</td>
</tr>
<tr>
<td align="center">s._ _ len_  _ ()</td>
<td align="center">栈中的项目数</td>
</tr>
<tr>
<td align="center">s.push()</td>
<td align="center">在栈顶压入一项</td>
</tr>
<tr>
<td align="center">s.top()</td>
<td align="center">如果s不为空返回顶部第一项，否则抛出EmptyError</td>
</tr>
<tr>
<td align="center">s.pop()</td>
<td align="center">如果s不为空，返回并删除第一项，否则抛出EmptyError</td>
</tr>
</tbody></table>
<p>列表实现<br>1.使用列表实现栈，可以从列表末尾压入与弹出<br>2.由于列表是一个动态数组，当栈的变化引起列表内存占用变大时，会引起性能的损耗</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql创建数据表</title>
    <url>/2021/04/01/mysql%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E8%A1%A8/</url>
    <content><![CDATA[<h6 id="存储引擎（mysql）"><a href="#存储引擎（mysql）" class="headerlink" title="存储引擎（mysql）"></a>存储引擎（mysql）</h6><ul>
<li><strong>innodb引擎</strong>：mysql默认的引擎，支持事务，行锁（大多数情况下）</li>
<li><strong>myisam引擎</strong>：早期默认的引擎，查询速度快，不支持事务，只能锁表（经常读，写入少）</li>
<li><strong>memory引擎</strong>：内存引擎，用于需要快速访问的临时数据（临时性数据，需要快速读取写入，不常用）</li>
</ul>
<h6 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h6><p>不同的编码方式占用不同的字节，utf-8中文占用3个字节。</p>
<p>如果程序与数据库的编码不一致，可能导致乱码</p>
<p><strong>大多数情况下，网页，程序，数据库都选用utf-8，以保持一致</strong></p>
<h6 id="DDL建表语句"><a href="#DDL建表语句" class="headerlink" title="DDL建表语句"></a>DDL建表语句</h6><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">#建表格式<br>create table tablename(<br>	fieldname1 filedtype constrains,<br>    fieldname1 filedtype constrains,<br> #   字段名      字段类型    约束，<br>    ............,<br>    primary key ( &#96;key_field&#96;)<br>);<br><br><br>#修改数据表<br>增加字段：<br>alter table &#96;table名&#96;<br>add column &#96;filedname&#96; fieldtype constrains;<br><br>add column &#96;filedname&#96; fieldtype constrains after &#96;username&#96;;	#将此字段增加到username之后<br><br>删除字段：<br>alter table &#96;table名&#96;<br>drop column &#96;filed&#96;;<br></code></pre></td></tr></table></figure>
<p>字段类型：<a href="https://blog.csdn.net/weixin_31534091/article/details/113608053?utm_source=app&amp;app_version=4.5.5%EF%BC%88%E6%9D%A5%E8%87%AACSDN%E7%94%A8%E6%88%B7%EF%BC%89">https://blog.csdn.net/weixin_31534091/article/details/113608053?utm_source=app&amp;app_version=4.5.5（来自CSDN用户）</a></p>
<p>创建一个用户数据表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create table users(<br>	&#96;user_id&#96; int not null,<br>    &#96;username&#96; char(25) not null,<br>    &#96;realname&#96; char(25) not null,<br>    &#96;password&#96; char(64) not null,<br>    &#96;register_date&#96; datetime not null,<br>    primary key(&#96;user_id&#96;)<br>);<br></code></pre></td></tr></table></figure>


<h6 id="图形化管理工具（mysql-workbench）"><a href="#图形化管理工具（mysql-workbench）" class="headerlink" title="图形化管理工具（mysql workbench）"></a>图形化管理工具（mysql workbench）</h6><p>建表的可视化，可视化建表</p>
<p>下载mysql workbench并安装（在mysql下载页面可以找到它）</p>
<p>安装与使用教程：<a href="https://blog.csdn.net/zs1342084776/article/details/88701261?utm_source=app&amp;app_version=4.5.5%EF%BC%88%E8%BD%AC%E8%87%AACSDN%E7%94%A8%E6%88%B7%EF%BC%89">https://blog.csdn.net/zs1342084776/article/details/88701261?utm_source=app&amp;app_version=4.5.5（转自CSDN用户）</a></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">pk</span><span class="hljs-params">(主键)</span></span><br><span class="hljs-function"><span class="hljs-title">nn</span><span class="hljs-params">(不能为NULL)</span></span><br><span class="hljs-function"><span class="hljs-title">UQ</span><span class="hljs-params">(不能重复)</span></span><br>B或BIN()<br>UN<br>ZF<br><span class="hljs-function"><span class="hljs-title">AI</span><span class="hljs-params">(自增长，每插入一个数据，ID会增加)</span></span><br>G<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-链表（单、双）</title>
    <url>/2021/06/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E3%80%81%E5%8F%8C%EF%BC%89/</url>
    <content><![CDATA[<h4 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h4><p>链表数据的结构</p>
<p>链表结构的python实现</p>
<p>链表的操作时间复杂度</p>
<h4 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h4><p>链表就好像链条一样，一节就是一个数据节点。</p>
<p>单列表：尾连着下一个数据</p>
<p>双列表：尾连着下一个数据，头连着上一个数据</p>
<p>循环列表：头尾相连，从而循环</p>
<p>链表特点<br>1.每一个数据节点包括数据本身以及前后节点位置（单链表只包含下一节点位置)</p>
<p>2.链表不需要连续内存空间</p>
<p>3.插入快，查询慢</p>
<h6 id="单链表节点类"><a href="#单链表节点类" class="headerlink" title="单链表节点类"></a>单链表节点类</h6><figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>:</span><br>	<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>,data,<span class="hljs-keyword">next</span>=None)</span></span><span class="hljs-symbol">:</span><br>		<span class="hljs-keyword">self</span>.data = data<br>		<span class="hljs-keyword">self</span>.<span class="hljs-keyword">next</span> = <span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure>
<p>单链表的优势<br>1.内存空间利用率高(不需要连续内存空间)，空间复杂度低</p>
<p>2.适合开始处插入，开始处读取的场景</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-队列</title>
    <url>/2021/06/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h4 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h4><p>队列的概念</p>
<p>队列的python实现</p>
<h4 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h4><p>队列是一种线性表<br>1.对队列从尾部插入，从头部弹出</p>
<p>2.队列的数据访问遵从FIFO (first-in first-out)协议（<strong>先进先出</strong>）</p>
<p>3.除了基本队列结构以外还有双向队列与优先队列</p>
<h4 id="队列的python实现"><a href="#队列的python实现" class="headerlink" title="队列的python实现"></a>队列的python实现</h4><p>队列的主要方法</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">q.isfull()</td>
<td align="center">队列是否满了</td>
</tr>
<tr>
<td align="center">q.isEmpty()</td>
<td align="center">队列是否为空</td>
</tr>
<tr>
<td align="center">q._ _ len _ _()</td>
<td align="center">队列的项目数</td>
</tr>
<tr>
<td align="center">q.put()</td>
<td align="center">在队尾压入一项</td>
</tr>
<tr>
<td align="center">q.get()</td>
<td align="center">队列不为空返回并删除第一项，否则抛出错误EmptyError</td>
</tr>
</tbody></table>
<p>链表实现队列</p>
<p>1.使用链表实现队列，从链表首部压入与尾部弹出</p>
<p>2.需要设定一个尾部位置标志</p>
<p>3.时间复杂度为O(1)</p>
<h4 id="python内置队列"><a href="#python内置队列" class="headerlink" title="python内置队列"></a>python内置队列</h4><p>queue模块与collections.deque</p>
<p>1.queue.Queue - FIFO队列</p>
<p>2.queue.LifoQueue - LIFO队列（栈）</p>
<p>3.queue.PriorityQueue -优先级队列</p>
<p>4.queue.deque(collections.deque)-双向队列</p>
<p>方法</p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">q.empty()</td>
<td align="center">队列是否为空</td>
</tr>
<tr>
<td align="center">q.qsize()</td>
<td align="center">队列中的项目数</td>
</tr>
<tr>
<td align="center">q.full()</td>
<td align="center">队列是否已满</td>
</tr>
<tr>
<td align="center">q.put()</td>
<td align="center">插入数据，如果队列已满，阻塞到可以插入</td>
</tr>
<tr>
<td align="center">q.get()</td>
<td align="center">如果q不为空，返回并删除第一项，否则阻塞到有数据为止</td>
</tr>
<tr>
<td align="center">q.put_nowait()</td>
<td align="center">插入数据，如果队列已满，返回错误异常</td>
</tr>
<tr>
<td align="center">q.get_nowait()</td>
<td align="center">插入数据，如果队列为空，返回错误异常</td>
</tr>
<tr>
<td align="center">q.task_done()</td>
<td align="center">队列消费者用来指示对于项的处理已经结束</td>
</tr>
<tr>
<td align="center">q.join()</td>
<td align="center">阻塞到队列中所有的项均被删除或者已处理</td>
</tr>
</tbody></table>
<h6 id="queue-Queue-FIFO队列"><a href="#queue-Queue-FIFO队列" class="headerlink" title="queue.Queue - FIFO队列"></a>queue.Queue - FIFO队列</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span><span class="hljs-built_in"> queue </span>import<span class="hljs-built_in"> Queue </span>#LILO队列<br>q = Queue() #创建队列对象<br><br><span class="hljs-comment">#%%</span><br><span class="hljs-comment">#插入元素</span><br>q.put(<span class="hljs-string">&quot;A&quot;</span>)<br>q.put(<span class="hljs-string">&quot;B&quot;</span>)<br>q.put(<span class="hljs-string">&quot;C&quot;</span>)<br><span class="hljs-comment">#%%</span><br><span class="hljs-comment"># 查看队列</span><br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;FIFO队列&#x27;</span>,q.queue)<br><span class="hljs-comment">#%%</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty():<br>    <span class="hljs-builtin-name">print</span>(q.<span class="hljs-builtin-name">get</span>())<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;*&quot;</span><span class="hljs-number">*100</span>)<br><span class="hljs-comment">#%%</span><br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;FIFO队列&#x27;</span>,q.queue)<br></code></pre></td></tr></table></figure>


<h6 id="queue-LifoQueue-LIFO队列（栈）"><a href="#queue-LifoQueue-LIFO队列（栈）" class="headerlink" title="queue.LifoQueue - LIFO队列（栈）"></a>queue.LifoQueue - LIFO队列（栈）</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span><span class="hljs-built_in"> queue </span>import LifoQueue<br><br>lifo_queue = LifoQueue()<br><br><span class="hljs-comment"># %%</span><br>lifo_queue.put(<span class="hljs-string">&quot;A&quot;</span>)<br>lifo_queue.put(<span class="hljs-string">&quot;B&quot;</span>)<br>lifo_queue.put(<span class="hljs-string">&quot;C&quot;</span>)<br><span class="hljs-comment"># %%</span><br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;LIFO队列&#x27;</span>, lifo_queue.queue)<br><span class="hljs-comment"># %%</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> lifo_queue.empty():<br>    <span class="hljs-builtin-name">print</span>(lifo_queue.<span class="hljs-builtin-name">get</span>())<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;*&quot;</span> * 100)<br><br></code></pre></td></tr></table></figure>


<h6 id="queue-PriorityQueue-优先级队列"><a href="#queue-PriorityQueue-优先级队列" class="headerlink" title="queue.PriorityQueue -优先级队列"></a>queue.PriorityQueue -优先级队列</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment">#%%</span><br><span class="hljs-comment">#优先队列</span><br><span class="hljs-keyword">from</span><span class="hljs-built_in"> queue </span>import PriorityQueue<br>priority_queue = PriorityQueue()<br><br><span class="hljs-comment">#%%</span><br>priority_queue.put((3, <span class="hljs-string">&quot;A&quot;</span>))<br>priority_queue.put((78, <span class="hljs-string">&quot;B&quot;</span>))<br>priority_queue.put((100, <span class="hljs-string">&quot;C&quot;</span>))<br><br><span class="hljs-comment">#%%</span><br><span class="hljs-comment">#查看优先级队列中的所有元素</span><br><span class="hljs-builtin-name">print</span>(priority_queue.queue)<br><br><span class="hljs-comment">#%%</span><br>priority_queue.put((1, <span class="hljs-string">&quot;D&quot;</span>))<br>priority_queue.put((2, <span class="hljs-string">&quot;E&quot;</span>))<br><span class="hljs-comment">#%%</span><br>priority_queue.put((1, <span class="hljs-string">&quot;DD&quot;</span>))<br>priority_queue.put((2, <span class="hljs-string">&quot;EE&quot;</span>))<br><br><span class="hljs-comment">#%%</span><br><span class="hljs-comment">#查看优先级队列中的所有元素</span><br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;优先级队列:&#x27;</span>,priority_queue.queue)<br><br><span class="hljs-comment">#%%</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> priority_queue.empty():<br>    <span class="hljs-builtin-name">print</span>(priority_queue.<span class="hljs-builtin-name">get</span>())<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;*&quot;</span><span class="hljs-number">*100</span>)<br><br></code></pre></td></tr></table></figure>


<h6 id="queue-deque-collections-deque-双向队列"><a href="#queue-deque-collections-deque-双向队列" class="headerlink" title="queue.deque(collections.deque)-双向队列"></a>queue.deque(collections.deque)-双向队列</h6><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># %%</span><br><span class="hljs-comment"># 双端队列</span><br><span class="hljs-keyword">from</span> collections import deque<br><br>deque_queue = deque([<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>])<br><br><span class="hljs-comment"># %%</span><br><span class="hljs-builtin-name">print</span>(deque_queue)<br><span class="hljs-comment"># 在右侧插入新元素</span><br>deque_queue.append(<span class="hljs-string">&#x27;F&#x27;</span>)<br><span class="hljs-comment"># 在左侧插入新元素</span><br>deque_queue.appendleft(<span class="hljs-string">&#x27;E&#x27;</span>)<br><span class="hljs-builtin-name">print</span>(deque_queue)<br><br><span class="hljs-comment"># %%</span><br><span class="hljs-comment"># 循环右移2次</span><br>deque_queue.rotate(1)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;循环右移1次后的队列&#x27;</span>, deque_queue)<br><span class="hljs-comment"># %%</span><br>deque_queue.rotate(1)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;循环右移1次后的队列&#x27;</span>, deque_queue)<br><span class="hljs-comment"># %%</span><br><span class="hljs-comment"># 循环左移2次</span><br>deque_queue.rotate(-2)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;循环左移2次后的队列&#x27;</span>, deque_queue)<br><span class="hljs-comment"># %%</span><br><span class="hljs-comment"># 返回并删除队列最左端元素</span><br>deque_queue.popleft()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;删除最左端元素后的队列：&#x27;</span>, deque_queue)<br><br><span class="hljs-comment"># %%</span><br><span class="hljs-comment"># 返回并删除队列最右端元素</span><br>deque_queue.pop()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;删除最右端元素后的队列：&#x27;</span>, deque_queue)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>错误解决方法</title>
    <url>/2021/03/14/%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>bug解决</category>
      </categories>
      <tags>
        <tag>错误</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-递归与回溯</title>
    <url>/2021/06/12/%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92%E4%B8%8E%E5%9B%9E%E6%BA%AF/</url>
    <content><![CDATA[<p>递归</p>
<p>1.函数直接或间接调用自身</p>
<p>2.必须具有递归结束条件</p>
<p>3.每一次递归，问题规模缩小</p>
<p>4.python限制了递归深度（sys.getrecursionlimit()）</p>
<p>回溯</p>
<p>回溯法是一个比较经典的算法<br>1.回溯法(探索与回溯法）是一种选优搜索法，又称为试探法<br>2.按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择<br>3.这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-排序算法</title>
    <url>/2021/06/12/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>举例：[5,2,4,3,1]</p>
<p>1.排序目的是在一个排好序的序列里面，从左到右是从小到大排列的，比如[1,2,3,4,5]</p>
<p>2.选择一个元素，然后与所有其他尚未排序元素比较，如果最小与左侧交换位置</p>
<p>3.第一轮:[1,2,4,3,5]  (最小数为1，将1,5换位置)</p>
<p>4.第二轮:[1,2,4,3,5]（看2,4,3,5由于2最小位置不变）</p>
<p>5.第三轮:[1,2,3,4,5]（看4,3,5发现3最小，将3,4换位置，）</p>
<p>6.第四轮:[1,2,3,4,5]（看4,5发现4最小，位置不变）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">select_sort</span>(<span class="hljs-params">lists</span>):</span><br>    max_index = <span class="hljs-built_in">len</span>(lists)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(max_index):<br>         min_index = i<br>         <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, max_index):<br>             <span class="hljs-keyword">if</span> lists[min_index] &gt; lists[j]:<br>                 min_index = j<br>         <span class="hljs-keyword">if</span> min_index != i:<br>             print(<span class="hljs-string">&quot;min_index=&quot;</span>, min_index,<span class="hljs-string">&quot; &quot;</span>, lists[min_index],<span class="hljs-string">&quot;&lt;=&gt;&quot;</span>, lists[i])<br>             lists[i], lists[min_index] = lists[min_index], lists[i]<br>             print(lists)<br>             print(<span class="hljs-string">&quot;-&quot;</span>*<span class="hljs-number">100</span>)<br>         i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> lists<br><br>lists = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> shuffle<br><br>shuffle(lists)<br>print(lists)<br>print(<span class="hljs-string">&quot;end=&gt;&quot;</span>, select_sort(lists))<br></code></pre></td></tr></table></figure>


<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>举例:[5,2,4,3,1]<br>1.插入排序从第2个元素开始排序，与该元素之前的元素比较2.该元素之前的顺序已经排好<br>3.如果该元素顺序可以插入的话，将元素按照顺序插入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_sort</span>(<span class="hljs-params">lists</span>):</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(lists)):<br>        <span class="hljs-comment"># 准备被插入排序的元素</span><br>        item_to_insert = lists[i]<br>        <span class="hljs-comment"># 将这个元素与它之前排好顺序的元素比较</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i-<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>):<br><span class="hljs-comment">#           # 如果这个元素比前面的某个元素小，那么要把它插进去</span><br>            <span class="hljs-comment"># 插入过程就是前面的元素需要一个个后移，直到大于其中的某个元素</span><br>            <span class="hljs-keyword">if</span> item_to_insert &lt; lists[j]:<br>                lists[j+<span class="hljs-number">1</span>] = lists[j]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># 插入空出来的位置</span><br>        <span class="hljs-comment"># 在j位置的元素比等待插入的元素要小，所以插入位置为j+1</span><br>        lists[j+<span class="hljs-number">1</span>] = item_to_insert<br><br>    <span class="hljs-keyword">return</span> lists<br>    <br>lists = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>))<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> shuffle<br><br>shuffle(lists)<br>print(lists)<br>print(<span class="hljs-string">&quot;end=&gt;&quot;</span>, insert_sort(lists))<br></code></pre></td></tr></table></figure>


<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>举例:[5,2,4,3,1]<br>1.从第一个元素开始，每个元素与后面的一个元素比较，较大的排到后面</p>
<p>2.第一轮:[2,4,3,1,5]</p>
<p>3.第二轮:[2,3,1,4,5]</p>
<p>4.第三轮:[2,1,3,4,5]</p>
<p>5.第四轮:[1,2,3,4,5]</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br>def <span class="hljs-keyword">bubble_sort(lists):</span><br><span class="hljs-keyword"> </span>   max_index = len(lists)<br>    for i in range(max_index<span class="hljs-number">-1</span>):<br>        for <span class="hljs-keyword">j </span>in range(max_index<span class="hljs-number">-1</span>):<br>            if lists[<span class="hljs-keyword">j] </span>&gt; lists [<span class="hljs-keyword">j+1]:</span><br><span class="hljs-keyword"> </span>               lists[<span class="hljs-keyword">j], </span>lists[<span class="hljs-keyword">j+1] </span>= lists[<span class="hljs-keyword">j+1], </span>lists[<span class="hljs-keyword">j]</span><br><span class="hljs-keyword"> </span>               print(<span class="hljs-string">&quot;i=&quot;</span>,i,<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-keyword">j,&quot;=&gt;&quot;,lists)</span><br><span class="hljs-keyword"> </span>           <br><br>lists = list(range(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br>from <span class="hljs-built_in">random</span> import <span class="hljs-keyword">shuffle</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">shuffle(lists)</span><br><span class="hljs-keyword">print(lists)</span><br><span class="hljs-keyword">print(&quot;end=&gt;&quot;, </span><span class="hljs-keyword">bubble_sort(lists))</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure>


<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>举例:[5,2,4,3,1]</p>
<p>1.找一个基准点，比如4，</p>
<p>2.以4交换到最后一项[5,2,3,1,4]</p>
<p>3.在列表开始处设立一个边界标志，比如现在[:5,2,3,1,4]的5左侧:为边界标志</p>
<p>4.小于4的项放到边界左侧，直到所有小于4的放到边界左侧，每在边界左侧放置一个，边界位置右移一次,边界右侧的都比4大</p>
<p>5.[2,3,1,:5,4]</p>
<p>6.然后将4放置边界标志:的左侧[2,3,1,4,:5]</p>
<p>7.在边界两侧重复以上过程，直到分组里只有一个元素</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"># -*- codin<span class="hljs-variable">g:</span> utf-<span class="hljs-number">8</span> -*-<br><br>def quicksort(lists):<br>    # 初始左边界为<span class="hljs-number">0</span>， 右边界为列表上界<br>    quick_sort_helper(lists,<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(lists)-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> lists<br>    <br>def quick_sort_helper(lists, <span class="hljs-keyword">left</span>, <span class="hljs-keyword">right</span>):<br>    # 边界左边不能超越边界右边<br>#    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;left=&quot;</span>,<span class="hljs-keyword">left</span>, <span class="hljs-string">&quot;right=&quot;</span>, <span class="hljs-keyword">right</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">left</span> &lt; righ<span class="hljs-variable">t:</span><br>        # 分割列表设置分界点<br>        boundary = partition(lists, <span class="hljs-keyword">left</span>, <span class="hljs-keyword">right</span>)<br>        # 分界点左侧接着分割<br>        quick_sort_helper(lists, <span class="hljs-keyword">left</span>, boundary - <span class="hljs-number">1</span>)<br>        # 分界点右侧接着分割<br>        quick_sort_helper(lists, boundary+<span class="hljs-number">1</span>, <span class="hljs-keyword">right</span>)<br>        <br>        <br>def partition(lists, <span class="hljs-keyword">left</span>, <span class="hljs-keyword">right</span>):<br>    # 根据<span class="hljs-keyword">left</span>，<span class="hljs-keyword">right</span>寻找分界点<br>    middle = (<span class="hljs-keyword">left</span> + <span class="hljs-keyword">right</span>) // <span class="hljs-number">2</span><br>    # 将分界点放置于该段最右侧<br>    lists[<span class="hljs-keyword">right</span>], lists[middle] = lists[middle], lists[<span class="hljs-keyword">right</span>]<br>    boundary = <span class="hljs-keyword">left</span><br>    # 将小于分界点的排到左边，边界右移+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-keyword">left</span>, <span class="hljs-keyword">right</span>):<br>        <span class="hljs-keyword">print</span>(lists)<br>        <span class="hljs-keyword">if</span> lists[i] &lt; lists[<span class="hljs-keyword">right</span>]:<br>            lists[i],lists[boundary] = lists[boundary], lists[i]<br>            boundary += <span class="hljs-number">1</span><br>    # 再将分界点移回<br>    lists[<span class="hljs-keyword">right</span>], lists[boundary] = lists[boundary], lists[<span class="hljs-keyword">right</span>]<br>    <span class="hljs-keyword">return</span> boundary<br>            <br>    <br>lists = <span class="hljs-keyword">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>))<br>from random import shuffle<br><br>shuffle(lists)<br><span class="hljs-keyword">print</span>(lists)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;end=&gt;&quot;</span>, quicksort(lists))<br></code></pre></td></tr></table></figure>


<h4 id="合并排序"><a href="#合并排序" class="headerlink" title="合并排序"></a>合并排序</h4><p>举例:[5,2,4,3,1]</p>
<p>1.选一个点将列表分成左右3部分[2,3,1]+[4]+[5]2.左边的列表所有的元素&lt;分割点</p>
<p>3.右边的列表所有的元素&gt;分割点</p>
<p>4.将左边的部分[2,3,1]重复1～3步骤[2,1]+[3] +[]</p>
<p>5.将[2,1]重复1～3步骤[+[1]+[2]</p>
<p>6.通过递归将他们合并起来[+[1]+[2]+[3]+[+[4]+[5]</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"># -*- coding: utf-<span class="hljs-number">8</span> -*-<br>def <span class="hljs-built_in">merg_sort</span>(lists):<br>    if <span class="hljs-built_in">len</span>(lists) &lt;= <span class="hljs-number">1</span>:<br>        return lists<br>    middle = <span class="hljs-built_in">len</span>(lists)//<span class="hljs-number">2</span><br>    left_list = []<br>    right_list = []<br>    for i in lists[:middle]:<br>        if i &lt;= lists[middle]:<br>            left_list.<span class="hljs-built_in">append</span>(i)<br>        else:<br>            right_list.<span class="hljs-built_in">append</span>(i)<br>    for i in lists[middle+<span class="hljs-number">1</span>:]:<br>        if i &lt;= lists[middle]:<br>            left_list.<span class="hljs-built_in">append</span>(i)<br>        else:<br>            right_list.<span class="hljs-built_in">append</span>(i)<br>    <span class="hljs-built_in">print</span>(left_list, right_list)<br>    return <span class="hljs-built_in">merg_sort</span>(left_list) + [lists[middle]] + <span class="hljs-built_in">merg_sort</span>(right_list)<br><br>lists = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>))<br>from random import shuffle<br><br><span class="hljs-built_in">shuffle</span>(lists)<br><span class="hljs-built_in">print</span>(lists)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;end=&gt;&quot;</span>, <span class="hljs-built_in">merg_sort</span>(lists))<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-二叉树遍历</title>
    <url>/2021/06/12/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<h4 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h4><p>树结构定义</p>
<p>二叉树结构</p>
<p>遍历与搜索</p>
<h4 id="树结构定义"><a href="#树结构定义" class="headerlink" title="树结构定义"></a>树结构定义</h4><table>
<thead>
<tr>
<th align="center">术语</th>
<th align="center">定义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">节点</td>
<td align="center">树中分叉处，用来存储项</td>
</tr>
<tr>
<td align="center">根</td>
<td align="center">没有父节点的节点，即最顶端的节点</td>
</tr>
<tr>
<td align="center">子节点</td>
<td align="center">一个节点的直接相邻的后一个节点，可以拥有多个子节点</td>
</tr>
<tr>
<td align="center">父节点</td>
<td align="center">一个节点的直接相邻的前一个节点</td>
</tr>
<tr>
<td align="center">兄弟节点</td>
<td align="center">拥有共同父节点的节点</td>
</tr>
<tr>
<td align="center">叶子结点</td>
<td align="center">没有子节点的节点称为叶子节点</td>
</tr>
<tr>
<td align="center">内部节点</td>
<td align="center">至少拥有一个子节点的节点</td>
</tr>
<tr>
<td align="center">边/分支链接</td>
<td align="center">节点的连接线</td>
</tr>
<tr>
<td align="center">后代</td>
<td align="center">一个节点的所有的子节点、子子节点</td>
</tr>
<tr>
<td align="center">祖先</td>
<td align="center">一个节点之前的父节点、父节点的父节点，一直到根节点</td>
</tr>
<tr>
<td align="center">路径</td>
<td align="center">一个节点到某一个后代节点的边的序列</td>
</tr>
<tr>
<td align="center">深度/层级</td>
<td align="center">一个节点的深度等于将其连接到根节点的路径的长度，因此</td>
</tr>
<tr>
<td align="center">高度</td>
<td align="center">树中最长的路径的长度</td>
</tr>
<tr>
<td align="center">子树</td>
<td align="center">将一个节点及其所有后代节点包括在内所形成的树</td>
</tr>
</tbody></table>
<h4 id="树结构的应用"><a href="#树结构的应用" class="headerlink" title="树结构的应用"></a>树结构的应用</h4><p>1.文件路径，就是一种树状结构</p>
<p>2.商品分类的菜单实现，也是树状结构</p>
<p>3.网页中的文档树</p>
<p>4.机器学习中的决策树，随机森林</p>
<p>5.数据库中的B树</p>
<p>6….很多，不一而足</p>
<h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p>1.一个节点最多拥有2个子节点<br>2.两个子节点分别称为左节点与右节点<br>3.如果只有一个子节点，该子节点可以看作是左节点或者右节点，并且因此带来的树结构不同</p>
<h6 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树:"></a>满二叉树:</h6><p>除了叶子节点,每个节点都包含了二个节点满二叉树的高度H=log2(N+1)-1</p>
<h6 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树:"></a>平衡二叉树:</h6><p>可以是空树<br>如果不是空树，左右节点子树高度差不超过1，且都为平衡树因此称为平衡树<br>高度差称为平衡因子，有-1、0、1取值(H_LEFT -H_RIGHT)平衡二叉树节点选择很重要</p>
<h6 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h6><p>前序遍历:从根节点开始，以相同的方法从左到右遍历左子树与右子树</p>
<p>中序遍历:先遍历左子树然后回到根节点，再遍历右子树</p>
<p>后序遍历:先遍历左子树然后遍历右子树最后回到根节点</p>
<p>层序遍历:从0层开始先访问左子节点然后遍历右子节点然后同样对1、2、..N层访问</p>
<h6 id="二叉树的查找"><a href="#二叉树的查找" class="headerlink" title="二叉树的查找"></a>二叉树的查找</h6><p>节点搜索:从根节点开始，按照左小右大，进入节点递归查找</p>
]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-背包问题</title>
    <url>/2021/06/12/%E7%AE%97%E6%B3%95-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h4 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h4><p>什么是背包问题</p>
<p>贪心算法</p>
<p>动态规划 </p>
<h4 id="什么是背包问题"><a href="#什么是背包问题" class="headerlink" title="什么是背包问题"></a>什么是背包问题</h4><p><strong><em>限定条件下获得最大价值</em></strong></p>
<p>比如:你现在有一个背包，只能背1kg的物品,可以背的物品包括:</p>
<p>1.笔记本电脑,重0.9kg，价值8000元</p>
<p>2.蓝牙音箱，重0.7kg，价值3000元3.虚拟设备，重0.3kg，价值1500元</p>
<p>怎么装，可以让背包里的物品总价值最大</p>
<h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><p>使用贪心算法求解</p>
<p>1.贪心算法就是不管全局，只管眼前</p>
<p>2.找出当前的最优解就好</p>
<p>3.贪心算法找到的结果不一定是最好的解</p>
<h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p>什么是动态规划？</p>
<p>1.动态规划算法用于求解具有最优性质的问题</p>
<p>2.这类问题通常具有多阶段决策过程，每一阶段的解决方案都是最优化的</p>
<p>3.后一阶段的最优解在上一阶段的基础上确定</p>
<p>二维数据表示</p>
<p>1.用i表示阶段，j表示某一阶段可负重能力，V表示该阶段最大价值，wi表示这个阶段新出现的物品重量<br>2.那么该最大价值可以表示为V[i][j],比如第一阶段，负重为100g时，可以表示为V[1][100],负重为200g时为V[1][200]</p>
<p>伪代码（计算出不同背包所能获得的最大价值）</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><code class="hljs inform7">for i in items:<br>	v<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span> = 0<br>	solution<span class="hljs-comment">[i]</span> = <span class="hljs-comment">[]</span><br>	for j in 背包可选择负重列表：<br>		背包物品选择<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = <span class="hljs-comment">[]</span><br>		if w<span class="hljs-comment">[i]</span> &gt; j:<br>			v<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = 背包物品选择<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span><br>		else:<br>			v<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = max(v<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>,vi + v<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-w<span class="hljs-comment">[1]</span>]</span>)<br>			背包物品选择<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = 背包物品选择<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-w<span class="hljs-comment">[i]</span>]</span> +当前物品<br></code></pre></td></tr></table></figure>










































]]></content>
      <categories>
        <category>服务器运维</category>
      </categories>
      <tags>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
</search>

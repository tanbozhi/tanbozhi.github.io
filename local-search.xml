<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网易-Vue</title>
    <link href="/2021/12/26/%E7%BD%91%E6%98%93-vue/"/>
    <url>/2021/12/26/%E7%BD%91%E6%98%93-vue/</url>
    
    <content type="html"><![CDATA[<h5 id="mvc框架"><a href="#mvc框架" class="headerlink" title="mvc框架"></a>mvc框架</h5><p>Modal(数据模型)</p><p>View(视图界面)</p><p>Controller(控制器)控制所有事件</p><h5 id="mvvm框架"><a href="#mvvm框架" class="headerlink" title="mvvm框架"></a>mvvm框架</h5><p>Modal(数据模型)</p><p>View(视图界面)</p><p>ViewModal(视图模型)</p><h5 id="Vue3的引入与基本使用"><a href="#Vue3的引入与基本使用" class="headerlink" title="Vue3的引入与基本使用"></a>Vue3的引入与基本使用</h5><p>Vue的creatApp方法，可以放入数据池与事件池</p><p>输出数据与事件需要挂载器mount方法，挂载指定元素</p><h6 id="引入Vue3"><a href="#引入Vue3" class="headerlink" title="引入Vue3"></a>引入Vue3</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;Vue3.js&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        &#123;&#123;content&#125;&#125; <br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-comment">//变量池</span></span><br><span class="javascript">        data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                content:<span class="hljs-string">&#x27;hello world&#x27;</span></span><br>            &#125;<br>        &#125;,<br><span class="javascript">        <span class="hljs-comment">//事件池</span></span><br>        methods:&#123;<br><span class="javascript">            a:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                alert(<span class="hljs-string">&#x27;我是点击事件&#x27;</span>);</span><br>            &#125;,<br><span class="javascript">            b:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                alert(<span class="hljs-string">&quot;又点我了&quot;</span>)</span><br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).mount(<span class="hljs-string">&#x27;#test&#x27;</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="模板语法-插值"><a href="#模板语法-插值" class="headerlink" title="模板语法-插值"></a>模板语法-插值</h5><h6 id="插值-文本操作"><a href="#插值-文本操作" class="headerlink" title="插值-文本操作"></a>插值-文本操作</h6><p>可以直接在事件池中使用this找到变量池中的内容进行更改，页面也会直接变化</p><p>v-once用于锁定模板值</p><p>v-html用来输出HTML元素内容</p><p>v-text用来输出文本内容</p><p>v-html、v-text会覆盖元素里原本的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        &#123;&#123;content&#125;&#125; <br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-once</span>&gt;</span>&#123;&#123;content&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;html&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;a&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;点我&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">                <span class="hljs-string">&quot;content&quot;</span>:<span class="hljs-string">&quot;hello world&quot;</span>,</span><br><span class="javascript">                <span class="hljs-string">&quot;html&quot;</span>:<span class="hljs-string">&quot;点我变成红色div&quot;</span></span><br>            &#125;<br>        &#125;,<br>        methods:&#123;<br><span class="javascript">            a:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.content = <span class="hljs-string">&#x27;123&#x27;</span>;</span><br>            &#125;,<br><span class="javascript">            b:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="handlebars"><span class="xml">                this.html = &quot;<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width:100px;height:100px;background-color:red;&#x27;</span>&gt;</span>456<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>&quot;;</span></span><br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).mount(<span class="hljs-string">&#x27;#test&#x27;</span>);</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="插值-属性与表达式"><a href="#插值-属性与表达式" class="headerlink" title="插值-属性与表达式"></a>插值-属性与表达式</h6><p>v-bind:属性名=’data内的变量名’</p><p>v-bind如果只给属性不赋值,n那么最后只显示属性</p><p>v-bind想赋值字符串需要进行引号切换</p><p>语法内容的输出结果可以放入语法表达式（三目，拼接等）</p><h6 id="插值-指令-动态参数"><a href="#插值-指令-动态参数" class="headerlink" title="插值-指令-动态参数"></a>插值-指令-动态参数</h6><p>v-bind或on后面的参数可以通过[data]来实现动态参数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">div</span> v-bind:<span class="hljs-selector-attr">[test]</span>=<span class="hljs-string">&#x27;content&#x27;</span>&gt;<span class="hljs-comment">//test和content都是data里的变量</span><br></code></pre></td></tr></table></figure><p>v-bind后面参数如果是class，修改将会变成添加而不是替换</p><p>v-on通过动态参数切换事件时，所有事件会删除变成新的事件</p><h6 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">v-bind:class=<span class="hljs-string">&#x27;content&#x27;</span><br><span class="hljs-regexp">//</span>属性 缩写为 :class=<span class="hljs-string">&#x27;content&#x27;</span><br><br>v-on:click=<span class="hljs-string">&#x27;change&#x27;</span><br><span class="hljs-regexp">//</span>事件 缩写为 @click=<span class="hljs-string">&#x27;change&#x27;</span><br></code></pre></td></tr></table></figure><h5 id="Data-Property-数据权"><a href="#Data-Property-数据权" class="headerlink" title="Data Property(数据权)"></a>Data Property(数据权)</h5><p>给app设定为变量，可以访问或操作数据和事件</p><p>通过专门的$data来访问或者操作数据内容</p><p>事件名和变量名尽量不要一样，数据变量优先</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html">var vm = Vue.createApp(&#123;<br>            data:function()&#123;<br>                return &#123;<br>                    &quot;content&quot;:&quot;hello world&quot;,<br>                    &quot;html&quot;:&quot;点我变成红色div&quot;<br>                &#125;<br>            &#125;<br>         &#125;).mount(&#x27;#test&#x27;);<br><br>console.log(vm.content);<br>console.log(vm.$data.content);<br></code></pre></td></tr></table></figure><h5 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h5><h6 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h6><p>控制元素的显示与隐藏</p><p>v-show接收到的数据会自动转换成布尔值</p><p>v-show接收到的值为false,则display:none;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;a&quot;</span>  <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;切换&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;bool&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 100px;height: 100px;background-color:red;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                bool:<span class="hljs-literal">true</span></span><br>            &#125;<br>        &#125;,<br>        methods:&#123;<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">this</span>.bool = !<span class="hljs-built_in">this</span>.bool;</span><br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).mount(<span class="hljs-string">&quot;#test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h6><p>条件渲染，隐藏和消失</p><p>v-if比v-show使用起来更消耗资源</p><p>v-if后面可以继续进行v-else-if和v-else指令拓展</p><p>v-if的拓展指令必须相邻，不然会失效。</p><h6 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h6><p>循环渲染数据内容</p><p>基本写法v-for=”自定义变量名 in(of) data数据”</p><p>JSON数据格式用(value,key)方式来循环内容</p><p>v-for循环获取索引值，非JSON的第二个参数，JSON为第三个参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(content,index) in list&quot;</span>&gt;</span><br>            &#123;&#123;content&#125;&#125;-&#123;&#123;index&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(content,index) in str&quot;</span>&gt;</span><br>            &#123;&#123;content&#125;&#125;-&#123;&#123;index&#125;&#125;,<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,key,index) in json&quot;</span>&gt;</span><br>            &#123;&#123;key&#125;&#125;-&#123;&#123;value&#125;&#125;-&#123;&#123;index&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                bool:<span class="hljs-literal">true</span>,</span><br><span class="javascript">                <span class="hljs-string">&#x27;list&#x27;</span>:[<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>],</span><br><span class="javascript">                <span class="hljs-string">&#x27;str&#x27;</span>:<span class="hljs-string">&#x27;string&#x27;</span>,</span><br><span class="javascript">                <span class="hljs-string">&#x27;json&#x27;</span>:&#123;</span><br><span class="javascript">                    <span class="hljs-string">&#x27;num&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,</span><br><span class="javascript">                    <span class="hljs-string">&#x27;bbb&#x27;</span>:<span class="hljs-string">&quot;23&quot;</span></span><br>                &#125;<br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).mount(<span class="hljs-string">&quot;#test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="v-for状态维护"><a href="#v-for状态维护" class="headerlink" title="v-for状态维护"></a>v-for状态维护</h6><p>v-for循环出来的元素为方便维护尽量有key属性</p><p>尽量放入唯一属性id或者index</p><p>key属性只允许放入number或者string数据类型</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;div v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;i in str&quot;</span> <span class="hljs-symbol">:key=<span class="hljs-string">&#x27;id&#x27;</span>&gt;&lt;/div&gt;</span><br></code></pre></td></tr></table></figure><h6 id="v-for与v-if"><a href="#v-for与v-if" class="headerlink" title="v-for与v-if"></a>v-for与v-if</h6><p>这两个尽量不要一起使用，v-if会优先执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">因为v-if先执行，最终会导致v-for循环出来的五个元素都消失<br>&lt;div <span class="hljs-attribute">v-for</span>=<span class="hljs-string">&quot; i in 5&quot;</span> <span class="hljs-attribute">v-if</span>=<span class="hljs-string">&quot;i==2?true:false&quot;</span>&gt;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h5 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h5><p>如果data与computed里有同一个属性，输出data里的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">computed:&#123;<br>&quot;cpt&quot;:function()&#123;<br>if(this.num==2)&#123;<br>return &#x27;kkk&#x27;+num*3<br>&#125;<br>else&#123;<br>return &#x27;kkk&#x27;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="计算属性里的setter和getter"><a href="#计算属性里的setter和getter" class="headerlink" title="计算属性里的setter和getter"></a>计算属性里的setter和getter</h6><p>get作为属性的输出需要配合return</p><p>set可以进行传参进行操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">computed:&#123;<br><span class="hljs-string">&quot;cpt&quot;</span>:&#123;<br><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;10&#x27;</span><br>&#125;,<br><span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;<br><span class="hljs-built_in">this</span>.str= value;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="监听器watch"><a href="#监听器watch" class="headerlink" title="监听器watch"></a>监听器watch</h6><p>watch代表监听器，可以放入函数，函数名称代表需要监听的数据</p><p>监听某个参数，当这个参数改变时，可以触发函数</p><p>监听器里可以放入两个参数，分别为新数据和老数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">watch:&#123;<br>    <span class="hljs-function"><span class="hljs-title">aa</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-function"><span class="hljs-title">bb</span>(<span class="hljs-params">newvalue,oldvalue</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(newvalue,oldvalue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="深度监听"><a href="#深度监听" class="headerlink" title="深度监听"></a>深度监听</h6><p>deep:true    开启深度监听，默认为false</p><p>immediate     初始化时就执行一次，默认为false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;watch&quot;</span>:&#123;<br>aa:&#123;<br><span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params"></span>)</span>&#123;<br>alert(<span class="hljs-number">1</span>);<br>&#125;,<br>deep:<span class="hljs-literal">true</span>,<br>immediate:<span class="hljs-literal">true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h5><p>Vue3中事件里面可以用括号也可以不用括号，不用括号是单事件</p><p>多事件必须用逗号隔开，并且事件带括号</p><p>如果事件带括号可以进行传参参数可以是vue对象里的属性</p><p>事件里可以传入$event,下方可以调用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;go(),test()&quot;</span> &gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p>快速调用事件的某些状态</p><p>修饰符放在事件后面用“.”连接，可以多事件修饰符一起使用</p><p>可以存在修饰符不加事件调用函数</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pf">stop 阻止冒泡修饰符<br>prevent 阻止事件默认行为<br>capture 事件捕获触发<br><span class="hljs-literal">self</span> 精准事件触发<br><span class="hljs-keyword">once</span> 事件只触发一次<br>passive 优化移动端滚动事件不能和prevent一起使用<br></code></pre></td></tr></table></figure><h5 id="按键别名"><a href="#按键别名" class="headerlink" title="按键别名"></a>按键别名</h5><p>在按键事件中可以使用按键别名方式指定某一种按键有效</p><p>与修饰符一样，在按键事件后面放入</p><p>有9种，可以多个一起使用，用点连接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keydown.tab.enter.up</span>=<span class="hljs-string">&#x27;abc&#x27;</span>/&gt;</span><br>Vue.createApp(&#123;<br>&quot;methods&quot;:&#123;<br>abc()&#123;<br>alert(1);<br>&#125;<br>&#125;<br>&#125;).mount(&#x27;.tan&#x27;)<br></code></pre></td></tr></table></figure><h5 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h5><p>四种：ctrl、shift、alt、meta</p><p>可以和其他修饰键组合使用</p><p>精准使用需要使用exact来修饰系统修饰键（只能按需要的系统修饰符）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;div <span class="hljs-meta">@keydown</span>.shift.ctrl=<span class="hljs-string">&#x27;abc&#x27;</span>&gt;按ctrl加shift&lt;/div&gt;<br><br>Vue.createApp(&#123;<br><span class="hljs-string">&quot;methods&quot;</span>:&#123;<br><span class="hljs-function"><span class="hljs-title">abc</span>(<span class="hljs-params"></span>)</span>&#123;<br>alert(<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;).mount(<span class="hljs-string">&#x27;.tan&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="鼠标修饰符"><a href="#鼠标修饰符" class="headerlink" title="鼠标修饰符"></a>鼠标修饰符</h5><p>用来修饰鼠标事件的</p><p>鼠标事件后面只能放一个鼠标修饰符</p><p>三个：left、right、middle 代表左右滚轮</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&lt;<span class="hljs-keyword">div</span> @mousedown.<span class="hljs-keyword">middle</span>=<span class="hljs-string">&#x27;abc&#x27;</span>&gt;点击鼠标滚轮&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h5 id="表单输入绑定（双向绑定）"><a href="#表单输入绑定（双向绑定）" class="headerlink" title="表单输入绑定（双向绑定）"></a>表单输入绑定（双向绑定）</h5><p>使用v-modle来绑定表单元素输入内容</p><p>单选：输出input的value，不用name即可分组</p><p>复选：输出true和false</p><p>文本域：输出内容</p><p>下拉框：代表option的内容</p><p>v-modle的值会覆盖原生属性上面的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-modle</span>=<span class="hljs-string">&#x27;message&#x27;</span> &gt;</span><br></code></pre></td></tr></table></figure><h5 id="双向绑定修饰符"><a href="#双向绑定修饰符" class="headerlink" title="双向绑定修饰符"></a>双向绑定修饰符</h5><p>lazy：从oninput的频率变成onchange的频率</p><p>number：一开始就输入字符串，则输出字符串，如果最开始输入的是数字，则输出数字，遇到非数字则不在输出</p><p>trim：去掉两端的空格</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">input</span> v-modle<span class="hljs-selector-class">.lazy</span>.number=<span class="hljs-string">&#x27;message&#x27;</span> &gt;<br><br>可以多个一起使用<br></code></pre></td></tr></table></figure><h5 id="class与style绑定"><a href="#class与style绑定" class="headerlink" title="class与style绑定"></a>class与style绑定</h5><h6 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h6><p>可以使用数据来控制style或class的属性</p><p>class控制方式是传入<strong>JSON数据</strong>，对应class值为true和false</p><p>可以传入任何数据，会自动转为布尔值</p><p>style与class类似，可以样式key传值，也可以JSON传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;test&quot;</span> &gt;<br>    &lt;!-- 数组 --&gt;<br>    &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;[abc,def]&quot;</span> &gt;&lt;/div&gt;<br>&lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;arr&quot;</span> &gt;&lt;/div&gt;<br>&lt;!-- 对象 --&gt;<br>    &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;&#123;first:active&#125;&quot;</span> &gt;&lt;/div&gt;<br>    &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;second&quot;</span> &gt;&lt;/div&gt;<br>    &lt;div :<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;third&quot;</span> &gt;&lt;/div&gt;<br>&lt;/div&gt;<br><br>Vue.createApp(&#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span>&#123;<br>            <span class="hljs-string">&quot;abc&quot;</span>:<span class="hljs-string">&quot;abc&quot;</span>,<br>            <span class="hljs-string">&quot;def&quot;</span>:<span class="hljs-string">&quot;def&quot;</span>,<br>            <span class="hljs-string">&quot;arr&quot;</span>:[<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;defd&#x27;</span>],<br>            <span class="hljs-string">&quot;active&quot;</span>:<span class="hljs-literal">true</span>,<br>            <span class="hljs-string">&quot;second&quot;</span>:&#123;<br>                <span class="hljs-string">&quot;blue&quot;</span>:<span class="hljs-literal">true</span>,<br>                <span class="hljs-string">&quot;green&quot;</span>:<span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>    &#125;,<br>    computed:&#123;<br>        <span class="hljs-function"><span class="hljs-title">third</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span>&#123;<br>                aaa:<span class="hljs-literal">true</span>,<br>                bbb:<span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;).mount(<span class="hljs-string">&#x27;#test&#x27;</span>)<br></code></pre></td></tr></table></figure><h6 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h6><p>也可以用数组的方式来控制style与class</p><p>可以在数组中直接放入class，也可以放入运算符</p><p>控制style，可以直接放入JSON格式的样式</p><h5 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h5><h6 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h6><p>使用``可以随意折行，可以使用${}传入变量，也可以使用三目运算符</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">var a=1,b=4;</span><br><span class="xml">var str =`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">$</span><span class="hljs-template-variable">&#123;a+b&#125;</span><br><span class="xml">$</span><span class="hljs-template-variable">&#123;a?a:b&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span><br></code></pre></td></tr></table></figure><h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><h6 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h6><p>使用component来自定义组件</p><p>可以放入data，computed，methods等属性</p><p>component方法第一个参数为组件名称</p><p>template为组件输出内容</p><p>组件无法使用createApp里面的数据，组件数据不共通</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">component-test</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-test</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><br><span class="javascript">&#125;).component(<span class="hljs-string">&quot;component-test&quot;</span>,&#123;</span><br><span class="javascript">    data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span>&#123;</span><br>            count:23<br>        &#125;<br>    &#125;,<br>    methods:&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">go</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">this</span>.count++</span><br>        &#125;<br>    &#125;,<br><span class="handlebars"><span class="xml">    &quot;template&quot;:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;go&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">count</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br><span class="javascript">&#125;).mount(<span class="hljs-string">&quot;#test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="props"><a href="#props" class="headerlink" title="props"></a>props</h6><p>使用props获取父级的数据</p><p>通过在组件元素上进行自定义属性赋值的方法，然后通过组件中的props属性拿到自定义属性名，其属性的最终值就是组件上赋值的内容</p><p>通过props拿到的值使用方式和data内容一样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">component-test</span> <span class="hljs-attr">:msg</span>=<span class="hljs-string">&#x27;message&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component-test</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                <span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&#x27;拿到了createApp里面的值了&#x27;</span></span><br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).component(<span class="hljs-string">&quot;component-test&quot;</span>,&#123;</span><br><span class="javascript">        <span class="hljs-string">&quot;props&quot;</span>:[<span class="hljs-string">&quot;msg&quot;</span>],</span><br><span class="handlebars"><span class="xml">        &quot;template&quot;:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">msg</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br><span class="javascript">    &#125;).mount(<span class="hljs-string">&quot;#test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h6><p>调用父元素的事件，将子级元素内容传到父元素中</p><p>在子组件输出的模板中，自定义事件，然后输出$emit方法</p><p>$emit第一个参数为定义的名称，该内容可以在组件上使用调佣交互内容为事件内容</p><p>$emit第二个参数，对应着组件元素调用的父级函数的参数内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> &gt;</span><br>        &#123;&#123;message1&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">component-test</span> @<span class="hljs-attr">go</span>=<span class="hljs-string">&#x27;test&#x27;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">component-test</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                <span class="hljs-string">&quot;message1&quot;</span>:<span class="hljs-string">&#x27;调用子元素内容之前&#x27;</span></span><br>            &#125;<br>        &#125;,<br>        methods:&#123;<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">test</span>(<span class="hljs-params">msg</span>)</span>&#123;</span><br>                alert(msg)<br><span class="javascript">                <span class="hljs-built_in">this</span>.message1 = msg;</span><br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).component(<span class="hljs-string">&quot;component-test&quot;</span>,&#123;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                message:<span class="hljs-string">&quot;我是子组件内容&quot;</span></span><br>            &#125;<br>        &#125;,<br><span class="handlebars"><span class="xml">        &quot;template&quot;:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;$emit(&quot;go&quot;,this.message)&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">message</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br><span class="javascript">    &#125;).mount(<span class="hljs-string">&quot;#test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="v-modle数据互通"><a href="#v-modle数据互通" class="headerlink" title="v-modle数据互通"></a>v-modle数据互通</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpnt</span> <span class="hljs-attr">v-bind:val</span>=<span class="hljs-string">&#x27;text&#x27;</span> @<span class="hljs-attr">top</span>=<span class="hljs-string">&#x27;text=$event&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpnt</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                text:<span class="hljs-string">&#x27;没改变&#x27;</span></span><br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).component(<span class="hljs-string">&#x27;cpnt&#x27;</span>,&#123;</span><br><span class="javascript">        <span class="hljs-string">&quot;props&quot;</span>:[<span class="hljs-string">&#x27;val&#x27;</span>],</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                list:<span class="hljs-string">&#x27;123&#x27;</span></span><br>            &#125;<br>        &#125;,<br><span class="handlebars"><span class="xml">        &quot;template&quot;:`<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&#x27;val&#x27;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&#x27;$emit(&quot;top&quot;,$event.target.value)&#x27;</span>&gt;</span>`</span></span><br><span class="javascript">    &#125;).mount(<span class="hljs-string">&quot;#test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h6><p>组件插槽标签slot</p><p>如果组件里有其他内容，我们在组件模板下使用slot标签输出原始内容</p><p>暴露在外层的内容是可以使用最外层数据的，但不能使用组件内的数据</p><p>slot可以多次使用，标签要闭合，不然有警告窗</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpnt</span>&gt;</span><br>            123<br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">cpnt</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><br><span class="javascript">    &#125;).component(<span class="hljs-string">&#x27;cpnt&#x27;</span>,&#123;</span><br><span class="handlebars"><span class="xml">        template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">                  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br><span class="javascript">    &#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h6><p>可以使用component标签进行组件输出</p><p>component标签需要配合:is来指定输出的组件名称，属性值为字符串</p><p>component标签上面所有的属性都会叠加到最终输出的组件内容的最外层元素上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        &#123;&#123;test1&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">cpnt</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpnt</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">sky</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">sky</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;i in list&quot;</span> <span class="hljs-attr">v-bind:is</span>=<span class="hljs-string">&quot;i&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> vm = Vue.createApp(&#123;</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                test1:<span class="hljs-string">&#x27;测试&#x27;</span>,</span><br><span class="javascript">                list:[<span class="hljs-string">&#x27;cpnt&#x27;</span>,<span class="hljs-string">&#x27;sky&#x27;</span>]</span><br>            &#125;<br>        &#125;<br>    &#125;)<br><span class="javascript">    vm.component(<span class="hljs-string">&quot;cpnt&quot;</span>,&#123;</span><br><span class="javascript">        <span class="hljs-string">&quot;template&quot;</span>:<span class="hljs-string">`&lt;div&gt;cpnt&lt;/div&gt;`</span></span><br>    &#125;);<br><span class="javascript">    vm.component(<span class="hljs-string">&quot;sky&quot;</span>,&#123;</span><br><span class="handlebars"><span class="xml">        template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>sky<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br>    &#125;);<br><span class="javascript">    <span class="hljs-comment">// 挂载一定要放到component后面</span></span><br><span class="javascript">    vm.mount(<span class="hljs-string">&quot;.test&quot;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="组件的其他写入方式"><a href="#组件的其他写入方式" class="headerlink" title="组件的其他写入方式"></a>组件的其他写入方式</h6><p>任何标签配合v-is属性，其属性内容为字符串形式，如果等于组件名，则会输出组件内容</p><p>该输出组件的方式可以有效的规避掉HTML嵌套的问题</p><p>该输出组件元素上的属性也会叠加到组件输出的最外层元素上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">v-is</span>=<span class="hljs-string">&#x27;&quot;tan&quot;&#x27;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aaa</span> <span class="hljs-attr">v-is</span>=<span class="hljs-string">&quot;&#x27;tan&#x27;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">aaa</span>&gt;</span><br><br>p标签里不能放div，可以通过放入span标签，会自动转为div标签<br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-is</span>=<span class="hljs-string">&#x27;&quot;tan&quot;&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="组件进阶"><a href="#组件进阶" class="headerlink" title="组件进阶"></a>组件进阶</h5><h6 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h6><p>使用components属性，属性后面的key为组件名称，对应的为组件数据</p><p>局部组件可以无限的套用局部组件，数据传递使用props和emit方式</p><p>组件名称可以用“-”号，也可以使用驼峰命名法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tan</span> <span class="hljs-attr">:text</span>=<span class="hljs-string">&#x27;texttan&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tan</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bo</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bo</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">                texttan:<span class="hljs-string">&#x27;tan&#x27;</span></span><br>            &#125;<br>        &#125;,<br><span class="javascript">        <span class="hljs-string">&quot;components&quot;</span>:&#123;</span><br><span class="javascript">            <span class="hljs-string">&#x27;tan&#x27;</span>:&#123;</span><br><span class="javascript">                props:[<span class="hljs-string">&#x27;text&#x27;</span>],</span><br><span class="handlebars"><span class="xml">                template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">text</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br>            &#125;,<br><span class="javascript">            <span class="hljs-string">&#x27;bo&#x27;</span>:&#123;</span><br><span class="handlebars"><span class="xml">                template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>bo</span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">zhi</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">zhi</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`,</span></span><br><span class="javascript">                <span class="hljs-string">&quot;components&quot;</span>:&#123;</span><br><span class="javascript">                    <span class="hljs-string">&#x27;zhi&#x27;</span>:&#123;</span><br><span class="handlebars"><span class="xml">                        template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>zhi<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`</span></span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br></code></pre></td></tr></table></figure><h6 id="props验证类型"><a href="#props验证类型" class="headerlink" title="props验证类型"></a>props验证类型</h6><p>props具有验证功能，需要使用json数据类型</p><p>props如果内容对应的数据类型不一样时，会有警告提示</p><p>type:数据类型、</p><p>required为true的话验证必填内容</p><p>default属性为默认值，也可以使用函数进行返回</p><p>validator属性为精准验证</p><p>null和undefined是无法使用数据类型进行验证的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html">components:&#123;<br>&quot;tan&quot;:&#123;<br>props:&#123;<br>text:String<br>//text:[String,number,Boolean]#这儿也可以放数组,只要符合其中一个就行<br>&#125;,<br>template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`<br>&#125;<br>&#125;<br>或者<br>components:&#123;<br>&quot;tan&quot;:&#123;<br>props:&#123;<br>text:&#123;<br>type:Strig,//判断类型<br>default:&#x27;abc&#x27;,//设置默认值，可以放函数<br>required:true//验证有没有数据，true为必须有数据<br>&#125;<br>&#125;,<br>template:`<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>`<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="属性继承"><a href="#属性继承" class="headerlink" title="属性继承"></a>属性继承</h6><p>组件元素会自动默认传递属性和事件给予模块最外层元素</p><p>组件中的inheritAttrs属性如果为false则会阻止传递属性或事件</p><p>组件中模板如果有一堆平级元素，那么属性与事件不会传递，并且有警告提示</p><p>在模板中使用v-bind=”$attrs”方式，让模板元素强制继承属性与事件</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nim">&lt;tan class=<span class="hljs-string">&quot;abc&quot;</span>&gt;&lt;/tan&gt;<br><br>components:&#123;<br><span class="hljs-string">&quot;tan&quot;</span>:&#123;<br>inherit:<span class="hljs-literal">false</span>,//不继承标签上的属性<br><span class="hljs-keyword">template</span>:`&lt;<span class="hljs-keyword">div</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;`<br>&#125;<br>&#125;<br><br>components:&#123;<br><span class="hljs-string">&quot;tan&quot;</span>:&#123;<br>//添加v-<span class="hljs-keyword">bind</span>=<span class="hljs-string">&quot;$attrs&quot;</span>后就可以继承属性了<br><span class="hljs-keyword">template</span>:`&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">bind</span>=<span class="hljs-string">&quot;$attrs&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> v-<span class="hljs-keyword">bind</span>=<span class="hljs-string">&quot;$attrs&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;`<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="emit验证"><a href="#emit验证" class="headerlink" title="emit验证"></a>emit验证</h6><p>emit也是可以验证的，使用emits属性来进行操作</p><p>如果使用emit，尽量把自定义内容放在emits后面的数组中</p><p>组件中的emits可以使用JSON数据来验证发射事件，以事件名称作为key即可</p><p>emits属性验证对应的验证函数返回true则验证通过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tan</span> <span class="hljs-attr">:text</span>=<span class="hljs-string">&#x27;texttan&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;abc&#x27;</span> @<span class="hljs-attr">abc</span>=<span class="hljs-string">&#x27;go&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tan</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>    Vue.createApp(&#123;<br>        methods:&#123;<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">go</span>(<span class="hljs-params"></span>)</span>&#123;</span><br>                alert(1)<br>            &#125;<br>        &#125;,<br>        components:&#123;<br><span class="javascript">            <span class="hljs-string">&quot;tan&quot;</span>:&#123;</span><br><span class="javascript">                <span class="hljs-comment">// emits:[&#x27;abc&#x27;],</span></span><br>                emits:&#123;<br><span class="javascript">                    abc:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">num1,num2</span>)</span>&#123;</span><br>                        if(num1==1&amp;&amp;num2==2)&#123;<br><span class="javascript">                            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span></span><br>                        &#125;<br><span class="javascript">                        <span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">                            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span></span><br>                        &#125;<br>                    &#125;<br>                &#125;,<br>                template:<br>               `<br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;$emit(&quot;abc&quot;,1,2)&#x27;</span>&gt;</span></span></span><br>                    点击<br><span class="handlebars"><span class="xml">                    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br>                    `<br>            &#125;<br>        &#125;<br><span class="javascript">    &#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="v-model传参"><a href="#v-model传参" class="headerlink" title="v-model传参"></a>v-model传参</h6><p>可以使用v-model传参的方式进行数据交互</p><p>组件上可以使用v-model:参数=变量的方式进行数据交互，组件需要接收参数</p><p>组件里可以使用$emit方式进行数据通信，需要使用update：参数名称 的方式进行数据传递</p><p>一个组件上可以放任意多的v-model分发到组件内的元素上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>这个是message:&#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>这个是name:&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tan</span> <span class="hljs-attr">v-model:abc</span>=<span class="hljs-string">&#x27;message&#x27;</span> <span class="hljs-attr">v-model:def</span>=<span class="hljs-string">&#x27;name&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">tan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>Vue.createApp(&#123;<br><span class="javascript"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript">message:<span class="hljs-string">&#x27;123&#x27;</span>,</span><br><span class="javascript">name:<span class="hljs-string">&#x27;234&#x27;</span></span><br>&#125;<br>&#125;,<br>components:&#123;<br><span class="javascript"><span class="hljs-string">&quot;tan&quot;</span>:&#123;</span><br><span class="javascript"><span class="hljs-string">&quot;props&quot;</span>:[<span class="hljs-string">&#x27;abc&#x27;</span>,<span class="hljs-string">&#x27;def&#x27;</span>],</span><br>template:<br>`<br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&#x27;abc&#x27;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&#x27;$emit(&quot;update:abc&quot;,$event.target.value)&#x27;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&#x27;def&#x27;</span> @<span class="hljs-attr">input</span>=<span class="hljs-string">&#x27;$emit(&quot;update:def&quot;,$event.target.value)&#x27;</span>/&gt;</span></span></span><br>`<br>&#125;<br>&#125;<br><span class="javascript">&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="slot插槽参数用法"><a href="#slot插槽参数用法" class="headerlink" title="slot插槽参数用法"></a>slot插槽参数用法</h6><p>可以使用template标签配合slot标签进行需求输出</p><p>template标签可以使用v-slot:定义名，slot标签通过name属性配合输出的定义名进行需求输出</p><p>slot标签不会输出template包起来的标签内容</p><p>template标签的v-slot：default值可以定义slot标签的默认输出内容</p><p>使用v-slot：default后，slot标签将不会显示公共元素内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tan</span>&gt;</span><br>插槽slot进阶<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>头部<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:content</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>尾部<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>设置成为默认值<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>Vue.createApp(&#123;<br>components:&#123;<br><span class="javascript"><span class="hljs-string">&#x27;tan&#x27;</span>:&#123;</span><br>template:`<br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br>123<br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;header&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;content&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&#x27;footer&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br>`<br>&#125;<br>&#125;<br><span class="javascript">&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="slot插槽数据交互"><a href="#slot插槽数据交互" class="headerlink" title="slot插槽数据交互"></a>slot插槽数据交互</h6><p>组件标签内部是没法使用组件上面的数据的，通过slot来进行数据交互</p><p>slot标签通过:属性=数据方式传递数据，在组件标签内容中使用template进行接收</p><p>template标签上使用v-solt:作用域名=自定义属性名，这样自定义属性名上就会有slot的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tan</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;name in xxx.item&quot;</span>&gt;</span><br>&#123;&#123;name&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tan</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>Vue.createApp(&#123;<br>components:&#123;<br><span class="javascript"><span class="hljs-string">&#x27;tan&#x27;</span>:&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript"><span class="hljs-string">&quot;arr&quot;</span>:[<span class="hljs-string">&quot;升职&quot;</span>,<span class="hljs-string">&quot;加薪&quot;</span>,<span class="hljs-string">&quot;快乐&quot;</span>]</span><br>&#125;<br>&#125;,<br>template:`<br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;name in arr&quot;</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:item</span>=<span class="hljs-string">&#x27;arr&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span></span></span><br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br>`<br>&#125;<br>&#125;<br><span class="javascript">&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="Es6解构赋值与结构插槽prop"><a href="#Es6解构赋值与结构插槽prop" class="headerlink" title="Es6解构赋值与结构插槽prop"></a>Es6解构赋值与结构插槽prop</h6><p>数组赋值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];</span><br><span class="javascript"><span class="hljs-keyword">var</span> [a,b,c]=arr;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(a,b,c);<span class="hljs-comment">//1,2,3</span></span><br><br><span class="javascript"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];</span><br><span class="javascript"><span class="hljs-keyword">var</span> [a,,c]=arr;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(a,c);<span class="hljs-comment">//1,3</span></span><br><br><span class="javascript"><span class="hljs-keyword">var</span> arr=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];</span><br><span class="javascript"><span class="hljs-keyword">var</span> [a,...tan]=arr;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(a,tan);<span class="hljs-comment">//1,[2,3]</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>json赋值</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">var</span> <span class="hljs-comment">&#123;a,b&#125;</span>=<span class="hljs-comment">&#123;a:10,b:20&#125;</span><span class="hljs-comment">//JSON格式key要一样,此例变量必须为&#123;a,b&#125;</span><br>console.log(a,b);<span class="hljs-comment">//10,20</span><br><br><span class="hljs-keyword">var</span> <span class="hljs-comment">&#123;a,b,...tan&#125;</span>=<span class="hljs-comment">&#123;a:10,b:20,c:30,d:40&#125;</span>;<br>console.log(a,b,tan);<span class="hljs-comment">//10,20,[c:30,d:40]</span><br><br><span class="hljs-comment">//定义默认值,当JSON值为undefined时取值为默认值</span><br><span class="hljs-keyword">var</span> <span class="hljs-comment">&#123;a=2,b=4,c=6,d=8&#125;</span>=<span class="hljs-comment">&#123;a:10,b:20,d:undefined&#125;</span>;<br>console.log(a,b,c,d);<span class="hljs-comment">//10,20,6,8</span><br><br><span class="hljs-comment">//重命名</span><br><span class="hljs-keyword">var</span> <span class="hljs-comment">&#123;a:c,b&#125;</span>=<span class="hljs-comment">&#123;a:10,b:20&#125;</span>;<br>console.log(a)<span class="hljs-comment">//错误</span><br>console.log(c)<span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure><p>slot数据交互里面的内容替换成下面内容，应用了es6的解构赋值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">tan</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>=<span class="hljs-string">&quot;&#123;item&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;name in item&quot;</span>&gt;</span><br>&#123;&#123;name&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tan</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="动态插槽与插槽缩写"><a href="#动态插槽与插槽缩写" class="headerlink" title="动态插槽与插槽缩写"></a>动态插槽与插槽缩写</h6><p>插槽动态形式v-slot:[变量]</p><p>插槽缩写#，#可以代替v-slot:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html">//下面两种写法是相等的--缩写<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>//加上方括号后通过data数据修改变量，从而实现动态<br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:</span>[<span class="hljs-attr">abc</span>]&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> #[<span class="hljs-attr">abc</span>]&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>data()&#123;<br>return&#123;<br>abc:&#x27;default&#x27;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="refs的用法"><a href="#refs的用法" class="headerlink" title="refs的用法"></a>refs的用法</h5><p>任何标签都可以使用ref属性赋予一个自定义值</p><p>可以通过内置的$refs来获取定义的ref的所有的内容元素</p><p>如果给予组件ref，那么$refs可以直接访问或修改组件内事件或数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;bobo&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;go&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>Vue.createApp(&#123;<br>methods:&#123;<br><span class="javascript"><span class="hljs-function"><span class="hljs-title">go</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.$refs.bobo.innerHTML=<span class="hljs-string">&#x27;ref修改成功&#x27;</span></span><br>&#125;<br>&#125;<br><span class="javascript">&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="vue3-动画"><a href="#vue3-动画" class="headerlink" title="vue3-动画"></a>vue3-动画</h5><h6 id="transition标签"><a href="#transition标签" class="headerlink" title="transition标签"></a>transition标签</h6><p>使用transition标签来完成动画效果</p><p>transition标签需要配合name及需要动画元素的v-if来实现效果</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">v-enter-from:定义进入过渡的开始状态</span><br><span class="hljs-section">v-enter-active:定义进入过渡生效时的状态</span><br><span class="hljs-section">v-enter-to:定义进入过渡的结束状态</span><br><span class="hljs-section">v-leave-from:定义离开过渡的开始状态</span><br><span class="hljs-section">v-leave-active:定义离开过渡生效时的状态</span><br><span class="hljs-section">v-leave-to:定义离开过渡的结束状态</span><br><br>6个动画类，动画类之间不能使用其他东西，不然会失效<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br>.abc&#123;<br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00CBFF</span>;</span><br>&#125;<br>.bobo-enter-from&#123;<br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;</span><br>&#125;<br>.bobo-enter-active&#123;<br><span class="css"><span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span> ease;</span><br>&#125;<br><span class="css"><span class="hljs-selector-class">.bobo-enter-to</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00FF7F</span>;&#125;</span><br><br>.bobo-leave-from&#123;<br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br>&#125;<br>.bobo-leave-active&#123;<br><span class="css"><span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span> ease;</span><br>&#125;<br><span class="css"><span class="hljs-selector-class">.bobo-leave-to</span>&#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00FF7F</span>;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;go&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bobo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;abc&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>Vue.createApp(&#123;<br><span class="javascript"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript"><span class="hljs-string">&quot;ok&quot;</span>:<span class="hljs-literal">true</span></span><br>&#125;<br>&#125;,<br>methods:&#123;<br><span class="javascript"><span class="hljs-function"><span class="hljs-title">go</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.ok = !<span class="hljs-built_in">this</span>.ok</span><br>&#125;<br>&#125;<br><span class="javascript">&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="自定义class类名"><a href="#自定义class类名" class="headerlink" title="自定义class类名"></a>自定义class类名</h6><p>transition可以自定义class来实现动画</p><p>使用动画名字-class=‘自定义class名称’</p><p>自定义class动画会覆盖原有动画</p><p>duration可以设定动画持续时间</p><h6 id="transition生命周期"><a href="#transition生命周期" class="headerlink" title="transition生命周期"></a>transition生命周期</h6><p>进入：before-enter、enter、after-enter</p><p>离开：before-leave、leave、after-leave</p><p>所有生命周期函数的第一个参数代表的是动画元素</p><p>enter和leave生命周期第二个参数要调用后才会执行下一个生命周期函数</p><p>transition标签上的：css属性如果为false则会跳过动画</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br>.abc&#123;<br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00CBFF</span>;</span><br>&#125;<br>.aaa&#123;<br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">0px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">0px</span>;</span><br>&#125;<br>.bbb&#123;<br><span class="css"><span class="hljs-attribute">transition</span>: all <span class="hljs-number">1s</span> ease;</span><br>&#125;<br><span class="css"><span class="hljs-selector-class">.ccc</span>&#123;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00FF7F</span>;&#125;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;go&quot;</span>&gt;</span>点击<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">transition</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;bobo&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">enter-from-class</span>=<span class="hljs-string">&#x27;aaa&#x27;</span> <span class="hljs-attr">enter-active-class</span>=<span class="hljs-string">&quot;bbb&quot;</span> <span class="hljs-attr">enter-to-class</span>=<span class="hljs-string">&quot;ccc&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">leave-from-class</span>=<span class="hljs-string">&#x27;ccc&#x27;</span> <span class="hljs-attr">leave-active-class</span>=<span class="hljs-string">&quot;bbb&quot;</span> <span class="hljs-attr">leave-to-class</span>=<span class="hljs-string">&quot;aaa&quot;</span></span><br><span class="hljs-tag">        //<span class="hljs-attr">:duration</span>=<span class="hljs-string">&quot;2000&quot;</span>这个设置整体<span class="hljs-attr">2000</span>毫秒后结束</span><br><span class="hljs-tag">        <span class="hljs-attr">:duration</span>=<span class="hljs-string">&quot;&#123;enter:2000,leave:500&#125;&quot;</span>  分开设置结束时间</span><br><span class="hljs-tag">          </span><br><span class="hljs-tag">         生命周期</span><br><span class="hljs-tag">        @<span class="hljs-attr">before-enter</span>=<span class="hljs-string">&quot;beforeEnter&quot;</span></span><br><span class="hljs-tag">@<span class="hljs-attr">enter</span>=<span class="hljs-string">&quot;Enter&quot;</span></span><br><span class="hljs-tag">@<span class="hljs-attr">after-enter</span>=<span class="hljs-string">&quot;afterEnter&quot;</span></span><br><span class="hljs-tag">@<span class="hljs-attr">before-leave</span>=<span class="hljs-string">&quot;beforeLeave&quot;</span></span><br><span class="hljs-tag">@<span class="hljs-attr">leave</span>=<span class="hljs-string">&quot;Leave&quot;</span></span><br><span class="hljs-tag">@<span class="hljs-attr">after-leave</span>=<span class="hljs-string">&quot;afterLeave&quot;</span></span><br><span class="hljs-tag">         &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;abc&quot;</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;ok&quot;</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>Vue.createApp(&#123;<br><span class="javascript"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript"><span class="hljs-string">&quot;ok&quot;</span>:<span class="hljs-literal">true</span></span><br>&#125;<br>&#125;,<br>methods:&#123;<br><span class="javascript"><span class="hljs-function"><span class="hljs-title">go</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.ok = !<span class="hljs-built_in">this</span>.ok</span><br>&#125;,<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">beforeEnter</span>(<span class="hljs-params">el</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;进入之前&quot;</span>,el)</span><br>            &#125;,<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">Enter</span>(<span class="hljs-params">el,done</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;进入之中&quot;</span>,el)</span><br>                done()<br>            &#125;,<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">afterEnter</span>(<span class="hljs-params">el</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;进入之后&quot;</span>,el)</span><br>            &#125;,<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">beforeLeave</span>(<span class="hljs-params">el</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;离开之前&quot;</span>,el)</span><br>            &#125;,<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">Leave</span>(<span class="hljs-params">el,done</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;离开之中&quot;</span>,el)</span><br>                done()<br>            &#125;,<br><span class="javascript">            <span class="hljs-function"><span class="hljs-title">afterLeave</span>(<span class="hljs-params">el</span>)</span>&#123;</span><br><span class="javascript">                <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;离开之后&quot;</span>,el)</span><br>            &#125;<br>            <br>&#125;<br><span class="javascript">&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="transition初始渲染过渡"><a href="#transition初始渲染过渡" class="headerlink" title="transition初始渲染过渡"></a>transition初始渲染过渡</h6><p>使用appear属性让动画首次过渡</p><p>appear-from-class首次过渡进入之前</p><p>appear-active-class首次过渡动画中</p><p>appear-to-class首次过渡结束时的状态</p><p>appear首次过渡只会执行一次，不会重复调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;transition<br>appear<br>appear-from-class=&quot;aaa&quot;<br>appear-active-class=&quot;bbb&quot;<br>appear-to-class=&quot;ccc&quot;<br>&gt;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="多个元素的过渡"><a href="#多个元素的过渡" class="headerlink" title="多个元素的过渡"></a>多个元素的过渡</h6><p>transition标签下是不允许单独出现多个动画元素，必须有逻辑关系</p><p>如果有多个动画标签并且没有逻辑关系，便不会显示，并且有警告框</p><p>transition标签使用动画，尽量把原始类放到最上方，不然会有小问题</p><h6 id="过渡模式"><a href="#过渡模式" class="headerlink" title="过渡模式"></a>过渡模式</h6><p>属性：mode</p><p>默认：mode:”in-out”;</p><p>可以使用mode:”out-in”,当前动画元素执行完毕后，才会执行下一个元素</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-attribute">transition</span><br>mode:<span class="hljs-string">&quot;out-in&quot;</span><br>&gt;<br>&lt;/<span class="hljs-attribute">transition</span>&gt;<br></code></pre></td></tr></table></figure><h6 id="多组件之间的过渡"><a href="#多组件之间的过渡" class="headerlink" title="多组件之间的过渡"></a>多组件之间的过渡</h6><p>组件如果过渡，需要只有一个单父级，不然不会产生过渡，并且有警告框</p><p>如果只有一个单父级，里面可以放入任意元素，可以过渡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;clk&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;tan&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a&quot;</span>  <span class="hljs-attr">checked</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span>组件A<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;clk&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;bo&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>  <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;b&quot;</span>  /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span>组件B<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>&lt;transition<br>enter-from-class=&#x27;aaa&#x27;<br>enter-active-class=&#x27;bbb&#x27;<br>leave-to-class=&#x27;aaa&#x27;<br>leave-active-class=&#x27;ccc&#x27;<br>&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;clk&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>Vue.createApp(&#123;<br><span class="javascript"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript"><span class="hljs-string">&quot;clk&quot;</span>:<span class="hljs-string">&#x27;tan&#x27;</span></span><br>&#125;<br>&#125;,<br>components:&#123;<br><span class="javascript"><span class="hljs-string">&#x27;tan&#x27;</span>:&#123;</span><br>template:`<br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>组件A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br>`<br>&#125;,<br><span class="javascript"><span class="hljs-string">&#x27;bo&#x27;</span>:&#123;</span><br>template:`<br><span class="handlebars"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;def&quot;</span>&gt;</span>组件B<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br>`<br>&#125;<br>&#125;<br><span class="javascript">&#125;).mount(<span class="hljs-string">&quot;.test&quot;</span>)</span><br></code></pre></td></tr></table></figure><h6 id="tansition-group列表的进入与离开"><a href="#tansition-group列表的进入与离开" class="headerlink" title="tansition-group列表的进入与离开"></a>tansition-group列表的进入与离开</h6><p>标签内的元素必须包含逻辑判断或：key，不然会有警告窗</p><p>这个标签的生命周期和transition标签是一样的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;add&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;remove&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;remove&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&lt;transition-group<br>enter-from-class=&#x27;enterFrom&#x27;<br>enter-active-class=&#x27;enterActive&#x27;<br>leave-to-class=&#x27;leaveFrom&#x27;<br>leave-active-class=&#x27;leaveActive&#x27;<br>&gt;<br><span class="hljs-comment">&lt;!-- key不要用index，元素出现的位置有点小问题 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;abc&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br><br>&#123;&#123;item&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br>Vue.createApp(&#123;<br><span class="javascript"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript"><span class="hljs-string">&quot;list&quot;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],</span><br><span class="javascript"><span class="hljs-string">&quot;num&quot;</span>:<span class="hljs-number">6</span></span><br>&#125;<br>&#125;,<br>methods:&#123;<br><span class="javascript"><span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.list.splice(<span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random()*<span class="hljs-built_in">this</span>.list.length),<span class="hljs-number">0</span>,<span class="hljs-built_in">this</span>.num)</span><br><span class="javascript"><span class="hljs-built_in">this</span>.num++</span><br>&#125;,<br><span class="javascript"><span class="hljs-function"><span class="hljs-title">remove</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.list.splice(<span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">Math</span>.random()*<span class="hljs-built_in">this</span>.list.length),<span class="hljs-number">1</span>)</span><br>&#125;<br><br>&#125;<br><span class="javascript">&#125;).mount(<span class="hljs-string">&#x27;.test&#x27;</span>)</span><br></code></pre></td></tr></table></figure><h6 id="tansition-group列表的移动过渡"><a href="#tansition-group列表的移动过渡" class="headerlink" title="tansition-group列表的移动过渡"></a>tansition-group列表的移动过渡</h6><p>设定列表元素的位置过渡，例插入元素时其他元素被挤开，位置改变的过渡</p><p>在transition-group标签上设定move-class或者name-move的class来设定过渡</p><p>只可以设定列表的位置的过渡，其他样式不支持过渡</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;transition-group<br>move-class&#x3D;&quot;move&quot;<br>&gt;<br>    &lt;!-- key不要用index，元素出现的位置有点小问题 --&gt;<br>&lt;div class&#x3D;&quot;abc&quot; v-for&#x3D;&quot;item in list&quot; :key&#x3D;&quot;item&quot;&gt;<br>&#123;&#123;item&#125;&#125;<br>&lt;&#x2F;div&gt;<br>&lt;&#x2F;transition-group&gt;<br></code></pre></td></tr></table></figure><h5 id="animate（css库）"><a href="#animate（css库）" class="headerlink" title="animate（css库）"></a>animate（css库）</h5><h6 id="animate的基本使用"><a href="#animate的基本使用" class="headerlink" title="animate的基本使用"></a>animate的基本使用</h6><p>引入animate.min.css文件</p><p>在元素上写入相应的class名称</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/animate.min.css&quot;</span>/&gt;</span><br><br><br>//animated一定要写上<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;animated lightSpeedIn&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tan&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="animate在vue上的应用"><a href="#animate在vue上的应用" class="headerlink" title="animate在vue上的应用"></a>animate在vue上的应用</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">transition-group</span> </span><br><span class="hljs-tag"><span class="hljs-attr">enter-active-class</span>=<span class="hljs-string">&quot;animated lightSpeedIn&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">leave-active-class</span>=<span class="hljs-string">&quot;animated lightSpeedOut&quot;</span></span><br><span class="hljs-tag">&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;content in list&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sky&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br>&#123;&#123;content&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">transition-group</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="Tweenmax库-js库"><a href="#Tweenmax库-js库" class="headerlink" title="Tweenmax库(js库)"></a>Tweenmax库(js库)</h5><h6 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//从什么样子变成原始状态</span><br><span class="hljs-comment">//TweenLite可以替换成Tweenmax</span><br><span class="hljs-selector-tag">TweenLite</span><span class="hljs-selector-class">.from</span>(<span class="hljs-string">&quot;#tan&quot;</span>,<span class="hljs-number">3</span>,&#123;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>,<br><span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>,<br><span class="hljs-attribute">x</span>:<span class="hljs-string">&quot;200&quot;</span>,<span class="hljs-comment">//相当于translateX平移</span><br><span class="hljs-attribute">rotation</span>:<span class="hljs-string">&quot;90deg&quot;</span><span class="hljs-comment">//旋转，类似rotate，但是这儿不能用rotate</span><br>&#125;);<br><br><span class="hljs-comment">//从原始状态变成什么样子</span><br><span class="hljs-selector-tag">TweenLite</span><span class="hljs-selector-class">.to</span>(<span class="hljs-string">&quot;#tan&quot;</span>,<span class="hljs-number">3</span>,&#123;·····&#125;);<br><br><span class="hljs-comment">//自己设定一个最开始的状态，在设定一个最终状态</span><br><span class="hljs-selector-tag">TweenLite</span><span class="hljs-selector-class">.fromTo</span>(<span class="hljs-string">&quot;#tan&quot;</span>,<span class="hljs-number">3</span>,&#123;开始状态&#125;,&#123;最终状态&#125;);<br></code></pre></td></tr></table></figure><h6 id="深入使用"><a href="#深入使用" class="headerlink" title="深入使用"></a>深入使用</h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">//控制多个元素</span><br><span class="hljs-comment">//第一个参数:选择元素，第二个：总体变化时间，第三个：变化内容，第四个：单个元素变化时间</span><br><span class="hljs-selector-tag">TweenMax</span><span class="hljs-selector-class">.staggerTo</span>(<span class="hljs-string">&quot;.tan&quot;</span>,<span class="hljs-number">3</span>,&#123;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">50</span>,<br><span class="hljs-attribute">height</span>:<span class="hljs-number">50</span>,<br><span class="hljs-attribute">backgroundColor</span>:<span class="hljs-string">&#x27;pink&#x27;</span>,<br><span class="hljs-attribute">opacity</span>:<span class="hljs-number">0</span><br>&#125;,<span class="hljs-selector-tag">1</span>);<br><br><span class="hljs-selector-tag">TweenMax</span><span class="hljs-selector-class">.staggerFrom</span>(<span class="hljs-string">&quot;.tan&quot;</span>,<span class="hljs-number">3</span>,&#123;...&#125;,<span class="hljs-number">0.5</span>);<br><span class="hljs-selector-tag">TweenMax</span><span class="hljs-selector-class">.staggerFromTo</span>(<span class="hljs-string">&quot;.tan&quot;</span>,<span class="hljs-number">3</span>,&#123;...&#125;,<span class="hljs-number">0.5</span>);<br><br><span class="hljs-comment">//cycle属性可以让元素循环设定参数</span><br><span class="hljs-selector-tag">TweenMax</span><span class="hljs-selector-class">.staggerTo</span>(<span class="hljs-string">&quot;.tan&quot;</span>,<span class="hljs-number">3</span>,&#123;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">50</span>,<br><span class="hljs-attribute">height</span>:<span class="hljs-number">50</span>,<br><span class="hljs-attribute">cycle</span>:&#123;<br><span class="hljs-attribute">backgroundColor</span>:[<span class="hljs-string">&#x27;pink&#x27;</span>,<span class="hljs-string">&#x27;green&#x27;</span>],<br><span class="hljs-attribute">y</span>:function(index)&#123;<br>return index*<span class="hljs-number">10</span><br>&#125;<br>&#125;<br>&#125;,<span class="hljs-number">0.1</span>);<br></code></pre></td></tr></table></figure><h6 id="tweenmax在vue中的使用"><a href="#tweenmax在vue中的使用" class="headerlink" title="tweenmax在vue中的使用"></a>tweenmax在vue中的使用</h6><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">methods:&#123;<br>before<span class="hljs-constructor">Enter(<span class="hljs-params">el</span>)</span>&#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TweenMax</span>.</span></span>from(el,<span class="hljs-number">1</span>,&#123;opacity:<span class="hljs-number">0</span>&#125;)<br>&#125;,<br>enter(el)&#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TweenMax</span>.</span></span><span class="hljs-keyword">to</span>(el,<span class="hljs-number">1</span>,&#123;color:<span class="hljs-string">&quot;red&quot;</span>&#125;)<br>&#125;,<br>leave(el)&#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">TweenMax</span>.</span></span>from(el,<span class="hljs-number">1</span>,&#123;opacity:<span class="hljs-number">0</span>&#125;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="vue-cli4脚手架"><a href="#vue-cli4脚手架" class="headerlink" title="vue-cli4脚手架"></a>vue-cli4脚手架</h5><p>安装：先下载安装node.js(百度下载)（检验cmd中  node -v）</p><p>安装cnpm: 在cmd中输入  npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a>    （检验：cmd中 cnpm）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>安装cnpm<br>npm install -g cnpm --registry=https:<span class="hljs-regexp">//</span>registry.npm.taobao.org<br><br><span class="hljs-regexp">//</span>安装cli<br>cnpm install @vue/cli -g<br><span class="hljs-regexp">//</span>安装完成后检验：vue --versiton<br><br><span class="hljs-regexp">//</span>创建项目<br>vue create 项目名<br><br><span class="hljs-regexp">//</span>进入项目文件<br>cd 项目名<br><br><span class="hljs-regexp">//</span>运行项目<br>npm run serve<br><br><span class="hljs-regexp">//</span>复制给出的地址用浏览器打开<br></code></pre></td></tr></table></figure><p>完整安装步骤：csdn博客(借用一下)  <a href="https://blog.csdn.net/diwang_718/article/details/102912743">https://blog.csdn.net/diwang_718/article/details/102912743</a></p><h6 id="vue-cli4文件关系"><a href="#vue-cli4文件关系" class="headerlink" title="vue-cli4文件关系"></a>vue-cli4文件关系</h6><p>package-lock.json    node_modules的依赖项</p><p>package.json    当前项目开发状态信息</p><p>public    存放index页面</p><p>style上面 不 加上scoped属性，则是全局的，加上则是局部的</p><h6 id="vue-cli4模块化开发"><a href="#vue-cli4模块化开发" class="headerlink" title="vue-cli4模块化开发"></a>vue-cli4模块化开发</h6><p>导出：//export</p><p>导入：//import</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">导出(此数据在tan.vue文件中)<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">a</span>=4<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">b</span>=5<br><span class="hljs-builtin-name">export</span> default&#123;<br>c:6;<br>d:7;<br>&#125;<br><br>导入（只有export时）<br>import &#123;a,b&#125; <span class="hljs-keyword">from</span> tan.vue<br><br>导入（只有<span class="hljs-builtin-name">export</span> default时）<br>import pop(名字随便起) <span class="hljs-keyword">from</span> tan.vue<br><br>导入（两者都有时）（default导入在前）<br>import pop,&#123;a,b&#125; <span class="hljs-keyword">from</span> tan.vue<br></code></pre></td></tr></table></figure><h5 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h5><h6 id="let声明"><a href="#let声明" class="headerlink" title="let声明"></a>let声明</h6><p>只允许声明一次，声明后可以修改</p><p>支持块级作用域，不会变量提升</p><p>例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tan&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="javascript">allbtn = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;button&#x27;</span>);</span><br><span class="javascript"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;allbtn.length;i++)&#123;</span><br><span class="javascript">allbtn[i].onclick=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;</span><br>alert(i)<br>&#125;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="const"><a href="#const" class="headerlink" title="const"></a>const</h6><p>const必须有初始化的值，不能被修改覆盖</p><p>支持块级作用域，不能变量提升</p><p>如果const为对象时，其属性可以被修改，但本身不能被修改</p><h6 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h6><p>内部没有默认的arguments</p><p>没有变量提升，内部this指向当前作用域</p><p>不可以被new</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arcade">tbz = <span class="hljs-function"><span class="hljs-params">sky</span> =&gt;</span> <span class="hljs-number">10</span><br>相当于<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tbz</span>(<span class="hljs-params">sky</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">10</span><br>&#125;<br><br>（）内可以放入多个参数<br>tbz = <span class="hljs-function">(<span class="hljs-params">x,y,z</span>) =&gt;</span> x+y+z<br>相当于<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tbz</span>(<span class="hljs-params">x,y,z</span>)</span>&#123;<br><span class="hljs-keyword">return</span> x+y+z<br>&#125;<br><br>还可以这样写&#123;&#125;可以写入执行语句<br>tbz = <span class="hljs-function">(<span class="hljs-params">x,y,z</span>) =&gt;</span>&#123;alert(<span class="hljs-number">1</span>);<span class="hljs-keyword">return</span> x+y+z&#125;<br><br>匿名箭头函数<br>( <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;alert(<span class="hljs-number">1</span>)&#125; )()<br></code></pre></td></tr></table></figure><h5 id="setup方法"><a href="#setup方法" class="headerlink" title="setup方法"></a>setup方法</h5><h6 id="setup方法的基本使用"><a href="#setup方法的基本使用" class="headerlink" title="setup方法的基本使用"></a>setup方法的基本使用</h6><p>在setup中，我们可以声明内容和输出内容</p><p>setup里面的值不要和data与methods或其他的输出值重叠</p><p>setup里面的事件是没法操作data的内容的，但是methods里面的事件可以操作setup定义的值</p><p>setup里面的内容改变后，不会重新渲染页面，如果页面渲染时，被改变的值得内容会被渲染上</p><p>setup里面的内容如果使用ref方法(需要引入)包装，那么内容改变时就会重新渲染页面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> a = ref(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">var</span> add = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//this.a++;</span><br>a.value++;使用value更靠谱一些<br>&#125;<br><span class="hljs-keyword">return</span> &#123;a,add&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="setup-props"><a href="#setup-props" class="headerlink" title="setup-props"></a>setup-props</h6><p>在setup参数中，第一个参数代表的是父级传入的props</p><p>ref的内容的修改尽量使用其变量的value属性</p><p>在vue中watchEffect监听会有初始化和全局化，watch监听更准确</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">&lt;tan :title=<span class="hljs-string">&quot;title&quot;</span>&gt;&lt;/tan&gt;<br>props[<span class="hljs-string">&#x27;title&#x27;</span>]<br>或者<br>props&#123;<br>title:<span class="hljs-built_in">String</span><br>&#125;<br><br><span class="hljs-keyword">import</span> &#123;watchEffect,watch&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><br>setup(props)&#123;<br>watchEffect(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(props.title)<br>&#125;)<br>watch(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br><span class="hljs-keyword">return</span> props.title<br>&#125;,<span class="hljs-function"><span class="hljs-params">(newValue)</span>=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(neValue)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="setup-context"><a href="#setup-context" class="headerlink" title="setup-context"></a>setup-context</h6><p>在setup中，第二个参数为上下文对象，可以使用解构赋值</p><p>上下文对象的attrs为可以显示传递过来的属性，但是不可以和props属性共存</p><p>上下文对象的emit可以给父级发送数据，使用方式和普通emit统一</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params">props,context</span>)</span>&#123;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> &#123;attrs,emit&#125; =context;<br><span class="hljs-keyword">var</span> abc = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>emit(<span class="hljs-string">&quot;zhangsan&quot;</span>,a) <span class="hljs-comment">//a为传递的数据</span><br>&#125;<br>&#125;<br>或者<br><span class="hljs-function"><span class="hljs-title">setup</span>(<span class="hljs-params">props,context</span>)</span>&#123;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> abc = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>context.emit(<span class="hljs-string">&quot;zhangsan&quot;</span>,a) <span class="hljs-comment">//a为传递的数据</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="setup-context-solts"><a href="#setup-context-solts" class="headerlink" title="setup-context-solts"></a>setup-context-solts</h6><p>slots属性需要以函数的形式去查看插槽内容，可以通过赋值去修改    插槽内容</p><p>如果slot传值的话，使用solts会报错，就算使用定时器也会报错</p><p>slot内容发生修改，slot永远为最新值</p>]]></content>
    
    
    <categories>
      
      <category>Web前端(网易学习)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网易-javaScript交互</title>
    <link href="/2021/12/23/%E7%BD%91%E6%98%93-javaScript%E4%BA%A4%E4%BA%92/"/>
    <url>/2021/12/23/%E7%BD%91%E6%98%93-javaScript%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<h5 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h5><h6 id="最基本的使用"><a href="#最基本的使用" class="headerlink" title="最基本的使用"></a>最基本的使用</h6><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">&lt;script&gt;<br>var ajax = <span class="hljs-built_in">new</span> XMLHttpRequest();<span class="hljs-comment">#创建Ajax对象</span><br>ajax.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;接口地址&#x27;</span>); <span class="hljs-comment"># 请求类型，请求接口地址</span><br>ajax.<span class="hljs-built_in">send</span>();<span class="hljs-comment">#对地址进行请求</span><br>ajax.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>()&#123;</span><br>console.<span class="hljs-built_in">log</span>(ajax.responseText);<span class="hljs-comment">#请求结果</span><br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h6 id="get请求与发送数据"><a href="#get请求与发送数据" class="headerlink" title="get请求与发送数据"></a>get请求与发送数据</h6><p>get请求是明文的</p><p>get发送数据是接口后面发那个如？，问号后面就是数据</p><p>发送的数据一般都是key=value的形式，多条数据用&amp;相连</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs typescript">&lt;script <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> ajax = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>ajax.open(<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;http://myjavascript.cn/textToJson&#x27;</span>)<br>ajax.send();<br>ajax.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;(&#x27;</span>+ajax.responseText+<span class="hljs-string">&#x27;)&#x27;</span>));<br>btn.style.backgroundColor = <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;(&#x27;</span>+ajax.responseText+<span class="hljs-string">&#x27;)&#x27;</span>).text <br>&#125;<br>&#125;<br>&lt;/script&gt; <br><br><span class="hljs-comment">//字符串格式的json，变成json格式</span><br><span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;(&#x27;</span>+ajax.responseText+<span class="hljs-string">&#x27;)&#x27;</span>))<br><span class="hljs-built_in">JSON</span>.parse(ajax.responseText)<br></code></pre></td></tr></table></figure><h6 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h6><p>同步：一个一个的执行，效率低</p><p>异步：一起执行，效率高，容错率高</p><p>ajax的open方法有第三个参数，默认是true异步，false为同步</p><h6 id="ajax状态码"><a href="#ajax状态码" class="headerlink" title="ajax状态码"></a>ajax状态码</h6><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">0</span>（未初始化）还没有调用<span class="hljs-built_in">open</span>()方法<br><span class="hljs-number">1</span>（启动）已调用<span class="hljs-built_in">open</span>方法，但还未调用<span class="hljs-built_in">send</span>方法<br><span class="hljs-number">2</span>（发送）已调用<span class="hljs-built_in">send</span>方法，但还未接收数据<br><span class="hljs-number">3</span>（接收）已经接收部分数据<br><span class="hljs-number">4</span>（完成）已接收全部数据且可以在客户端使用<br></code></pre></td></tr></table></figure><p>兼容（有些版本不支持ajax.onload方法）</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs fortran">正常<br>ajax.onload = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>console.<span class="hljs-built_in">log</span>(ajax.responseText);<br>&#125;;<br><br>兼容老版本<br>ajax.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(ajax.readyState == <span class="hljs-number">4</span>)&#123;<br>console.<span class="hljs-built_in">log</span>(ajax.responseText);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h6 id="服务器状态码（ajax-status）"><a href="#服务器状态码（ajax-status）" class="headerlink" title="服务器状态码（ajax.status）"></a>服务器状态码（ajax.status）</h6><p>200    成功</p><p>304    缓存</p><p>404    找不到页面</p><p>500    服务器错误</p><p>如何去掉缓存：链接不一样，就会重新获取，在连接后面加？就可以了</p><h6 id="POST字符串请求"><a href="#POST字符串请求" class="headerlink" title="POST字符串请求"></a>POST字符串请求</h6><p>post请求数据不是明文的，需要放在send方法里进行发送</p><p>post一般区分为字符串数据和非字符串数据</p><p>post发送时，需要给一个请求头告诉服务器发送的类型</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs lua">var ajax = new XMLHttpRequest();<br>ajax.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-string">&#x27;请求地址&#x27;</span>);<br>ajax.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>,<span class="hljs-string">&#x27;application/x-www-form-urlencodeed&#x27;</span>);<br>ajax.send(<span class="hljs-string">&#x27;user=len&amp;pass=123456&#x27;</span>)<br>ajax.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">if</span>(ajax.readystate == <span class="hljs-number">4</span>)&#123;<br><span class="hljs-keyword">if</span>(ajax.<span class="hljs-built_in">status</span>&gt;=<span class="hljs-number">200</span> &amp;&amp; ajax.<span class="hljs-built_in">status</span>&lt;<span class="hljs-number">300</span> || ajax.<span class="hljs-built_in">status</span> == <span class="hljs-number">304</span>)&#123;<br>console.<span class="hljs-built_in">log</span>(ajax.responseText);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;连接失败&#x27;</span>);<br>console.<span class="hljs-built_in">log</span>(ajax.<span class="hljs-built_in">status</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web前端(网易学习)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js交互</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网易-html5+css3</title>
    <link href="/2021/12/15/%E7%BD%91%E6%98%93html5+css3/"/>
    <url>/2021/12/15/%E7%BD%91%E6%98%93html5+css3/</url>
    
    <content type="html"><![CDATA[<h5 id="css3"><a href="#css3" class="headerlink" title="css3"></a>css3</h5><h6 id="圆角样式"><a href="#圆角样式" class="headerlink" title="圆角样式"></a>圆角样式</h6><p>border-radius：10px 10px 10px 10px;</p><p>border-radius：50%;    圆 椭圆</p><p>10px是每个圆角的半径</p><p>1个值：四个角都是这个值</p><p>两个值：第一个值(左上右下)，第二个值(右上左下)</p><p>三个值：第一个值(左上)，第二个值(右上左下)，第二个值(右下)</p><p>四个值：左上，右上，右下，左下</p><p>单独写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-top-left-radius</span>:<span class="hljs-number">20px</span>;左上<br><span class="hljs-attribute">border-top-right-radius</span>:<span class="hljs-number">20px</span>;右上<br><span class="hljs-attribute">border-bottom-left-radius</span>:<span class="hljs-number">20px</span>;左下<br><span class="hljs-attribute">border-bottom-right-radius</span>:<span class="hljs-number">20px</span>;右下<br></code></pre></td></tr></table></figure><h6 id="阴影样式"><a href="#阴影样式" class="headerlink" title="阴影样式"></a>阴影样式</h6><p>box-shadow</p><p>可以设定无限个内外阴影</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">box-shadow:10px </span><span class="hljs-number">10</span>px <span class="hljs-number">10</span>px <span class="hljs-number">10</span>px    <span class="hljs-keyword">black,inset </span><span class="hljs-number">0</span>px <span class="hljs-number">10</span>px <span class="hljs-number">10</span>px <span class="hljs-number">10</span>px red<br> 外阴影 x偏移,y偏移,模糊度,拓展大小,颜色  内阴影 后面参数与前面一样<br></code></pre></td></tr></table></figure><h6 id="过渡样式"><a href="#过渡样式" class="headerlink" title="过渡样式"></a>过渡样式</h6><p>transition</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">transition</span>:过渡名称，过渡时间，过渡类型，延时时间<br>transition-property: all; 过渡属性的名称（all,<span class="hljs-attribute">width</span>,<span class="hljs-attribute">height</span>）<br><span class="hljs-attribute">transition-duration</span>:<span class="hljs-number">2s</span>;过渡时间(单位s或者ms)<br><span class="hljs-attribute">transition-timing-function</span>:过渡类型（ease,linear,ease-in,ease-out,ease-in-out,cubic-bezier）<br>transition-delay:<span class="hljs-number">3s</span>;定义过渡延时时间<br><br>ease,linear,ease-in,ease-out,ease-in-out，  cubic-bezier<br>先加速后减速，匀速，    加速， 减速，  先加速后减速（增强）， 贝塞尔曲线<br></code></pre></td></tr></table></figure><h6 id="变形（transform）"><a href="#变形（transform）" class="headerlink" title="变形（transform）"></a>变形（transform）</h6><p>缩放（scale）</p><p>transform:scale(2);    宽度，高度都放大2倍</p><p>transform:scale(0.5,2);    宽度0.5倍，高度2倍</p><p>transform:scaleX(0.5);    宽度0.5倍</p><p>transform:scaleX(0.5) scaleY(2);    宽度0.5倍，高度2倍</p><p>平移（translate）</p><p>transform:translateX(200px)        沿X轴平移200px</p><p>transform:translateY(200px)        沿y轴平移200px</p><p>transform:translate(200px,100px)        沿y轴,X轴平移200px</p><p>transform:translate(200px)        给一个值只往右移，相当于translate(200px,0)</p><p>transform:translate(50%,10%)        百分比是对应相应的宽度和高度（宽度,高度）</p><p>旋转（rotate）</p><p>transform:rotate(45deg);    放入负数就是逆时针旋转</p><p>transform:rotateX(45deg);    沿X轴旋转（3D）</p><p>transform:rotateY(45deg);    沿Y轴旋转（3D）</p><p>倾斜扭曲（skew）</p><p>transform:skew(45deg);</p><p>中心点（transform-origin）</p><p>以这个点为中心旋转(3中设置中心的方法)</p><p>transform-origin: left top;    以左上点为中心旋转</p><p>transform-origin: 10%  -10%;</p><p>transform-origin: 10px 20px ;</p><p>景深（perspective）</p><p>transform:perspective(800px);</p><p>平移X轴(translateZ)</p><p>拉进元素与视角的距离</p><p>如果在元素内部第一层子元素使用translateZ那么该元素必须具备3D空间</p><p>3D空间：transform-style:preserve-3d;</p><p>变形样式顺序</p><p>样式执行顺序是从左到右，不一样的顺序有不一样的效果，景深效果建议在过渡前加上</p><h6 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h6><p>after（元素之后）</p><p>before（元素之前）</p><p>给予content样式才会显示</p><p>默认为行内样式显示</p><p>可以加position进行定位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#tan</span>&#123;<span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<span class="hljs-attribute">background-color</span>: red;&#125;<br><span class="hljs-selector-id">#tan</span>:after&#123;content: <span class="hljs-string">&#x27;456&#x27;</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#009B00</span>;&#125;<br><span class="hljs-selector-id">#tan</span>:before&#123;content: <span class="hljs-string">&#x27;456&#x27;</span>;<span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;<span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffff7f</span>;&#125;<br></code></pre></td></tr></table></figure><h6 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h6><p>相邻选择器（+）</p><p>找到指定元素同级别的下一个元素</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">.<span class="hljs-built_in">tan</span>+<span class="hljs-built_in">li</span>&#123;&#125;<span class="hljs-built_in">tan</span>后面的<span class="hljs-built_in">li</span>元素<br></code></pre></td></tr></table></figure><p>兄弟选择器（~）</p><p>选择同级别后面的所有元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.class</span>~<span class="hljs-selector-tag">li</span>&#123;&#125;#选择class后面所有的<span class="hljs-selector-tag">li</span>元素<br><span class="hljs-selector-class">.class</span>~*&#123;&#125;#选择class后面的所有元素<br></code></pre></td></tr></table></figure><p>指定选择器（nth-of-type()）</p><p>nth-of-type()自上而下选择</p><p>nth-last-of-type()自下而上选择</p><p>参数（数字，odd，even，3n+1)</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">nth</span>-<span class="hljs-keyword">of</span>-<span class="hljs-keyword">type</span>(2)#选择第二个元素（数字从1开始）<br><span class="hljs-title">nth</span>-<span class="hljs-keyword">of</span>-<span class="hljs-keyword">type</span>(odd)#选择奇数位的元素<br><span class="hljs-title">nth</span>-<span class="hljs-keyword">of</span>-<span class="hljs-keyword">type</span>(even)#选择偶数位的元素<br><span class="hljs-title">nth</span>-<span class="hljs-keyword">of</span>-<span class="hljs-keyword">type</span>(3n)#选择3的倍数的元素<br><span class="hljs-title">nth</span>-<span class="hljs-keyword">of</span>-<span class="hljs-keyword">type</span>(3n+1)#自定义，选择3的倍数的元素+一位的元素，也可以使用-号<br></code></pre></td></tr></table></figure><p>子元素指定选择器（nth-child()）</p><p>用法跟nth-of-type差不多</p><p>属性选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[name]</span>&#123;&#125;#选择 属性名字 为name的元素<br>选择器<span class="hljs-selector-attr">[属性名字]</span>例：<span class="hljs-selector-tag">div</span><span class="hljs-selector-attr">[jjj]</span>&#123;&#125;<br>选择器<span class="hljs-selector-attr">[属性名字=<span class="hljs-string">&#x27;属性值&#x27;</span>]</span>&#123;&#125;#属性值与里面的属性值相等<br>选择器<span class="hljs-selector-attr">[属性名字~=<span class="hljs-string">&#x27;属性值&#x27;</span>]</span>&#123;&#125;#属性值里面包含这个属性值<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">[<span class="hljs-keyword">class</span> ^= <span class="hljs-string">&#x27;abc&#x27;</span>]&#123;&#125;#选择首字母是abc的<span class="hljs-keyword">class</span><br>[<span class="hljs-keyword">class</span> $= <span class="hljs-string">&#x27;def&#x27;</span>]&#123;&#125;#选择尾字母是def的<span class="hljs-keyword">class</span><br>[<span class="hljs-keyword">class</span> *= <span class="hljs-string">&#x27;ghi&#x27;</span>]&#123;&#125;#选择包含ghi的<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><p>非内容选择器（not()）</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:not</span>(.tan,.sky)&#123;<span class="hljs-attribute">color</span>:red;&#125;#选择所有<span class="hljs-selector-tag">div</span>，然后去掉<span class="hljs-selector-tag">tan</span>和<span class="hljs-selector-tag">sky</span><br></code></pre></td></tr></table></figure><p>启用禁用选择器</p><p>有输入，点击效果的标签才能使用</p><p>enabled/disabled    </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">*:disabled&#123;border:<span class="hljs-number">1</span>px solid orange;&#125;<br><br>&lt;button <span class="hljs-keyword">type</span>=&quot;button&quot; disabled&gt;&lt;/button&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; disabled <span class="hljs-type">name</span>=&quot;&quot; id=&quot;&quot; <span class="hljs-keyword">value</span>=&quot;&quot;/&gt;<br></code></pre></td></tr></table></figure><h6 id="高亮选择（-selection）"><a href="#高亮选择（-selection）" class="headerlink" title="高亮选择（::selection）"></a>高亮选择（::selection）</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.tan</span><span class="hljs-selector-pseudo">::selection</span>&#123;<span class="hljs-attribute">color</span>:red; <span class="hljs-attribute">background</span>:green;&#125;<br><br>支持四个属性<span class="hljs-attribute">color</span>/<span class="hljs-attribute">background</span>/<span class="hljs-attribute">cursor</span>/<span class="hljs-attribute">outline</span><br></code></pre></td></tr></table></figure><h6 id="javascript-query选择器"><a href="#javascript-query选择器" class="headerlink" title="javascript-query选择器"></a>javascript-query选择器</h6><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">querySelector</span>()放入css选择器，返回符合条件的第一个<br><span class="hljs-built_in">querySelectorAll</span>()返回所有符合条件的<br><br><span class="hljs-keyword">var</span> alldiv = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;[id=&quot;tan&quot;]&#x27;</span>);<br>console.log(alldiv);<br><br><span class="hljs-keyword">var</span> alldiv = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelectorAll</span>(<span class="hljs-string">&#x27;[id=&quot;tan&quot;]&#x27;</span>);<br>console.log(alldiv);<br></code></pre></td></tr></table></figure><h6 id="javascript-classList"><a href="#javascript-classList" class="headerlink" title="javascript-classList"></a>javascript-classList</h6><p>ie10才兼容</p><p>常用属性：add/remove/toggle/contains/forEach/item</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">leo.classList.add(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>)<span class="hljs-comment">#添加 给leo这个元素添加a,b两个class名称</span><br>leo.calssList.remove(<span class="hljs-string">&#x27;a&#x27;</span>,b)<span class="hljs-comment">#删除 这两个class名称</span><br>leo.classList.toggle(<span class="hljs-string">&#x27;a&#x27;</span>)<span class="hljs-comment"># 切换 判断leo中有没有a，有就删除，没有就添加</span><br>leo.classList.contains(<span class="hljs-string">&#x27;a&#x27;</span>)<span class="hljs-comment"># 判断是否有这个class名返回true和false，只能放一个参数</span><br>leo.classList.<span class="hljs-keyword">forEach</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x,y,z</span>)</span>&#123;&#125;)<span class="hljs-comment">#与数组的foEach使用一样</span><br></code></pre></td></tr></table></figure><h6 id="视频标签（video）"><a href="#视频标签（video）" class="headerlink" title="视频标签（video）"></a>视频标签（video）</h6><p>ie8及以上支持</p><p>controls 控制台/poster 封面/loop 默认循环/autoplay 自动播放/muted 禁音</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./video/斗破苍穹.mp4&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">muted</span> <span class="hljs-attr">poster</span>=<span class="hljs-string">&quot;.image/dpcq封面.png&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><br>兼容多种格式<br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controle</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>= <span class="hljs-string">&#x27;1.mp4&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>= <span class="hljs-string">&#x27;1.ogv&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="音频标签（audio）"><a href="#音频标签（audio）" class="headerlink" title="音频标签（audio）"></a>音频标签（audio）</h6><p>属性：contrlos/autoplay/muted</p><h6 id="屏幕单位（vh-vw）"><a href="#屏幕单位（vh-vw）" class="headerlink" title="屏幕单位（vh/vw）"></a>屏幕单位（vh/vw）</h6><p>1vh代表1%的屏幕高度</p><p>20vw代表20%的屏幕宽度</p><h6 id="计算样式（calc-）"><a href="#计算样式（calc-）" class="headerlink" title="计算样式（calc()）"></a>计算样式（calc()）</h6><p>支持ie9及以上</p><p>可以放入加减乘除进行计算，需要前后用空格隔开</p><p>可以放入常用单位进行混合计算</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">width</span>:calc(<span class="hljs-number">10</span>% + <span class="hljs-number">20</span>vw +<span class="hljs-number">300</span>px);  屏幕的<span class="hljs-number">30</span>%+<span class="hljs-number">300</span>px<br></code></pre></td></tr></table></figure><h6 id="移动端设置"><a href="#移动端设置" class="headerlink" title="移动端设置"></a>移动端设置</h6><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">&lt;meta&gt;<span class="hljs-attr">content=&quot;width=device-width,</span> <span class="hljs-attr">initial-scale=1.0,</span> <span class="hljs-attr">maximum-scale=1.0,</span> <span class="hljs-attr">user-scalable=0&quot;</span> <span class="hljs-attr">name=&quot;viewport&quot;&lt;/meta&gt;</span><br></code></pre></td></tr></table></figure><h6 id="响应式基本布局（-media）"><a href="#响应式基本布局（-media）" class="headerlink" title="响应式基本布局（@media）"></a>响应式基本布局（@media）</h6><p>支持ie9及以上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@media all and (<span class="hljs-params">width:300px</span>)&#123;语句<span class="hljs-number">1</span>&#125;</span><span class="hljs-comment">#检测屏幕为300px时，执行语句1</span><br><span class="hljs-meta">@media screen and (<span class="hljs-params">width:300px</span>)&#123;语句<span class="hljs-number">1</span>&#125;</span><span class="hljs-comment">#检测浏览器可视宽度为300px时，执行语句1</span><br><br><span class="hljs-meta">@media all and (<span class="hljs-params"><span class="hljs-built_in">min</span>-width:400px</span>)(<span class="hljs-params">语句<span class="hljs-number">1</span></span>)</span><span class="hljs-comment">#检测屏幕 大于等于 400px时</span><br><span class="hljs-meta">@media all and (<span class="hljs-params"><span class="hljs-built_in">min</span>-width:400px</span>) and (<span class="hljs-params"><span class="hljs-built_in">max</span>-width:600px</span>)</span><span class="hljs-comment">#检测屏幕 大于等于400px 小于等于600px时生效</span><br><br>link引入方式，<span class="hljs-built_in">min</span>.css里写入需要的样式<br>&lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> href=<span class="hljs-string">&quot;min.css&quot;</span>/ media=<span class="hljs-string">&quot;all and (min-width:500px)&quot;</span>&gt;<br><br>横竖屏<br><span class="hljs-meta">@media all and (<span class="hljs-params">orientation:portait</span>)竖屏</span><br><span class="hljs-meta">@media all and (<span class="hljs-params">orientation:landscape</span>)横屏</span><br></code></pre></td></tr></table></figure><h6 id="弹性盒子-flex"><a href="#弹性盒子-flex" class="headerlink" title="弹性盒子(flex)"></a>弹性盒子(flex)</h6><p>支持 ie10</p><p>最外层元素：display:flex;</p><p>对内层元素发号施令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#元素方向</span><br>flex-<span class="hljs-keyword">direction:row;</span><span class="hljs-comment">#从左到右，默认值就是这个</span><br>flex-<span class="hljs-keyword">direcction:row-reverse;</span><span class="hljs-comment">#从右到左</span><br>flex-<span class="hljs-keyword">direction:column;</span><span class="hljs-comment">#从上到下</span><br>flex-<span class="hljs-keyword">direction:column-reverse;</span><span class="hljs-comment">#从下到上</span><br></code></pre></td></tr></table></figure><p>分块（flex-grow）</p><p>只针对宽度进行分块，对高度无效</p><p>如果所有元素都不给宽度，那么第一个元素会稍短一点</p><p>第一个元素给宽度，那么后面的元素就会平均分配多于的宽度</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">.<span class="hljs-built_in">tan</span>&#123;<br>flex-grow:<span class="hljs-number">2</span>;<span class="hljs-meta">#这个元素占两份</span><br>&#125;<br>.<span class="hljs-built_in">tan</span>&#123;<br>flex-grow:<span class="hljs-number">4</span>;<span class="hljs-meta">#这个元素占4份</span><br>&#125;<br></code></pre></td></tr></table></figure><p>分层（flex-wrap）</p><p>默认值是nowrap</p><p>当值为wrap时，元素会被挤到下一层，flex-grow会以当层计算</p><p>flex-wrap:wrap-reverse;反向分层排序</p><p>轴线对齐</p><p>横向</p><p>justify-content</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">justify-content:flex-start;<span class="hljs-comment">#轴线左对齐 默认值</span><br>justify-content:center;<span class="hljs-comment">#轴线中心对齐</span><br>justify-content:flex-<span class="hljs-keyword">end</span>;<span class="hljs-comment">#轴线右对齐</span><br>justify-content:<span class="hljs-literal">space</span>-<span class="hljs-keyword">between</span>;<span class="hljs-comment">#轴线两端对齐 中间等距隔开</span><br>justify-content:<span class="hljs-literal">space</span>-<span class="hljs-keyword">around</span>;<span class="hljs-comment">#环绕对齐中间等距隔开，两端隔开为中间距离一半</span><br></code></pre></td></tr></table></figure><p>纵向</p><p>align-items</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">align-items</span>:flex-start;#纵轴线 以上方对齐<br><span class="hljs-attribute">align-items</span>:center;#以中间对齐<br><span class="hljs-attribute">align-items</span>:flex-end;#以下方对齐<br><span class="hljs-attribute">align-items</span>:stretch;#拉伸 如果只有一层横向轴，直接拉满纵向轴，只作用于没有高度的元素<br><span class="hljs-attribute">align-items</span>:baseline;#以最高的<span class="hljs-attribute">line-height</span>为基准移动其他元素<br><br><span class="hljs-attribute">align-self</span>:<br></code></pre></td></tr></table></figure><p>自定义对齐</p><p>align-self:center;</p><p>值为align-items里的方法</p><p>多层排序</p><p>align-content</p><p>必须多层，单层没有意义</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">align-<span class="hljs-symbol">content:</span>inherit;<span class="hljs-comment">#默认值 默认平均分配高度给每一层</span><br> <span class="hljs-symbol">:flex-start</span>;<span class="hljs-comment">#下一层元素紧跟在上面一层，中间没有间隔 以上边界开始</span><br> <span class="hljs-symbol">:flex-end</span>;<span class="hljs-comment">#下一层元素紧跟在上面一层，中间没有间隔 以下边界开始</span><br> <span class="hljs-symbol">:center</span>;<span class="hljs-comment">#下一层元素紧跟在上面一层，中间没有间隔 以中间开始</span><br> <span class="hljs-symbol">:space-beteen</span>; <span class="hljs-comment">#上下对齐，中间相等距离隔开</span><br> <span class="hljs-symbol">:space-around</span>;<span class="hljs-comment">#上下环绕对齐</span><br></code></pre></td></tr></table></figure><p>排序</p><p>order:0;</p><p>定义元素的先后顺序，默认值为0</p><p>值越小，排序越靠前</p><p>值可以是负数</p><p>缩小比例</p><p>flex-shrink:1;</p><p>默认值为1，如果为0，则不进行缩放，负数无效</p><p>值越大，被压缩的比例就越大</p><p>如果项目控制在一层，flex-shrink为0，超出父元素宽度，会溢出</p><h6 id="相对单位（rem）"><a href="#相对单位（rem）" class="headerlink" title="相对单位（rem）"></a>相对单位（rem）</h6><p>rem是根据HTML标签中的font-size的大小改变的</p><p>html标签的font-size默认是16px,谷歌最小显示12px</p><p>1rem = font-size的值</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">html&#123;font-size:16px;&#125;<br><br><span class="hljs-attribute">1rem</span>=16px<br><span class="hljs-attribute">10rem</span>=160px<br></code></pre></td></tr></table></figure><p>rem算法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">//总宽度 = 基数 * 倍数倍数最好大于12，因为有些低版本浏览器字体最小只能是12px<br>//320   = 16  *  20基数一般使用16<br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>font-size:16px;<br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.documentElement.style.fontSize = innerWidth/<span class="hljs-number">16</span>+<span class="hljs-string">&#x27;px&#x27;</span>;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web前端(网易学习)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网易-Bootstarp</title>
    <link href="/2021/11/10/%E7%BD%91%E6%98%93-Bootstrap/"/>
    <url>/2021/11/10/%E7%BD%91%E6%98%93-Bootstrap/</url>
    
    <content type="html"><![CDATA[<h1 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h1><h6 id="布局容器（container）"><a href="#布局容器（container）" class="headerlink" title="布局容器（container）"></a>布局容器（container）</h6><p>container    container-sm    container-md</p><p>container-lg    container-xl    container-fluid</p><h6 id="栅格系统（不同的终端上显示不一样）"><a href="#栅格系统（不同的终端上显示不一样）" class="headerlink" title="栅格系统（不同的终端上显示不一样）"></a>栅格系统（不同的终端上显示不一样）</h6><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gradle">&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;container&#x27;</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;row&#x27;</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;col&#x27;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;col&#x27;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;col&#x27;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><br>tips:<br>row 可用col分成<span class="hljs-number">12</span>块 也就是一行可以平均分成<span class="hljs-number">12</span>个<span class="hljs-keyword">div</span><br>col-<span class="hljs-number">1</span> 占位一块col-<span class="hljs-number">2</span> 占位<span class="hljs-number">2</span>块 col-<span class="hljs-number">9</span> 占位<span class="hljs-number">9</span>块<br><br>例：<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;container&#x27;</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;row&#x27;</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;col-2&#x27;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;col-5&#x27;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;col-5&#x27;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h6 id="栅格布局-响应式"><a href="#栅格布局-响应式" class="headerlink" title="栅格布局-响应式"></a>栅格布局-响应式</h6><p>auto    576    768    992    1200</p><p>col        sm      md      lg        xl</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;container&#x27;</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;row&#x27;</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;col-1  col-sm-2  col-md-4 col-lg-4 col-xl-9&#x27;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;col-11 col-sm-10 col-md-8 col-lg-8 col-lg-3&#x27;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><br>当屏幕分辨率发生改变时，对应的布局也会响应改变<br></code></pre></td></tr></table></figure><h6 id="格栅布局-偏移值"><a href="#格栅布局-偏移值" class="headerlink" title="格栅布局-偏移值"></a>格栅布局-偏移值</h6><p>offset</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=&#x27;container&#x27;&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=&#x27;row&#x27;&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">class</span>=&#x27;col<span class="hljs-number">-1</span>  col-sm<span class="hljs-number">-2</span> <span class="hljs-built_in">offset</span><span class="hljs-number">-2</span> <span class="hljs-built_in">offset</span>-sm<span class="hljs-number">-3</span>&#x27;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;/<span class="hljs-keyword">div</span>&gt;<br><br>tip：偏移后不能超过<span class="hljs-number">12</span>，也就是col和<span class="hljs-built_in">offset</span>加起来不超过<span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>快速给与背景样式（bg-success等）（种类少）</p><h6 id="栅格布局-行横向布局"><a href="#栅格布局-行横向布局" class="headerlink" title="栅格布局-行横向布局"></a>栅格布局-行横向布局</h6><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs maxima">justify-<span class="hljs-built_in">content</span>-start左边排序<br>justify-<span class="hljs-built_in">content</span>-end右边排序<br>justfy-<span class="hljs-built_in">content</span>-<span class="hljs-built_in">center</span>中间排序<br>justify-<span class="hljs-built_in">content</span>-around环绕排序<br>justify-<span class="hljs-built_in">content</span>-between两边排序<br><br>响应式：justify-<span class="hljs-built_in">content</span>-sm-start其他类似<br></code></pre></td></tr></table></figure><h6 id="栅格布局-行纵向布局"><a href="#栅格布局-行纵向布局" class="headerlink" title="栅格布局-行纵向布局"></a>栅格布局-行纵向布局</h6><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">align-<span class="hljs-keyword">items</span>-strt让行在row的上面 元素高度往下涨默认<br>align-<span class="hljs-keyword">items</span>-center让行在row的中心 元素高度往上下涨<br>align-itmes-<span class="hljs-function"><span class="hljs-keyword">end</span>让行在最下面 元素的高度高度往上涨</span><br><br>响应式：align-<span class="hljs-keyword">items</span>-sm-<span class="hljs-built_in">start</span>其他类似<br></code></pre></td></tr></table></figure><p>栅格布局-块纵向布局</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crystal">align-<span class="hljs-keyword">self</span>-start<br>align-<span class="hljs-keyword">self</span>-center<br>align-<span class="hljs-keyword">self</span>-<span class="hljs-keyword">end</span><br><br>响应式：align-<span class="hljs-keyword">self</span>-sm-<span class="hljs-keyword">end</span>其他类似<br></code></pre></td></tr></table></figure><p>之前都是bootstrap4,后面会的升级到bootstarp5</p>]]></content>
    
    
    <categories>
      
      <category>Web前端(网易学习)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网易-Js</title>
    <link href="/2021/11/06/%E7%BD%91%E6%98%93-js/"/>
    <url>/2021/11/06/%E7%BD%91%E6%98%93-js/</url>
    
    <content type="html"><![CDATA[<p>javascript</p><p>alert(“弹出框”);</p><p>var tan=”变量”;</p><p>数据类型    number   string    object    boolean    null    undefined</p><p>查看类型    typeof(“tan”)</p><p>报错类型    异常错误    语法错误</p><p>注释    / *这是注释 */</p><p>js函数（两种写法）</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">objName</span><span class="hljs-params">()</span></span>&#123;<br>alert(<span class="hljs-string">&quot;我是一个函数&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">var</span> objName = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>alert(<span class="hljs-string">&quot;我也是一个函数&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>预解析</p><p>js会解析两边，第一遍比较粗略，叫预解析。用于检查有无语法错误。</p><p>变量提升</p><p>会提升var和function函数变量,将变量提到最上面</p><p>js变量有作用域，只在自己作用域才能调用</p><p>window对象</p><p>最大的全局环境，所有操作都在这个window环境中操作</p><p>如果在函数作用域中使用window设置变量，那么这个变量会变成全局变量</p><p>延时定时器(setTimeout)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">延时<br><span class="hljs-keyword">var</span> timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>alert(<span class="hljs-string">&quot;我是延时5秒出现的哦&quot;</span>);<br>&#125;,<span class="hljs-number">5000</span>);<br><br>清除延时<br><span class="hljs-built_in">clearTimeout</span>(timer);<br></code></pre></td></tr></table></figure><p>轮询定时器（setInterval）</p><p>打开关闭浏览器(open(“网址”),close())</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">var</span> <span class="hljs-keyword">timer</span> = setInterval(function()&#123;<br><span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>);<br>&#125;),0;<br><br>clearInterval(<span class="hljs-keyword">timer</span>);<br><br>如何打开别人的网址后并关闭？<br><span class="hljs-keyword">var</span> <span class="hljs-keyword">timer</span> = setInterval(function()&#123;<br><span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>);<br>&#125;),0;<br><br><span class="hljs-keyword">timer</span>.<span class="hljs-keyword">close</span>()  #在<span class="hljs-keyword">close</span>前加上变量名就可以<br></code></pre></td></tr></table></figure><p>js控制台</p><p>输出</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">console</span>.log()<span class="hljs-comment">#打印日志</span><br><span class="hljs-built_in">console</span>.error() <span class="hljs-comment">#以错误的的方式打印</span><br><span class="hljs-built_in">console</span>.warn() <span class="hljs-comment">#以警告的的方式打印</span><br></code></pre></td></tr></table></figure><p>弹出框</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">alert</span><span class="hljs-params">(<span class="hljs-string">&#x27;常用对话框&#x27;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">prompt</span><span class="hljs-params">(<span class="hljs-string">&quot;输入对话框&quot;</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">confirm</span><span class="hljs-params">(<span class="hljs-string">&quot;选择对话框&quot;</span>)</span></span><br></code></pre></td></tr></table></figure><p>window常用属性</p><p>window.innerHeight    浏览器可视高度（可以省略window）</p><p>window.innerWidth    浏览器可视宽度</p><p>window.screenLeft（screenTop）    浏览器离屏幕左边的距离（上边）</p><p>window.screen.width(height)    屏幕宽度(高度)</p><p>window其他属性（关键字不能被声明）</p><p>window    this（本环境）    self(本环境的自己)    top(最外层环境)</p><p>number类型的基本运算</p><p>加减乘除 括号（正常运算）</p><p>!=    =    ==    &gt;    &lt;    &gt;=    &lt;=    %    /    *</p><p>20/0  → infinity</p><p>小数点16位之后系统就不看了</p><p>例：1.1111111111111111234==1.111111111111111164（返回true）</p><p>快捷计算</p><p>a+=5    (a=a+5)(其他运算符也可以这样写)</p><p>1+=5是错的(a只能是变量不能直接是数字)</p><p>科学计数法</p><p>1e4 = 10000        2e5 = 200000</p><p>number对象与nan</p><p>number(“3223”) → 3223    当括号内是有数字组成的字符串时</p><p>number(“21ja”)  → NaN    当转换不了时，输出NaN</p><p>递增与递减</p><p>a++  →  a = number(a) +1</p><p>++a    a–    –a</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">注意<br><span class="hljs-selector-tag">var</span> a=<span class="hljs-number">1</span><br><span class="hljs-function"><span class="hljs-title">console</span><span class="hljs-params">(a++,a)</span></span>  <span class="hljs-comment">//1 , 2</span><br></code></pre></td></tr></table></figure><p>字符串对象与字符串拼接</p><p>string()    将括号内所有内容转换成字符串</p><p>拼接： 3+’px’ → 3px        4+7+’px’→ 11px</p><p>隐式转换：’4’ - ‘7’ →  -3</p><p>​                    1 + ‘4’ * 6    → 25</p><p>​                    “3” + 8*1    → 38</p><p>‘786’&gt;’323’    →  true        ‘397’&gt;’2987’ → true (字符串比大小先看第一位，再看第二位)</p><p>js计算BUG</p><p>当有小数点的时候，会出现精度问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">例：<span class="hljs-number">0.1</span>+<span class="hljs-number">0</span>,<span class="hljs-number">2</span> = <span class="hljs-number">0.30000000000000004</span>(js中计算)<br>解决方法：(<span class="hljs-number">0.1</span>*<span class="hljs-number">10</span>  + <span class="hljs-number">0.2</span>*<span class="hljs-number">10</span>)/<span class="hljs-number">10</span> = <span class="hljs-number">0.3</span><br></code></pre></td></tr></table></figure><p>字符串下标和长度</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">a= =<span class="hljs-string">&#x27;good&#x27;</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.length</span>&gt;&gt;&gt;<span class="hljs-number">4</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[0]</span>&gt;&gt;&gt;g<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[3]</span>&gt;&gt;&gt;d<br></code></pre></td></tr></table></figure><h6 id="Boolean对象方法"><a href="#Boolean对象方法" class="headerlink" title="Boolean对象方法"></a>Boolean对象方法</h6><p>返回false的有六种（空字符串，0，null，NaN，undefined，false）</p><p>计算时，false默认为0，true默认为1</p><p>（true+true&gt;&gt;&gt;1+1=2,false+true&gt;&gt;&gt;0+1=1）</p><h6 id="函数返回值概念-return"><a href="#函数返回值概念-return" class="headerlink" title="函数返回值概念(return)"></a>函数返回值概念(return)</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">var</span> c=<span class="hljs-number">3</span><br><span class="hljs-keyword">var</span> d=<span class="hljs-number">5</span><br><span class="hljs-keyword">return</span> c+d返回<span class="hljs-number">8</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(a())<span class="hljs-comment">//打印出8</span><br></code></pre></td></tr></table></figure><h6 id="函数参数概念"><a href="#函数参数概念" class="headerlink" title="函数参数概念"></a>函数参数概念</h6><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(c,d)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">c+d</span><br>&#125;<br>console.log(a(<span class="hljs-number">4</span>+<span class="hljs-number">5</span>))//打印出<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h6 id="Undefined-与NaN-null"><a href="#Undefined-与NaN-null" class="headerlink" title="Undefined 与NaN  null"></a>Undefined 与NaN  null</h6><p>undefined与任何东西运算都会得到NaN（除了+字符串）</p><p>作比较都是false（除了undefined==undefined&gt;&gt;&gt; true或者===）</p><p>null==undefined &gt;&gt;&gt;true null==0&gt;&gt;&gt;false</p><p>null计算比较时可以当做0，但null==false&gt;&gt;&gt;false</p><h6 id="document对象-最大对象"><a href="#document对象-最大对象" class="headerlink" title="document对象(最大对象)"></a>document对象(最大对象)</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">document.title<span class="hljs-regexp">//</span>获取网页title<br><br>document.URL<span class="hljs-regexp">//</span>获取该网页的详细URL<br><br>document.domain<span class="hljs-regexp">//</span>获取该网页的最原始的URL<br><br>document.write(<span class="hljs-string">&quot;hello world&quot;</span>) <span class="hljs-regexp">//</span>清除原网页内容，写入hello world ，重复写入可叠加<br></code></pre></td></tr></table></figure><h6 id="操作元素的基本流程"><a href="#操作元素的基本流程" class="headerlink" title="操作元素的基本流程"></a>操作元素的基本流程</h6><p>等待全部内容加载完成后操作</p><p>获取id元素(getElementById(‘id名’))</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//让body的背景为红色</span><br><span class="hljs-built_in">document</span>.body.style.background = <span class="hljs-string">&quot;red&quot;</span><br><span class="hljs-comment">//获取id</span><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;leo&#x27;</span>).style.width = <span class="hljs-string">&quot;500px&quot;</span><br><span class="hljs-comment">//有-的名称，后面首字母大写</span><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;leo&#x27;</span>).style.backgroundColor = <span class="hljs-string">&quot;green&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h6 id="元素点击事件"><a href="#元素点击事件" class="headerlink" title="元素点击事件"></a>元素点击事件</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;leo&#x27;</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>alert(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>&#125;;<br>&#125;;<br><span class="hljs-comment">//直接赋予函数名也可以</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leoNode</span>(<span class="hljs-params"></span>)</span>&#123;<br>alert(<span class="hljs-string">&#x27;hi&#x27;</span>);<br>&#125;;<br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;leo&#x27;</span>).onclick = leoNode;<br>&#125;;<br><br><br><span class="hljs-comment">//储存变量，方便使用</span><br><span class="hljs-keyword">var</span> leoNode = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;leo&#x27;</span>)<br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>leoNode.style.height = <span class="hljs-string">&#x27;300px&#x27;</span>;<br>leoNode.style.width = <span class="hljs-string">&#x27;300px&#x27;</span>;<br>&#125;;<br><br>注意：每句后面记得加封号<br></code></pre></td></tr></table></figure><h6 id="使用js控制元素的id和类"><a href="#使用js控制元素的id和类" class="headerlink" title="使用js控制元素的id和类"></a>使用js控制元素的id和类</h6><p>var leoNode = document.getElementById(‘leo’)</p><p>使用 leoNode.id可以获得这个id名</p><p>leoNode.className    获得class名 如果class为空则返回空</p><p>修改id：leoNode.id = ‘abc’</p><h6 id="逗号和中括号的使用"><a href="#逗号和中括号的使用" class="headerlink" title="逗号和中括号的使用"></a>逗号和中括号的使用</h6><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">//逗号 </span><br><span class="hljs-keyword">var</span> a=<span class="hljs-number">6</span>,b=<span class="hljs-number">7</span>,k=<span class="hljs-number">9</span><br><br><span class="hljs-comment">//中括号 可以代替点</span><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;leo&#x27;</span>).onclick = leoNode;<br>也可以写成<br><span class="hljs-built_in">document</span>[<span class="hljs-string">&#x27;getElementById(&#x27;</span>leo<span class="hljs-string">&#x27;)&#x27;</span>][<span class="hljs-string">&#x27;onclick&#x27;</span>] = lenNode;<br><br><span class="hljs-attribute">tips</span>:这样可以更灵活，可以用参数传递值<br>例：<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leo</span>(<span class="hljs-params">s,bg,color</span>)</span>&#123;<br><span class="hljs-built_in">document</span>.getElmentById[s][bg] = <span class="hljs-built_in">color</span><br>&#125;<br>leo(height,background,green)<br></code></pre></td></tr></table></figure><h6 id="获取元素节点（nodeName）"><a href="#获取元素节点（nodeName）" class="headerlink" title="获取元素节点（nodeName）"></a>获取元素节点（nodeName）</h6><p>nodeName可以获得当前标签的大写名称，自定义标签也可以获得，自定义标签只能是英文，自定义标签是行内元素</p><h6 id="使用js操作input内容"><a href="#使用js操作input内容" class="headerlink" title="使用js操作input内容"></a>使用js操作input内容</h6><p>text.id    text.value(得到的值是字符串)</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lua">text1 = document.getElementById(<span class="hljs-string">&#x27;text1&#x27;</span>)<br>btn = document.getElementById(<span class="hljs-string">&#x27;btn&#x27;</span>)<br><br>btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>text1.value = <span class="hljs-number">77</span>;//点击后输入框的值变为<span class="hljs-number">77</span><br>&#125;;<br><br><br>&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;text &#x27;</span>id=<span class="hljs-string">&#x27;text1&#x27;</span> value=<span class="hljs-string">&#x27;99&#x27;</span>&gt;<br>&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;button&#x27;</span> id=<span class="hljs-string">&#x27;btn&#x27;</span> value=<span class="hljs-string">&#x27;点击&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>input属性</p><p>maxlength = ‘4’        最大长度为4（适用于text）</p><p>type=’number’        只能输入数字</p><p>type= ‘range’        范围 进度条（默认0~100，修改范围min=20，max=1000 适用于range和number）</p><p>type= ‘color’          颜色选取</p><h6 id="input内容改变事件"><a href="#input内容改变事件" class="headerlink" title="input内容改变事件"></a>input内容改变事件</h6><p>onchange    输入结束后触发事件</p><p>oninput        输入时值一旦发生变化就触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.getElmentById(<span class="hljs-string">&#x27;元素id名&#x27;</span>).onchange=<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>cosole.log(<span class="hljs-string">&#x27;内容以改变&#x27;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h6 id="js查找标签元素"><a href="#js查找标签元素" class="headerlink" title="js查找标签元素"></a>js查找标签元素</h6><p>getElementsTagByName(‘标签名’)</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;div&#x27;</span>)[<span class="hljs-number">2</span>].style.width = <span class="hljs-string">&#x27;100px&#x27;</span>;<br></code></pre></td></tr></table></figure><p>查找顺序:从上到下，从左到右</p><h6 id="js查找class元素"><a href="#js查找class元素" class="headerlink" title="js查找class元素"></a>js查找class元素</h6><p>getElementsByClassName(‘元素class名’)</p><p>可以通过length查看总和</p><h6 id="js中的if-else语句"><a href="#js中的if-else语句" class="headerlink" title="js中的if else语句"></a>js中的if else语句</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var <span class="hljs-attribute">a</span>=1;<br><span class="hljs-keyword">if</span>(<span class="hljs-attribute">a</span>==3)&#123;<br>alert(<span class="hljs-string">&#x27;6&#x27;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>alert(<span class="hljs-string">&#x27;不等于3哦&#x27;</span>&#125;;<br><br><br><span class="hljs-keyword">if</span>()&#123;<br><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>()&#123;<br><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>()&#123;<br><br>&#125;<br><span class="hljs-keyword">else</span>&#123;&#125;<br></code></pre></td></tr></table></figure><h6 id="js和-或的用法"><a href="#js和-或的用法" class="headerlink" title="js和/或的用法"></a>js和/或的用法</h6><p>&amp;&amp;    和 （所有条件都满足）</p><p>||     或 （有一个条件满足）</p><h6 id="js操作元素内容"><a href="#js操作元素内容" class="headerlink" title="js操作元素内容"></a>js操作元素内容</h6><p>innerHTML（元素内容）</p><p>js 可以通过DOM使用innerHTML属性获取会赋值DOM内容</p><p>如果赋值标签内容的话，会在HTML中显示标签</p><p>innerHTML替换元素，原元素的事件会消失</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;leo&#x27;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>console.log(leo.innerHTML);输出<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>leo.innerHTML = &#x27;&#x27;;清空leo中的内容<br>leo.innerHTML = &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>添加这个span<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#x27;;添加span这个元素到leo中<br></code></pre></td></tr></table></figure><p>outerHTML(元素内容)</p><p>与inner的区别就是，outerHTML获取的信息包含自己</p><p>innerText(元素文本)</p><p>用法同上</p><p>js可通过DOM使用innerText获取或赋值文本内容</p><p>innerText只会获取文本不会获取标签信息</p><p>赋值时内容不会变成标签，都会以文本显示</p><h6 id="css绑定元素样式值（cssText）"><a href="#css绑定元素样式值（cssText）" class="headerlink" title="css绑定元素样式值（cssText）"></a>css绑定元素样式值（cssText）</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;leo&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">leo.style.cssText = <span class="hljs-string">&#x27;width:10px;height:10px; background:red;&#x27;</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="js获取非行间样式，行间属性"><a href="#js获取非行间样式，行间属性" class="headerlink" title="js获取非行间样式，行间属性"></a>js获取非行间样式，行间属性</h6><p>获取元素样式的高度</p><p> window.getComputedStyle(leo).height（不支持低级ie）</p><p>leo.currentStyle.height(ie支持,谷歌不支持)</p><p>解决兼容</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">function getstyle(obj,style)&#123;<br>if(obj.currentStyle)&#123;<br>alert(obj.currentStyle[style]);<br>&#125;<br>else&#123;<br>alert(obj.getComptedStyle(obj)<span class="hljs-selector-attr">[style]</span>);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>获取行间属性（getAttribute()）</p><p>leo.getAttribute(‘id’)</p><p>设置行间属性（setAttribute(‘属性’，’属性值’)）</p><p>leo.setAttribute(‘id’,’haha’)</p><p>删除行间属性（removeAttribute）</p><p>leo.removeAttribute(‘id’)</p><p>判断该元素是否有值</p><p>hasAttribute(‘id’)</p><h6 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h6><p>for(初始化条件;结束条件;条件变化){执行条件}</p><p>例</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(var i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">7</span>;i++)</span></span>&#123;<br>alert(i)<br>&#125;<br>&gt;&gt;&gt; <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>循环终止（break）</p><p>循环跳过(continue)</p><h6 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h6><p>特点 穿透</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> a=<span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">switch</span>(a)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        alert(<span class="hljs-string">&#x27;不执行&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>        alert(<span class="hljs-string">&#x27;执行&#x27;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>    alert(<span class="hljs-string">&#x27;上面条件都不满足，就执行我&#x27;</span>)<br>&#125;<br><br>如果不写<span class="hljs-keyword">break</span>，就会出现穿透效果<br></code></pre></td></tr></table></figure><h6 id="获取元素（父级元素、子级元素、子级节点）"><a href="#获取元素（父级元素、子级元素、子级节点）" class="headerlink" title="获取元素（父级元素、子级元素、子级节点）"></a>获取元素（父级元素、子级元素、子级节点）</h6><p>父级元素（parentNode）</p><p>子级元素（children）</p><p>子级节点（childNodes） 修改节点里的内容（childNodes[0].data = ‘123’）</p><p>创建元素（document.creatElement(‘div’)）创建后并不能显示在HTML中，还需要放入</p><p>放入元素（leo.appendChild(‘放入元素变量’)）该方法只能插入后排到最后面</p><p>插入元素（leo.insertBefore(插入元素变量，插入元素后面的变量）</p><p>删除子级元素（document.body.removeChild(目标元素)）可以</p><p>删除目标元素（ leo.remove() ）</p><p>替换元素（replaceChild）</p><p>父元素.replaceChild(替换元素，被替换元素)</p><p>克隆元素leo.cloneNode() 默认括号内为false时只会复制元素，不会复制内容与子孙节点，为ture时leo里的内容也会复制</p><p>首尾元素（firstElementChild,lastElementchild）(兼容问题)</p><p>leo.firstElementChild == leo.children[0]</p><p>leo.lastElementChild == leo.children[leo.children.length-1]</p><p>兄弟元素（nextElementSibling,previousElementSibling）</p><p>leo.previousElementSibling.style.color = ‘red’;leo的上一个元素</p><p>leo.nextElementSibling.style.color = ‘red’;leo的下一个元素</p><h6 id="双击事件（ondblclick）"><a href="#双击事件（ondblclick）" class="headerlink" title="双击事件（ondblclick）"></a>双击事件（ondblclick）</h6><p>与onclick用法一样</p><h6 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h6><p>移入(onmouseover)：当鼠标移到元素上面时触发</p><p>移出(onmouseout)：当鼠标移出到元素外面后触发</p><p>移动(onmousemove)：当鼠标移动就会触发</p><p>鼠标按下(onmousedown)：按下鼠标左键</p><p>鼠标抬起(onmouseup)：抬起鼠标左键</p><p>鼠标右键(oncontextmenu)：鼠标右键菜单</p><p>鼠标事件对象（event）</p><p>event.clientX(x轴坐标)，event.clientY(y轴坐标)，event.targrt(事件元素的对象)，</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs fortran">#使用事件对象的两种方法<br>leo.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>console.<span class="hljs-built_in">log</span>(event)<br>&#125;<br><br>第二种，早期ie不支持<br>leo.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a)</span></span>&#123;<br>console.<span class="hljs-built_in">log</span>(a)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="事件捕获与事件冒泡"><a href="#事件捕获与事件冒泡" class="headerlink" title="事件捕获与事件冒泡"></a>事件捕获与事件冒泡</h6><p>事件捕获：子元素获取到事件后会往父元素上找，直到找到事件本体</p><p>事件冒泡：事件本体会将事件给子元素（像冒泡一样往上冒）</p><p>事件捕获优先级高于事件冒泡</p><p>阻止事件冒泡（两种方法）</p><p>event.cancelBubble = true;(都支持)</p><p>event.stopPropagation();（老版本ie不支持）</p><h6 id="表单获取、失去焦点事件"><a href="#表单获取、失去焦点事件" class="headerlink" title="表单获取、失去焦点事件"></a>表单获取、失去焦点事件</h6><p>使用在可以输入文本内容的标签上（input,textarea）</p><p>获取焦点（onfocus）</p><p>自动获取焦点: 在标签上添加  autofocus</p><p>点击事件元素后主动获取焦点  ipt.focus();</p><p>失去焦点（onblur）</p><p>点击事件元素后主动获取焦点  ipt.onblur();</p><h6 id="元素可见高度与宽度"><a href="#元素可见高度与宽度" class="headerlink" title="元素可见高度与宽度"></a>元素可见高度与宽度</h6><p>offsetWidth、offsetHeight(height+padding+border三个总和)</p><p>clientWidth、clientHeight(height+padding这两个之和)</p><p>元素偏移距离属性</p><p>offsetLeft、offsetTop(元素距离浏览器左边、上边的距离，当父元素有定位属性时，就是距离父元素的距离)</p><p>clientLeft、clientTop(当前元素的border宽度)</p><h6 id="鼠标拖拽元素"><a href="#鼠标拖拽元素" class="headerlink" title="鼠标拖拽元素"></a>鼠标拖拽元素</h6><p>1.鼠标按下</p><p>2.鼠标移动</p><p>3.鼠标抬起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">tan.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>tan.style.left = event.clientX+<span class="hljs-string">&#x27;px&#x27;</span>;<br>tan.style.top = event.clientY+<span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;;<br><span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-literal">null</span>;<br><span class="hljs-built_in">document</span>.onmouseup =<span class="hljs-literal">null</span>;<br>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>优化版拖拽元素</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs verilog">#cl是元素id名<br>cl<span class="hljs-variable">.onmousedown</span> = <span class="hljs-keyword">function</span>()&#123;<br>    <span class="hljs-keyword">var</span> clickLeft = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientX</span>-<span class="hljs-keyword">this</span><span class="hljs-variable">.offsetLeft</span>;<br>    <span class="hljs-keyword">var</span> clickTop = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientY</span>-<span class="hljs-keyword">this</span><span class="hljs-variable">.offsetTop</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-number">_</span><span class="hljs-keyword">this</span> = <span class="hljs-keyword">this</span>;<br>    document<span class="hljs-variable">.onmousemove</span> = <span class="hljs-keyword">function</span>()&#123;<br>        <span class="hljs-number">_</span><span class="hljs-keyword">this</span><span class="hljs-variable">.style</span><span class="hljs-variable">.left</span> = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientX</span>-clickLeft+&#x27;px&#x27;;<br>        <span class="hljs-number">_</span><span class="hljs-keyword">this</span><span class="hljs-variable">.style</span><span class="hljs-variable">.top</span> = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientY</span>-clickTop+&#x27;px&#x27;;<br>    &#125;;<br>    document<span class="hljs-variable">.onmouseup</span> = <span class="hljs-keyword">function</span>()&#123;<br>        <span class="hljs-keyword">this</span><span class="hljs-variable">.onmousemove</span> = <span class="hljs-keyword">this</span><span class="hljs-variable">.onmouseup</span> = <span class="hljs-literal">null</span>;<br>    &#125;;<br>&#125;;<br><br>#封装<br><span class="hljs-keyword">var</span> darg = <span class="hljs-keyword">function</span>(obj)&#123;<br>    obj<span class="hljs-variable">.onmousedown</span> = <span class="hljs-keyword">function</span>()&#123;<br>        <span class="hljs-keyword">var</span> clickLeft = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientX</span>-<span class="hljs-keyword">this</span><span class="hljs-variable">.offsetLeft</span>;<br>        <span class="hljs-keyword">var</span> clickTop = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientY</span>-<span class="hljs-keyword">this</span><span class="hljs-variable">.offsetTop</span>;<br>        <span class="hljs-keyword">var</span> <span class="hljs-number">_</span><span class="hljs-keyword">this</span> = <span class="hljs-keyword">this</span>;<br>        document<span class="hljs-variable">.onmousemove</span> = <span class="hljs-keyword">function</span>()&#123;<br>            <span class="hljs-number">_</span><span class="hljs-keyword">this</span><span class="hljs-variable">.style</span><span class="hljs-variable">.left</span> = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientX</span>-clickLeft+&#x27;px&#x27;;<br>            <span class="hljs-number">_</span><span class="hljs-keyword">this</span><span class="hljs-variable">.style</span><span class="hljs-variable">.top</span> = <span class="hljs-keyword">event</span><span class="hljs-variable">.clientY</span>-clickTop+&#x27;px&#x27;;<br>        &#125;;<br>        document<span class="hljs-variable">.onmouseup</span> = <span class="hljs-keyword">function</span>()&#123;<br>            <span class="hljs-keyword">this</span><span class="hljs-variable">.onmousemove</span> = <span class="hljs-keyword">this</span><span class="hljs-variable">.onmouseup</span> = <span class="hljs-literal">null</span>;<br>        &#125;;<br>    &#125;;<br>&#125;;<br>darg(元素名);#执行<br></code></pre></td></tr></table></figure><h6 id="数据格式-数组"><a href="#数据格式-数组" class="headerlink" title="数据格式-数组"></a>数据格式-数组</h6><p>三种方式定义</p><p>arrone = [2,4,6,’dsfdsfs’,’090’,232]        #中括号内什么类型都可以放</p><p>arrtwo= Array(1,3,’fd’,function(){alert(2);},true)</p><p>arrthree = new Array(34,567,’dsf’,false)</p><p>使用：arrone[3], arrone.length</p><h6 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h6><p>截取字符串</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">str = <span class="hljs-string">&#x27;abcdefgh&#x27;</span>;<br>str.substring(<span class="hljs-keyword">start</span>,<span class="hljs-keyword">end</span>);（从第几位开始截取，截取到第几位）<br> <br># str.substring(<span class="hljs-number">3</span>); &gt;&gt;&gt; defgh 截取第<span class="hljs-number">3</span>位及以后的<br># str.substring(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>); &gt;&gt;&gt;cdefg 相当于 str.substring(<span class="hljs-number">2</span>,<span class="hljs-number">7</span>);<br># str.substring(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>); &gt;&gt;&gt;cdefg  相当于 str.substring(<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);当<span class="hljs-number">0</span>是负数时也是<span class="hljs-number">0</span><span class="hljs-number">-4</span><br><br>str.substr(<span class="hljs-keyword">start</span>,<span class="hljs-keyword">end</span>);（从第几位开始截取，截取几位）<br># str.substr(<span class="hljs-number">3</span>); &gt;&gt;&gt; defgh 截取第<span class="hljs-number">3</span>位及以后的<br># str.substr(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>); &gt;&gt;&gt;空  当第二位为<span class="hljs-number">0</span>或者为负 返回空字符串<br># str.substr(<span class="hljs-number">-4</span>,<span class="hljs-number">2</span>); &gt;&gt;&gt;ef第一位为负数时，从尾巴往前看<br><br>str.<span class="hljs-keyword">slice</span>(<span class="hljs-keyword">start</span>,<span class="hljs-keyword">end</span>)(第几位开始，第几位结束)<br><span class="hljs-meta">#str.slice(3，-2) &gt;&gt;&gt;def 截取index 3 与 -2 之间的内容</span><br></code></pre></td></tr></table></figure><p>字符串下标方法</p><p>str.charAt(2) == str[2]</p><p>charAt找不到内容会返回空，放入不规则内容返回第0位下标</p><p>字符串拼接</p><p>1.使用加号拼接</p><p>2.str.concat(str1,’true’,1) 括号内放需要拼接的字符串</p><p>字符串大写小写（作用在英文字母上）</p><p>大写：str.toUpperCase()</p><p>小写：str.toLowerCase()</p><p>查找索引方法（字符串，数组都适用）</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;abcdefghabc&#x27;</span>;<br><span class="hljs-built_in">str</span>.indexOf(<span class="hljs-string">&#x27;c&#x27;</span>);  &gt;&gt;&gt; <span class="hljs-number">2</span>返回第一个c的索引<br><span class="hljs-built_in">str</span>.indexOf(<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">4</span>);&gt;&gt;&gt;<span class="hljs-number">10</span>从第四位开始找c,找到后返回<br><br><span class="hljs-built_in">str</span>.lastIndexOf(<span class="hljs-string">&#x27;b&#x27;</span>);&gt;&gt;&gt;<span class="hljs-number">9</span>  从后往前找，找到第一个e;<br><span class="hljs-built_in">str</span>.lastIndexOf(<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-number">5</span>); &gt;&gt;&gt;<span class="hljs-number">2</span> 先截取字符串前五位，从这五位从后往前<br></code></pre></td></tr></table></figure><p>替换</p><p>str=’abcdef’;</p><p>str.replace(‘abc’,f)&gt;&gt;&gt;fdef    把abc替换成a，字符串中有多个abc只能替换第一个abc</p><p>str.replaceall(‘abc’,f) 替换所有的abc</p><p>str.replace(‘c’,function(text,index,lastStr){}) 括号内分别是找到的内容，索引，原始字符串</p><p>去掉空格</p><p>str.trim() 去掉前后空格</p><p>str.trimLeft()或者str.trimStart()  去掉左边空格</p><p>str.trimRight()或者str.trimEnd()    去掉右边空格</p><p>split方法把字符串转换成数组</p><p>str = ‘abcdefg’;</p><p>str.split(‘’);  &gt;&gt;&gt;[‘a’,’b’,’c’,’d’,’e’,’f’,’g’]   </p><p>str.split(‘c’);&gt;&gt;&gt;[‘ab’,’defg’]        以c为分隔符分隔</p><p>str.split(‘’,4);&gt;&gt;&gt;[‘a’,’b’,’c’,’d’]   4代表留下4个数</p><p>插入（push）</p><p>arr.push(3,5,78,’jks’,4)    尾部插入内容</p><p>arr.unshift(4.5,76,’dd’,true)    头部插入内容</p><p>都会返回新数组的length</p><p>删除（pop）</p><p>arr.pop();    尾部删除，删除最后一个内容，返回删除的内容</p><p>arr.shift();    头部删除，删除第一个内容，返回删除的内容</p><p>数组连接(原数组不会改变)</p><p>arr = [1,2,3]</p><p>arr1 = [4,5,6]</p><p>arr.concat(arr1); &gt;&gt;&gt;[1,2,3,4,5,6]   返回新数组</p><p>倒序方法（reverse）</p><p>不会改变原数组，返回一个新数组</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">arr1 = <span class="hljs-string">[1,2,3,4,5]</span><br>arr2 = arr1.reverse();<br>console.log(arr2)<br><br>&gt;&gt;&gt;<span class="hljs-string">[5,4,3,2,1]</span><br></code></pre></td></tr></table></figure><p>数组转字符串（join）</p><p>括号里的参数替换数组中的逗号，并将数组转换成字符串</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">arr1</span> =<span class="hljs-meta"> [1,2,3,4,5]</span><br><br><span class="hljs-attribute">arr1</span>.join()   #&#x27;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#x27;<br><span class="hljs-attribute">arr1</span>.join(&#x27;&#x27;) #&#x27;<span class="hljs-number">12345</span>&#x27;<br><span class="hljs-attribute">arr1</span>.join(&#x27;c&#x27;)#&#x27;<span class="hljs-number">1</span>c<span class="hljs-number">2</span>c<span class="hljs-number">3</span>c<span class="hljs-number">4</span>c<span class="hljs-number">5</span>&#x27;<br></code></pre></td></tr></table></figure><p>数组截取（slice）</p><p>与字符串截取一样</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">arr</span> =<span class="hljs-meta"> [1,2,3,4,5,6]</span><br><span class="hljs-attribute">arr</span>.slice(<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>)   #<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span><br><span class="hljs-attribute">arr</span>.slice(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)   #<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>数组万能方法（splice）</p><p>删除    arr.splice(从第几位开始，删几位)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">arr</span> =<span class="hljs-meta"> [1,2,3,4,5]</span><br><span class="hljs-attribute">arr</span>.splice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)#从第一位开始，删除两位&gt;&gt;&gt;[<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>增加 arr.splice(从第几位开始，删除几位，添加内容(可以无限添加))</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">arr</span> =<span class="hljs-meta"> [1,2,3,4,5]</span><br><span class="hljs-attribute">arr</span>.splice(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,&#x27;tan&#x27;)#从第一位开始，删除两位并在第一位后面添加tan &gt;&gt;&gt;[<span class="hljs-number">1</span>,tan,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>修改</p><p>当第二位是1的时候，就是修改了</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">arr</span> =<span class="hljs-meta"> [1,2,3,4,5]</span><br><span class="hljs-attribute">arr</span>.splice(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,&#x27;tan&#x27;)#[<span class="hljs-number">1</span>,tan,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>排序整理(sort)(返回新数组)</p><p>通过对比字符编码来排序</p><p>查看字符编码：xxx.charCodeAt()</p><p>字符串看第一位，第一位相同看第二位</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab">由于是查看第一位来排序，所以有缺陷<br><br>解决方法：<br>arr.<span class="hljs-built_in">sort</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(a,b)</span>&#123;<span class="hljs-title">return</span> <span class="hljs-title">b</span>.<span class="hljs-title">charCodeAt</span><span class="hljs-params">()</span>-<span class="hljs-title">a</span>.<span class="hljs-title">charCodeAt</span><span class="hljs-params">()</span>;&#125;;)</span><br></code></pre></td></tr></table></figure><p>数组循环(forEach)</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><br><span class="hljs-meta">#function里可以放入3个参数，分别代表数组的每一个内容，索引，原数组</span><br>#不能使用break，可以使用<span class="hljs-keyword">return</span>来代替<span class="hljs-keyword">continue</span><br>#返回undefined<br>arr.<span class="hljs-keyword">forEach</span>(<span class="hljs-keyword">function</span>(content,<span class="hljs-keyword">index</span>,arr)&#123;<br>console.log(content,<span class="hljs-keyword">index</span>,arr);<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>json数据对象{}</p><p>存取数据  json是没有长度(length)的</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs axapta">json = &#123;<br><span class="hljs-string">&quot;tan&quot;</span>:<span class="hljs-string">&#x27;v&#x27;</span>,<br><span class="hljs-string">&quot;leo&quot;</span>:<span class="hljs-string">&#x27;true&#x27;</span>,<br><span class="hljs-string">&quot;le&quot;</span>:<span class="hljs-literal">true</span>,<br><span class="hljs-string">&quot;vf&quot;</span>:<span class="hljs-number">4</span>,<br><span class="hljs-string">&quot;vfv&quot;</span>:[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">45</span>]<br>&#125;<br><span class="hljs-meta">#标准格式 key名是双引号</span><br><br><span class="hljs-meta">#获取数据（两种方法）</span><br><span class="hljs-built_in">str</span>.leo<br><span class="hljs-built_in">str</span>[<span class="hljs-string">&#x27;leo&#x27;</span>]<span class="hljs-meta">#当键名为数字时，用这个方法</span><br></code></pre></td></tr></table></figure><p>json转字符串,字符串转json</p><p>JSON.stringify(json名)</p><p>JSON.parse(字符串名)</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">str</span> = &#123;<span class="hljs-string">&#x27;tan&#x27;</span>:<span class="hljs-string">&#x27;v&#x27;</span>,<br><span class="hljs-string">&#x27;leo&#x27;</span>:<span class="hljs-string">&#x27;true&#x27;</span>,<br><span class="hljs-string">&#x27;le&#x27;</span>:<span class="hljs-literal">true</span>,&#125;<br><br><span class="hljs-meta">#转字符串</span><br>JSON.stringify(<span class="hljs-built_in">str</span>)<br><span class="hljs-meta">#转JSON</span><br>JSON.parse(<span class="hljs-built_in">str</span>)<br></code></pre></td></tr></table></figure><p>for in 循环</p><p>用来循环对象的属性(一般循环JSON对象)</p><p>可以使用break，continue</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs processing">json = &#123;<span class="hljs-string">&quot;sky&quot;</span>:<span class="hljs-number">20</span>,<span class="hljs-string">&quot;blue&quot;</span>:<span class="hljs-number">40</span>,<span class="hljs-string">&quot;red&quot;</span>:<span class="hljs-number">45</span>,<span class="hljs-string">&quot;green&quot;</span>:<span class="hljs-number">98</span>&#125;<br><br><span class="hljs-keyword">for</span>(var i in json)&#123;<br>console.<span class="hljs-built_in">log</span>(i);<br>&#125;<br>&gt;&gt;&gt; sky,<span class="hljs-built_in">blue</span>,<span class="hljs-built_in">red</span>,<span class="hljs-built_in">green</span><br></code></pre></td></tr></table></figure><p>in关键字</p><p>检测属性是否在对象中（一般在JSON上使用）</p><p>字符串没有这个方法（要有属性才行）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">JSON</span>对象<br><span class="hljs-type">json</span> = &#123;&quot;sky&quot;:<span class="hljs-number">20</span>,&quot;blue&quot;:<span class="hljs-number">40</span>,&quot;red&quot;:<span class="hljs-number">45</span>,&quot;green&quot;:<span class="hljs-number">98</span>&#125;<br><span class="hljs-string">&#x27;sky&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-type">json</span> #<span class="hljs-keyword">true</span><br><br>数组<br>arr = [<span class="hljs-string">&#x27;scr&#x27;</span>,<span class="hljs-string">&#x27;width&#x27;</span>,<span class="hljs-string">&#x27;height&#x27;</span>]<br><span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">in</span> arr   #<span class="hljs-keyword">true</span> 这个的属性是索引，判断索引是否有<span class="hljs-number">2</span> <br></code></pre></td></tr></table></figure><p>JSON删除属性(delete)</p><p>只能删除JSON数据下的属性，var声明的对象不能删除，length也不能删除</p><p>删除成功返回true，失败返回false</p><p>delete删除数组内容会留下占位内容，不会影响数组的长度</p><h6 id="事件监听（addEventListener）"><a href="#事件监听（addEventListener）" class="headerlink" title="事件监听（addEventListener）"></a>事件监听（addEventListener）</h6><p>监听元素的事件</p><p>第一个参数是 事件名称，第二个参数是监听到后执行方法(该方法可以通过函数名传入) </p><p>js事件监听可以叠加，普通事件会被覆盖</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">div.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>alert(<span class="hljs-string">&#x27;1&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>addEventListener中还有第三个参数可以放入布尔值，默认是false</p><p>如果放入第三个参数，事件则在捕获时执行</p><p>解除事件监听（removeEventListener）</p><p>也有三个参数，意义和添加监听一样</p><p>解决ie兼容问题</p><p>低级ie需要用到attachEvent和detachEvent来监听</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-built_in">tan</span>.attachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;alert(<span class="hljs-string">&#x27;1&#x27;</span>)&#125;)<br><span class="hljs-built_in">tan</span>.detachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>,fnName)<br><br>解决兼容<br>var a = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123; alert(<span class="hljs-string">&#x27;2&#x27;</span>); &#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">tan</span>.addEventListener)&#123;<br><span class="hljs-built_in">tan</span>.addEventListener(<span class="hljs-string">&#x27;onclick&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;alert(<span class="hljs-string">&#x27;1&#x27;</span>)&#125;)<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">tan</span>.attachEvent(<span class="hljs-string">&#x27;onclick&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;alert(<span class="hljs-string">&#x27;1&#x27;</span>)&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h6><p>在js中可以使用事件委托/代理方式给予元素事件</p><p>这种给予可以控制 未来元素</p><p>原理是 通过事件对象的元素目标属性来操作元素</p><p>这种方式 安全 不会报错</p><p>例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(event.target.nodeName == <span class="hljs-string">&#x27;DIV&#x27;</span>&#123;<br>event.target.style.color = <span class="hljs-string">&#x27;red&#x27;</span>;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">var</span> oDiv = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;div&#x27;</span>);<br>oDiv.id = <span class="hljs-string">&#x27;div&#x27;</span>;<br>oDiv.innerHTML = <span class="hljs-string">&#x27;124324wedfds&#x27;</span>;<br><span class="hljs-built_in">document</span>.appendChild(oDiv);<br></code></pre></td></tr></table></figure><p>事件委托兼容</p><p>部分ie浏览器不支持event.target属性</p><p>在ie浏览器中用event.srcElement属性来获得事件委托触发事件元素</p><p>documentElement就是html,在IE浏览器中能用得到</p><p>窗口重置事件(onresize)</p><p>只有window和body可以触发这个事件</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-built_in">window</span>.onresize = <span class="hljs-keyword">function</span>()&#123;alert(<span class="hljs-string">&#x27;1&#x27;</span>)&#125;<br><br><span class="hljs-comment">#自定义</span><br><span class="hljs-keyword">var</span> doResize = <span class="hljs-keyword">function</span>()&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>)<br>&#125;<br><br>&lt;body onresize=<span class="hljs-string">&quot;doResize()&quot;</span>&gt;<br><br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><p>js滚动事件(onscroll)</p><p>scrollTop、scrollLeft</p><p>浏览器的滚动距离：document.documentElement.scrollTop</p><p>键盘事件</p><p>onkeydown(键盘按下)</p><p>onkeypress(输入框出现新字符才会触发)</p><p>onkeyup(键盘抬起)</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">window</span>.onkeydwon = function()&#123;<br>console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">event</span>.keyCode);<br>console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">event</span>.key);<br>console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">event</span>.code);<br>console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">event</span>.shich);<br>&#125;<br></code></pre></td></tr></table></figure><p>键盘事件对象<br>可以通过keyCode/key/code/which来获得当前按下的键</p><p>ie兼容 </p><p>ie低版本（keyCode/key/code/which）这四个中只支持keyCode</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">document</span>.onkeydwon = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123; #ie要使用<span class="hljs-built_in">document</span><br><span class="hljs-built_in">console</span>.log(event.keyCode)<br>&#125;<br></code></pre></td></tr></table></figure><p>键盘禁止输入内容</p><p>使用onkeydown然后函数中return false,就阻止输入了</p><p>禁止某些按键输入，可以判断keyCode码来单独return false</p><p>例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#禁止全部建</span><br>ipt.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">#禁止一个键</span><br>ipt.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(event.keyCode == <span class="hljs-number">48</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">#禁止多个键</span><br>ipt.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(event.keyCode == <span class="hljs-number">48</span> || event.keyCode == <span class="hljs-number">49</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">#禁止很多键</span><br>ipt.onkeydown = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(event.keyCode &gt;=<span class="hljs-number">48</span> &amp;&amp; event.keyCode&lt;=<span class="hljs-number">65</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>键盘特殊按键使用</p><p>ctrlKey、altKey、shiftKey、metaKey</p><p>metakey在mac系统上是command键，在window上是win键</p><p>组合键</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#使用特殊件配合</span><br>window.onkeydown = function()&#123;<br>    <span class="hljs-keyword">if</span>(event.ctrlKey &amp;&amp; event.keyCode == 65)&#123;<br>    console.log(<span class="hljs-string">&#x27;1&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">#如果不使用特殊键，用布尔值来代替</span><br><br>var a = <span class="hljs-literal">false</span>,<span class="hljs-attribute">b</span>=<span class="hljs-literal">false</span>;<br>window.onkeydown = function()&#123;<br>    <span class="hljs-keyword">if</span>(event.keyCode == 17)&#123;<br>   <span class="hljs-attribute">a</span>=<span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(event.keyCode == 65)&#123;<br>   <span class="hljs-attribute">b</span>=<span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(a &amp;&amp; b)&#123;<br>    alert(<span class="hljs-string">&#x27;组合键ctrl+a&#x27;</span>)<br>    a = <span class="hljs-literal">false</span>;<br>    <span class="hljs-attribute">b</span>=<span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="全局方法"><a href="#全局方法" class="headerlink" title="全局方法"></a>全局方法</h6><p>eval</p><p>eval 去掉字符串的引号</p><p>在JS的全局对象window中可以使用eval方法来解析字符串</p><p>使用eval方法处理除字符串的其他数据类型的话会原状返回</p><p>使用eval方法处理字符串的话，让其执行字符串内的JavaScript代码</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">a</span> = <span class="hljs-string">&#x27;b = 13;&#x27;</span><br><br>eval(<span class="hljs-keyword">a</span>)&gt;&gt;&gt; b=<span class="hljs-number">13</span>; 执行依次只能去掉一层引号，如果有多层引号，需要多次执行<br>console.<span class="hljs-built_in">log</span>(b)  &gt;&gt;&gt; <span class="hljs-number">13</span><br></code></pre></td></tr></table></figure><p>parseInt</p><p>解析字符串，并以整数的形式返回</p><p>去掉空格，返回整数</p><p>从非空格开始，如果第一位是非数字，返回NaN；如果是数字，返回非数字前的数字</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-string">&#x27;  1332  &#x27;</span>)</span></span>&gt;&gt;&gt;<span class="hljs-number">123</span><br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-string">&#x27;  hyg13&#x27;</span>)</span></span>&gt;&gt;&gt;NaN<br><span class="hljs-function"><span class="hljs-title">parseInt</span><span class="hljs-params">(<span class="hljs-string">&#x27; 232kjk&#x27;</span>)</span></span>&gt;&gt;&gt;<span class="hljs-number">232</span><br></code></pre></td></tr></table></figure><p>有两个参数时parseInt(数字,几进制)</p><p>例：parseInt(1011,2)     &gt;&gt;&gt; 11   1011的二进制</p><p>parseFloat</p><p>基本与parseInt一样，唯一区别是会保留小数点以后的内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">parseFloat</span><span class="hljs-params">(<span class="hljs-string">&#x27;  3243.44&#x27;</span>)</span></span>&gt;&gt;&gt;<span class="hljs-number">3243.44</span><br><span class="hljs-function"><span class="hljs-title">parseFloat</span><span class="hljs-params">(<span class="hljs-string">&#x27;  3243.44.3242sa&#x27;</span>)</span></span>&gt;&gt;&gt;<span class="hljs-number">3243.44</span><br><span class="hljs-function"><span class="hljs-title">parseFloat</span><span class="hljs-params">(<span class="hljs-string">&#x27;  dsf3243.44&#x27;</span>)</span></span>&gt;&gt;&gt;NaN<br></code></pre></td></tr></table></figure><p>isNaN    </p><p>在JS的全局对象window里面可以使用isNaN方法来判断内容是否为NaN</p><p>isNaN方法里面如果放入NaN内容返回True，其余返回false</p><p>其原理是先把参数放入number函数下面，如果返回是NaN。则，isNaN内容为true，其余情况则为false</p><h6 id="三目运算符-三元运算符"><a href="#三目运算符-三元运算符" class="headerlink" title="三目运算符(三元运算符)"></a>三目运算符(三元运算符)</h6><p>判断条件 ？成功执行 : 失败执行</p><p>如果要执行多条语句，要用逗号连接，并使用括号括起来</p><p>判断条件 ？(成功语句一,成功语句二) : (失败语句1，失败语句二)</p><h6 id="数学方法-随机数"><a href="#数学方法-随机数" class="headerlink" title="数学方法-随机数"></a>数学方法-随机数</h6><p>Math.random()    0~1的随机数</p><p>理论上会出现0和1，但实际上不会出现0和1</p><p>随机数0~10</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">parseInt</span>( Math.random() * <span class="hljs-number">10</span>+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>封装随机数</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function">function <span class="hljs-title">randint</span><span class="hljs-params">(<span class="hljs-built_in">min</span>,<span class="hljs-built_in">max</span>)</span></span>&#123;<br><span class="hljs-keyword">return</span>(<span class="hljs-built_in">parseInt</span>(Math.<span class="hljs-built_in">random</span>() *(<span class="hljs-built_in">max</span>-<span class="hljs-built_in">min</span>+<span class="hljs-number">1</span>)+<span class="hljs-built_in">min</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="js对象理解"><a href="#js对象理解" class="headerlink" title="js对象理解"></a>js对象理解</h6><p>不等性</p><p>不同的对象都不相等</p><p>私有属性</p><p>数组、JSON、函数都有私有属性</p><p>只要是对象都可以挂私有属性，非对象就不能挂私有属性</p><p>new</p><p>在js中，函数除了普通方式调用之外，还能使用new调用</p><p>使用new调用函数，会改变函数的一些特性会影响声明的数据类型状态</p><p>通过new声明的数据类型都为对象，具备对象的所有属性</p><p>引用机制(对象才有)</p><p>两个变量的内容指向同一内容，改变其中一个内容，另一个也会随之改变</p><p>只有改变原有对象内容的方法和改变属性会触发引用机制</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">var</span> a=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-attribute">var</span> b = a;<br><span class="hljs-attribute">b</span>.push(<span class="hljs-number">4</span>);#进行增删改 才会触发引用机制<br><span class="hljs-attribute">console</span>.log(a);<span class="hljs-meta">[1,2,3,4]</span><br></code></pre></td></tr></table></figure><h6 id="面对对象"><a href="#面对对象" class="headerlink" title="面对对象"></a>面对对象</h6><p>类</p><p>js中又很多类，如string、number、Boolean。array、function、object等</p><p>new函数可以创建新的类</p><p>原型(prototype)</p><p>在js中原型的作用是连接类的方法</p><p>通过原型可以对类的方法进行操作</p><p>new创建的自定义类也可以进行添加方法</p><p>Array.prototype 查看数组所有方法</p><p>Number.prototype 查看Number所有方法</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#删除方法</span><br><span class="hljs-built_in">Array</span>.prototype.indexOf = <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">#添加方法,原始类只能这样添加方法</span><br><span class="hljs-built_in">Array</span>.prototype.tan= <span class="hljs-keyword">function</span>()&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br><span class="hljs-built_in">console</span>.log([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>].tan())&gt;&gt;&gt;[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-comment">#自定义类并添加方法</span><br><span class="hljs-keyword">function</span> tan()&#123;<br>&#125;;<br>tan.prototype = &#123;<br><span class="hljs-string">&#x27;aaa&#x27;</span>:<span class="hljs-number">12</span>,<br><span class="hljs-string">&#x27;ccc&#x27;</span>:<span class="hljs-string">&#x27;sadasl&#x27;</span>,<br><span class="hljs-string">&#x27;leo&#x27;</span>:<span class="hljs-number">1212</span><br>&#125;<br>a = <span class="hljs-keyword">new</span> tan()<br>a.ccc&gt;&gt;&gt;<span class="hljs-string">&#x27;sadasl&#x27;</span><br></code></pre></td></tr></table></figure><p>原型链(——proto——)</p><p>在JS中，Object是最大的类，其余所有的类都默认原型链到Object上</p><p>类可以使用原型链上面的类的原型方法</p><p>在JS的默认归类中，如果Object类原型发生改变，那么所有的类都会可以使用改变的内容</p><p>获取数据类的方法（constructor）</p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gml">&lt;<span class="hljs-keyword">div</span> <span class="hljs-symbol">id</span> = <span class="hljs-string">&#x27;tan&#x27;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br><br><span class="hljs-built_in">tan</span>.constructor  &gt;&gt;&gt; HTMLDivElement<br></code></pre></td></tr></table></figure><p>对象中this的指向</p><p>在js对象中，一般this指向为当前对象</p><p>在自定义类中，this可以为当前自定义类挂方法</p><p>在自定义类中，this属性和当前属性一致时，最后结果为this属性内容</p><p>强制改变this-call</p><p>第一个参数是改变this的指向</p><p>后面的参数就是函数里正常需要的参数</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">var</span> a = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-comment">&#123;</span><br><span class="hljs-comment">a:200</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tan</span><span class="hljs-params">(x)</span><span class="hljs-comment">&#123;</span></span><br><span class="hljs-function"><span class="hljs-comment">console.log(this.a)</span></span><br><span class="hljs-function"><span class="hljs-comment">&#125;</span>;</span><br>tan();&gt;&gt;&gt;<span class="hljs-number">2</span><br>tan.call(obj); &gt;&gt;&gt;<span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><p>强制改变this-apply</p><p>传一个参数的时候与call一样</p><p>第二个参数必须是一个数组，数组内容必须对应函数参数的个数</p><p>原型继承</p><p>自定义类继承原型方法，使用prototype然后赋值new一下要继承的类，这样就会触发原型链链接</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">tan</span> 继承 sky里的方法<br>sky.prototype = <span class="hljs-keyword">new</span> <span class="hljs-built_in">tan</span>();<br></code></pre></td></tr></table></figure><p>属性继承</p><p>如果当前自定义类想使用其他自定义类的属性，我们可以使用call或apply方法通过this传参的形式，去其他自定义类中“偷”到自定义属性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">function <span class="hljs-title">tan</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">this</span>.a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">this</span>.b = <span class="hljs-number">20</span>;<br>&#125;<br><br><span class="hljs-function">function <span class="hljs-title">bo</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">tan</span>.call(<span class="hljs-keyword">this</span>);将<span class="hljs-keyword">this</span>指到<span class="hljs-built_in">tan</span>()中<br>&#125;<br><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">new</span> bo().a)&gt;&gt;&gt;<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h6 id="模块化开发"><a href="#模块化开发" class="headerlink" title="模块化开发"></a>模块化开发</h6><p>四点好处</p><p>1.避免变量污染，命名冲突</p><p>2.提高代码复用率</p><p>3.提高了可维护性</p><p>4.方便依赖关系管理</p><p>jQuery选择器封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jQuery</span>(<span class="hljs-params">ele</span>)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name = ele;<br>    <span class="hljs-built_in">this</span>.eleArr = [];<br>    <span class="hljs-keyword">switch</span>(<span class="hljs-built_in">this</span>.name[<span class="hljs-number">0</span>])&#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;#&#x27;</span>:<br>            <span class="hljs-built_in">this</span>.newele = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-built_in">this</span>.name.slice(<span class="hljs-number">1</span>));<br>            <span class="hljs-built_in">this</span>.eleArr.push(<span class="hljs-built_in">this</span>.newele);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;.&#x27;</span>:<br>            <span class="hljs-built_in">this</span>.newele = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-built_in">this</span>.name.slice(<span class="hljs-number">1</span>));<br>            <span class="hljs-built_in">this</span>.eleArr.push(<span class="hljs-built_in">this</span>.newele);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">this</span>.newele = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-built_in">this</span>.name);<br>            <span class="hljs-built_in">this</span>.eleArr.push(<span class="hljs-built_in">this</span>.newele);<br><br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.eleArr)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$</span>(<span class="hljs-params">ele</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> jQuery(ele);<br>&#125;;<br>$(<span class="hljs-string">&#x27;div&#x27;</span>);<br></code></pre></td></tr></table></figure><h6 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h6><p>方式：</p><p>1.(function(){}());    最常用</p><p>2.(function(){})();</p><p>3.void function(){}()    返回值永远是undefined</p><p>4.!function(){}()    返回值自动转成布尔值，并且布尔值相反</p><p>5.-function(){}()    返回值会自动乘以-1</p><p>6.+function(){}()    返回值乘以1</p><p>7.~function(){}()    返回值会乘以-1再减去1</p><p>例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> allipt = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; allipt.length; i++)&#123;<br>    allipt[i].index = i;<br>    allipt[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        alert(<span class="hljs-built_in">this</span>.index);<br>    &#125;;<br>&#125;;<br><br><span class="hljs-keyword">var</span> allipt = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i&lt;allipt.length;i++)&#123;<br>    (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>)</span>&#123;<br>        allipt[i].onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            alert(i);<br>        &#125;;<br>    &#125;(i))<br>&#125;;<br></code></pre></td></tr></table></figure><h6 id="使用技巧-创建对象"><a href="#使用技巧-创建对象" class="headerlink" title="使用技巧-创建对象"></a>使用技巧-创建对象</h6><p>三种方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> json = &#123;&#125;;<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">Object</span>();<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web前端(网易学习)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网易-Html</title>
    <link href="/2021/10/21/%E7%BD%91%E6%98%93-html/"/>
    <url>/2021/10/21/%E7%BD%91%E6%98%93-html/</url>
    
    <content type="html"><![CDATA[<p>前端总结</p><p>前端由html css js 组成</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>html结构</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;html&gt;</span><br><span class="hljs-section">&lt;head&gt;</span><br><span class="hljs-section">&lt;mate&gt;</span><span class="hljs-section">&lt;/mate&gt;</span><br><span class="hljs-section">&lt;title&gt;</span><span class="hljs-section">&lt;title&gt;</span><br><span class="hljs-section">&lt;/head&gt;</span><br><span class="hljs-section">&lt;body&gt;</span><br><span class="hljs-section">&lt;/body&gt;</span><br><span class="hljs-section">&lt;/html&gt;</span><br></code></pre></td></tr></table></figure><p>div标签(块状元素)</p><p>属性：width  height background-color等</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">test</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><p>img标签</p><p>属性：width height </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;图片路径&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>a标签</p><p>属性：target( _blank 新窗口打开)  title</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span> <span class="hljs-attribute">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;百度&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>ol ul  li dl dd标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">有序列表<br><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><br>无序列表<br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>自定义描述列表标签<br><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注释（ctrl+/）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 这是注释 --&gt;</span><br></code></pre></td></tr></table></figure><p>input元素（输入框）</p><p>属性：button password text  date 等 </p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;类型&quot;</span>  value=<span class="hljs-string">&quot;默认值&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>p  ,  span 元素(行级元素)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> <br>&lt;<span class="hljs-selector-tag">p</span>&gt;这是一个<span class="hljs-selector-tag">p</span>标签，可以放文字&lt;/<span class="hljs-selector-tag">p</span>&gt;<br><br><span class="hljs-selector-tag">span</span><br>&lt;<span class="hljs-selector-tag">span</span>&gt;&lt;/<span class="hljs-selector-tag">span</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><p>例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>选择器&#123;<br><span class="css"><span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;</span><br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>css引入方式（3种）</p><ol><li>将样式直接写在标签上</li><li>将样式写在style标签中</li><li>将样式写成一个css 文件（link引入）</li></ol><p>css选择器</p><p>标签选择器（标签名{}）</p><p>*,html,body ,head,div,p,span等</p><p>后代选择器</p><p>群组选择器</p><p>子级选择器</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">&lt;style&gt;<br>&lt;--后代选择器--&gt;<br><span class="hljs-string">.test</span> <span class="hljs-string">.test-1</span> <span class="hljs-string">.test-2</span>&#123;&#125;<br>&lt;--群组选择器--&gt;<br><span class="hljs-string">.test</span>, <span class="hljs-string">.test-1</span>, <span class="hljs-string">.test-2</span>&#123;&#125;<br>&lt;--子级选择器--&gt;<br><span class="hljs-string">.test</span> &gt; <span class="hljs-string">.test-1</span> &gt; <span class="hljs-string">.test-2</span>&#123;&#125;<br>&lt;<span class="hljs-string">/style</span>&gt;<br>&lt;div class=<span class="hljs-string">&quot;test&quot;</span>&gt;<br>&lt;div class=<span class="hljs-string">&quot;test-1&quot;</span>&gt;<br>        &lt;div class=<span class="hljs-string">&quot;test-2&quot;</span>&gt;<br>        &lt;<span class="hljs-string">/div</span>&gt;<br>&lt;<span class="hljs-string">/div</span>&gt;<br>&lt;<span class="hljs-string">/div</span>&gt;<br></code></pre></td></tr></table></figure><p>盒子模型概念</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss">浮动<br><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>    <span class="hljs-attribute">float</span>: right<br><br>外边距<br>margin:<span class="hljs-number">10px</span>;<br>内边距<br><span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;<br>边框<br><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid red;  solid（实线） dashed(虚线)<br><br>都支持 <span class="hljs-attribute">top</span> <span class="hljs-attribute">right</span> <span class="hljs-attribute">bottom</span> <span class="hljs-attribute">left</span><br></code></pre></td></tr></table></figure><p>css样式继承</p><p>子元素会继承父元素的一部分样式</p><p>背景(background)</p><p>background-color：red;</p><p>background-image: url(图片路径)；</p><p>background-position  属性：left top right bottom  10px 10px;</p><p>background-repeat  属性： repeat  no-repeat  repeat-x repeat-y;</p><p>background-size:10px 10px;</p><p>简写</p><p>background:  url(图片路径)  left top/10px 10px red repeat;</p><p>透明度</p><p>opacity：0.5；  值为0到1</p><p>css注释（ctrl+/）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*这是css注释*/</span><br></code></pre></td></tr></table></figure><p>重置样式</p><ol><li>*{magin:0px;  padding:0px;}</li><li>引入reset.css文件</li></ol><p>命名规则</p><p>不能使用数字或者使用数字开头命名</p><ol><li><p>匈牙利命名法</p><p>变量名=属性+类型+描述</p></li><li><p>小驼峰命名法</p><p>使用-或者_连接单词</p></li><li><p>大驼峰命名法</p><p>起始单词小写，下一个单词首字母大写</p></li></ol><p>标准流与非标准流</p><ol><li><p>先放非标准流会出现重叠现象</p></li><li><p>标准流的margin-top会让父元素也跟着下移</p><p>解决方法：加上float：left</p></li></ol><p>定位</p><p>固定定位    position：fixed；</p><p>绝对定位    position: absolute;</p><p>相对定位    position:relative;</p><p>继承定位    position:inherit;</p><p>默认值    position：static；    </p><p>font（字体）</p><p>字体大小    font-size:10px;</p><p>文字粗细    font-weight:500;  数值1到1000</p><p>字体样式    font-family: “宋体”；</p><p>风格样式    font-style: italic;</p><p>字体对齐方式    text-align: center;   left  right</p><p>行高    line-height：10px;</p><p>小型大写字母样式    font-variant:small-caps;</p><p>英文自动换行    word-wrap：break-word;</p><p>文本缩进    text-indent:20px;</p><p>缩写</p><p>font: italic small-caps bold 12px/20px “宋体”;</p><p>排序：style variant weight size/height family</p><p>百分比和auto属性</p><p>width:50%;</p><p>height:100%；</p><p>position：absolute； left：50% ； top：0%；</p><p>padding:50%;(根据父元素的宽度计算)</p><p>margin:70%;(根据父元素的宽度计算)</p><p>元素消失 变块 行内 行内块样式</p><p>display :   none   block  inline   inline-block</p><p>元素溢出隐藏</p><p>overflow :  hidden   auto</p><p>overflow-x : hidden   auto</p><p>overflow-y : hidden  auto</p><p>链接未访问 已访问 点击中 鼠标浮动样式</p><p>a:link{ color:red;  backgound:black;}</p><p>a:visited{}</p><p>a:hover{}</p><p>a:active{}</p><p>图片三像素解决方法</p><p>1.font-size：0px;</p><p>2.img{float:left}</p><p>改变鼠标样式</p><p>cursor:pointer  等</p><p>单选框(radio)    </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;for0&quot;</span>  <span class="hljs-attribute">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;&lt;label <span class="hljs-attribute">for</span>=<span class="hljs-string">&quot;for0&quot;</span>&gt;bobo&lt;/label&gt;<br></code></pre></td></tr></table></figure><p>多选框 (checkbox)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;for0&quot;</span>  <span class="hljs-attribute">checked</span>=<span class="hljs-string">&quot;checked&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span>/&gt;&lt;label <span class="hljs-attribute">for</span>=<span class="hljs-string">&quot;for0&quot;</span>&gt;bobo&lt;/label&gt;<br></code></pre></td></tr></table></figure><p>iframe</p><p>frameborder  scrolling</p>]]></content>
    
    
    <categories>
      
      <category>Web前端(网易学习)</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大数据开发-spark</title>
    <link href="/2021/09/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91-spark/"/>
    <url>/2021/09/01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91-spark/</url>
    
    <content type="html"><![CDATA[<h3 id="spark"><a href="#spark" class="headerlink" title="spark"></a>spark</h3><p>spark简介</p><p>spark安装</p><p>spark shell环境</p><h6 id="spark简介"><a href="#spark简介" class="headerlink" title="spark简介"></a>spark简介</h6><p>大数据应用场景</p><p>1.精准营销(广告投放、电商推荐)</p><p>2.工业生产(供应链管理、生产流程控制、产品质量控制)</p><p>3.智能城市(规划、交通、监控)</p><p>4.医疗健康(疾病预防、医疗诊断)</p><p>大数据概念</p><p>1.数据量特别大，大到一台服务器无法提供服务，必须通过集群方式实现分布式存储与分布式计算</p><p>⒉数据类型多样化:数据可能是非结构化的也可能是结构化的</p><p>3.对数据分析有时效性要求，必须能在短时间内或者实时的得出分析结果</p><p>4.数据来源丰富</p><p>spark</p><p>1.spark是一个分布式计算框架</p><p>2.spark具有比hadoop更高的mapreduce效率</p><p>3.spark由scala语言编写，提供了Python API用来编写mapreduce程序4.spark可以运行在Hadoop集群上</p><p>4.spark提供了诸如RDD SQL、MLLIB等丰富的核心组件</p><p>spark运行机制</p><p>spark通过将数据加载到内存中，进行分区计算，因此可以在大型数据下任然能提供较快的计算性能</p><p>一个计算任务称为一个job</p><p>每个job需要分成几个步骤stage</p><p>每个步骤需要完成多个任务task</p><p>将一个任务分成若干个小块完成计算 -map</p><p>将若干个小块的计算结果合并 -reduce</p><h6 id="spark框架安装"><a href="#spark框架安装" class="headerlink" title="spark框架安装"></a>spark框架安装</h6><p>一：</p><ol><li>官网：spark.apache.org</li><li>下载：spark-2.4.5-bin-hadoop2.7.tgz</li><li>解压缩到/usr/local/spark-2.4.5</li></ol><p>二：</p><ol><li>Java环境: spark开发过程需要一些java库</li><li>下载: <a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></li></ol><p>三：</p><ol><li>pyspark模块: python是spark支持的三大语言之一</li><li>安装: pip install pyspark</li></ol><p>四：配置spark运行环境(在cmd中输入以下命令)</p><ol><li>export SPARK_HOME=解压缩后文件的路径</li><li>export PATH=$PATH:$SPARK_HOME/bin</li></ol><h4 id="spark-RDD"><a href="#spark-RDD" class="headerlink" title="spark  RDD"></a>spark  RDD</h4><p>RDD常用操作</p><p>键值对操作</p><p>RDD数据读取与保存</p><h6 id="RDD常用操作"><a href="#RDD常用操作" class="headerlink" title="RDD常用操作"></a>RDD常用操作</h6><p>RDD(Resilient Distributed Dataset)-弹性分布式元素集合Spark会自动将RDD数据分发到集群上，对数据进行并行操作</p><p>1.转换操作-将一个RDD转换为另一个RDD</p><p>2.行动操作-对RDD进行运算，比如求平均值，得到一个结果</p>]]></content>
    
    
    <categories>
      
      <category>大数据开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Numpy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据爬虫-爬虫与反爬</title>
    <link href="/2021/08/26/%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/"/>
    <url>/2021/08/26/%E6%95%B0%E6%8D%AE%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<h4 id="断点调试与日志"><a href="#断点调试与日志" class="headerlink" title="断点调试与日志"></a>断点调试与日志</h4><p>pycharm断点调试</p><p>Spyder断点调试</p><p>运行日志记录</p><h6 id="pycharm断点调试"><a href="#pycharm断点调试" class="headerlink" title="pycharm断点调试"></a>pycharm断点调试</h6><p>设置：setting—&gt;Build,Execution,Deployment—&gt;console(点击他)—-&gt;右侧勾选（use IPython if available, show console variables by default）</p><p>设置程序结束后进入python控制台环境</p><p>编辑配置—–&gt;使用python控制台运行</p><p>安装ipython–&gt;pip install ipython   (比原来的交互方便)</p><h4 id="爬虫流程"><a href="#爬虫流程" class="headerlink" title="爬虫流程"></a>爬虫流程</h4><p>① 获取start_url</p><p>②抓取URL</p><p>③提取链接—&gt;提取信息—–&gt;保存信息</p><p>④存储链接</p><p>⑤从链接集合中读取一条（在返回到抓取URL）</p><h4 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h4><p>安装：pip install requests</p><p>get方式请求：requests.get</p><p>post方式请求：requests.post</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#get方式抓取远程URL</span><br><span class="hljs-meta">#params参数可以是一个字典，也可以是一个原则组成的列表，构成query_string</span><br>page = requests.<span class="hljs-keyword">get</span>(url, params, **kw)<br><br><span class="hljs-meta">#post方式抓取远程URL</span><br><span class="hljs-meta">#data可以是字典或者元组组成的列表， json:以josn格式提交的post数据</span><br>page = requests.post(url, data, json, **kw)<br></code></pre></td></tr></table></figure><h6 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">response对象：<br>content - 返回的内容字节对象，需要decode解码<br><span class="hljs-type">text</span> <span class="hljs-comment">----解析后的文本内容</span><br><span class="hljs-type">json</span> <span class="hljs-comment">----json类型响应内容</span><br><span class="hljs-keyword">encoding</span>-网页源文件编码格式<br>status_code  <span class="hljs-comment">----状态码</span><br></code></pre></td></tr></table></figure><h6 id="请求头处理（headers）"><a href="#请求头处理（headers）" class="headerlink" title="请求头处理（headers）"></a>请求头处理（headers）</h6><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vbscript">请求头处理：<br>发送请求时，可以构造一个请求头<br>请求头格式是字典，使用headers关键字传参<br><br>响应头：<br><span class="hljs-built_in">response</span>.headers可以得到字典类型的响应头<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">headers = &#123;<br>这里面放需要的参数<br>&#125;<br>page = requests.<span class="hljs-builtin-name">get</span>(url, params, headers)<br><span class="hljs-builtin-name">print</span>(page.headers)<br></code></pre></td></tr></table></figure><h6 id="cookies"><a href="#cookies" class="headerlink" title="cookies"></a>cookies</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">获取服务器返回的cookies：<br>通过response.cookies[<span class="hljs-string">&#x27;cookie_name&#x27;</span>]可以读取响应的cookie值<br><br>向服务器发送cookies：<br>cookies = &#123;<span class="hljs-string">&quot;cookie_name&quot;</span>:cookie_value&#125;<br>request.<span class="hljs-builtin-name">get</span>(<span class="hljs-built_in">..</span>., <span class="hljs-attribute">cookies</span>=cookies)<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cooies = &#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;xiaobo&quot;</span>&#125;<br>page = requests.<span class="hljs-builtin-name">get</span>(<span class="hljs-attribute">url</span>=url, <span class="hljs-attribute">params</span>=params, <span class="hljs-attribute">headers</span>=headers, <span class="hljs-attribute">cookies</span>=cookies)<br><span class="hljs-builtin-name">print</span>(page.cookies[<span class="hljs-string">&#x27;username&#x27;</span>])<br></code></pre></td></tr></table></figure><h6 id="IP代理"><a href="#IP代理" class="headerlink" title="IP代理"></a>IP代理</h6><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-built_in">ip</span>代理：<br>有的时候，我们需要通过代理才能访问网站<br><span class="hljs-number">1.</span><span class="hljs-built_in">ip</span>被封<br><span class="hljs-number">2</span>.国外翻墙网站<br><span class="hljs-number">3</span>.隐藏自己的真实<span class="hljs-built_in">ip</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros">proxy_servers = &#123;<br><span class="hljs-string">&#x27;http&#x27;</span> : <span class="hljs-string">&#x27;http://127.0.0.1:49567&#x27;</span><br><span class="hljs-string">&#x27;https&#x27;</span> : <span class="hljs-string">&#x27;http://127.0.0.1:49567&#x27;</span><br>&#125;<br><br>url = <span class="hljs-string">&quot;http://www.google.com&quot;</span><br>data = requests.<span class="hljs-builtin-name">get</span>(url, <span class="hljs-attribute">proxies</span>=proxy_servers)<br></code></pre></td></tr></table></figure><h6 id="抓取网页"><a href="#抓取网页" class="headerlink" title="抓取网页"></a>抓取网页</h6><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-built_in">import</span> requests<br><br><span class="hljs-comment"># html页面抓取</span><br><span class="hljs-attr">url</span> = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span><br><span class="hljs-attr">page</span> = requests.get(url)<br><br><span class="hljs-comment"># 获得响应头</span><br><span class="hljs-attr">headers</span> = page.headers<br><span class="hljs-comment"># 获得cookies</span><br><span class="hljs-attr">cookies</span> = page.cookies<br><span class="hljs-attr">cookies_dict</span> = cookies.get_dict()<br><span class="hljs-comment"># 网页内容</span><br><span class="hljs-attr">page_text</span> = page.text<br><br><span class="hljs-comment">#解码</span><br>page.content.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<span class="hljs-comment">#不填时默认utf-8</span><br></code></pre></td></tr></table></figure><h6 id="抓取图片"><a href="#抓取图片" class="headerlink" title="抓取图片"></a>抓取图片</h6><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">import requests<br><br><span class="hljs-comment"># 媒体文件抓取</span><br>url = <span class="hljs-string">&quot;https://pic.sogou.com/d?query=%E5%9B%BE%E7%89%87&amp;forbidqc=&amp;entityid=&amp;preQuery=&amp;rawQuery=%E5%9B%BE%E7%89%87&amp;queryList=&amp;st=255&amp;mode=1&amp;did=54&quot;</span><br>data = requests.get(url)<br><br><span class="hljs-comment"># 图片、视频都是二进制字节数据，以字节形式保存</span><br>f = <span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;my.jpg&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>f.write(data.content)<br>f.close()<br></code></pre></td></tr></table></figure><h6 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h6><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># cookie</span><br><span class="hljs-meta"># 使用post登陆</span><br><span class="hljs-meta"># 需要发送username, password, csrf_token, cookie</span><br><span class="hljs-meta"># url = &quot;http://test.python-xp.com/login&quot;</span><br><span class="hljs-meta"># 打开登陆页面</span><br><span class="hljs-meta"># login_page = requests.get(url)</span><br><span class="hljs-meta"># 获得session</span><br><span class="hljs-meta"># session = login_page.cookies[&#x27;session&#x27;]</span><br><span class="hljs-meta"># token = re.findall(&quot;&lt;input id=\&quot;csrf_token\&quot;.*?value=\&quot;(.*?)\&quot;&gt;&quot;, login_page.text)[0]</span><br><span class="hljs-meta"># data = &#123;&quot;username&quot;:&quot;luxp&quot;, &quot;password&quot;:&quot;123456&quot;, &quot;csrf_token&quot;:token &#125;</span><br><span class="hljs-meta"># cookies = &#123;&#125;</span><br><span class="hljs-meta"># cookies = &#123;&quot;session&quot;:session&#125;</span><br><span class="hljs-meta"># res = requests.post(url, data=data, cookies=cookies)</span><br></code></pre></td></tr></table></figure><h6 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h6><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># 代理</span><br><span class="hljs-meta"># proxy_servers = &#123;</span><br><span class="hljs-meta">#     &#x27;http&#x27;: &#x27;127.0.0.1:49567&#x27;,</span><br><span class="hljs-meta">#     &#x27;https&#x27;: &#x27;127.0.0.1:49567&#x27;</span><br><span class="hljs-meta"># &#125;</span><br><span class="hljs-meta">#</span><br><span class="hljs-meta"># url = &quot;http://www.google.com&quot;</span><br><span class="hljs-meta"># data = requests.get(url, proxies=proxy_servers)</span><br><br></code></pre></td></tr></table></figure><h4 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h4><p><strong>ajax</strong>对象请求默认是不能跨域访问，所谓跨域，就是一个站点的ajax对象是不能请求另一个站点的数据，称为<strong>同源安全策略</strong>，只要<strong>proto(协议)，host(主机名), port(端口)中有一个不同</strong>，就认为违反了同源策略（被请求一方可以设置:Access-Control-Allow-Origin,允许跨域访问)</p><p><strong>http 与https之间不能访问</strong></p><p><strong>host1 与host2之间不能访问</strong></p><p><strong>port1 与port2之间不能访问</strong></p><p><strong>jsonp</strong>，是一种可以跨域的请求方式，利用<strong>script</strong>标签的<strong>src</strong>，加载一段js代码。<br>在请求中包含一个回调函数名，服务器受到请求后，会用这个函数名包裹json数据返回，在前端页面，src加载后就可以执行这个函数</p><p>jsonp返回的数据是由函数名包裹着json数据的字符串，如果ajax请求，就会在页面中执行这个函数，在pvthon程序中，可以剥离函数名之后转化为字典对象</p><h4 id="lxml-xpath"><a href="#lxml-xpath" class="headerlink" title="lxml + xpath"></a>lxml + xpath</h4><h6 id="xpath语法"><a href="#xpath语法" class="headerlink" title="xpath语法"></a>xpath语法</h6><table><thead><tr><th align="center">路径表达式</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">/</td><td align="center">从根节点选取（/html）</td></tr><tr><td align="center">//</td><td align="center">从当前选择的节点开始（//div[@class=”el”]）</td></tr><tr><td align="center">.</td><td align="center">选择当前节点</td></tr><tr><td align="center">..</td><td align="center">选择当前节点父节点</td></tr><tr><td align="center">@</td><td align="center">选择属性</td></tr><tr><td align="center">//div/p[1]</td><td align="center">表示div下面的第一个P（选择特定的元素），末尾是last()，某个位置：position()&gt;|=|&lt;10，比如前10个匹配元素 position()&lt;10</td></tr><tr><td align="center">//div/p|//div/a</td><td align="center">div元素中的p元素与a元素</td></tr><tr><td align="center">*</td><td align="center">通配符，任何元素节点</td></tr><tr><td align="center">@*</td><td align="center">任何属性节点</td></tr><tr><td align="center">node()</td><td align="center">任何类型节点，文本节点使用text()</td></tr></tbody></table><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;div class=<span class="hljs-string">&quot;el&quot;</span>&gt;<br>&lt;p class=<span class="hljs-string">&quot;t1&quot;</span>&gt;<br>&lt;span&gt;<br>&lt;a href=<span class="hljs-string">&quot;www.baidu.com&quot;</span> title=<span class="hljs-string">&quot;百度官网&quot;</span>&gt;<br>&lt;/span&gt;<br>&lt;span&gt;<br><br>&lt;/span&gt;<br>&lt;/p&gt;<br>&lt;/div&gt;<br><br><span class="hljs-regexp">//</span>div[@class=<span class="hljs-string">&quot;el&quot;</span>]<span class="hljs-regexp">/p/</span>span[<span class="hljs-number">1</span>]<span class="hljs-comment">#查找第一个span的路径</span><br><span class="hljs-regexp">//</span>div[@class=<span class="hljs-string">&quot;el&quot;</span>]<span class="hljs-regexp">/p/</span>span/a<span class="hljs-comment">#查找a标签</span><br><span class="hljs-regexp">//</span>div[@class=<span class="hljs-string">&quot;el&quot;</span>]<span class="hljs-regexp">/p/</span>span<span class="hljs-regexp">/a/</span>@href<span class="hljs-comment">#查找href标签</span><br><br></code></pre></td></tr></table></figure><h6 id="lxml"><a href="#lxml" class="headerlink" title="lxml"></a>lxml</h6><p>要使用xpath路径，需要将抓取的页面字符串数据转化为节点对象,可以通过lxml实现安装: pip install lxml</p><p>将抓取的页面字符串转换为dom节点对象，才可以使用xpath语法提取节点</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">from lxml <span class="hljs-built_in">import</span> html<br><span class="hljs-attr">dom</span> = html.document_fromstring(page)<br><span class="hljs-attr">links_xpath</span> = <span class="hljs-string">&quot;//div[@class=\&quot;</span>el\<span class="hljs-string">&quot;]/p/span/a/@href&quot;</span><br><span class="hljs-attr">links</span> = dom.xpath(links_xpath)<br></code></pre></td></tr></table></figure><p>例</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-built_in">import</span> requests<br>from lxml <span class="hljs-built_in">import</span>  html<br><br><span class="hljs-comment"># 页面抓取成功</span><br><span class="hljs-attr">url</span> = <span class="hljs-string">&quot;https://search.51job.com/list/070300,000000,0000,00,9,99,python,2,1.html?lang=c&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;ord_field=0&amp;dibiaoid=0&amp;line=&amp;welfare=&quot;</span><br><br><span class="hljs-attr">headers</span> = &#123;<br>    <span class="hljs-string">&quot;Host&quot;</span>: <span class="hljs-string">&quot;search.51job.com&quot;</span>,<br>    <span class="hljs-string">&quot;Upgrade-Insecure-Requests&quot;</span> :<span class="hljs-string">&quot;1&quot;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36&quot;</span><br>&#125;<br><br>try:<br>    <span class="hljs-attr">data</span> = requests.get(url, <span class="hljs-attr">headers=headers)</span><br>except Exception as e:<br>    print(e)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># page = data.content.decode(data.apparent_encoding)</span><br>    <span class="hljs-attr">page</span> = data.content.decode(<span class="hljs-string">&quot;gbk&quot;</span>)<br><br><span class="hljs-comment"># 岗位链接提取</span><br><span class="hljs-attr">xpath_href</span> = <span class="hljs-string">&quot;//div[@class=&#x27;el&#x27;]/p/span/a/@href&quot;</span><br><span class="hljs-attr">xpath_link_text</span> = <span class="hljs-string">&quot;//div[@class=&#x27;el&#x27;]/p/span/a/text()&quot;</span><br><br><span class="hljs-attr">dom</span> = html.document_fromstring(page)<br><span class="hljs-attr">links</span> = dom.xpath(xpath_href)<br><span class="hljs-attr">texts</span> = dom.xpath(xpath_link_text)<br><br><span class="hljs-comment"># 抓取详细页面</span><br><span class="hljs-attr">res</span> = requests.get(links[<span class="hljs-number">0</span>], <span class="hljs-attr">headers=headers)</span><br><span class="hljs-attr">job_page_content</span> = res.content<br><span class="hljs-attr">job_page</span> = job_page_content.decode(<span class="hljs-string">&quot;gbk&quot;</span>)<br><br><span class="hljs-comment"># 根据xpath提取岗位信息</span><br><span class="hljs-attr">xpath</span> = <span class="hljs-string">&quot;//p[@class=\&quot;</span>msg ltype\<span class="hljs-string">&quot;]/@title&quot;</span><br><span class="hljs-attr">dom</span> = html.document_fromstring(job_page)<br><span class="hljs-attr">info</span> = dom.xpath(xpath)[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># lxml 还支持其他的元素选择方式</span><br><span class="hljs-comment"># ele为dom或者匹配的元素</span><br><span class="hljs-comment"># ele.text - dom转换为字符串,不包含子元素</span><br><span class="hljs-comment"># ele.text_content - dom的所有元素text（不包含子元素tag名）转换为string</span><br><span class="hljs-comment"># ele.items - 属性列表</span><br><span class="hljs-comment"># ele.find_class - 根据样式名查找元素</span><br><span class="hljs-comment"># ele.get_element_by_id - 根据id查找元素</span><br><span class="hljs-comment"># ele.getchildren - 查找子元素1</span><br><br></code></pre></td></tr></table></figure><h4 id="beautifulsoup4"><a href="#beautifulsoup4" class="headerlink" title="beautifulsoup4"></a>beautifulsoup4</h4><p>另一个在爬虫网页解析中常用到的模块是beautifulsoup,他支持多种html解析器，推荐使<br>用lxml解析器<br>安装:pip intall beautifulsoup4</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> bs4 import BeautifulSoup<br><br>html_data = BeautifulSoup(page, <span class="hljs-string">&quot;lxml&quot;</span>)<br>ul =html_data.<span class="hljs-builtin-name">find</span>(<span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;kwdTypeSelUl&quot;</span>)<br>divs = html_data.find_all ( <span class="hljs-string">&quot;div&quot;</span> )<br>el_elements = html_data.find_all(<span class="hljs-attribute">class_</span>=<span class="hljs-string">&quot;el&quot;</span>)<br>el_divs = html_data.find_all( <span class="hljs-string">&quot;div&quot;</span> , <span class="hljs-attribute">class_</span>=<span class="hljs-string">&quot;el&quot;</span>)<br><br></code></pre></td></tr></table></figure><h4 id="多线程爬虫"><a href="#多线程爬虫" class="headerlink" title="多线程爬虫"></a>多线程爬虫</h4><p>流程：（以51job为例）</p><p>①以start_url开始，爬取列表第一个页面</p><p>②以第一个列表页面提取岗位页面链接及下一个列表页面链接</p><p>③抓取岗位页面</p><p>④提取岗位信息</p><p>⑤提取下一页列表页面</p><p>⑥保存信息</p><p>⑦循环以上步骤</p><h6 id="单线程爬虫设计"><a href="#单线程爬虫设计" class="headerlink" title="单线程爬虫设计"></a>单线程爬虫设计</h6><p>单线程爬虫，需要等待每一步完成才能完成下一步</p><p>1.页面抓取函数</p><p>2.页面链接提取函数</p><p>3.页面信息提取函数</p><p>4.信息保存函数</p><h4 id="scrapy框架"><a href="#scrapy框架" class="headerlink" title="scrapy框架"></a>scrapy框架</h4><p>官网：docs.scrapy.org</p><p>安装：pip install scrapy</p><p>scrapy命令</p><p>以下命令无需创建工程</p><p>version-版本查看</p><p>runspider-运行一个爬虫文件</p><p>shell -启动爬取测试环境</p><p>fetch -下载目标网页（以蜘蛛的视角)</p><p>view -在浏览器中浏览目标网页(以蜘蛛的视角)</p><p>startproject -创建一个爬虫工程，一个工程可以包含多个爬虫</p><p>genspider -根据爬虫代码模版创建一个爬虫基础代码</p>]]></content>
    
    
    <categories>
      
      <category>数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分析-可视化</title>
    <link href="/2021/08/20/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <url>/2021/08/20/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><p>了解数据可视化的基本概念</p><p>了解Matplotlib的基本应用方法</p><h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><p>①艺术可视化</p><p>②数字性可视化</p><p>​    –基于统计学</p><p>​    –统计图表</p><p>③众多第三方库</p><p>​    –Matplotlib</p><p>​    –Seaborn</p><p>​    –plotly</p><p>​    –Pyecharts</p><p>④Matplotlib</p><p><a href="http://matplotlib.org/">http://matplotlib.org/</a></p><p>​    –Matplotlib 3.0 is Python 3 only</p><p>​    –安装: pip install matplotlib</p><h4 id="Matplotlib概要"><a href="#Matplotlib概要" class="headerlink" title="Matplotlib概要"></a>Matplotlib概要</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta">#sin函数图像</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-title">x</span> = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">100</span>)<br><span class="hljs-title">y1</span> = np.sin(x)<br><span class="hljs-title">plt</span>.plot(x,y1)<br><span class="hljs-title">plt</span>.show()<br></code></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima">%matplotlib inline  #写了这一行，就不用写plt.<span class="hljs-built_in">show</span>()了<br>x = <span class="hljs-built_in">np</span>.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*<span class="hljs-built_in">np</span>.pi, <span class="hljs-number">100</span>)<br>y1 = <span class="hljs-built_in">np</span>.<span class="hljs-built_in">sin</span>(x)<br>plt.plot(x,y1)<br>#plt.<span class="hljs-built_in">show</span>()#这行写了第一行就不用写了<br></code></pre></td></tr></table></figure><h6 id="绘图风格："><a href="#绘图风格：" class="headerlink" title="绘图风格："></a>绘图风格：</h6><p>1.MATLAB风格(上面是这个风格)</p><p>2.面向对象风格(我们使用这个方法)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#建立坐标系</span><br><span class="hljs-attribute">fig</span> = plt.figure()#创建一个对象，后面直接调用这个对象<br><span class="hljs-attribute">ax</span> = fig.add_axes([<span class="hljs-number">0</span>.<span class="hljs-number">1</span>, <span class="hljs-number">0</span>.<span class="hljs-number">1</span>, <span class="hljs-number">0</span>.<span class="hljs-number">8</span>, <span class="hljs-number">0</span>.<span class="hljs-number">8</span>])<br><br><span class="hljs-attribute">x</span> = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>*np.pi, <span class="hljs-number">100</span>)<br><span class="hljs-attribute">ax</span>.plot(x,np.sin(x))<br><br><span class="hljs-comment">#保存图像</span><br><span class="hljs-attribute">fig</span>.savefig(<span class="hljs-string">&quot;./images/sine.png&quot;</span>)<br><br><span class="hljs-comment">#查看方法文档</span><br><span class="hljs-attribute">fig</span>.add_axes?<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">plt函数</th><th align="center">方法ax对象</th></tr></thead><tbody><tr><td align="center">plt.plot()</td><td align="center">ax.plot()</td></tr><tr><td align="center">plt.legend()</td><td align="center">ax.legend()</td></tr><tr><td align="center">plt.xlabel()</td><td align="center">ax.set_xlabel()</td></tr><tr><td align="center">plt.ylabel()</td><td align="center">ax.set_ylabel()</td></tr><tr><td align="center">plt.xlim()</td><td align="center">ax.set_xlim()</td></tr><tr><td align="center">plt.ylim()</td><td align="center">ax.set_ylim()</td></tr><tr><td align="center">plt.title()</td><td align="center">ax.set_title()</td></tr></tbody></table><h5 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h5><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs clean">#坐标网络<br>%matplotlib <span class="hljs-keyword">inline</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br>x = np.arange(<span class="hljs-number">0.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">0.02</span>)<br>y = np.exp(-x)*np.cos(<span class="hljs-number">2</span>*np.pi*x)<br>plt.plot(x, y)<br><br>plt.grid(color=<span class="hljs-string">&#x27;gray&#x27;</span>)   #显示网格<br><br>#面向对象作图<br>#面向对象作图<br>fig = plt.figure()<br>ax = fig.add_axes([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0.8</span>, <span class="hljs-number">0.8</span>])<br><br>ax.grid(color=<span class="hljs-string">&#x27;gray&#x27;</span>)<br>ax.plot(x, y)<br><br>#小于零的坐标显示负数<br><span class="hljs-keyword">import</span>.matplotlib<br>matplotlib.rcParams[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h5 id="设置坐标轴"><a href="#设置坐标轴" class="headerlink" title="设置坐标轴"></a>设置坐标轴</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#设置坐标轴<br>fig = plt<span class="hljs-selector-class">.figure</span>()<br>ax = fig<span class="hljs-selector-class">.add_axes</span>(<span class="hljs-selector-attr">[0.1, 0.1, 0.8, 0.8]</span>)<br>ax<span class="hljs-selector-class">.grid</span>(<span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;gray&#x27;</span>)<br>ax<span class="hljs-selector-class">.plot</span>(x, y)<br><br>ax<span class="hljs-selector-class">.set_xlabel</span>(<span class="hljs-string">&#x27;横坐标&#x27;</span>)    #为X，Y轴设置标题<br>ax<span class="hljs-selector-class">.set_ylabel</span>(<span class="hljs-string">&#x27;纵坐标&#x27;</span>)<br>ax<span class="hljs-selector-class">.set_xlim</span>((-<span class="hljs-number">2</span>,<span class="hljs-number">10</span>))      #为X，Y轴设置数值范围<br>ax<span class="hljs-selector-class">.set_ylim</span>((-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br><br>#坐标轴标题显示方框，不显示中文？<br>#解决方法<br>from pylab import mpl<br><br>mpl<span class="hljs-selector-class">.rcParams</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;font.sans-serif&#x27;</span>]</span> = <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;fangsong&#x27;</span>]</span>  #指定默认字体<br>mpl<span class="hljs-selector-class">.rcParams</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;axes.unicode_minus&#x27;</span>]</span> = False<br><br>#设置刻度<br>ax<span class="hljs-selector-class">.set_xlim</span>((<span class="hljs-number">0</span>, <span class="hljs-number">5</span>))#x轴刻度范围设置为<span class="hljs-number">0</span>~<span class="hljs-number">5</span><br>ax<span class="hljs-selector-class">.set_xticks</span>(np<span class="hljs-selector-class">.linspace</span>(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-number">11</span>))#将<span class="hljs-number">0</span>到<span class="hljs-number">5</span>分成<span class="hljs-number">11</span>个数<br><br>#隐藏刻度上的数字<br>ax<span class="hljs-selector-class">.yaxis</span><span class="hljs-selector-class">.set_maior_locator</span>(plt<span class="hljs-selector-class">.Nulllocator</span>())#隐藏y轴上的刻度与数字<br>ax<span class="hljs-selector-class">.xaxis</span><span class="hljs-selector-class">.set_maior_formatter</span>(plt<span class="hljs-selector-class">.Nullformatter</span>()) #只隐藏数字<br></code></pre></td></tr></table></figure><h5 id="多分区坐标系"><a href="#多分区坐标系" class="headerlink" title="多分区坐标系"></a>多分区坐标系</h5><p>比较：</p><p>plt.subplot</p><p>plt.subplots</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 创建3*3的坐标轴</span><br><span class="hljs-attribute">fig</span>, ax = plt.subplots(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, sharex=&#x27;col&#x27;, sharey=&#x27;row&#x27;)<br><br><span class="hljs-attribute">ax</span>.shape#查看坐标轴的形状（个数）<br><br><span class="hljs-comment">#大小不一样的坐标系</span><br><span class="hljs-attribute">fig</span> = plt.figure()<br><span class="hljs-attribute">ax1</span> = fig.add_axes([<span class="hljs-number">0</span>.<span class="hljs-number">1</span>, <span class="hljs-number">0</span>.<span class="hljs-number">1</span>, <span class="hljs-number">0</span>.<span class="hljs-number">8</span>, <span class="hljs-number">0</span>.<span class="hljs-number">8</span>])#数字依次代表左下宽高<br><span class="hljs-attribute">ax1</span> = fig.add_axes([<span class="hljs-number">0</span>.<span class="hljs-number">6</span>, <span class="hljs-number">0</span>.<span class="hljs-number">5</span>, <span class="hljs-number">0</span>.<span class="hljs-number">2</span>, <span class="hljs-number">0</span>.<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><h4 id="曲线和散点"><a href="#曲线和散点" class="headerlink" title="曲线和散点"></a>曲线和散点</h4><p>掌握曲线图，图例，散点图的绘制方法</p><p>常用函数：plot</p><p>常用参数：color（颜色），linestyle（线型）</p><table><thead><tr><th align="center">名称</th><th align="center">solid</th><th align="center">dashed</th><th align="center">dashdot</th><th align="center">dotted</th></tr></thead><tbody><tr><td align="center">符号</td><td align="center">-</td><td align="center">—</td><td align="center">-.</td><td align="center">:</td></tr><tr><td align="center">样式</td><td align="center"><strong><strong><strong>____</strong></strong></strong></td><td align="center">————–</td><td align="center">-.-.-.-.-.-.</td><td align="center">……………….</td></tr></tbody></table><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros">%matplotlib inline<br>import numpy as np<br>import pandas as pd<br>import matplotlib.pyplot as plt<br><br>x = np.linspace(0, 2*np.pi, 100)<br>plt.plot(x, np.sin(x), <span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;blue&#x27;</span>)<br><span class="hljs-comment">#颜色(&#x27;blue&#x27;)(&#x27;r&#x27;)(&#x27;#A52A2A&#x27;),这三种方法都行</span><br><br><span class="hljs-comment">#线型写法</span><br>plt.plot(x, 2*x, <span class="hljs-attribute">linestyle</span>=<span class="hljs-string">&#x27;dashdot&#x27;</span>)<br>plt.plot(x, -2*x+2, <span class="hljs-attribute">linestyle</span>=<span class="hljs-string">&#x27;:&#x27;</span>)<br><br>plt.plot(range(10), <span class="hljs-attribute">linestyle</span>=<span class="hljs-string">&#x27;--&#x27;</span>, <span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-attribute">marker</span>=<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-attribute">markersize</span>=16, <span class="hljs-attribute">markerfacecolor</span>=<span class="hljs-string">&#x27;b&#x27;</span>)<br>#  线型颜色 xy相交点的形状相交点的大小相交点形状填充颜色<br><br><span class="hljs-comment">#&#x27;-rD&#x27;是线型，颜色，形状的简写只显示2,4,6这三个点</span><br>plt.plot(range(10), <span class="hljs-string">&#x27;-rD&#x27;</span>, <span class="hljs-attribute">markersize</span>=16, <span class="hljs-attribute">markerfacecolor</span>=<span class="hljs-string">&#x27;b&#x27;</span>, markevery=[2,4,6])<br><br>plt.grid(<span class="hljs-literal">True</span>)#网格<br><br><span class="hljs-comment">#图例</span><br>plt.plot(x, -2*x+2, <span class="hljs-string">&#x27;k--&#x27;</span>, <span class="hljs-attribute">lable</span>=<span class="hljs-string">&quot;图例名&quot;</span>)#图例记得命名<br>plt.legend(<span class="hljs-attribute">loc</span>=<span class="hljs-string">&#x27;upper right&#x27;</span>)    #图例的位置（这个表示右上角显示图例）<br>plt.legend((line1,line2),<span class="hljs-attribute">loc</span>=0)#图例只显示线1和线2<br></code></pre></td></tr></table></figure><h5 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h5><p>函数：scatter</p><p>参数：</p><p>– c:颜色</p><p>– s:大小</p><p>– alpha：透明度</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-attr">rng</span> = np.random.RandomState(<span class="hljs-number">0</span>)<br><br><span class="hljs-attr">x</span> = rng.randn(<span class="hljs-number">100</span>)<br><span class="hljs-attr">y</span> = rng.randn(<span class="hljs-number">100</span>)<br><br><span class="hljs-attr">colors</span> = rng.rand(<span class="hljs-number">100</span>)<br><span class="hljs-attr">sizes</span> = <span class="hljs-number">1000</span>*rng.rand(<span class="hljs-number">100</span>)<br><br>plt.scatter(x, y, <span class="hljs-attr">c=colors,</span> <span class="hljs-attr">s=sizes,</span> <span class="hljs-attr">alpha=0.3)</span><br>plt.colorbar()<span class="hljs-comment">#颜色谱</span><br></code></pre></td></tr></table></figure><h4 id="其它统计图"><a href="#其它统计图" class="headerlink" title="其它统计图"></a>其它统计图</h4><h5 id="柱形图"><a href="#柱形图" class="headerlink" title="柱形图"></a>柱形图</h5><p>bar</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haskell">%matplotlib inline<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-class"><span class="hljs-keyword">data</span> = [2, 10, 4, 8, 6]#每个柱形图对应的高度</span><br><span class="hljs-title">position</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]#相对应的位置<br><span class="hljs-title">plt</span>.bar(x=position, height=<span class="hljs-class"><span class="hljs-keyword">data</span>)#还有许多参数，自行了解</span><br></code></pre></td></tr></table></figure><h5 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h5><p>boxplot</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br></code></pre></td></tr></table></figure><h5 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h5><p>pie</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">x =[2, 4, 6, 8]<br>fig, ax = plt.subplots()<br>labels = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br>colors = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>]<br>explode = (0, 0.1, 0, 0)#偏离度(是否突起)<br><br><br><span class="hljs-comment"># 参数的意思分别是数据，偏离程度，标识，颜色，百分比格式，阴影，第一个扇形开始角度，半径大小</span><br>ax.pie(x, <span class="hljs-attribute">explode</span>=explode, <span class="hljs-attribute">labels</span>=labels, <span class="hljs-attribute">colors</span>=colors, <span class="hljs-attribute">autopct</span>=<span class="hljs-string">&#x27;%1.1f%%&#x27;</span>, <span class="hljs-attribute">shadow</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">startangle</span>=90, radius1.2)<br><br>ax.<span class="hljs-builtin-name">set</span>(<span class="hljs-attribute">aspect</span>=<span class="hljs-string">&quot;equal&quot;</span>, <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;Pie&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h5><p>hist</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">datas</span> = np.random.randn(<span class="hljs-number">10000</span>)<br><span class="hljs-attr">hs</span> = plt.hist(datas)<br></code></pre></td></tr></table></figure><h4 id="概述和分类统计"><a href="#概述和分类统计" class="headerlink" title="概述和分类统计"></a>概述和分类统计</h4><p>seaborn</p><p>seaborn是基于Matplotlib发展而来的实现数据可视化的库</p><p>他提供了一些更高级的工具，使得应用起来比matplotlib更简单</p><p>安装方法</p><p>pip install seaborn</p><p>conda install seaborn</p><p>官方网站：<a href="https://seaborn.pydata.org/">https://seaborn.pydata.org/</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">%matplotlib inline<br>import seaborn as sns<br>sns.<span class="hljs-builtin-name">set</span>()#结果设置为默认风格<br>tips = sns.load_dataset(<span class="hljs-string">&quot;tips&quot;</span>)#sns自带的数据集<br>sns.relplot(<span class="hljs-attribute">x</span>=<span class="hljs-string">&#x27;total_bill&#x27;</span>, <span class="hljs-attribute">y</span>=<span class="hljs-string">&#x27;tip&#x27;</span>, <span class="hljs-attribute">col</span>=<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-attribute">hue</span>=<span class="hljs-string">&#x27;smoker&#x27;</span>, <span class="hljs-attribute">style</span>=<span class="hljs-string">&#x27;smoker&#x27;</span>, <span class="hljs-attribute">size</span>=<span class="hljs-string">&#x27;size&#x27;</span>, <span class="hljs-attribute">data</span>=tips)<br><br>sns.barplot(记得写参数)#柱状图<br><br></code></pre></td></tr></table></figure><h5 id="分类特征的统计图"><a href="#分类特征的统计图" class="headerlink" title="分类特征的统计图"></a>分类特征的统计图</h5><p>函数：seaborn.catplot</p><p>– 分类特征的散点图</p><p>– 分类特征的分布图</p><p>– 分类特征的估计图</p><h5 id="更多统计图"><a href="#更多统计图" class="headerlink" title="更多统计图"></a>更多统计图</h5><p>关系统计图</p><p>函数：seaborn.relplot</p><p>回归统计图</p><p>函数：seaborn.lmplot</p><p>数据分布统计图</p><p>函数：sns.distplot</p><p>​            sns.jointplot</p><p>​            sns.pairplot</p><p>热图</p><p>函数：sns.heatmap</p><p>​            sns.clustermap</p><h4 id="plotly应用"><a href="#plotly应用" class="headerlink" title="plotly应用"></a>plotly应用</h4><p>掌握plotly的开发环境</p><p>掌握基本使用方法</p><p>掌握高级接口的绘图函数</p><h4 id="pyecharts"><a href="#pyecharts" class="headerlink" title="pyecharts"></a>pyecharts</h4><p>!pip install pyecharts -U        #-u是升级的意思</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#生成本地HTML文件</span><br>from pyecharts.charts import <span class="hljs-keyword">Bar</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">bar </span>= <span class="hljs-keyword">Bar()</span><br><span class="hljs-keyword">bar.add_xaxis([&quot;羊&quot;, </span><span class="hljs-string">&quot;猪&quot;</span>, <span class="hljs-string">&quot;狗&quot;</span>])<br><span class="hljs-keyword">bar.add_yaxis(&quot;小博&quot;, </span>[<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br><span class="hljs-keyword">bar.render()</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword"># </span>HTML文件，会默认生成在当前目录且名字叫render.html<br><span class="hljs-comment"># 也可以传入路径参数，如 bar.render(&quot;myecharts.html&quot;)</span><br><br><br><span class="hljs-comment">#链式调用（跟上面原理一样）</span><br>from pyecharts.charts import <span class="hljs-keyword">Bar</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">bar </span>= (<br><span class="hljs-keyword">Bar()</span><br><span class="hljs-keyword"></span>.<span class="hljs-keyword">add_xaxis([&quot;羊&quot;, </span><span class="hljs-string">&quot;猪&quot;</span>, <span class="hljs-string">&quot;狗&quot;</span>])<br>.<span class="hljs-keyword">add_yaxis(&quot;小博&quot;, </span>[<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>])<br>)<br><span class="hljs-keyword">bar.render_notebook()</span><span class="hljs-comment">#将图像渲染到当前的jupyter环境中来</span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">from pyecharts.charts import Bar<br>from pyecharts import options <span class="hljs-keyword">as</span> opts#对图像进行配置<br><br>bar = <span class="hljs-constructor">Bar()</span><br>bar.add<span class="hljs-constructor">_xaxis([<span class="hljs-string">&quot;羊&quot;</span>, <span class="hljs-string">&quot;猪&quot;</span>, <span class="hljs-string">&quot;狗&quot;</span>])</span><br>bar.add<span class="hljs-constructor">_yaxis(<span class="hljs-string">&quot;小博&quot;</span>, [3, 7, 8])</span><br><br>bar.set<span class="hljs-constructor">_global_opts(<span class="hljs-params">title_opts</span>=<span class="hljs-params">opts</span>.TitleOpts(<span class="hljs-params">title</span>=<span class="hljs-string">&quot;小博旗舰店&quot;</span>, <span class="hljs-params">subtitle</span>=<span class="hljs-string">&quot;双十一促销&quot;</span>)</span>)<br>bar.render(<span class="hljs-string">&quot;render1.html&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">from pyecharts.charts import Bar<br>from pyecharts import options <span class="hljs-keyword">as</span> opts#对图像进行配置<br>from pyecharts.globals import ThemeType   #配置主题 <span class="hljs-keyword">new</span><br><br>bar = <span class="hljs-constructor">Bar(<span class="hljs-params">init_opts</span>=<span class="hljs-params">opts</span>.InitOpts(<span class="hljs-params">theme</span>=ThemeType.LIGHT)</span>)  #换主题 <span class="hljs-keyword">new</span><br>bar.add<span class="hljs-constructor">_xaxis([<span class="hljs-string">&quot;羊&quot;</span>, <span class="hljs-string">&quot;猪&quot;</span>, <span class="hljs-string">&quot;狗&quot;</span>])</span><br>bar.add<span class="hljs-constructor">_yaxis(<span class="hljs-string">&quot;小博&quot;</span>, [3, 7, 8])</span><br><br>bar.set<span class="hljs-constructor">_global_opts(<span class="hljs-params">title_opts</span>=<span class="hljs-params">opts</span>.TitleOpts(<span class="hljs-params">title</span>=<span class="hljs-string">&quot;小博旗舰店&quot;</span>, <span class="hljs-params">subtitle</span>=<span class="hljs-string">&quot;双十一促销&quot;</span>)</span>)<br>bar.render(<span class="hljs-string">&quot;render2.html&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>可视化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分析-Pandas</title>
    <link href="/2021/08/12/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-Pandas/"/>
    <url>/2021/08/12/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-Pandas/</url>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>掌握Series和DataFrame对象的创建方法</p><p>掌握读、写数据的方法</p><p>Pandas<br>安装:</p><p>pip install pandas</p><p>conda install pandas<br>常用对象/数据类型<br> Series<br> DataFrame</p><h5 id="series"><a href="#series" class="headerlink" title="series"></a>series</h5><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs excel">#series对象序列 索引<br>#适用于数据只有一列的时候<br><br>import numpy as np<br>import pandas as pd<br><br># 比较数组与series<br>g = np.array([<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">77</span>, <span class="hljs-number">88</span>])<br>g<br><br>=&gt; array([<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">77</span>, <span class="hljs-number">88</span>])<br><br>gdp = pd.Series(g, <span class="hljs-built_in">index</span>=[&#x27;shanghai&#x27;, &#x27;beijing&#x27;, &#x27;guangzhou&#x27;, &#x27;shenzhen&#x27;, &#x27;tianjin&#x27;, &#x27;chongqing&#x27;, &#x27;suzhou&#x27;,&#x27;shandong&#x27;])<br>gdp      <br><br>=&gt;  shanghai     <span class="hljs-number">11</span><br>    beijing      <span class="hljs-number">22</span><br>    guangzhou    <span class="hljs-number">33</span><br>    shenzhen     <span class="hljs-number">44</span><br>    tianjin      <span class="hljs-number">55</span><br>    chongqing    <span class="hljs-number">66</span><br>    suzhou       <span class="hljs-number">77</span><br>    shandong     <span class="hljs-number">88</span><br>    dty<span class="hljs-symbol">pe:</span> int32<br>    <br>gdp.index#查看索引序列<br>=&gt; <span class="hljs-built_in">Index</span>([&#x27;shanghai&#x27;, &#x27;beijing&#x27;, &#x27;guangzhou&#x27;, &#x27;shenzhen&#x27;, &#x27;tianjin&#x27;, &#x27;chongqing&#x27;,&#x27;suzhou&#x27;, &#x27;shandong&#x27;],<br> dtype=&#x27;object&#x27;)<br> <br>gdp.name = <span class="hljs-string">&quot;xx&quot;</span>#给这个对象添加名字<br>gdp.index.name = <span class="hljs-string">&quot;xx&quot;</span>#给索引名命名<br></code></pre></td></tr></table></figure><h5 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h5><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs prolog"># <span class="hljs-symbol">DataFrame</span>对象<br><br><br>#创建<span class="hljs-symbol">DataFrame</span>对象<br>gp = pd.<span class="hljs-symbol">DataFrame</span>([[<span class="hljs-number">11</span>,<span class="hljs-number">101</span>], [<span class="hljs-number">22</span>,<span class="hljs-number">202</span>], [<span class="hljs-number">33</span>,<span class="hljs-number">303</span>], [<span class="hljs-number">44</span>,<span class="hljs-number">404</span>], [<span class="hljs-number">55</span>,<span class="hljs-number">505</span>], [<span class="hljs-number">66</span>,<span class="hljs-number">606</span>], [<span class="hljs-number">77</span>,<span class="hljs-number">707</span>], [<span class="hljs-number">88</span>,<span class="hljs-number">808</span>]])<br><br>#每行的名字<br>gp.index = [<span class="hljs-string">&#x27;shanghai&#x27;</span>, <span class="hljs-string">&#x27;beijing&#x27;</span>, <span class="hljs-string">&#x27;guangzhou&#x27;</span>, <span class="hljs-string">&#x27;shenzhen&#x27;</span>, <span class="hljs-string">&#x27;tianjin&#x27;</span>, <span class="hljs-string">&#x27;chongqing&#x27;</span>, <span class="hljs-string">&#x27;suzhou&#x27;</span>,<span class="hljs-string">&#x27;shandong&#x27;</span>]<br><br>#每列的名字<br>gp.columns = [<span class="hljs-string">&#x27;city&#x27;</span>,<span class="hljs-string">&#x27;rooms&#x27;</span>]<br><br>#或者一起写也可以<br>#创建的时候就设置行名和列名<br>gpf = pd.<span class="hljs-symbol">DataFrame</span>([[<span class="hljs-number">11</span>,<span class="hljs-number">101</span>], [<span class="hljs-number">22</span>,<span class="hljs-number">202</span>], [<span class="hljs-number">33</span>,<span class="hljs-number">303</span>], [<span class="hljs-number">44</span>,<span class="hljs-number">404</span>], [<span class="hljs-number">55</span>,<span class="hljs-number">505</span>], [<span class="hljs-number">66</span>,<span class="hljs-number">606</span>], [<span class="hljs-number">77</span>,<span class="hljs-number">707</span>], [<span class="hljs-number">88</span>,<span class="hljs-number">808</span>]],<br>                   index=[<span class="hljs-string">&#x27;shanghai&#x27;</span>, <span class="hljs-string">&#x27;beijing&#x27;</span>, <span class="hljs-string">&#x27;guangzhou&#x27;</span>, <span class="hljs-string">&#x27;shenzhen&#x27;</span>, <span class="hljs-string">&#x27;tianjin&#x27;</span>, <span class="hljs-string">&#x27;chongqing&#x27;</span>,                              <span class="hljs-string">&#x27;suzhou&#x27;</span>,<span class="hljs-string">&#x27;shandong&#x27;</span>],<br>                   columns=[<span class="hljs-string">&#x27;city&#x27;</span>,<span class="hljs-string">&#x27;rooms&#x27;</span>])<br>gpf  <br><br>gp.index.name = <span class="hljs-string">&#x27;city&#x27;</span>#修改行标签<br>gp.columns.name = <span class="hljs-string">&#x27;itme&#x27;</span>#修改列标签<br><br>#另一种方法<br>ha = pd.<span class="hljs-symbol">DataFrame</span>(&#123;<span class="hljs-string">&quot;city&quot;</span>:[<span class="hljs-string">&quot;beijing&quot;</span>,<span class="hljs-string">&quot;shanghai&quot;</span>],<br>                   <span class="hljs-string">&quot;marks&quot;</span>:[<span class="hljs-string">&quot;111&quot;</span>,<span class="hljs-string">&quot;222&quot;</span>]&#125;,<br>                  index=[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>])<br>ha<br><br>=&gt; citymarks<br>abeijing<span class="hljs-number">111</span><br>bshanghai<span class="hljs-number">222</span><br></code></pre></td></tr></table></figure><h2 id="读写操作"><a href="#读写操作" class="headerlink" title="读写操作"></a>读写操作</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">pd.read_<span class="hljs-meta">#然后按tab键选择需要读取的文件类型</span><br>df.to_<span class="hljs-meta">#将DataFrame数据写入需要格式文件</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">df = pd<span class="hljs-selector-class">.read_csv</span>(<span class="hljs-string">&#x27;文件路径&#x27;</span>)<br><br><br>#index_col表示索引使用文件中的索引<br><span class="hljs-selector-id">#df</span><span class="hljs-selector-class">.head</span>()表示默认显示前五条数据，括号里填几就展示几条<br>df = pd<span class="hljs-selector-class">.read_excle</span>(<span class="hljs-string">&#x27;文件路径&#x27;</span>，index_col=<span class="hljs-number">0</span>)<br>df<span class="hljs-selector-class">.head</span>()<br></code></pre></td></tr></table></figure><h4 id="series与DataFrame的索引和切片"><a href="#series与DataFrame的索引和切片" class="headerlink" title="series与DataFrame的索引和切片"></a>series与DataFrame的索引和切片</h4><h6 id="series索引"><a href="#series索引" class="headerlink" title="series索引"></a>series索引</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs excel">g = np.array([<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">77</span>, <span class="hljs-number">88</span>])<br>g<br>=&gt; array([<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">44</span>, <span class="hljs-number">55</span>, <span class="hljs-number">66</span>, <span class="hljs-number">77</span>, <span class="hljs-number">88</span>])<br><br>gdp = pd.Series(g, <span class="hljs-built_in">index</span>=[&#x27;shanghai&#x27;, &#x27;beijing&#x27;, &#x27;guangzhou&#x27;, &#x27;shenzhen&#x27;, &#x27;tianjin&#x27;, &#x27;chongqing&#x27;, &#x27;suzhou&#x27;,&#x27;shandong&#x27;])<br>gdp      <br>=&gt;  shanghai     <span class="hljs-number">11</span><br>    beijing      <span class="hljs-number">22</span><br>    guangzhou    <span class="hljs-number">33</span><br>    shenzhen     <span class="hljs-number">44</span><br>    tianjin      <span class="hljs-number">55</span><br>    chongqing    <span class="hljs-number">66</span><br>    suzhou       <span class="hljs-number">77</span><br>    shandong     <span class="hljs-number">88</span><br>    dty<span class="hljs-symbol">pe:</span> int32<br>    <br>#根据标签索引取值<br>gdp[&#x27;suzhou&#x27;]# =&gt;<span class="hljs-number">77</span><br>#Series对象具有类字典性<br>gdp[<span class="hljs-string">&quot;hangzhou&quot;</span>] = <span class="hljs-number">323</span>#增加一项<br>#另外一种访问方法<br>gdp.suzhou#=&gt;<span class="hljs-number">77</span><br><br>#下标可以是列表<br>gdp[[&#x27;suzhou&#x27;,&#x27;shanghai&#x27;,&#x27;beijing&#x27;]]<br>=&gt;      suzhou      <span class="hljs-number">77</span><br>        shanghai    <span class="hljs-number">11</span><br>        beijing     <span class="hljs-number">22</span><br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> Gdp(hunder millin RMB), dty<span class="hljs-symbol">pe:</span> int32<br>        <br>#条件判断<br>gdp&gt;<span class="hljs-number">30</span><br>=&gt;      shanghai     <span class="hljs-built_in">False</span><br>        beijing      <span class="hljs-built_in">False</span><br>        guangzhou     <span class="hljs-built_in">True</span><br>        shenzhen      <span class="hljs-built_in">True</span><br>        tianjin       <span class="hljs-built_in">True</span><br>        chongqing     <span class="hljs-built_in">True</span><br>        suzhou        <span class="hljs-built_in">True</span><br>        shandong      <span class="hljs-built_in">True</span><br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> Gdp(hunder millin RMB), dty<span class="hljs-symbol">pe:</span> bool<br>        <br>gdp[gdp&gt;<span class="hljs-number">30</span>]<br>=&gt;guangzhou    <span class="hljs-number">33</span><br>        shenzhen     <span class="hljs-number">44</span><br>        tianjin      <span class="hljs-number">55</span><br>        chongqing    <span class="hljs-number">66</span><br>        suzhou       <span class="hljs-number">77</span><br>        shandong     <span class="hljs-number">88</span><br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> Gdp(hunder millin RMB), dty<span class="hljs-symbol">pe:</span> int32<br></code></pre></td></tr></table></figure><h6 id="series切片"><a href="#series切片" class="headerlink" title="series切片"></a>series切片</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs excel">#切片，注意：包含结束值<br>gdp[&#x27;tianjin&#x27;<span class="hljs-symbol">:</span>&#x27;suzhou&#x27;]<br>=&gt;      tianjin      <span class="hljs-number">55</span><br>        chongqing    <span class="hljs-number">66</span><br>        suzhou       <span class="hljs-number">77</span><br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> Gdp(hunder millin RMB), dty<span class="hljs-symbol">pe:</span> int32<br>        <br>#尽管有标签，但是依据位置索引依然有效<br>gdp[<span class="hljs-number">2</span>]# =&gt;<span class="hljs-number">33</span><br><br>gdp[<span class="hljs-symbol">2:6</span>]# 不包含结束值<br> =&gt;     guangzhou    <span class="hljs-number">33</span><br>        shenzhen     <span class="hljs-number">44</span><br>        tianjin      <span class="hljs-number">55</span><br>        chongqing    <span class="hljs-number">66</span><br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> Gdp(hunder millin RMB), dty<span class="hljs-symbol">pe:</span> int32<br>        <br>        <br>#制造混乱<br>#当标签也是数字时，切片与索引就会产生混乱<br>s = pd.Series(np.random.randn(<span class="hljs-number">4</span>),<span class="hljs-built_in">index</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>])<br>s<br>=&gt;      <span class="hljs-number">1</span>    <span class="hljs-number">0.344526</span><br>        <span class="hljs-number">3</span>    <span class="hljs-number">1.550617</span><br>        <span class="hljs-number">5</span>   -<span class="hljs-number">0.508269</span><br>        <span class="hljs-number">7</span>   -<span class="hljs-number">0.874402</span><br>        dty<span class="hljs-symbol">pe:</span> float64<br>        <br>s[<span class="hljs-number">1</span>]# =&gt;<span class="hljs-number">0.3445261496453495</span><br>s[<span class="hljs-symbol">1:3</span>]# 混乱了，这个是按照索引切片的，而上面的是按标签索引的<br>=&gt; <span class="hljs-number">3</span>    <span class="hljs-number">1.550617</span><br>        <span class="hljs-number">5</span>   -<span class="hljs-number">0.508269</span><br>        dty<span class="hljs-symbol">pe:</span> float64<br>        <br>#解决混乱iloc强制使用默认的数字索引进行切片<br>s.iloc[<span class="hljs-number">1</span>]# =&gt;<span class="hljs-number">1.5506167001966298</span><br>s.iloc[<span class="hljs-symbol">1:3</span>]<br>=&gt;      <span class="hljs-number">3</span>    <span class="hljs-number">1.550617</span><br>        <span class="hljs-number">5</span>   -<span class="hljs-number">0.508269</span><br>        dty<span class="hljs-symbol">pe:</span> float64<br>        <br>#  loc 使用标签索引进行切片和索引  <br>s.loc[<span class="hljs-number">1</span>]# =&gt;<span class="hljs-number">0.3445261496453495</span><br></code></pre></td></tr></table></figure><h6 id="DataFrame-1"><a href="#DataFrame-1" class="headerlink" title="DataFrame"></a>DataFrame</h6><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs excel">ha = pd.DataFrame(&#123;<span class="hljs-string">&quot;city&quot;</span><span class="hljs-symbol">:</span>[<span class="hljs-string">&quot;beijing&quot;</span>,<span class="hljs-string">&quot;shanghai&quot;</span>，<span class="hljs-string">&quot;chongqing&quot;</span>],<br>                   <span class="hljs-string">&quot;marks&quot;</span><span class="hljs-symbol">:</span>[<span class="hljs-string">&quot;111&quot;</span>,<span class="hljs-string">&quot;222&quot;</span>,<span class="hljs-string">&quot;333&quot;</span>]&#125;,<br>                  <span class="hljs-built_in">index</span>=[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>])<br>ha<br><br> =&gt;         citymarks<br>        abeijing<span class="hljs-number">111</span><br>        bshanghai<span class="hljs-number">222</span><br>        cchongqing<span class="hljs-number">333</span><br><br>#取出ha中的所有的值<br>ha.values <br><br>=&gt;array([[&#x27;beijing&#x27;, &#x27;<span class="hljs-number">111</span>&#x27;],<br>       [&#x27;shanghai&#x27;, &#x27;<span class="hljs-number">222</span>&#x27;],<br>       [&#x27;chongqing&#x27;, &#x27;<span class="hljs-number">333</span>&#x27;]], dtype=object)<br>       <br>#某特征（某列）<br>s = ha[&#x27;city&#x27;]<br>s<br>=&gt;      a      beijing<br>        b     shanghai<br>        c    chongqing<br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> city, dty<span class="hljs-symbol">pe:</span> object<br><br>#方括号里可以填写多个值，相当于可以选择需要的列<br>ha[[&#x27;city&#x27;,&#x27;marks&#x27;]]   <br><br>#某样本（某行）<br>ha.loc[&#x27;b&#x27;]<br><br>=&gt;city     shanghai<br>        marks         <span class="hljs-number">222</span><br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> b, dty<span class="hljs-symbol">pe:</span> object<br><br>#指定值<br>ha.loc[&#x27;a&#x27;,&#x27;city&#x27;]# =&gt;&#x27;beijing&#x27;<br><br>#切片 逗号前是选择行，逗号后是选择列，得到重合的<br>ha.loc[&#x27;a&#x27;<span class="hljs-symbol">:</span>&#x27;b&#x27;,&#x27;city&#x27;]<br>=&gt;      a     beijing<br>        b    shanghai<br>        <span class="hljs-built_in">Na</span><span class="hljs-symbol">me:</span> city, dty<span class="hljs-symbol">pe:</span> object<br>        <br>#增加特征（列）        <br>ha[&#x27;weather&#x27;] = [&#x27;sunny&#x27;, &#x27;rain&#x27;, &#x27;rain&#x27;]<br><br>#同理，增加样本（行）<br>ha.loc[&#x27;d&#x27;] = [&#x27;shanxi&#x27;, &#x27;<span class="hljs-number">444</span>&#x27;, &#x27;rain&#x27;]<br></code></pre></td></tr></table></figure><h2 id="统计和分组运算"><a href="#统计和分组运算" class="headerlink" title="统计和分组运算"></a>统计和分组运算</h2><p>集中量</p><p>–求和</p><p>–平均值</p><p>–中位数</p><p>–最大/小值</p><h5 id="集中量统计"><a href="#集中量统计" class="headerlink" title="集中量统计"></a>集中量统计</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>df = pd.read_excle(<span class="hljs-string">&#x27;C:/Users/15486/Desktop/pandastest1.xlsx&#x27;</span>)<br>df.sample(<span class="hljs-number">5</span>)<span class="hljs-comment">#随机抽取5个样本</span><br><br>df = df.set_index(<span class="hljs-string">&quot;姓名&quot;</span>)<span class="hljs-comment">#将姓名作为这个对象的索引</span><br>df.<span class="hljs-built_in">sum</span>()<span class="hljs-comment">#求和</span><br>df.mean()<span class="hljs-comment">#求平均</span><br>df.median()<span class="hljs-comment">#求中值（列）</span><br>df.madian(axis=<span class="hljs-number">1</span>)<span class="hljs-comment">#求中值（行）有axis=1的就是求行的中值</span><br><br><span class="hljs-comment">#杜撰一个缺失值 数据显示为nan不参与统计</span><br>df.loc[<span class="hljs-string">&#x27;tianshanxuelian&#x27;</span>] = np.nan<br><br><span class="hljs-comment">#显示一些常见的统计结果</span><br>df.describe()<br><br><span class="hljs-comment">#显示详细有多少样本，有多少有效样本</span><br>df.info()<br></code></pre></td></tr></table></figure><h4 id="分组运算"><a href="#分组运算" class="headerlink" title="分组运算"></a>分组运算</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs excel">df = pd.DataFrame(&#123;<span class="hljs-string">&quot;subject&quot;</span><span class="hljs-symbol">:</span>[&#x27;math&#x27;,&#x27;physics&#x27;,&#x27;english&#x27;,&#x27;math&#x27;,&#x27;physics&#x27;,&#x27;english&#x27;],<br><span class="hljs-string">&quot;score&quot;</span><span class="hljs-symbol">:</span>[<span class="hljs-number">90</span>, <span class="hljs-number">80</span>, <span class="hljs-number">70</span>, <span class="hljs-number">95</span>, <span class="hljs-number">85</span>, <span class="hljs-number">75</span>]&#125;)<br><br>=&gt;subjectjidianscore<br>    <span class="hljs-number">0</span>math<span class="hljs-number">9.9</span>    <span class="hljs-number">90</span><br>    <span class="hljs-number">1</span>physics<span class="hljs-number">9.5</span>    <span class="hljs-number">80</span><br>    <span class="hljs-number">2</span>english<span class="hljs-number">10.0</span><span class="hljs-number">70</span><br>    <span class="hljs-number">3</span>math<span class="hljs-number">9.3</span>    <span class="hljs-number">95</span><br>    <span class="hljs-number">4</span>physics<span class="hljs-number">9.5</span>  <span class="hljs-number">85</span><br>    <span class="hljs-number">5</span>english<span class="hljs-number">9.0</span> <span class="hljs-number">75</span><br> <br># 根据学科分组进行求和（自动判别是否可以求和）<br>df.groupby(&#x27;subject&#x27;).<span class="hljs-built_in">sum</span>()<br><br>=&gt;jidianscore<br>    subject<br>    english<span class="hljs-number">19.0</span><span class="hljs-number">145</span><br>    math<span class="hljs-number">19.2</span><span class="hljs-number">185</span><br>    physics<span class="hljs-number">19.0</span><span class="hljs-number">165</span><br><br>#添加一列<br>df[&#x27;teacher&#x27;] = [&#x27;xiaobo&#x27;,&#x27;xiaotan&#x27;,&#x27;xiaobo&#x27;,&#x27;xiaotan&#x27;,&#x27;xiaotan&#x27;,&#x27;xiaobo&#x27;]<br><br>#根据teacher，subject分组进行求平均<br>df.groupby([&#x27;teacher&#x27;,&#x27;subject&#x27;]).mean()<br><br>=&gt;jidianscore<br>    teachersubject<br>    xiaoboenglish<span class="hljs-number">9.5</span><span class="hljs-number">72.5</span><br>   math<span class="hljs-number">9.9</span><span class="hljs-number">90.0</span><br>    xiaotanmath<span class="hljs-number">9.3</span><span class="hljs-number">95.0</span><br>   physics<span class="hljs-number">9.5</span><span class="hljs-number">82.5</span><br><br># 只计算score的平均值<br>df.groupby([&#x27;teacher&#x27;,&#x27;subject&#x27;])[&#x27;score&#x27;].mean()<br></code></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs excel">#额外定义分组键<br>data = pd.DataFrame(np.random.randn(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>),<br>                    <span class="hljs-built_in">columns</span>=[<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;d&quot;</span>],<br>                    <span class="hljs-built_in">index</span>=[<span class="hljs-string">&quot;first&quot;</span>, <span class="hljs-string">&quot;second&quot;</span>, <span class="hljs-string">&quot;third&quot;</span>, <span class="hljs-string">&quot;forth&quot;</span>])<br>data<br><br>=&gt; abcd<br>    first<span class="hljs-number">0.030423</span><span class="hljs-number">0.151275</span>-<span class="hljs-number">0.270502</span><span class="hljs-number">0.035102</span><br>    <span class="hljs-built_in">second</span><span class="hljs-number">1.740231</span>-<span class="hljs-number">1.073806</span><span class="hljs-number">2.556271</span>-<span class="hljs-number">0.729984</span><br>    third<span class="hljs-number">0.068484</span><span class="hljs-number">0.091321</span>-<span class="hljs-number">0.236538</span>-<span class="hljs-number">2.036020</span><br>    forth-<span class="hljs-number">0.163275</span>-<span class="hljs-number">0.877364</span><span class="hljs-number">1.137151</span><span class="hljs-number">0.318996</span><br><br>--------------------------------------<br>#将lst作为分组的键，列表的数量要与特征相对应<br>lst = [<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-string">&quot;two&quot;</span>] <br>data.groupby(lst,axis=<span class="hljs-number">1</span>).mean()<br><br>=&gt;<br>    one(ab平均值)two(cd平均)<br>    first<span class="hljs-number">0.090849</span>-<span class="hljs-number">0.117700</span><br>    <span class="hljs-built_in">second</span><span class="hljs-number">0.333213</span><span class="hljs-number">0.913144</span><br>    third<span class="hljs-number">0.079903</span>-<span class="hljs-number">1.136279</span><br>    forth-<span class="hljs-number">0.520319</span><span class="hljs-number">0.728073</span><br>    <br>#还可以以字典方式建立映射关系<br>mapping = &#123;&#x27;a&#x27;<span class="hljs-symbol">:</span><span class="hljs-string">&quot;one&quot;</span>,&#x27;b&#x27;<span class="hljs-symbol">:</span><span class="hljs-string">&quot;one&quot;</span><br>   &#x27;c&#x27;<span class="hljs-symbol">:</span><span class="hljs-string">&quot;two&quot;</span>,&#x27;d&#x27;<span class="hljs-symbol">:</span><span class="hljs-string">&quot;two&quot;</span>&#125;<br>data.groupby(mapping,axis=<span class="hljs-number">1</span>).mean()<br><br>#和上面一样的结果<br>=&gt;onetwo<br>first<span class="hljs-number">0.090849</span>-<span class="hljs-number">0.117700</span><br><span class="hljs-built_in">second</span><span class="hljs-number">0.333213</span><span class="hljs-number">0.913144</span><br>third<span class="hljs-number">0.079903</span>-<span class="hljs-number">1.136279</span><br>forth-<span class="hljs-number">0.520319</span><span class="hljs-number">0.728073</span><br>------------------------------------<br><br>#用函数作为分组的键<br>#创建一个函数，判断对象中是否含有“<span class="hljs-built_in">t</span>”<br>def is_t(name)<span class="hljs-symbol">:</span><br><span class="hljs-built_in">if</span> <span class="hljs-string">&quot;t&quot;</span> in <span class="hljs-built_in">na</span><span class="hljs-symbol">me:</span><br>return <span class="hljs-built_in">True</span><br>el<span class="hljs-symbol">se:</span><br>return <span class="hljs-built_in">False</span><br><br>data.groupby(is_t).mean()#以函数作为条件<br>data.groupby(<span class="hljs-built_in">len</span>).mean()#以长度作为条件<br>------------------------------------<br><br>#将上面的条件组合起来进行分组<br>index_list = [&#x27;A&#x27;, &#x27;B&#x27;, &#x27;A&#x27;]<br>data.groupby(is_t,index_list).mean()<br><br>-----------------------------------<br><br>#根据teacher显示一些只关于score的常量<br>df.groupby(&#x27;teacher&#x27;)[&#x27;score&#x27;].describe()<br></code></pre></td></tr></table></figure><h4 id="分组对象"><a href="#分组对象" class="headerlink" title="分组对象"></a>分组对象</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#  aggregate方法  集合 聚集</span><br><br><span class="hljs-meta">#根据teacher分组，并分别计算平均数，求和，最大值，标准差等</span><br><span class="hljs-meta">#aggregate可以简写成agg</span><br><span class="hljs-meta">#aggregate后面可以填写自定义函数</span><br>df.groupby(<span class="hljs-string">&#x27;teacher&#x27;</span>).aggregate([<span class="hljs-string">&#x27;mean&#x27;</span>,<span class="hljs-string">&#x27;sum&#x27;</span>,<span class="hljs-string">&#x27;max&#x27;</span>,<span class="hljs-string">&#x27;std&#x27;</span>])<br><br><br><span class="hljs-meta">#根据teacher分组后，分别求score的平均值，rank的中值</span><br>df.groupby(<span class="hljs-string">&#x27;teacher&#x27;</span>).aggregate(&#123;<span class="hljs-string">&quot;score&quot;</span>:np.mean,<br> <span class="hljs-string">&quot;rank&quot;</span>:np.median&#125;)<br> <br><span class="hljs-meta">#更进一步进阶</span><br>df.groupby(<span class="hljs-string">&#x27;teacher&#x27;</span>).aggregate(&#123;<span class="hljs-string">&quot;score&quot;</span>:[<span class="hljs-string">&#x27;max&#x27;</span>,<span class="hljs-string">&#x27;min&#x27;</span>,np.mean],<br> <span class="hljs-string">&quot;rank&quot;</span>:np.median&#125;)<br> <br><span class="hljs-meta"># filter方法筛选</span><br><br><span class="hljs-meta">#根据subject分组后，筛选出rank中平均值大于6的组</span><br>def high_rank(x):<br><span class="hljs-keyword">return</span> x[<span class="hljs-string">&#x27;rank&#x27;</span>].mean() &gt; <span class="hljs-number">6</span><br><br>df.groupby(<span class="hljs-string">&#x27;subject&#x27;</span>).filter(high_rank)<br><br><span class="hljs-meta">#也可直接胞函数写到filter里</span><br>df.groupby(<span class="hljs-string">&#x27;subject&#x27;</span>).filter(lambda x: x[<span class="hljs-string">&#x27;rank&#x27;</span>.mean()&gt;<span class="hljs-number">6</span>])<br><br><span class="hljs-meta">#转换transform</span><br>df.groupby(<span class="hljs-string">&#x27;subject&#x27;</span>).transform(lambda x: x - x.mean())<br><br><span class="hljs-meta">#apply 分组对象中的每一组都会执行这个函数</span><br>df_subject = df.groupby(<span class="hljs-string">&quot;subject&quot;</span>)#创建一个分组对象<br>def rank_score(x)：<br>x[<span class="hljs-string">&#x27;rank_score&#x27;</span>] = x[<span class="hljs-string">&#x27;score&#x27;</span>] * x[<span class="hljs-string">&#x27;rank&#x27;</span>].std()<br><span class="hljs-keyword">return</span> x<br>df_subject.apply(rank_score)<br></code></pre></td></tr></table></figure><h4 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h4><p>安装一个模块seaborn</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">!pip <span class="hljs-keyword">install</span> seaborn<br></code></pre></td></tr></table></figure><p>太懒了，没记笔记</p><h2 id="矢量化字符串"><a href="#矢量化字符串" class="headerlink" title="矢量化字符串"></a>矢量化字符串</h2><p><strong>将序列类对象转换为series类</strong></p><p>-series的str属性</p><p>-避免循环语句</p><p>-对字符串的处理能力更强</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment">#必要性</span><br><span class="hljs-comment">#将列表中字符串首字母大写</span><br><br>names = [<span class="hljs-string">&quot;newton&quot;</span>, <span class="hljs-string">&quot;hertz&quot;</span>, <span class="hljs-string">&quot;cueie&quot;</span>]<br>[<span class="hljs-built_in">name</span>.capitalize() <span class="hljs-keyword">for</span> <span class="hljs-built_in">name</span> <span class="hljs-keyword">in</span> names]<span class="hljs-comment">#将首字母变成大写</span><br><br><br><span class="hljs-comment">#如果列表中有缺失值none，这样操作就会报错</span><br>names1 = [<span class="hljs-string">&quot;newton&quot;</span>, <span class="hljs-string">&quot;hertz&quot;</span>, None, <span class="hljs-string">&quot;cueie&quot;</span>]<br>[<span class="hljs-built_in">name</span>.capitalize() <span class="hljs-keyword">for</span> <span class="hljs-built_in">name</span> <span class="hljs-keyword">in</span> names1]<br><br><span class="hljs-comment"># =&gt; 报错</span><br><br><span class="hljs-comment">#解决方法，将列表转化成series对象</span><br><br>import pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-comment">#矢量化</span><br>snames = pd.Series(names2)<br>snames<br><br>snaes.str.capitalize() <span class="hljs-comment">#这就没问题了</span><br><br><span class="hljs-comment">#snames.str.    #&lt;TAB键&gt;可以选择需要的函数</span><br></code></pre></td></tr></table></figure><h6 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">df = pd<span class="hljs-selector-class">.DataFrame</span>(np<span class="hljs-selector-class">.random</span><span class="hljs-selector-class">.randn</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>),<br>  <span class="hljs-attribute">columns</span>=[<span class="hljs-string">&#x27; Columns A &#x27;</span>, <span class="hljs-string">&#x27; Columns B &#x27;</span>],<br>  index=range(<span class="hljs-number">3</span>))<br>df<br><br>#=&gt;<br>Columns A Columns B <br><span class="hljs-number">0</span>-<span class="hljs-number">0.609668</span>-<span class="hljs-number">0.628859</span><br><span class="hljs-number">1</span><span class="hljs-number">0.562721</span><span class="hljs-number">0.117674</span><br><span class="hljs-number">2</span>-<span class="hljs-number">0.178206</span>-<span class="hljs-number">0.941975</span><br>-----------------------<br>下面的方法得到的都是一个对象，不会真正的额更改<br>#去掉特征中两侧的空格<br>df<span class="hljs-selector-class">.columns</span><span class="hljs-selector-class">.str</span><span class="hljs-selector-class">.strip</span>()<br><br>#特征名称小写<br>df<span class="hljs-selector-class">.columns</span><span class="hljs-selector-class">.str</span><span class="hljs-selector-class">.lower</span>()<br>------------------------<br><br>#真实修改 去空格 小写 将空格改为_<br>df<span class="hljs-selector-class">.columns</span> = df<span class="hljs-selector-class">.columns</span><span class="hljs-selector-class">.str</span><span class="hljs-selector-class">.strip</span>()<span class="hljs-selector-class">.str</span><span class="hljs-selector-class">.lower</span>()<span class="hljs-selector-class">.str</span><span class="hljs-selector-class">.replace</span>(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;_&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分析-Numpy</title>
    <link href="/2021/06/26/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-Numpy/"/>
    <url>/2021/06/26/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-Numpy/</url>
    
    <content type="html"><![CDATA[<h2 id="numpy的安装与说明"><a href="#numpy的安装与说明" class="headerlink" title="numpy的安装与说明"></a>numpy的安装与说明</h2><h4 id="数据-data"><a href="#数据-data" class="headerlink" title="数据(data)"></a>数据(data)</h4><p>–不只是数字</p><p>–“未经处理的原始记录”（《维基百科》)</p><p>–能够被计算机识别、存储和加工处理的</p><p>列：特征、属性、变量</p><p>行：样本、记录、观察、观测</p><h4 id="编辑器-最好使用以下编辑器"><a href="#编辑器-最好使用以下编辑器" class="headerlink" title="编辑器(最好使用以下编辑器)"></a>编辑器(最好使用以下编辑器)</h4><p>1、  jupyterlab</p><p>2、  jupyternotebook</p><p>官网：<a href="https://jupyter.org/">https://jupyter.org/</a></p><p>国内源安装</p><p>pip install jupyterlab -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>常用库：</p><p>pip install numpy</p><p>pip install pandas</p><h4 id="安装anaconda（有很多数据科学常用工具）"><a href="#安装anaconda（有很多数据科学常用工具）" class="headerlink" title="安装anaconda（有很多数据科学常用工具）"></a>安装anaconda（有很多数据科学常用工具）</h4><p>集成环境:<a href="https://www.anaconda.com/">https://www.anaconda.com/</a></p><h4 id="运行jupyterlab"><a href="#运行jupyterlab" class="headerlink" title="运行jupyterlab"></a>运行jupyterlab</h4><p>在cmd中进入工作文件夹执行</p><p>jupyter lab</p><p>查看Numpy版本：numpy._ _version__  或者 numpy.server.server</p><h2 id="Numpy的使用"><a href="#Numpy的使用" class="headerlink" title="Numpy的使用"></a>Numpy的使用</h2><h4 id="np-array的使用"><a href="#np-array的使用" class="headerlink" title="np.array的使用"></a>np.array的使用</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#创建数组</span><br><span class="hljs-attribute">d</span> = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]，ndim=<span class="hljs-number">2</span>) 可以自由设置维度等参数<br><br><span class="hljs-comment">#查看类型</span><br><span class="hljs-attribute">type</span>(d)<br><br><span class="hljs-comment">#查看帮助文档</span><br><span class="hljs-attribute">np</span>.array?<br><br><span class="hljs-comment">#数组元素的类型</span><br><span class="hljs-attribute">d</span>.dtype返回数组中元素的类型<br><span class="hljs-attribute">shape</span>(数组的形状几行几列)返回由整数组成的元组，元组中的每个整数依次对应数组的每个轴的元素个数。<br><span class="hljs-attribute">size</span>（元素数量）返回一个整数，代表数组中元素的个数。<br><span class="hljs-attribute">ndim</span>（几维数组）返回一个整数，代表数组的轴的个数，即维度<br><span class="hljs-attribute">nbytes</span>返回一个整数，代表用于保存数据的字节数。<br><br><span class="hljs-comment"># 数组元素类型的转化</span><br><span class="hljs-attribute">d2</span> = d.astype(np.int)<br><br><span class="hljs-comment"># 创建二维数组</span><br><span class="hljs-attribute">da</span> = np.array([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],[<span class="hljs-number">3</span>, <span class="hljs-number">4</span> ,<span class="hljs-number">5</span> ,<span class="hljs-number">6</span>],<span class="hljs-meta"> [5, 6, 7, 8], [7, 8, 9, 10]])</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">没列举完，可以上百度更多用法</span><br></code></pre></td></tr></table></figure><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>数组的索引也称为下标</p><p>1.下标是整数</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs excel">import numpy as np<br>b = np.linspace(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">5</span>)<br>b<br>=&gt; array([<span class="hljs-number">0</span>., <span class="hljs-number">25</span>., <span class="hljs-number">50</span>., <span class="hljs-number">75</span>., <span class="hljs-number">100</span>.])<br><br>b[<span class="hljs-number">3</span>]#取第四个数<br>=&gt; <span class="hljs-number">75.0</span><br><br>b[-<span class="hljs-number">3</span>]<br>=&gt; <span class="hljs-number">50.0</span><br><br>#二维数组<br>c = np.logspace(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">12</span>).reshape(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>c<br><br>c[<span class="hljs-number">1</span>]#取第二行<br>c[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]#取第二行第三个数<br>c[(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)]#第二行第三个<br><br>c[(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)] = <span class="hljs-number">999</span><br></code></pre></td></tr></table></figure><p>2.下标是列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs [">import numpy as np<br>b &#x3D; np.linspace(0, 100, 5)<br>b<br>&#x3D;&gt; array([0., 25., 50., 75., 100.])<br><br>b[1]#返回值<br>&#x3D;&gt;25.0<br><br>b[(1)]#返回值<br>&#x3D;&gt;25.0<br><br>b[[1, 3]]#返回数组<br>&#x3D;&gt;array([25.0, 75.0])<br><br>#二维数组<br>c &#x3D; np.logspace(1, 3, 12).reshape(3, 4)<br>c<br><br>c[[0, 2]]#返回第1行和第三行的数组<br>c[[0, 2], [1, 2]]#返回以第一行的第二个数和第3行的第3个数组成的数组<br>c[[2,2,2]]#列表为下标才可以这样写，返回以3个第3行组成的列表<br><br></code></pre></td></tr></table></figure><p>下标是数组</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs excel">d = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>])<br><span class="hljs-built_in">t</span> = d == <span class="hljs-number">5</span><br>d[<span class="hljs-built_in">t</span>]<br>=&gt;array([<span class="hljs-built_in">False</span>, <span class="hljs-built_in">False</span>,  <span class="hljs-built_in">True</span>, <span class="hljs-built_in">False</span>, <span class="hljs-built_in">False</span>])<br><br>e =np.arange(<span class="hljs-number">12</span>).reshape(<span class="hljs-number">2</span>,<span class="hljs-number">6</span>)<br>e<br>#找出数组中的奇数<br><span class="hljs-built_in">t</span> = e % <span class="hljs-number">2</span> ==<span class="hljs-number">1</span>#e % <span class="hljs-number">2</span> ==<span class="hljs-number">1</span>这个是判断条件<br>e[<span class="hljs-built_in">t</span>]<br><br>#e[<span class="hljs-built_in">t</span>]就是找出数组e里面符合条件<span class="hljs-built_in">t</span>的数<br><br>简化：<br>e[e % <span class="hljs-number">2</span> ==<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h4 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h4><p>一维数组的切片与列表切片一样</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">d</span> = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span> ,<span class="hljs-number">15</span>])<br><span class="hljs-attribute">d</span>[<span class="hljs-number">2</span>:<span class="hljs-number">6</span>:<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p>二维数组</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">b</span> = np<span class="hljs-selector-class">.arange</span>(<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,<span class="hljs-number">10</span>)<span class="hljs-selector-class">.reshape</span>(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)+np<span class="hljs-selector-class">.arange</span>(<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)<br>b<br>=&gt;array(<span class="hljs-selector-attr">[[ 0,  1,  2,  3,  4,  5]</span>,<br>       <span class="hljs-selector-attr">[10, 11, 12, 13, 14, 15]</span>,<br>       <span class="hljs-selector-attr">[20, 21, 22, 23, 24, 25]</span>,<br>       <span class="hljs-selector-attr">[30, 31, 32, 33, 34, 35]</span>,<br>       <span class="hljs-selector-attr">[40, 41, 42, 43, 44, 45]</span>,<br>       <span class="hljs-selector-attr">[50, 51, 52, 53, 54, 55]</span>])<br>       <br><span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[1:4]</span>#得到第二行到第四行<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[1:4, 2:5]</span>#得到第二行到第四行与第三列到第五列交叉的数<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[1, :]</span>#得到第二行的数<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[1]</span>#同上<br><span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[:3, [0,3]</span>]#先取前三行，<span class="hljs-selector-attr">[0,3]</span>的意思是取第一列和第第三列<br></code></pre></td></tr></table></figure><h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs excel">import numpy as np<br>a = np.arange(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>).reshape((<span class="hljs-number">2</span>, <span class="hljs-number">5</span>))<br>a<br>=&gt;array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>       [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<br> <br>元素级运算： 数组内的数对应加减乘除，数组与数组也是一样的<br>a * <span class="hljs-number">3</span>#数组内每个数乘以<span class="hljs-number">3</span>，+ - /都是这样计算<br>=&gt;array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">3</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">12</span>],<br>       [<span class="hljs-number">15</span>, <span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">24</span>, <span class="hljs-number">27</span>]])<br>       <br>#广播 二维数组加一维数组<br>a = array([[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>          [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]])<br>b = array([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br><br>a+b#a的第一行加上对应的b,a的第二行也加上对应的b<br>=&gt;array([[ <span class="hljs-number">0</span>,  <span class="hljs-number">2</span>,  <span class="hljs-number">4</span>,  <span class="hljs-number">6</span>,  <span class="hljs-number">8</span>],<br>         [ <span class="hljs-number">5</span>,  <span class="hljs-number">7</span>,  <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>]])<br></code></pre></td></tr></table></figure><h4 id="通用函数"><a href="#通用函数" class="headerlink" title="通用函数"></a>通用函数</h4><h4 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h4><h6 id="创建矩阵"><a href="#创建矩阵" class="headerlink" title="创建矩阵"></a>创建矩阵</h6><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs lua">import numpy as np<br>A = np.mat([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])#创建矩阵<br>A<br><br>=&gt; matrix(<span class="hljs-string">[[1, 2, 3]]</span>)<br><br>A.shape#查看形状<br><br>B = np.mat(<span class="hljs-string">&#x27;1 2 3; 4 5 6; 7 8 9&#x27;</span>)#方阵<br>B<br><br>=&gt; matrix(<span class="hljs-string">[[1, 2, 3],</span><br><span class="hljs-string">          [4, 5, 6],</span><br><span class="hljs-string">          [7, 8, 9]]</span>)<br>          <br># 数组作为参数，创建矩阵<br>M1 = np.mat(np.eye(<span class="hljs-number">3</span>))<br>M1<br><br>#矩阵合并<br>np.bmat(<span class="hljs-string">&#x27;M1 M2;M2 M1&#x27;</span>)<br><br>重要 重要<br>两个数组相乘和两个矩阵相乘是不一样的<br>#矩阵的乘法<br><br>#两个数组相乘用“*”表示，对应元素相乘<br>a = np.arange(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>)<br>b = np.array(<span class="hljs-string">[[1,0,1],[0,1,1],[1,1,0]]</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-string">[[1 2 3]</span><br><span class="hljs-string"> [4 5 6]</span><br><span class="hljs-string"> [7 8 9]]</span><br><span class="hljs-comment">----------</span><br><span class="hljs-string">[[1 0 1]</span><br><span class="hljs-string"> [0 1 1]</span><br><span class="hljs-string"> [1 1 0]]</span><br><br>a*b       # 对应元素相乘<br>array(<span class="hljs-string">[[1, 0, 3],</span><br><span class="hljs-string">       [0, 5, 6],</span><br><span class="hljs-string">       [7, 8, 0]]</span>)<br><br>#两个矩阵用“*”相乘<br>A = np.mat(a)<br>B = np.mat(b)<br><br>A * B# <span class="hljs-number">4</span>是a的第一行乘以b的第一列元素相加，以此类推<br>=&gt; matrix(<span class="hljs-string">[[ 4,  5,  3],</span><br><span class="hljs-string">        [10, 11,  9],</span><br><span class="hljs-string">        [16, 17, 15]]</span>)<br>        <br>np.dot(a,b)#等价于上面的矩阵相乘  <br><br>A.T#矩阵的转置<br></code></pre></td></tr></table></figure><h4 id="矢量运算"><a href="#矢量运算" class="headerlink" title="矢量运算"></a>矢量运算</h4><p>标量积</p><p>点积：np.dot(a,b)</p><p>内积： np.inner(a,b)</p><p>矢量积(叉积) ：np.cross(v,b)</p><h4 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment">#创建多项式</span><br><span class="hljs-comment"># f(x) = 2 x^3 - 3 x^2 + 1 x + 6</span><br><span class="hljs-attr">a</span> = np.array([<span class="hljs-number">2</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>])<br><span class="hljs-attr">fx</span> = np.poly1d(a)<span class="hljs-comment">#poly1d中 d 前面的1是数字一</span><br>fx<br><br>=&gt; poly1d([ <span class="hljs-number">2</span>, -<span class="hljs-number">3</span>,  <span class="hljs-number">1</span>,  <span class="hljs-number">6</span>])<br><br>fx(<span class="hljs-number">2</span>)   <span class="hljs-comment">#给多项式赋值2</span><br>print(fx)<span class="hljs-comment"># 打印fx多项式</span><br><br>拓展<br><span class="hljs-comment"># g = (x-1)^2 + 3(x-1) + 2</span><br><span class="hljs-attr">p</span> = np.poly1d([<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>])<br><span class="hljs-attr">g</span> = lambda x: p(x-<span class="hljs-number">1</span>)<span class="hljs-comment">#将x替换成x-1</span><br>g(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">#基于根(解)创建多项式</span><br><span class="hljs-attr">root</span> = np.array([<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-attr">p2</span> = np.poly1d(root, <span class="hljs-attr">r=True)</span><br>print(p2)<br><br><span class="hljs-comment">#在显示上，更换变量（将X替换成Y显示）</span><br><span class="hljs-attr">p3</span> = np.poly1d(a, <span class="hljs-attr">variable=&#x27;y&#x27;)</span><br>print(p3)<br></code></pre></td></tr></table></figure><h4 id="多项式运算"><a href="#多项式运算" class="headerlink" title="多项式运算"></a>多项式运算</h4><h6 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h6><p>正常运算</p><p>本质是系数运算，系数可以是数组，列表，</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">p4 = p2 + [<span class="hljs-string">-2</span>, 1]#[<span class="hljs-string">-2</span>,1]代表<span class="hljs-string">-2</span>x<span class="hljs-string">+1</span><br></code></pre></td></tr></table></figure><h6 id="微分（求导）"><a href="#微分（求导）" class="headerlink" title="微分（求导）"></a>微分（求导）</h6><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">pd</span> = p2.deriv()<br></code></pre></td></tr></table></figure><h6 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h6><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">pint</span> = pd.integ()<br></code></pre></td></tr></table></figure><h6 id="求多项式的根"><a href="#求多项式的根" class="headerlink" title="求多项式的根"></a>求多项式的根</h6><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">r</span> = np.roots(p2)<br></code></pre></td></tr></table></figure><p>#技巧：tab</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">np</span>.po#按<span class="hljs-built_in">tab</span>键可以选择需要的函数<br><span class="hljs-built_in">np</span>.poly1d?#查看该函数的方法<br></code></pre></td></tr></table></figure><h4 id="解线性方程组"><a href="#解线性方程组" class="headerlink" title="解线性方程组"></a>解线性方程组</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = np<span class="hljs-selector-class">.array</span>(<span class="hljs-selector-attr">[[3, 1]</span>, <span class="hljs-selector-attr">[1, 2]</span>])<br><span class="hljs-selector-tag">b</span> = np,array(<span class="hljs-selector-attr">[[9]</span>, <span class="hljs-selector-attr">[8]</span>])<br>x = np<span class="hljs-selector-class">.linalg</span><span class="hljs-selector-class">.solve</span>(<span class="hljs-selector-tag">a</span>, b)<br>x<br><br>=&gt; array(<span class="hljs-selector-attr">[[2.]</span><br><span class="hljs-selector-attr">[3]</span>.])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Numpy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>电商实战-电商二次开发</title>
    <link href="/2021/06/24/%E7%94%B5%E5%95%86%E5%AE%9E%E6%88%98-%E7%94%B5%E5%95%86%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/"/>
    <url>/2021/06/24/%E7%94%B5%E5%95%86%E5%AE%9E%E6%88%98-%E7%94%B5%E5%95%86%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h4 id="二次开发"><a href="#二次开发" class="headerlink" title="二次开发"></a>二次开发</h4><p>1.在项目实践中，我们通常并不是从0开始写起，而是在已经存在的项目上开始</p><p>2.与从0开始相比，最大的困难就是要学会如何看别人的代码</p><p>3.有的项目有文档，或者没有，或者有等于没有</p><p>4.现有的项目可能是购买的第三方产品，也有可能是现有产品的迭代</p><h4 id="进公司第一件事"><a href="#进公司第一件事" class="headerlink" title="进公司第一件事"></a>进公司第一件事</h4><p>1.并不是写代码，而是熟悉项目功能。</p><p>2.然后等待分配开发需求，比如完善某个功能或者新增某个功能</p><p>3.收到任务后，首先询问有没有相关技术文档，代码库，沟通需求</p><h4 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h4><p>1.主管会通过文档或者邮件给你发送一些相关的信息，比如版本地址、服务器IP与权限、环境要求，辅助工具<br>2.获取开发版本，在本地运行开发环境</p><p>首先好创建远程仓库</p><p>step1:基础版本获取<br>1.克隆: <a href="mailto:&#103;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#109;">&#103;&#105;&#x74;&#x40;&#103;&#x69;&#116;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#109;</a>:luxp4588/flask-mall-base.git2.从该版本库导出无版本控制源程序（克隆前创建好文件夹）</p><p>2.删除 .git 文件夹（隐藏文件）</p><p>3.git init        初始化</p><p>4.git add .     将文件添加到暂存区</p><p>5.git commit -m ”flask“     提交到本地仓库</p><p>6.git remote add origin <a href="https://github.com/tanbozhi/flask-test.git">https://github.com/tanbozhi/flask-test.git</a>    添加远程仓库地址</p><p>7.git branch -M main</p><p>8.git push -u origin main</p><p>版本库创建完成</p><p>step2:创建项目<br>1.在自己的版本库上创建项目<br>2.根据Pipfile文件，创建开发虚拟环境</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pipenv <span class="hljs-keyword">install</span> <span class="hljs-comment">#创建虚拟环境</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web性能优化-redis</title>
    <link href="/2021/06/23/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-redis/"/>
    <url>/2021/06/23/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-redis/</url>
    
    <content type="html"><![CDATA[<h4 id="redis特点"><a href="#redis特点" class="headerlink" title="redis特点"></a>redis特点</h4><p>redis是一款应用非常广泛的NoSQL数据库，redis的值可以支持多种数据类型，而且可以将内存中的数据保存到硬盘，另外redis以单线程方式运行，可以避免多线程带来的问题。redis除了基本的数据存取之外，还提供发布-订阅模式、GEO等功能。<br>redis应用场景(频繁读取写入):<br>1.缓存</p><p>2.排行榜</p><p>3.计数器</p><p>4.session</p><p>5.购物车</p><p>6.消息队列</p><h4 id="linux安装Redis"><a href="#linux安装Redis" class="headerlink" title="linux安装Redis"></a>linux安装Redis</h4><p>下载:<br>redis官方网站:redis.io<br>redis下载页:<a href="https://redis.io/download%E4%B8%8B%E8%BD%BD%E7%9B%B8%E5%BA%94%E7%9A%84%E7%89%88%E6%9C%AC">https://redis.io/download下载相应的版本</a><br>安装:<br>1.解压缩安装包，并进入该目录</p><p>2.执行make编译指令</p><p>3.执行make install 安装指令</p><p>4.在/usr/local/bin/目录下会生成redis-benchmark、redis-check-aof、redis-check-rdb、redis-cli、redis-sentinel、redis-server几个程序文件</p><p>将redis.conf拷贝到/etc/redis/conf/redis.conf配置内容:<br>1.bind -ip，如果绑定为127.0.0.1，只能被本机访问，改成0.0.0.0可以被其他机器访问</p><p>2.port-端口，默认6379</p><p>3.daemonize -是否以后台守护进程方式运行，默认no</p><p>4.pidfile - pid文件</p><p>5.logfile -日志文件</p><p>6.save 900 1-每隔900秒，如果发生一次更新，就保存到磁盘</p><p>7.dir -工作目录</p><p>通过配置文件启动<br>redis-server /etc/redis/conf/redis.conf</p><p>运行redis-cli进入redis客户端:</p><h4 id="python中使用redis模块"><a href="#python中使用redis模块" class="headerlink" title="python中使用redis模块"></a>python中使用redis模块</h4><p>pipenv install redis<br>from redis import StrictRedis<br>redis = StrictRedis(host=”192.168.3.111”)</p><p>redis对象的方法名与redis_cli命令名是一样的</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web性能优化-mongodb</title>
    <link href="/2021/06/23/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-mongodb/"/>
    <url>/2021/06/23/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-mongodb/</url>
    
    <content type="html"><![CDATA[<h4 id="mongodb特点"><a href="#mongodb特点" class="headerlink" title="mongodb特点"></a>mongodb特点</h4><p>mongodb是文档型数据库:<br>在mysql关系型数据库中，数据由若干行组成，每一行都具有相同的字段结构，数据类型在mongodb中，每一条数据记录之间是没有关系的<br>每一条记录称为文档，一个文档就是一条json字符串<br>在mongodb中，没有表的概念，只有集合(collection)，也就是这些文档集合在一起<br>mongodb在json数据格式的基础上增加了一些数据类型(对象id，内嵌文档，二进制数据，js代码)</p><p>mongodb支持索引，提供唯一索引、复合索引、地理空间索引，以及全文索引mongodb支持聚合查询(统计与分组)<br>mongodb不支持join查询与事务(不适合关系型数据管理)</p><h4 id="mongodb安装"><a href="#mongodb安装" class="headerlink" title="mongodb安装"></a>mongodb安装</h4><p>下载:<br>mongo官方网站:mongodb.org<br>mogon下载页:<a href="https://www.mongodb.org/download%E4%B8%8B%E8%BD%BD%E7%9B%B8%E5%BA%94%E7%9A%84%E7%89%88%E6%9C%AC">https://www.mongodb.org/download下载相应的版本</a></p><p>图形化管理工具</p><p>安装说明:<br>下载地址:<a href="https://www.mongodb.com/download-center/compasswindows%E7%9A%84%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%E5%B7%B2%E7%BB%8F%E5%AE%89%E8%A3%85%E4%BA%86%E8%AF%A5%E5%B7%A5%E5%85%B7">https://www.mongodb.com/download-center/compasswindows的安装版本已经安装了该工具</a></p><h4 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h4><h4 id="pymongo安装"><a href="#pymongo安装" class="headerlink" title="pymongo安装"></a>pymongo安装</h4><p>pymongo是mongodb的python驱动</p><p>安装:pip install pymongo</p><h5 id="CURD操作"><a href="#CURD操作" class="headerlink" title="CURD操作"></a>CURD操作</h5><p>创建客户端:<br>client = pymongo.MongoClient(“localhost”, 27017)</p><p>#数据库名为blog<br>db= client.blog</p><p>CURD:<br>db.users代表users文档集合</p><p>db.users.insert</p><p>db.users.updatedb.users.find</p><p>db.users.delete_one</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web性能优化-memcached</title>
    <link href="/2021/06/23/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-memcached/"/>
    <url>/2021/06/23/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-memcached/</url>
    
    <content type="html"><![CDATA[<h4 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h4><p>为什么需要缓存</p><p>memcache安装与使用</p><p>缓存问题</p><h4 id="为什么需要缓存？"><a href="#为什么需要缓存？" class="headerlink" title="为什么需要缓存？"></a>为什么需要缓存？</h4><p>我们网页访问久了，电脑里会有很多浏览缓存，隔一段时间需要清理一下释放空间网页在浏览器端的缓存是客户端缓存，可以在nginx中配置缓存有效期</p><p>浏览器–   第一次访问  –服务器</p><p>浏览器–   第二次访问  –本地缓存</p><h4 id="服务器缓存"><a href="#服务器缓存" class="headerlink" title="服务器缓存"></a>服务器缓存</h4><p>在我们开发的系统功能中，几乎都是对数据库的CURD操作，因此当系统同时接受多个用户并发访问的时候，就会遇到数据库瓶颈。<br>因为数据库需要从磁盘中读取数据以及向磁盘写入数据，而磁盘的读取速度相对于整个系统的其他部分，很慢，因此数据库访问是一个瓶颈</p><p>解决这个问题的方式：</p><p>1.数据库集群 - 方法昂贵，复杂（主从架构+读写分离）</p><p>2.启用缓存，减少直接访问数据库的访问<br>比如:文章的内容基本上不变，那么可以生成好静态的缓存，这样避免每次访问文章，就需要读取mysql</p><p>能够提供缓存服务的数据库称为缓存数据库，他们大多数以键值对形式存储数据。<br>这类数据库不需要SQL语句查询，所以又称为NoSQL -Not Only SQL,表示除了关系型数据库之外的另一种数据存储方式的选择。<br>有这么几种常用NoSQL数据库:<br>1.memcache -使用最便捷的缓存库<br>2.redis-支持更多数据类型的缓存库,可以利用他的列表类型实现队列<br>3.mongodb -文档型数据库，支持索引，范围搜索，排序，有些时候，可以单独使用</p><p>缓存数据库存储方式:<br>1.将缓存写入内存-内存的速度很快，但是关机后，数据会丢失⒉.将缓存写入内存，每隔一段时间将缓存刷入到硬盘</p><h4 id="memcached简介"><a href="#memcached简介" class="headerlink" title="memcached简介"></a>memcached简介</h4><h6 id="memcached资料"><a href="#memcached资料" class="headerlink" title="memcached资料:"></a>memcached资料:</h6><p>memcached官方网站: memcached.org</p><h6 id="安装"><a href="#安装" class="headerlink" title="安装:"></a>安装:</h6><p>wget <a href="http://memcached.org/latesttar-zxvf">http://memcached.org/latesttar-zxvf</a> memcached-1.x.x.tar.gzcd memcached-1.x.x<br>yum install libevent-devel<br>./configure &amp;&amp; make &amp;&amp; make test &amp;&amp; sudo make install</p><h6 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器:"></a>运行服务器:</h6><p>memcached -u root -d</p><p>-u指定用户运行，生产环境不要用root用户</p><p>-d后台守护进程</p><p>-h帮助信息</p><p>memcache模块</p><p>1.安装: pip install python-memcached<br>        还有其他的客户端，包括pymemcache、django-pymemcache</p><p>2.mc= memcache.Client([host],debug=True)</p><p>3.mc.set、mc.get、..</p><h4 id="缓存策略问题"><a href="#缓存策略问题" class="headerlink" title="缓存策略问题"></a>缓存策略问题</h4><p>缓存更新策略:<br>1.缓存如果不及时更新，可能数据属于无效</p><p>2.如果定时更新，需要接受数据更新延时</p><p>3.如果数据更新频繁，导致缓存不断更新，也会导致系统性能变差</p><p>缓存命中率:</p><p>1.缓存数据占用内存，缓存越多，占用内存越多，意味着成本上升</p><p>⒉.缓存利用率很低，即查询命中率，比如缓存了10000个快照，只有10个是经常读取的</p><p>3.需要根据业务情况调整缓存策略</p><p>缓存穿透:<br>1.缓存逻辑是如果缓存不存在就去数据库查询<br>2.如果某些查询，数据库查询也没有结果，那么就会也没有缓存3.结果导致这些查询始终查询数据库，解决方案缓存空对象</p><p>缓存雪崩:<br>1.采用缓存系统后，大部分访问都由缓存提供<br>2.如果缓存服务器发生故障,大量请求就直接涌向数据库3.最终直接导致整个系统崩溃<br>4.解决方法就是为缓存层设计高可用架构<br>5.数据库隔离，即使缓存层丧失功能，也不能让所有请求涌向数据库，以便尽快恢复缓存</p><p>缓存预热:<br>1.如果系统存在大量的缓存<br>2.在启动整个系统的时候，会出现大量的数据库请求，从而导致缓存加载失败3.解决办法就是分批预先加载</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法-二叉树遍历</title>
    <link href="/2021/06/12/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/"/>
    <url>/2021/06/12/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h4 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h4><p>树结构定义</p><p>二叉树结构</p><p>遍历与搜索</p><h4 id="树结构定义"><a href="#树结构定义" class="headerlink" title="树结构定义"></a>树结构定义</h4><table><thead><tr><th align="center">术语</th><th align="center">定义</th></tr></thead><tbody><tr><td align="center">节点</td><td align="center">树中分叉处，用来存储项</td></tr><tr><td align="center">根</td><td align="center">没有父节点的节点，即最顶端的节点</td></tr><tr><td align="center">子节点</td><td align="center">一个节点的直接相邻的后一个节点，可以拥有多个子节点</td></tr><tr><td align="center">父节点</td><td align="center">一个节点的直接相邻的前一个节点</td></tr><tr><td align="center">兄弟节点</td><td align="center">拥有共同父节点的节点</td></tr><tr><td align="center">叶子结点</td><td align="center">没有子节点的节点称为叶子节点</td></tr><tr><td align="center">内部节点</td><td align="center">至少拥有一个子节点的节点</td></tr><tr><td align="center">边/分支链接</td><td align="center">节点的连接线</td></tr><tr><td align="center">后代</td><td align="center">一个节点的所有的子节点、子子节点</td></tr><tr><td align="center">祖先</td><td align="center">一个节点之前的父节点、父节点的父节点，一直到根节点</td></tr><tr><td align="center">路径</td><td align="center">一个节点到某一个后代节点的边的序列</td></tr><tr><td align="center">深度/层级</td><td align="center">一个节点的深度等于将其连接到根节点的路径的长度，因此</td></tr><tr><td align="center">高度</td><td align="center">树中最长的路径的长度</td></tr><tr><td align="center">子树</td><td align="center">将一个节点及其所有后代节点包括在内所形成的树</td></tr></tbody></table><h4 id="树结构的应用"><a href="#树结构的应用" class="headerlink" title="树结构的应用"></a>树结构的应用</h4><p>1.文件路径，就是一种树状结构</p><p>2.商品分类的菜单实现，也是树状结构</p><p>3.网页中的文档树</p><p>4.机器学习中的决策树，随机森林</p><p>5.数据库中的B树</p><p>6….很多，不一而足</p><h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p>1.一个节点最多拥有2个子节点<br>2.两个子节点分别称为左节点与右节点<br>3.如果只有一个子节点，该子节点可以看作是左节点或者右节点，并且因此带来的树结构不同</p><h6 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树:"></a>满二叉树:</h6><p>除了叶子节点,每个节点都包含了二个节点满二叉树的高度H=log2(N+1)-1</p><h6 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树:"></a>平衡二叉树:</h6><p>可以是空树<br>如果不是空树，左右节点子树高度差不超过1，且都为平衡树因此称为平衡树<br>高度差称为平衡因子，有-1、0、1取值(H_LEFT -H_RIGHT)平衡二叉树节点选择很重要</p><h6 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h6><p>前序遍历:从根节点开始，以相同的方法从左到右遍历左子树与右子树</p><p>中序遍历:先遍历左子树然后回到根节点，再遍历右子树</p><p>后序遍历:先遍历左子树然后遍历右子树最后回到根节点</p><p>层序遍历:从0层开始先访问左子节点然后遍历右子节点然后同样对1、2、..N层访问</p><h6 id="二叉树的查找"><a href="#二叉树的查找" class="headerlink" title="二叉树的查找"></a>二叉树的查找</h6><p>节点搜索:从根节点开始，按照左小右大，进入节点递归查找</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法-背包问题</title>
    <link href="/2021/06/12/%E7%AE%97%E6%B3%95-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/12/%E7%AE%97%E6%B3%95-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h4><p>什么是背包问题</p><p>贪心算法</p><p>动态规划 </p><h4 id="什么是背包问题"><a href="#什么是背包问题" class="headerlink" title="什么是背包问题"></a>什么是背包问题</h4><p><strong><em>限定条件下获得最大价值</em></strong></p><p>比如:你现在有一个背包，只能背1kg的物品,可以背的物品包括:</p><p>1.笔记本电脑,重0.9kg，价值8000元</p><p>2.蓝牙音箱，重0.7kg，价值3000元3.虚拟设备，重0.3kg，价值1500元</p><p>怎么装，可以让背包里的物品总价值最大</p><h4 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h4><p>使用贪心算法求解</p><p>1.贪心算法就是不管全局，只管眼前</p><p>2.找出当前的最优解就好</p><p>3.贪心算法找到的结果不一定是最好的解</p><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p>什么是动态规划？</p><p>1.动态规划算法用于求解具有最优性质的问题</p><p>2.这类问题通常具有多阶段决策过程，每一阶段的解决方案都是最优化的</p><p>3.后一阶段的最优解在上一阶段的基础上确定</p><p>二维数据表示</p><p>1.用i表示阶段，j表示某一阶段可负重能力，V表示该阶段最大价值，wi表示这个阶段新出现的物品重量<br>2.那么该最大价值可以表示为V[i][j],比如第一阶段，负重为100g时，可以表示为V[1][100],负重为200g时为V[1][200]</p><p>伪代码（计算出不同背包所能获得的最大价值）</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs inform7">for i in items:<br>v<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span> = 0<br>solution<span class="hljs-comment">[i]</span> = <span class="hljs-comment">[]</span><br>for j in 背包可选择负重列表：<br>背包物品选择<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = <span class="hljs-comment">[]</span><br>if w<span class="hljs-comment">[i]</span> &gt; j:<br>v<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = 背包物品选择<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span><br>else:<br>v<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = max(v<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>,vi + v<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-w<span class="hljs-comment">[1]</span>]</span>)<br>背包物品选择<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = 背包物品选择<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-w<span class="hljs-comment">[i]</span>]</span> +当前物品<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法-排序算法</title>
    <link href="/2021/06/12/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2021/06/12/%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>举例：[5,2,4,3,1]</p><p>1.排序目的是在一个排好序的序列里面，从左到右是从小到大排列的，比如[1,2,3,4,5]</p><p>2.选择一个元素，然后与所有其他尚未排序元素比较，如果最小与左侧交换位置</p><p>3.第一轮:[1,2,4,3,5]  (最小数为1，将1,5换位置)</p><p>4.第二轮:[1,2,4,3,5]（看2,4,3,5由于2最小位置不变）</p><p>5.第三轮:[1,2,3,4,5]（看4,3,5发现3最小，将3,4换位置，）</p><p>6.第四轮:[1,2,3,4,5]（看4,5发现4最小，位置不变）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">select_sort</span>(<span class="hljs-params">lists</span>):</span><br>    max_index = <span class="hljs-built_in">len</span>(lists)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(max_index):<br>         min_index = i<br>         <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>, max_index):<br>             <span class="hljs-keyword">if</span> lists[min_index] &gt; lists[j]:<br>                 min_index = j<br>         <span class="hljs-keyword">if</span> min_index != i:<br>             print(<span class="hljs-string">&quot;min_index=&quot;</span>, min_index,<span class="hljs-string">&quot; &quot;</span>, lists[min_index],<span class="hljs-string">&quot;&lt;=&gt;&quot;</span>, lists[i])<br>             lists[i], lists[min_index] = lists[min_index], lists[i]<br>             print(lists)<br>             print(<span class="hljs-string">&quot;-&quot;</span>*<span class="hljs-number">100</span>)<br>         i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> lists<br><br>lists = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> shuffle<br><br>shuffle(lists)<br>print(lists)<br>print(<span class="hljs-string">&quot;end=&gt;&quot;</span>, select_sort(lists))<br></code></pre></td></tr></table></figure><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>举例:[5,2,4,3,1]<br>1.插入排序从第2个元素开始排序，与该元素之前的元素比较2.该元素之前的顺序已经排好<br>3.如果该元素顺序可以插入的话，将元素按照顺序插入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_sort</span>(<span class="hljs-params">lists</span>):</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(lists)):<br>        <span class="hljs-comment"># 准备被插入排序的元素</span><br>        item_to_insert = lists[i]<br>        <span class="hljs-comment"># 将这个元素与它之前排好顺序的元素比较</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i-<span class="hljs-number">1</span>,-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>):<br><span class="hljs-comment">#           # 如果这个元素比前面的某个元素小，那么要把它插进去</span><br>            <span class="hljs-comment"># 插入过程就是前面的元素需要一个个后移，直到大于其中的某个元素</span><br>            <span class="hljs-keyword">if</span> item_to_insert &lt; lists[j]:<br>                lists[j+<span class="hljs-number">1</span>] = lists[j]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># 插入空出来的位置</span><br>        <span class="hljs-comment"># 在j位置的元素比等待插入的元素要小，所以插入位置为j+1</span><br>        lists[j+<span class="hljs-number">1</span>] = item_to_insert<br><br>    <span class="hljs-keyword">return</span> lists<br>    <br>lists = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">20</span>))<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> shuffle<br><br>shuffle(lists)<br>print(lists)<br>print(<span class="hljs-string">&quot;end=&gt;&quot;</span>, insert_sort(lists))<br></code></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>举例:[5,2,4,3,1]<br>1.从第一个元素开始，每个元素与后面的一个元素比较，较大的排到后面</p><p>2.第一轮:[2,4,3,1,5]</p><p>3.第二轮:[2,3,1,4,5]</p><p>4.第三轮:[2,1,3,4,5]</p><p>5.第四轮:[1,2,3,4,5]</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br>def <span class="hljs-keyword">bubble_sort(lists):</span><br><span class="hljs-keyword"> </span>   max_index = len(lists)<br>    for i in range(max_index<span class="hljs-number">-1</span>):<br>        for <span class="hljs-keyword">j </span>in range(max_index<span class="hljs-number">-1</span>):<br>            if lists[<span class="hljs-keyword">j] </span>&gt; lists [<span class="hljs-keyword">j+1]:</span><br><span class="hljs-keyword"> </span>               lists[<span class="hljs-keyword">j], </span>lists[<span class="hljs-keyword">j+1] </span>= lists[<span class="hljs-keyword">j+1], </span>lists[<span class="hljs-keyword">j]</span><br><span class="hljs-keyword"> </span>               print(<span class="hljs-string">&quot;i=&quot;</span>,i,<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-keyword">j,&quot;=&gt;&quot;,lists)</span><br><span class="hljs-keyword"> </span>           <br><br>lists = list(range(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>))<br>from <span class="hljs-built_in">random</span> import <span class="hljs-keyword">shuffle</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">shuffle(lists)</span><br><span class="hljs-keyword">print(lists)</span><br><span class="hljs-keyword">print(&quot;end=&gt;&quot;, </span><span class="hljs-keyword">bubble_sort(lists))</span><br><span class="hljs-keyword"></span><br></code></pre></td></tr></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>举例:[5,2,4,3,1]</p><p>1.找一个基准点，比如4，</p><p>2.以4交换到最后一项[5,2,3,1,4]</p><p>3.在列表开始处设立一个边界标志，比如现在[:5,2,3,1,4]的5左侧:为边界标志</p><p>4.小于4的项放到边界左侧，直到所有小于4的放到边界左侧，每在边界左侧放置一个，边界位置右移一次,边界右侧的都比4大</p><p>5.[2,3,1,:5,4]</p><p>6.然后将4放置边界标志:的左侧[2,3,1,4,:5]</p><p>7.在边界两侧重复以上过程，直到分组里只有一个元素</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs vim"># -*- codin<span class="hljs-variable">g:</span> utf-<span class="hljs-number">8</span> -*-<br><br>def quicksort(lists):<br>    # 初始左边界为<span class="hljs-number">0</span>， 右边界为列表上界<br>    quick_sort_helper(lists,<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(lists)-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> lists<br>    <br>def quick_sort_helper(lists, <span class="hljs-keyword">left</span>, <span class="hljs-keyword">right</span>):<br>    # 边界左边不能超越边界右边<br>#    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;left=&quot;</span>,<span class="hljs-keyword">left</span>, <span class="hljs-string">&quot;right=&quot;</span>, <span class="hljs-keyword">right</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">left</span> &lt; righ<span class="hljs-variable">t:</span><br>        # 分割列表设置分界点<br>        boundary = partition(lists, <span class="hljs-keyword">left</span>, <span class="hljs-keyword">right</span>)<br>        # 分界点左侧接着分割<br>        quick_sort_helper(lists, <span class="hljs-keyword">left</span>, boundary - <span class="hljs-number">1</span>)<br>        # 分界点右侧接着分割<br>        quick_sort_helper(lists, boundary+<span class="hljs-number">1</span>, <span class="hljs-keyword">right</span>)<br>        <br>        <br>def partition(lists, <span class="hljs-keyword">left</span>, <span class="hljs-keyword">right</span>):<br>    # 根据<span class="hljs-keyword">left</span>，<span class="hljs-keyword">right</span>寻找分界点<br>    middle = (<span class="hljs-keyword">left</span> + <span class="hljs-keyword">right</span>) // <span class="hljs-number">2</span><br>    # 将分界点放置于该段最右侧<br>    lists[<span class="hljs-keyword">right</span>], lists[middle] = lists[middle], lists[<span class="hljs-keyword">right</span>]<br>    boundary = <span class="hljs-keyword">left</span><br>    # 将小于分界点的排到左边，边界右移+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-keyword">left</span>, <span class="hljs-keyword">right</span>):<br>        <span class="hljs-keyword">print</span>(lists)<br>        <span class="hljs-keyword">if</span> lists[i] &lt; lists[<span class="hljs-keyword">right</span>]:<br>            lists[i],lists[boundary] = lists[boundary], lists[i]<br>            boundary += <span class="hljs-number">1</span><br>    # 再将分界点移回<br>    lists[<span class="hljs-keyword">right</span>], lists[boundary] = lists[boundary], lists[<span class="hljs-keyword">right</span>]<br>    <span class="hljs-keyword">return</span> boundary<br>            <br>    <br>lists = <span class="hljs-keyword">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>))<br>from random import shuffle<br><br>shuffle(lists)<br><span class="hljs-keyword">print</span>(lists)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;end=&gt;&quot;</span>, quicksort(lists))<br></code></pre></td></tr></table></figure><h4 id="合并排序"><a href="#合并排序" class="headerlink" title="合并排序"></a>合并排序</h4><p>举例:[5,2,4,3,1]</p><p>1.选一个点将列表分成左右3部分[2,3,1]+[4]+[5]2.左边的列表所有的元素&lt;分割点</p><p>3.右边的列表所有的元素&gt;分割点</p><p>4.将左边的部分[2,3,1]重复1～3步骤[2,1]+[3] +[]</p><p>5.将[2,1]重复1～3步骤[+[1]+[2]</p><p>6.通过递归将他们合并起来[+[1]+[2]+[3]+[+[4]+[5]</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs css"># -*- coding: utf-<span class="hljs-number">8</span> -*-<br>def <span class="hljs-built_in">merg_sort</span>(lists):<br>    if <span class="hljs-built_in">len</span>(lists) &lt;= <span class="hljs-number">1</span>:<br>        return lists<br>    middle = <span class="hljs-built_in">len</span>(lists)//<span class="hljs-number">2</span><br>    left_list = []<br>    right_list = []<br>    for i in lists[:middle]:<br>        if i &lt;= lists[middle]:<br>            left_list.<span class="hljs-built_in">append</span>(i)<br>        else:<br>            right_list.<span class="hljs-built_in">append</span>(i)<br>    for i in lists[middle+<span class="hljs-number">1</span>:]:<br>        if i &lt;= lists[middle]:<br>            left_list.<span class="hljs-built_in">append</span>(i)<br>        else:<br>            right_list.<span class="hljs-built_in">append</span>(i)<br>    <span class="hljs-built_in">print</span>(left_list, right_list)<br>    return <span class="hljs-built_in">merg_sort</span>(left_list) + [lists[middle]] + <span class="hljs-built_in">merg_sort</span>(right_list)<br><br>lists = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>))<br>from random import shuffle<br><br><span class="hljs-built_in">shuffle</span>(lists)<br><span class="hljs-built_in">print</span>(lists)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;end=&gt;&quot;</span>, <span class="hljs-built_in">merg_sort</span>(lists))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法-递归与回溯</title>
    <link href="/2021/06/12/%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92%E4%B8%8E%E5%9B%9E%E6%BA%AF/"/>
    <url>/2021/06/12/%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92%E4%B8%8E%E5%9B%9E%E6%BA%AF/</url>
    
    <content type="html"><![CDATA[<p>递归</p><p>1.函数直接或间接调用自身</p><p>2.必须具有递归结束条件</p><p>3.每一次递归，问题规模缩小</p><p>4.python限制了递归深度（sys.getrecursionlimit()）</p><p>回溯</p><p>回溯法是一个比较经典的算法<br>1.回溯法(探索与回溯法）是一种选优搜索法，又称为试探法<br>2.按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择<br>3.这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-队列</title>
    <link href="/2021/06/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/"/>
    <url>/2021/06/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h4 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h4><p>队列的概念</p><p>队列的python实现</p><h4 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h4><p>队列是一种线性表<br>1.对队列从尾部插入，从头部弹出</p><p>2.队列的数据访问遵从FIFO (first-in first-out)协议（<strong>先进先出</strong>）</p><p>3.除了基本队列结构以外还有双向队列与优先队列</p><h4 id="队列的python实现"><a href="#队列的python实现" class="headerlink" title="队列的python实现"></a>队列的python实现</h4><p>队列的主要方法</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">q.isfull()</td><td align="center">队列是否满了</td></tr><tr><td align="center">q.isEmpty()</td><td align="center">队列是否为空</td></tr><tr><td align="center">q._ _ len _ _()</td><td align="center">队列的项目数</td></tr><tr><td align="center">q.put()</td><td align="center">在队尾压入一项</td></tr><tr><td align="center">q.get()</td><td align="center">队列不为空返回并删除第一项，否则抛出错误EmptyError</td></tr></tbody></table><p>链表实现队列</p><p>1.使用链表实现队列，从链表首部压入与尾部弹出</p><p>2.需要设定一个尾部位置标志</p><p>3.时间复杂度为O(1)</p><h4 id="python内置队列"><a href="#python内置队列" class="headerlink" title="python内置队列"></a>python内置队列</h4><p>queue模块与collections.deque</p><p>1.queue.Queue - FIFO队列</p><p>2.queue.LifoQueue - LIFO队列（栈）</p><p>3.queue.PriorityQueue -优先级队列</p><p>4.queue.deque(collections.deque)-双向队列</p><p>方法</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">q.empty()</td><td align="center">队列是否为空</td></tr><tr><td align="center">q.qsize()</td><td align="center">队列中的项目数</td></tr><tr><td align="center">q.full()</td><td align="center">队列是否已满</td></tr><tr><td align="center">q.put()</td><td align="center">插入数据，如果队列已满，阻塞到可以插入</td></tr><tr><td align="center">q.get()</td><td align="center">如果q不为空，返回并删除第一项，否则阻塞到有数据为止</td></tr><tr><td align="center">q.put_nowait()</td><td align="center">插入数据，如果队列已满，返回错误异常</td></tr><tr><td align="center">q.get_nowait()</td><td align="center">插入数据，如果队列为空，返回错误异常</td></tr><tr><td align="center">q.task_done()</td><td align="center">队列消费者用来指示对于项的处理已经结束</td></tr><tr><td align="center">q.join()</td><td align="center">阻塞到队列中所有的项均被删除或者已处理</td></tr></tbody></table><h6 id="queue-Queue-FIFO队列"><a href="#queue-Queue-FIFO队列" class="headerlink" title="queue.Queue - FIFO队列"></a>queue.Queue - FIFO队列</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span><span class="hljs-built_in"> queue </span>import<span class="hljs-built_in"> Queue </span>#LILO队列<br>q = Queue() #创建队列对象<br><br><span class="hljs-comment">#%%</span><br><span class="hljs-comment">#插入元素</span><br>q.put(<span class="hljs-string">&quot;A&quot;</span>)<br>q.put(<span class="hljs-string">&quot;B&quot;</span>)<br>q.put(<span class="hljs-string">&quot;C&quot;</span>)<br><span class="hljs-comment">#%%</span><br><span class="hljs-comment"># 查看队列</span><br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;FIFO队列&#x27;</span>,q.queue)<br><span class="hljs-comment">#%%</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> q.empty():<br>    <span class="hljs-builtin-name">print</span>(q.<span class="hljs-builtin-name">get</span>())<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;*&quot;</span><span class="hljs-number">*100</span>)<br><span class="hljs-comment">#%%</span><br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;FIFO队列&#x27;</span>,q.queue)<br></code></pre></td></tr></table></figure><h6 id="queue-LifoQueue-LIFO队列（栈）"><a href="#queue-LifoQueue-LIFO队列（栈）" class="headerlink" title="queue.LifoQueue - LIFO队列（栈）"></a>queue.LifoQueue - LIFO队列（栈）</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span><span class="hljs-built_in"> queue </span>import LifoQueue<br><br>lifo_queue = LifoQueue()<br><br><span class="hljs-comment"># %%</span><br>lifo_queue.put(<span class="hljs-string">&quot;A&quot;</span>)<br>lifo_queue.put(<span class="hljs-string">&quot;B&quot;</span>)<br>lifo_queue.put(<span class="hljs-string">&quot;C&quot;</span>)<br><span class="hljs-comment"># %%</span><br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;LIFO队列&#x27;</span>, lifo_queue.queue)<br><span class="hljs-comment"># %%</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> lifo_queue.empty():<br>    <span class="hljs-builtin-name">print</span>(lifo_queue.<span class="hljs-builtin-name">get</span>())<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;*&quot;</span> * 100)<br><br></code></pre></td></tr></table></figure><h6 id="queue-PriorityQueue-优先级队列"><a href="#queue-PriorityQueue-优先级队列" class="headerlink" title="queue.PriorityQueue -优先级队列"></a>queue.PriorityQueue -优先级队列</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment">#%%</span><br><span class="hljs-comment">#优先队列</span><br><span class="hljs-keyword">from</span><span class="hljs-built_in"> queue </span>import PriorityQueue<br>priority_queue = PriorityQueue()<br><br><span class="hljs-comment">#%%</span><br>priority_queue.put((3, <span class="hljs-string">&quot;A&quot;</span>))<br>priority_queue.put((78, <span class="hljs-string">&quot;B&quot;</span>))<br>priority_queue.put((100, <span class="hljs-string">&quot;C&quot;</span>))<br><br><span class="hljs-comment">#%%</span><br><span class="hljs-comment">#查看优先级队列中的所有元素</span><br><span class="hljs-builtin-name">print</span>(priority_queue.queue)<br><br><span class="hljs-comment">#%%</span><br>priority_queue.put((1, <span class="hljs-string">&quot;D&quot;</span>))<br>priority_queue.put((2, <span class="hljs-string">&quot;E&quot;</span>))<br><span class="hljs-comment">#%%</span><br>priority_queue.put((1, <span class="hljs-string">&quot;DD&quot;</span>))<br>priority_queue.put((2, <span class="hljs-string">&quot;EE&quot;</span>))<br><br><span class="hljs-comment">#%%</span><br><span class="hljs-comment">#查看优先级队列中的所有元素</span><br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;优先级队列:&#x27;</span>,priority_queue.queue)<br><br><span class="hljs-comment">#%%</span><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> priority_queue.empty():<br>    <span class="hljs-builtin-name">print</span>(priority_queue.<span class="hljs-builtin-name">get</span>())<br>    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;*&quot;</span><span class="hljs-number">*100</span>)<br><br></code></pre></td></tr></table></figure><h6 id="queue-deque-collections-deque-双向队列"><a href="#queue-deque-collections-deque-双向队列" class="headerlink" title="queue.deque(collections.deque)-双向队列"></a>queue.deque(collections.deque)-双向队列</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># %%</span><br><span class="hljs-comment"># 双端队列</span><br><span class="hljs-keyword">from</span> collections import deque<br><br>deque_queue = deque([<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>])<br><br><span class="hljs-comment"># %%</span><br><span class="hljs-builtin-name">print</span>(deque_queue)<br><span class="hljs-comment"># 在右侧插入新元素</span><br>deque_queue.append(<span class="hljs-string">&#x27;F&#x27;</span>)<br><span class="hljs-comment"># 在左侧插入新元素</span><br>deque_queue.appendleft(<span class="hljs-string">&#x27;E&#x27;</span>)<br><span class="hljs-builtin-name">print</span>(deque_queue)<br><br><span class="hljs-comment"># %%</span><br><span class="hljs-comment"># 循环右移2次</span><br>deque_queue.rotate(1)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;循环右移1次后的队列&#x27;</span>, deque_queue)<br><span class="hljs-comment"># %%</span><br>deque_queue.rotate(1)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;循环右移1次后的队列&#x27;</span>, deque_queue)<br><span class="hljs-comment"># %%</span><br><span class="hljs-comment"># 循环左移2次</span><br>deque_queue.rotate(-2)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;循环左移2次后的队列&#x27;</span>, deque_queue)<br><span class="hljs-comment"># %%</span><br><span class="hljs-comment"># 返回并删除队列最左端元素</span><br>deque_queue.popleft()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;删除最左端元素后的队列：&#x27;</span>, deque_queue)<br><br><span class="hljs-comment"># %%</span><br><span class="hljs-comment"># 返回并删除队列最右端元素</span><br>deque_queue.pop()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;删除最右端元素后的队列：&#x27;</span>, deque_queue)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-栈</title>
    <link href="/2021/06/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
    <url>/2021/06/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h4 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h4><p>什么是栈</p><p>栈的python实现</p><h4 id="什么是栈？"><a href="#什么是栈？" class="headerlink" title="什么是栈？"></a>什么是栈？</h4><p>栈是一种线性表（**<em>后进先出**</em>）</p><p>1.栈中必须有第一个元素与最后一个元素</p><p>2.对栈的操作只能从某一端操作，即栈顶(top)</p><p>3.栈的数据访问遵从LIFO (last-in first-out)协议</p><h4 id="栈的python实现"><a href="#栈的python实现" class="headerlink" title="栈的python实现"></a>栈的python实现</h4><p>主要方法列表</p><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">s.isEmpty()</td><td align="center">栈是否为空</td></tr><tr><td align="center">s._ _ len_  _ ()</td><td align="center">栈中的项目数</td></tr><tr><td align="center">s.push()</td><td align="center">在栈顶压入一项</td></tr><tr><td align="center">s.top()</td><td align="center">如果s不为空返回顶部第一项，否则抛出EmptyError</td></tr><tr><td align="center">s.pop()</td><td align="center">如果s不为空，返回并删除第一项，否则抛出EmptyError</td></tr></tbody></table><p>列表实现<br>1.使用列表实现栈，可以从列表末尾压入与弹出<br>2.由于列表是一个动态数组，当栈的变化引起列表内存占用变大时，会引起性能的损耗</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-链表（单、双）</title>
    <link href="/2021/06/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E3%80%81%E5%8F%8C%EF%BC%89/"/>
    <url>/2021/06/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8%EF%BC%88%E5%8D%95%E3%80%81%E5%8F%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h4><p>链表数据的结构</p><p>链表结构的python实现</p><p>链表的操作时间复杂度</p><h4 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h4><p>链表就好像链条一样，一节就是一个数据节点。</p><p>单列表：尾连着下一个数据</p><p>双列表：尾连着下一个数据，头连着上一个数据</p><p>循环列表：头尾相连，从而循环</p><p>链表特点<br>1.每一个数据节点包括数据本身以及前后节点位置（单链表只包含下一节点位置)</p><p>2.链表不需要连续内存空间</p><p>3.插入快，查询慢</p><h6 id="单链表节点类"><a href="#单链表节点类" class="headerlink" title="单链表节点类"></a>单链表节点类</h6><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>:</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>,data,<span class="hljs-keyword">next</span>=None)</span></span><span class="hljs-symbol">:</span><br><span class="hljs-keyword">self</span>.data = data<br><span class="hljs-keyword">self</span>.<span class="hljs-keyword">next</span> = <span class="hljs-keyword">next</span><br></code></pre></td></tr></table></figure><p>单链表的优势<br>1.内存空间利用率高(不需要连续内存空间)，空间复杂度低</p><p>2.适合开始处插入，开始处读取的场景</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构-数组</title>
    <link href="/2021/06/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84/"/>
    <url>/2021/06/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h4 id="数组：array"><a href="#数组：array" class="headerlink" title="数组：array"></a>数组：array</h4><h6 id="array创建实例："><a href="#array创建实例：" class="headerlink" title="array创建实例："></a>array创建实例：</h6><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">from<span class="hljs-built_in"> array </span>import array<br>myarray1 = array.array(<span class="hljs-string">&quot;i&quot;</span>,[1,2,3,4])<span class="hljs-comment">#i是类型码</span><br>myarray2 = array.array(<span class="hljs-string">&quot;u&quot;</span>,[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>])<br></code></pre></td></tr></table></figure><h6 id="array-aray类型特点"><a href="#array-aray类型特点" class="headerlink" title="array.aray类型特点"></a>array.aray类型特点</h6><p>1.成员只能是字符、整数、浮点数类型</p><p>2.所有的成员必须是统一的类型</p><p>3.可以通过array.typecodes查看类型码</p><h6 id="array的使用"><a href="#array的使用" class="headerlink" title="array的使用"></a>array的使用</h6><figure class="highlight golo"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs golo"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">array</span><br><br>myarray1 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;i&quot;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>])<br>myarray2 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;u&quot;</span>, &#123;<span class="hljs-string">&quot;a&quot;</span>:<span class="hljs-number">23</span>, <span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-number">24</span>,<span class="hljs-string">&quot;3&quot;</span>:<span class="hljs-number">25</span>&#125;)<br>myarray3 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;i&quot;</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>])<br>myarray4 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;i&quot;</span>, [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>])<br><br><span class="hljs-comment"># 以下依次是 统计、插入、弹出、删除、翻转、添加数组、获取最小index</span><br>myarray1.count(<span class="hljs-number">3</span>)   <span class="hljs-comment"># myarray中3出现了几次</span><br>myarray1.insert(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)      <span class="hljs-comment"># 括号中0代表在第一个位置添加，10代表添加10</span><br>myarray1.pop(<span class="hljs-number">0</span>)             <span class="hljs-comment"># 弹出第一个数</span><br>myarray3.remove(<span class="hljs-number">2</span>)          <span class="hljs-comment"># 删除数组中第一个为2的数</span><br>myarray1.reverse()          <span class="hljs-comment"># 翻转顺序</span><br>myarray4.extend(myarray1)   <span class="hljs-comment"># 将数组1添加到数组4中</span><br>myarray3.index(<span class="hljs-number">3</span>)           <span class="hljs-comment"># 获取3的最小序列数</span><br><br><span class="hljs-keyword">print</span>(myarray1)<br><span class="hljs-keyword">print</span>(myarray3)<br><span class="hljs-keyword">print</span>(myarray4)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;已完成&quot;</span>)<br><br><span class="hljs-keyword">print</span>(<br>    <span class="hljs-string">&quot;字节&quot;</span>, myarray1.itemsize, <span class="hljs-string">&quot;\n&quot;</span>      <span class="hljs-comment"># 查看数组1的每一项占几个字节</span><br>    <span class="hljs-string">&quot;类型码&quot;</span>, myarray1.typecode, <span class="hljs-string">&quot;\n&quot;</span>      <span class="hljs-comment"># 数组使用的类型码</span><br>    <span class="hljs-string">&quot;内存地址，成员数量&quot;</span>, myarray1.buffer_info()   <span class="hljs-comment"># 返回内存地址和成员数量</span><br><br>)<br><br><span class="hljs-comment"># 创建数组的3种方式</span><br><br><span class="hljs-comment"># 1.从字节创建</span><br>myarray5 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;i&quot;</span>, [])<br>myarray5.frombytes(b<span class="hljs-string">&quot;tanbozhi&quot;</span>)     <span class="hljs-comment"># 在数组5中写入tanbozhi</span><br><span class="hljs-keyword">print</span>(myarray5.tobytes())           <span class="hljs-comment"># 将字节转换成文字</span><br><br><span class="hljs-comment"># 2.从文件创建</span><br><span class="hljs-comment"># 获取N个对象，取决于typecode</span><br>myarray6 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;i&quot;</span>, [])<br>myarray6.fromfile(open(<span class="hljs-string">&quot;myarray_1.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>), <span class="hljs-number">10</span>)      <span class="hljs-comment"># 从文件中读出数据，10：其中i代表4个字节，这儿读取10个i，也就是40个字节</span><br><span class="hljs-keyword">print</span>(myarray6.tobytes())                               <span class="hljs-comment"># 将字节转换成文字</span><br><span class="hljs-comment"># 写入文件</span><br>myarray6.tofile(open(<span class="hljs-string">&quot;myarray_2.txt&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>))<br><br><span class="hljs-comment"># 3.列表追加</span><br>myarray7 = <span class="hljs-keyword">array</span>.<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;i&quot;</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>myarray7.fromlist([<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>])<br><span class="hljs-keyword">print</span>(myarray7)<br><br><span class="hljs-comment"># 对数组的每一项进行字节对调，此方法只支持1,2,4,8字节的值</span><br>myarray7.byteswap()<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;字节交换：&quot;</span>, myarray7.tobytes())<br><br><span class="hljs-comment"># 转换为普通列表</span><br>myarray1.tolist()<br><span class="hljs-comment"># 转换为Unicode字符串,转换后可以切片什么的都可以</span><br><span class="hljs-comment">#myarray1.tounicode()   数组5转换不了unicode这儿会报错</span><br><br><span class="hljs-comment">#查看内存大小</span><br>sys.getsizeof(myarray1)<br><span class="hljs-comment"># array数组的内存占用会比列表内存占用小</span><br></code></pre></td></tr></table></figure><h4 id="array与list的区别"><a href="#array与list的区别" class="headerlink" title="array与list的区别"></a>array与list的区别</h4><h6 id="array与list在底层中都是以动态数组实现"><a href="#array与list在底层中都是以动态数组实现" class="headerlink" title="array与list在底层中都是以动态数组实现"></a>array与list在底层中都是以动态数组实现</h6><p>1.列表是指针数组</p><p>2.数组是值数组</p><p>说明:在C语言中(cpython),数组都是由一段连续的内存空间组成，<br>动态数组在运行中，可以修改长度</p><p><strong>静态数组</strong>：申请后，内存空间保持不变</p><p><strong>动态数组</strong>：申请后，内存空间可以改变，空间不够时会重新申请一倍的空间并将原来的数据复制过来，释放原数组</p><p><strong>列表的存储方式</strong>：列表的每一项存储的是相应元素的内存地址，根据地址找到相应的元素</p><p><strong>array的存储方式</strong>：直接存储元素值</p><p>相同的元素组成，array占用的内存要小。为什么array可以直接存储元素值，而列表不行呢，因为array类型统一，可以预测数组大小，而list类型值不可预测，无法预测所需内存空间大小，使用指针地址可以避免</p><h4 id="数组的时间复杂度"><a href="#数组的时间复杂度" class="headerlink" title="数组的时间复杂度"></a>数组的时间复杂度</h4><p>用O表示</p><p>在计算机中执行程序，都需要耗费CPU一定的运算时间，有的时候耗费时间与数据量存在关系，可能是线性关系，对数关系，指数关系，衡量这种关系通常用一种称为O(n)的方法<br>比如:O(1),就是表示，不管多少数据，操作的时间都是与1个数据一样<br>o(n),就是表示，随着数据量增加(n在增加)，那么所耗的时间也随着增加n倍</p><p>数组各项操作时间复杂度</p><table><thead><tr><th align="center">操作</th><th align="center">复杂度</th></tr></thead><tbody><tr><td align="center">从第i个位置访问</td><td align="center">O(1)</td></tr><tr><td align="center">在第i个位置替换</td><td align="center">O(1)</td></tr><tr><td align="center">从末尾插入数据</td><td align="center">O(1)</td></tr><tr><td align="center">从末尾删除</td><td align="center">O(1)</td></tr><tr><td align="center">从第i个位置插入</td><td align="center">O(n)</td></tr><tr><td align="center">从第i个位置删除</td><td align="center">O(n)</td></tr><tr><td align="center">增加容量</td><td align="center">O(n)</td></tr><tr><td align="center">减小容量</td><td align="center">O(n)</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http协议</title>
    <link href="/2021/06/04/Linux-http%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/06/04/Linux-http%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="http请求头"><a href="#http请求头" class="headerlink" title="http请求头"></a>http请求头</h4><p>http协议是应用层协议-超文本传输协议。<br>http协议用于互联网之间的文件传输，如何请求文件，如何返回文件</p><p>http协议是建立在tcp协议之上的协议<br>http协议是无状态协议，请求应答结束，连接即关闭，下一次的请求与应答重新进行tcp连接</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-多进程</title>
    <link href="/2021/06/04/Linux-%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <url>/2021/06/04/Linux-%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="python多线程问题"><a href="#python多线程问题" class="headerlink" title="python多线程问题"></a>python多线程问题</h4><p>1.在线程部分，多线程插入数列必须加锁。如果多线程使用一个变量，会导致变量的引用计数错乱，导致程序崩溃。</p><p>2.同一时刻只能有一个线程在CPU执行，因此python的多线程不适合CPU密集型任务，只适合I/O密集型任务。</p><p>计算机密集线程：CPU计算会占用全部CPU</p><p>I/O密集型线程：进行少量的CPU计算，大部分等待I/O（网络、硬盘）</p><h4 id="多进程（multiprocessing模块）"><a href="#多进程（multiprocessing模块）" class="headerlink" title="多进程（multiprocessing模块）"></a>多进程（multiprocessing模块）</h4><p>多进程可以发挥多个CPU，各进程互不干扰</p><p>multiprocessing模块是python的标准库，用于提供多进程编程</p><p>多进程与多线程使用方法差不多，可以互相参考</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">from multiprocessing import Process<br><br>p1 = <span class="hljs-constructor">Process(<span class="hljs-params">target</span>=<span class="hljs-params">func</span>, <span class="hljs-params">args</span>=(<span class="hljs-params">param1</span>,<span class="hljs-operator">...</span>)</span>)<br>p1.start<span class="hljs-literal">()</span><br><br>每个进程都会被分配一个Pid，Linux可以通过PS命令查看，也可以在python中使用os.getpid<span class="hljs-literal">()</span>函数获得进程id<br>multiprocessing.cpu<span class="hljs-constructor">_count()</span>#获取CPU数量或CPU线程数<br>multiprocessing.<span class="hljs-constructor">Pool(<span class="hljs-params">size</span>)</span>#创建进程池，会创建多个进程，并根据需要进行分配<br></code></pre></td></tr></table></figure><h4 id="多进程的创建"><a href="#多进程的创建" class="headerlink" title="多进程的创建"></a>多进程的创建</h4><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nix">from multiprocessing <span class="hljs-built_in">import</span> Process<br><span class="hljs-built_in">import</span> os, random<br><br><br>def tests(i):<br>    print(<span class="hljs-string">&quot;子进程&quot;</span>, i,<span class="hljs-string">&quot;:&quot;</span>, os.getpid())<br><br><br><span class="hljs-keyword">if</span> <span class="hljs-attr">__name__</span> == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    print(<span class="hljs-string">&quot;主进程&quot;</span>, os.getpid())<span class="hljs-comment">#默认的主进程</span><br>    <span class="hljs-attr">p1</span> = Process(<span class="hljs-attr">target=tests,</span> <span class="hljs-attr">args=(10,))</span>  <span class="hljs-comment">#创建子进程1</span><br>    <span class="hljs-attr">p2</span> = Process(<span class="hljs-attr">target=tests,</span> <span class="hljs-attr">args=(20,))</span>  <span class="hljs-comment">#创建子进程2</span><br>    p1.start()<span class="hljs-comment">#开始子进程1</span><br>    p2.start()<span class="hljs-comment">#开始子进程2</span><br><br></code></pre></td></tr></table></figure><h4 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h4><p>让多个进程访问同一个变量，使得进程间共享数据。</p><p>我们这儿主要使用<strong>进程间队列</strong>来实现。</p><h6 id="队列（queue）"><a href="#队列（queue）" class="headerlink" title="队列（queue）"></a>队列（queue）</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">q</span> = multiprocessing<span class="hljs-selector-class">.Queue</span>()#实例化<br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.put</span>()#向队列中写入数据（用于生产者进程）<br><span class="hljs-selector-tag">q</span><span class="hljs-selector-class">.get</span>()#向队列中读取数据（用于消费者进程）<br><br></code></pre></td></tr></table></figure><h4 id="进程池（Pool）"><a href="#进程池（Pool）" class="headerlink" title="进程池（Pool）"></a>进程池（Pool）</h4><p>进程池可以简化多进程代码，可以以下创建多个进程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> multiprocessing<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">task</span>(<span class="hljs-params">i</span>):</span><br>    print(<span class="hljs-string">&#x27;Run task %s ==&gt; (%s)...&#x27;</span> % (os.getpid(), i))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    print(<span class="hljs-string">&#x27;Parent process %s.&#x27;</span> % os.getpid())<br>    size = multiprocessing.cpu_count()<br>    <span class="hljs-comment"># 创建size个子进程</span><br>    <span class="hljs-comment"># 每个子进程根据任务执行情况会被复用</span><br>    <span class="hljs-comment"># 创建进程需要申请cpu时间，内存空间，关闭进程还需要释放这些资源，整个过程比创建线程费时</span><br>    <span class="hljs-comment"># 因此通常需要预先创建几个进程</span><br>    p = multiprocessing.Pool(size)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        p.apply_async(task, args=(i,))<br><br>    print(<span class="hljs-string">&quot;Waiting for all subprocesses done&quot;</span>)<br>    <span class="hljs-comment">#    调用close后不能继续添加进程</span><br>    p.close()<br>    <span class="hljs-comment">#    等待所有子进程执行完毕后执行</span><br>    p.join()<br>    print(<span class="hljs-string">&quot;All subprocesses done.&quot;</span>, <span class="hljs-string">&quot;cpu数量：&quot;</span>, size)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-多线程</title>
    <link href="/2021/05/31/Linux-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2021/05/31/Linux-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="什么是进程"><a href="#什么是进程" class="headerlink" title="什么是进程?"></a>什么是进程?</h4><p>我们每运行一个程序，就是创建一个进程。每个进程运行的时候会向系统申请资源:内存空间，cpu时间，进程之间的资源相互独立</p><h4 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程?"></a>什么是线程?</h4><p>当一个进程运行的时候，它内部就会存在一个主线程。线程就是程序内部需要完成的任务。在只有一个线程的情况，这些任务需要按照次序，逐个完成。所有线程共享进程资源。</p><h4 id="threading模块（多线程模块）"><a href="#threading模块（多线程模块）" class="headerlink" title="threading模块（多线程模块）"></a>threading模块（多线程模块）</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, active_count, current_thread, <span class="hljs-keyword">local</span><br>Thread  <span class="hljs-comment">--线程对象，通过该对象创建线程</span><br>t = Thread(target=func, arges=(param1,param2), kwargs=&#123;&#125;)<br>t为线程实例：<br>t.<span class="hljs-keyword">start</span>() <span class="hljs-comment">--开始运行该线程</span><br>t.<span class="hljs-keyword">join</span>()  <span class="hljs-comment">--其他线程必须等待此线程完成后才能运行</span><br><br>active_count  <span class="hljs-comment">--函数，返回当前活动的线程数</span><br>current_thread <span class="hljs-comment">--函数，当前该线程</span><br><span class="hljs-keyword">local</span>     <span class="hljs-comment">--函数，线程局部变量</span><br><span class="hljs-keyword">lock</span>   <span class="hljs-comment">--锁对象</span><br></code></pre></td></tr></table></figure><h6 id="多线程的使用"><a href="#多线程的使用" class="headerlink" title="多线程的使用"></a>多线程的使用</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">from</span> threading import Thread<br><span class="hljs-selector-tag">from</span> random import randint<br><span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">time</span> import sleep, <span class="hljs-selector-tag">time</span><br><br><br>def myprint(num):<br>    # <span class="hljs-built_in">sleep</span>(<span class="hljs-built_in">randint</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;threading:&quot;</span>, num)<br><br><br>def <span class="hljs-built_in">main</span>():<br>    for i in <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        t = <span class="hljs-built_in">Thread</span>(target=myprint, args=(i,))   # 创建线程<br>        t.<span class="hljs-built_in">start</span>()                               # 开始线程<br>        t.<span class="hljs-built_in">join</span>()      # 当前线程结束后，才会执行下一个进程，这个开启后下面的main stop 也会等所有线程结束后才会执行<br><br>if __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    time_1 = <span class="hljs-built_in">time</span>()<br>    <span class="hljs-built_in">main</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;main stop...&quot;</span>)       # 这句话会立即执行，可以在main函数还没有执行结束就执行<br>    time_2 = <span class="hljs-built_in">time</span>()<br>    <span class="hljs-built_in">print</span>(time_2 - time_1)<br></code></pre></td></tr></table></figure><h6 id="线程局部变量的使用"><a href="#线程局部变量的使用" class="headerlink" title="线程局部变量的使用"></a>线程局部变量的使用</h6><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta"># -*- coding=utf-8 -*-</span><br><br><span class="hljs-title">from</span> threading <span class="hljs-keyword">import</span> Thread, current_thread, local<br><span class="hljs-title">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-title">from</span> time <span class="hljs-keyword">import</span>  sleep<br><br><span class="hljs-meta"># 线程局部对象</span><br><span class="hljs-meta"># 线程局部对象可以被所有线程访问，比如local_data，可以被所有线程访问</span><br><span class="hljs-meta"># 但是线程局部对象的属性只能被定义该属性的线程自身访问，比如local_data的data属性，只能被自己的线程访问与修改，即使</span><br><span class="hljs-meta"># 所有的线程中都包含同名的local_data.data属性，因此这个data实际上只是线程内部的局部变量</span><br><span class="hljs-meta"># 借助线性局部对象可以简化代码逻辑，保持线程间变量隔离</span><br><span class="hljs-title">local_data</span> = local()<br><span class="hljs-class"><span class="hljs-keyword">data</span> = 0</span><br><span class="hljs-title">def</span> set_data():<br><br>    local_data.<span class="hljs-class"><span class="hljs-keyword">data</span> = randint(0,100)</span><br>    print(current_thread().name+<span class="hljs-string">&quot;::data=&quot;</span>+str(local_data.<span class="hljs-class"><span class="hljs-keyword">data</span>))</span><br>    sleep(randint(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>))<br>    print(current_thread().name+<span class="hljs-string">&quot;:: after_sleep::data=&quot;</span>+str(local_data.<span class="hljs-class"><span class="hljs-keyword">data</span>))</span><br>    # local_data.<span class="hljs-class"><span class="hljs-keyword">data</span> = <span class="hljs-keyword">data</span></span><br>    out()<br><br><span class="hljs-title">def</span> out():<br>    print(local_data.<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br><br><br><span class="hljs-title">def</span> main():<br>    for i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>):<br>        t1 = <span class="hljs-type">Thread</span>(target=set_data)<br>        t1.start()<br><br><br><br><span class="hljs-title">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h6 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h6><p>所有线程可以共享同一个进程内的资源，如果同时操作某一个对象，就可能发生混乱，这时候可以通过加锁解决<br>线程锁通过Lock对象实例实现l = Lock()<br>包含两个实例方法:l.acquire()-加锁l.release()-解锁</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock, current_thread<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><br>lock = Lock()<br>number = [<span class="hljs-number">0</span>]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">loop</span>(<span class="hljs-params">i</span>):</span><br>    lock.acquire()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> i &gt; number[-<span class="hljs-number">1</span>]:<br>            sleep(randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>))<br>            number.append(i)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">finally</span>:<br>        print(<span class="hljs-string">&quot;thread %s ended.&quot;</span> % current_thread().name, number, <span class="hljs-string">&quot;\r\n&quot;</span>)<br>        lock.release()<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        t = Thread(target=loop, args=(i,))<br>        t.start()<br>   <br><br></code></pre></td></tr></table></figure><h6 id="如何多客户端链接socket"><a href="#如何多客户端链接socket" class="headerlink" title="如何多客户端链接socket"></a>如何多客户端链接socket</h6><p>中心思想：将客户链接语句加入到循环中，进来一个客户就创建一个线程</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-socket编程</title>
    <link href="/2021/05/02/Linux-socket%E7%BC%96%E7%A8%8B/"/>
    <url>/2021/05/02/Linux-socket%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h4><p>在实际的TCP/IP应用程序开发中，并不需要去实现细节部分，通常会由系统提供socket接口，这个接口又被称为套接字，基于这个接口就可以轻松的开发网络通讯程序<br>python标准库提供的socket模块，可以实现服务端与客户端的编程</p><h4 id="服务端开发"><a href="#服务端开发" class="headerlink" title="服务端开发"></a>服务端开发</h4><p>1.服务器端一直运行，直到关闭</p><p>2.服务器端端口是固定的</p><p>3.服务器端拥有固定的ip或者主机名</p><p>4.服务器端运行后，会等待客户端连接</p><p>5.一旦连接成功，就可以相互发送消息</p><p>1.s= socket(套接字类别, SOCK_STREAM)<br>套接字类别:AF_INET-IP寻址，AF_UNIX-文件类型套接字</p><p>返回一个socket对象实例</p><p>2.s.bind((“127.0.0.1”,8000))<br>参数是元组类型，(ip地址，端口号)</p><p>3.s.listen(num)<br>启动监听，如果提供了num，表示允许的最多连接数，超过的将被拒绝</p><p>4.socket, address = s.accept()<br>等待连接，如果有连接,返回由客户端socket对象与address信息组成的元组</p><p>安装Wireshark抓包工具</p><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><h6 id="服务器设置（基本设置）"><a href="#服务器设置（基本设置）" class="headerlink" title="服务器设置（基本设置）"></a>服务器设置（基本设置）</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> socket import socket, AF_INET, SOCK_STREAM<br><br><span class="hljs-comment"># AF_INET  - IPV4 协议</span><br><span class="hljs-comment"># SOCK_STREAM - 套接字类型为面向连接的可靠字节流</span><br><br><span class="hljs-comment"># 创建socket对象实例</span><br>s_server = socket(AF_INET, SOCK_STREAM)<br><br><span class="hljs-comment"># 绑定IP与端口号</span><br>s_server.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, 8000))<br><br><span class="hljs-comment"># 开始监听</span><br>s_server.listen()<br><br><span class="hljs-comment"># 显示等待链接接入中</span><br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;等待链接中~~~~~~&quot;</span>)<br>client_sock, client_addr = s_server.accept()<br><span class="hljs-builtin-name">print</span>(client_sock, client_addr)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;-&quot;</span><span class="hljs-number">*50</span>)<br>client_sock.close()<br>s_server.close()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;服务器已关闭&quot;</span>)<br></code></pre></td></tr></table></figure><h6 id="客户端设置"><a href="#客户端设置" class="headerlink" title="客户端设置"></a>客户端设置</h6><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> <span class="hljs-built_in">socket</span> import *<br><br><span class="hljs-comment"># 创建实例</span><br>c_client = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM)<br><br><span class="hljs-comment"># 链接到服务器</span><br>c_client.connect((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8000</span>))<br><br><span class="hljs-comment"># 关闭链接</span><br>c_client.<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure><h6 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h6><p>服务器设置（主要是加上了while循环）</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs perl">from <span class="hljs-keyword">socket</span> import <span class="hljs-keyword">socket</span>, AF_INET, SOCK_STREAM<br><br>s_server = <span class="hljs-keyword">socket</span>(AF_INET, SOCK_STREAM)<br>s_server.bind((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8000</span>))<br>s_server.listen()<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;等待链接中~~~~~~&quot;</span>)<br>client_sock, client_addr = s_server.accept()<br><span class="hljs-keyword">print</span>(client_sock, client_addr)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;-&quot;</span>*<span class="hljs-number">50</span>)<br><br><span class="hljs-keyword">while</span> True:<br>    message = client_sock.recv(<span class="hljs-number">1024</span>)       <span class="hljs-comment"># 读取socket的数据，如果没有读取到数据就会停留在这一句</span><br>    message = message.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)      <span class="hljs-comment"># 将读取到的message字节解码</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> message:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;exit&quot;</span>:<br>        client_sock.close()                 <span class="hljs-comment"># 发出关闭信号</span><br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;客户端消息》》&quot;</span>, message)<br>        client_sock.send(b<span class="hljs-string">&quot;continue...&quot;</span>)<br><br>s_server.close()<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;服务器已关闭&quot;</span>)<br></code></pre></td></tr></table></figure><p>客户端设置</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">from</span> <span class="hljs-built_in">socket</span> import *<br><br>c_client = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM)<br>c_client.connect((<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">8000</span>))<br><br><span class="hljs-keyword">while</span> True:<br>    message = input(<span class="hljs-string">&quot;请输入发送的消息：&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> message:<br>        continue<br>    c_client.<span class="hljs-built_in">send</span>(<span class="hljs-keyword">bytes</span>(message, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br>    <span class="hljs-keyword">if</span> message == <span class="hljs-string">&quot;exit&quot;</span>:<br>        break<br>    <span class="hljs-built_in">result</span> = c_client.recv(<span class="hljs-number">1024</span>)<br>    print(<span class="hljs-built_in">result</span>.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br><br><span class="hljs-comment"># 关闭链接</span><br>c_client.<span class="hljs-built_in">close</span>()<br></code></pre></td></tr></table></figure><h4 id="udp"><a href="#udp" class="headerlink" title="udp"></a>udp</h4><h6 id="服务器设置"><a href="#服务器设置" class="headerlink" title="服务器设置"></a>服务器设置</h6><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">from</span> socket <span class="hljs-keyword">import</span> *<br><br><span class="hljs-type">HOST</span> = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-type">PORT</span> = <span class="hljs-number">21111</span><br><span class="hljs-type">BUFSIZE</span> = <span class="hljs-number">1024</span><br><br><span class="hljs-meta"># 创建udp服务器</span><br><span class="hljs-title">udpSerSock</span> = socket(<span class="hljs-type">AF_INET</span>, <span class="hljs-type">SOCK_DGRAM</span>)<br><span class="hljs-title">udpSerSock</span>.bind((<span class="hljs-type">HOST</span>, <span class="hljs-type">PORT</span>))<br><span class="hljs-title">while</span> <span class="hljs-type">True</span>:<br>    # recvform返回数据<span class="hljs-class"><span class="hljs-keyword">data</span>，与发送消息端的(<span class="hljs-title">ip</span>, <span class="hljs-title">port</span>)</span><br>    <span class="hljs-class"><span class="hljs-keyword">data</span>, addr = udpSerSock.recvfrom(<span class="hljs-type">BUFSIZE</span>)</span><br>    print(addr, <span class="hljs-string">&quot;&gt;&gt;&quot;</span>, <span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br>    udpSerSock.sendto(bytes(<span class="hljs-string">&quot;ok&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>), addr)<br>    <br><span class="hljs-title">udpSerSock</span>.close()<br></code></pre></td></tr></table></figure><h6 id="客户端设置-1"><a href="#客户端设置-1" class="headerlink" title="客户端设置"></a>客户端设置</h6><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cmake">from socket import *<br><br>HOST = <span class="hljs-string">&quot;&quot;</span><br>PORT = <span class="hljs-number">21111</span><br>BUFSIZ = <span class="hljs-number">1024</span><br>ADDR = (HOST, PORT)<br><br><span class="hljs-comment"># 创建一个socket对象</span><br><span class="hljs-comment"># SOCK_DGRAM - 套接字类型为udp数据报</span><br>udpClient = socket(AF_INET, SOCK_DGRAM)<br><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:<br>    <span class="hljs-keyword">message</span> = input(<span class="hljs-string">&quot;请输入:&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">message</span> ==<span class="hljs-string">&quot;quit&quot;</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">message</span>:<br>        <span class="hljs-keyword">continue</span><br>    udpClient.sendto(bytes(<span class="hljs-keyword">message</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>), ADDR)<br>    <span class="hljs-keyword">message</span>, addr = udpClient.recvfrom(<span class="hljs-number">1024</span>)<br>    print(addr, <span class="hljs-string">&quot;&gt;&gt;&quot;</span>, <span class="hljs-keyword">message</span>.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    <br>udpClient.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-mysql主从复制</title>
    <link href="/2021/05/02/Linux-mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <url>/2021/05/02/Linux-mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>主从复制</p><p>主从复制就是一台主Mysql服务器，能够接受数据的写入与读取，另外可能还有多台从节点Mysql服务器，他们不能被直接写入数据，只能通过主节点的二进制日志复制数据，为外部程序提供数据读取服务，是Mysql集群部署最简单的一种</p><p>1.主从复制依赖于Mysql的二进制日志</p><p>2.从服务器首先复制主服务器的二进制日志</p><p>3.然后从该二进制日志中恢复数据到从库</p><p>4.复制二进制日志过程默认是异步的，所以从数据库上的数据相对主数据库来讲，有一定的延迟。但是最终，两者的数据是一致的</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-mysql安装</title>
    <link href="/2021/05/01/Linux-mysql%E5%AE%89%E8%A3%85/"/>
    <url>/2021/05/01/Linux-mysql%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="在Linux系统中安装mysql"><a href="#在Linux系统中安装mysql" class="headerlink" title="在Linux系统中安装mysql"></a>在Linux系统中安装mysql</h3><p>下载历史版本5.7.28的版本<br>找到下载地址后右键下载，复制下载链接</p><h6 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h6><p>#yum install wget</p><h6 id="用命令下载mysql安装包"><a href="#用命令下载mysql安装包" class="headerlink" title="用命令下载mysql安装包"></a>用命令下载mysql安装包</h6><p>-c 后边是mysql下载链接地址<br>wget -c <a href="https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz">https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz</a></p><p>#经过上面的操作，就得到了一个mysql二进制安装包</p><h6 id="安装二进制包"><a href="#安装二进制包" class="headerlink" title="安装二进制包"></a>安装二进制包</h6><p>Step1-解压缩二进制包:</p><p>#tar zxvf mysql-5.7.28-linux-glibc2.12-x86_64.tar.gz</p><p>Step2-拷贝到/usr/local/下:</p><p>#cp mysql-5.7.28-linux-glibc2.12-x86_64/usr/local/mysql</p><p>Step3-编辑配置文件:</p><p>#vim /etc/my.cnf</p><p>Step4-创建data目录:</p><p>#mkdir /usr/local/mysql/data</p><p>Step5-创建mysql运行用户组</p><p>#groupadd mysql</p><p>Step6-创建mysql运行用户</p><p>#useradd -g mysql -d /usr/local/mysql -s /sbin/nologin -M mysql</p><p>Step7 -  运行初始化(首先要进入mysql目录)(初始化后记得拷贝下密码)</p><p>#./bin/mysqld –initialize</p><p>Step8-更改/usr/local/mysql属主与属组</p><p>#chown -R mysql:mysql /usr/local/mysql</p><p>Step9-运行服务器:</p><p>#support-files/mysql.server start</p><p>Step10 -加入系统服务:</p><p>#cp support-files/mysql.server /etc/init.d/mysqld</p><p>Step11-开机启动:</p><p>#chkconfig –add mysqld</p><p>登录mysql</p><p>./bin/mysql -u root -h localhost -p</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-nginx代理配置</title>
    <link href="/2021/05/01/Linux-nginx%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/05/01/Linux-nginx%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>Nginx代理模式</p><p>正向代理</p><p>比如我们使用的vpn，就是一种代理，通过vpn我们就可以一种特别的通道上网vpn的代理模式是正向代理，代理层是透明的，上网时感觉不到这一层代理</p><p>反向代理</p><p>在反向代理中，客户端只知道代理节点，将请求发给代理节点，由代理节点决定将请求发给哪个服务器节点，代理节点就是访问目标服务器</p><p>nginx作为web服务器使用时，可以看作是一个文件分发服务器</p><p>在反向代理模式下，用户将请求发送到nginx服务器，nginx决定将用户请求转发到节点的某一台服务器节点组成对用户来讲是不透明的，用户只知道nginx服务器的存在</p><p>当nginx代理请求时，它将请求发送到指定的代理服务器，获取响应，并将其发送回客户端。可以使用指定的协议将请求代理到HTTP服务器或非HTTP服务器。<br>1.代理到HTTP服务器使用Proxy协议<br>2.代理到非HTTP服务器支持的协议包括FastCGl，uwsgi，SCGI和memcached。</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-nginx服务器</title>
    <link href="/2021/04/21/Linux-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/04/21/Linux-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="nginx简介"><a href="#nginx简介" class="headerlink" title="nginx简介"></a>nginx简介</h4><p>nginx  [engine x]不仅仅是HTTP服务器</p><p>还可以作为反向代理服务器,以及IMAP/POP3/SMTP服务器，Nginx是由lgor Sysoev为俄罗斯访问量第二的rambler.ru站点开发的</p><p>特点:占用内存少，并发能力强，主要原因是采用了epoll机制</p><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><ol><li><p>配置yum源</p><p>配置文件位置:/etc/yum.repos.d/nginx.repo</p><p>配置文件内容:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[nginx-stable]</span><br><br><span class="hljs-attr">name</span>=nginx stable repo<br><br><span class="hljs-attr">baseurl</span>=http://nginx.org/packages/centos/<span class="hljs-variable">$releasever</span>/<span class="hljs-variable">$basearch</span>/<br><br><span class="hljs-attr">gpgcheck</span>=<span class="hljs-number">1</span><br><br><span class="hljs-attr">enabled</span>=<span class="hljs-number">1</span><br><br><span class="hljs-attr">gpgkey</span>=https://nginx.org/keys/nginx_signing.key<br><br><span class="hljs-attr">module_hotfixes</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li><li><p>yum安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> yum-utils<br>   yum <span class="hljs-keyword">install</span> nginx<br></code></pre></td></tr></table></figure></li></ol><p>安装完成后，打开配置文件vim /etc/nginx/nginx.conf</p><p>配置文件含义</p><p>user nginx; -进程用户名</p><p>worker_processes 1;-进程数，一般与cpu数一致</p><p>error_log /var/log/nginx/error.log warn;    错误日志存放路径</p><p>pid /var/run/nginx.pid;    进程的ID</p><p>events {worker_connections 1024; }     worker_connections表示每个worker进程的最大的连接数</p><p>http {</p><p>include/etc/nginx/mime.types;支持的资源媒体类型</p><p>default_type application/octet-stream;默认文件类型为字节流</p><p>log_format main …..”;    日志格式</p><p>access_log /var/log/nginx/access.log main;    服务器日志路径</p><p>sendfile on;静态文件传输优化</p><p>keepalive_timeout 65;连接保持时间</p><p>#gzip on;</p><p>include /etc/nginx/conf.d/*.conf;加载配置}</p><p>主要修改server文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs gradle">复制上方   <span class="hljs-keyword">include</span>后边路径下的    <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span>*.conf  目录下的defoult.conf文件<br><br>例：复制文件     cp <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/conf.d/</span><span class="hljs-regexp">/default.conf /</span>etc<span class="hljs-regexp">/nginx/</span>conf.d/myweb.conf<br><br>打开刚刚复制的文件，按下面修改<br>server &#123;<br>    listen       <span class="hljs-number">80</span>;<br>    server_name  localhost;#将此处的localhost修改为自己的域名<br><br>    #access_log  <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>host.access.log  main;<br><br>    location / &#123;<br>        root   <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/nginx/</span>html;#此处为自己网页的根目录<br>        index  index.html index.htm;<br>    &#125;<br>    <br> 修改后示例<br> server &#123;<br>    listen       <span class="hljs-number">80</span>;<br>    server_name  xiaobo.com;<br><br>    #access_log  <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>host.access.log  main;<br><br>    location / &#123;<br>        root   <span class="hljs-regexp">/wwwroot/my</span>web;<br>        index  index.html index.htm;<br>    &#125;<br></code></pre></td></tr></table></figure><p>修改完成后，重启nginx，就可以访问域名了</p><h4 id="nginx主进程控制"><a href="#nginx主进程控制" class="headerlink" title="nginx主进程控制"></a>nginx主进程控制</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">nginx修改配置后需要重启后才能生效.<br><br>1.启动nginx<br>nginx<br><br>⒉快速停止nginx运行<br>nginx -s stop<br><br>3.重启加载<br>nginx -s <span class="hljs-keyword">reload</span><br><br>4.正常关闭<br>nginxnginx -s <span class="hljs-keyword">quit</span><br><br>5.重新打开日志<br>nginx -s reopen<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-apache服务器</title>
    <link href="/2021/04/18/Linux-apache%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/04/18/Linux-apache%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="apache-httpd简介"><a href="#apache-httpd简介" class="headerlink" title="apache httpd简介"></a>apache httpd简介</h4><p>httpd web服务器是apache基金会下的一个开源服务器项目。</p><p>httpd服务器能够提供静态网页服务以及通过扩展提供动态程序访问</p><p>官方网站:<a href="http://httpd.apache.org/">http://httpd.apache.org/</a></p><h5 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h5><ol><li><p>httpd服务器可以直接通过yum命令安装。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> httpd<span class="hljs-comment">#安装httpd</span><br>yum <span class="hljs-keyword">install</span> vim<span class="hljs-comment">#安装vim命令，文件编辑命令，vi的加强版</span><br></code></pre></td></tr></table></figure></li><li><p>服务器管理</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">apache服务器命令<br>apachectl start<span class="hljs-comment">#启动服务器</span><br>apachectl stop<span class="hljs-comment">#关闭服务器</span><br><br><br>Linux命令<br>reboot<span class="hljs-comment">#重启Linux服务器</span><br><br><span class="hljs-comment">#拷host2.conf文件，命名host3.conf</span><br>cp <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/conf.d/</span>host2.conf <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/conf.d/</span>host3.conf<br>service firewalld stop<span class="hljs-comment">#关闭防火墙</span><br><br><span class="hljs-comment">#永久打开80端口，设置后就不需要关闭防火墙</span><br>firewall-cmd --zone=public --add-port=<span class="hljs-number">80</span>/tcp --permanent<br></code></pre></td></tr></table></figure></li><li><p>配置文件位置</p><p>/etc/httpd/conf/httpd.conf</p></li></ol><h6 id="配置文件——详细解释"><a href="#配置文件——详细解释" class="headerlink" title="配置文件——详细解释"></a>配置文件——详细解释</h6><ul><li><p>Listen ip:port<br>指定web服务器绑定到哪个ip及端口号，可以只指定端口号，如80、8080</p></li><li><p>LoadModule<br>模块加载，通过加载不同的模块实现不同功能</p></li><li><p>ServerName<br>服务器名称，需要明确指定，默认注释，需要去掉注释符#并指定，才能启动httpd</p></li><li><p>Directory<br>目录权限设置块</p></li><li><p>DocumentRoot</p><p>指定web服务器根目录</p></li><li><p>ErrorLog错误</p><p>日志位置</p></li><li><lfModule log_config_module><p>访问日志配置</p></li><li><p>Include<br>加载其他配置文件</p></li></ul><h6 id="Apache修改配置后需要重启后才能生效"><a href="#Apache修改配置后需要重启后才能生效" class="headerlink" title="Apache修改配置后需要重启后才能生效."></a>Apache修改配置后需要重启后才能生效.</h6><p>1.启动httpd<br>/usr/local/apache2/bin/apachectl start</p><p>2.停止httpd运行<br>/usr/local/apache2/bin/apachectl stop</p><p>3.重启httpd（立即重启）<br>/usr/local/apache2/bin/apachectl restart</p><p>4.平滑重启（等待请求访问结束后重启）<br>/usr/local/apache2/bin/apachectl graceful</p><p>5.平滑关闭<br>/usr/local/apache2/bin/apachectl graceful-stop</p><h6 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h6><p>Step1:修改DocumentRoot<br>        指定web服务器根目录</p><p>​        文件根目录需要自己创建（mkdir -p)</p><p>Step2:关闭seliunx<br>        etc/selinux/config<br>        SELINUX=enforcing =&gt; SELINUX=disabled</p><p>Step3:重启<br>        reboot<br>Step4:启动apache web服务器<br>        apachectl start<br>Step5:关闭防火墙<br>        service firewalld stop</p><h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><p>Step1:创建新的web目录，比如:/wwwroot/myweb2 (mkdir/wwwroot/myweb2)</p><p>Step2:通过sftp命令上传网站文件到web目录，也可以下载一个winscp程序</p><p>Step3:创建/web/logs目录用于存放日志文件(mkdir -p/web/logs)</p><p>Step4:通过chown apache:apache /web/logs修改文件拥有者与属组</p><p>Step5:通过chmod -R 755/wwwroot/myweb2修改权限</p><p>Step6:在httpd.conf中添加Listen 8l端口</p><h6 id="sftp命令"><a href="#sftp命令" class="headerlink" title="sftp命令"></a>sftp命令</h6><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment">#重新打开一个命令窗口，通过以下命令连接服务器</span><br>sfpt root@<span class="hljs-number">192.168</span>.<span class="hljs-number">107.140</span><br><br><span class="hljs-comment">#查看目录</span><br><span class="hljs-built_in">ls</span><span class="hljs-comment">#查看远程目录</span><br>lls<span class="hljs-comment">#查看本地目录</span><br><br><span class="hljs-comment">#目录切换</span><br><span class="hljs-built_in">cd</span> /wwwroot/myweb<span class="hljs-comment">#远程电脑目录切换</span><br>lcd /test<span class="hljs-comment">#本地目录切换</span><br><br><span class="hljs-comment">#上传文件</span><br>put <span class="hljs-literal">-r</span> flask<span class="hljs-comment">#上传文件夹</span><br>put index.html<span class="hljs-comment">#上传文件</span><br><br><span class="hljs-comment">#删除文件（sftp里面不能执行）</span><br><span class="hljs-built_in">rmdir</span> 目录名<span class="hljs-comment">#删除空目录</span><br><span class="hljs-built_in">rmdir</span> <span class="hljs-literal">-p</span> 目录名<span class="hljs-comment">#删除后，若上级目录为空，上级目录也会删除</span><br><br><span class="hljs-built_in">rm</span> <span class="hljs-literal">-rf</span> 目录名字<span class="hljs-comment">#删除该目录及下级目录</span><br><span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> 目录下文件名字<span class="hljs-comment">#删除该目录下的文件</span><br></code></pre></td></tr></table></figure><h6 id="权限修改"><a href="#权限修改" class="headerlink" title="权限修改"></a>权限修改</h6><p>755(二进制对应    111    101    101    ) </p><p>111对应 ： 可读    可写    可执行</p><p>101就是： 可读    不可写    可执行</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#查看web目录下logs的权限</span><br><span class="hljs-keyword">ls</span> -al <span class="hljs-string">/web/logs</span> <br><br><span class="hljs-comment">#修改权限</span><br>chown -R apache<span class="hljs-function">:apache</span> <span class="hljs-string">/web</span><br></code></pre></td></tr></table></figure><h6 id="添加端口号"><a href="#添加端口号" class="headerlink" title="添加端口号"></a>添加端口号</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>httpd<span class="hljs-regexp">/conf/</span>httpd.conf<span class="hljs-comment">#打开文件</span><br><br>在LIsten <span class="hljs-number">80</span> 下面添加 listen <span class="hljs-number">81</span><br></code></pre></td></tr></table></figure><h4 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h4><p>1.直接IP访问服务器，不方便记忆。域名是为了方便访问服务器。<br>2.域名需要DNS服务器解析成IP地址，如果没有解析记录，就没有办法通过域名访问3.域名必须注册，常用的是国际域名。比如.com，.net，然后是国家域名.cn,com.cn，另外还有很多其他的域名，比如.io,.org..<br>4.域名结构:域名.com,二级域名: www.域名.com, api.域名.com<br>5.本地测试，可以通过架设dns服务器或者通过修改本地hosts文件来模拟域名6.apache可以通过域名绑定多个虚拟主机</p><p>由于域名需要解析，所以比直接使用ip要慢，因此，在我们服务器内部，尽量使用ip,比如mysql的连接，使用127.0.0.1，要比localhost要快</p><p>修改本地电脑的hosts文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#第一步：</span><br><span class="hljs-comment">#Windows系统：用管理员权限打开cmd,执行下面命令</span><br><span class="hljs-attribute">cd</span> \Windows\System<span class="hljs-number">32</span>\drivers\etc#进入etc文件夹<br><span class="hljs-attribute">notepad</span> hosts#用笔记本打开hosts文件<br><br><span class="hljs-comment"># mac os 系统</span><br><span class="hljs-attribute">vim</span> /etc/hosts<br><br><span class="hljs-comment">#第二步</span><br><span class="hljs-comment">#添加解析信息</span><br><span class="hljs-comment">#例</span><br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">107</span>.<span class="hljs-number">140</span>    xiaobo.com<br><span class="hljs-attribute">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">107</span>.<span class="hljs-number">140</span>    bobo.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-虚拟机安装</title>
    <link href="/2021/04/15/Linux-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/"/>
    <url>/2021/04/15/Linux-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h4 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h4><p>VirtualBox由oracle公司出品，可以在window、linux、macos上运行</p><p>官方网站: <a href="https://www.virtualbox.org/">https://www.virtualbox.org/</a></p><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>Linux是系统内核，单独使用linux内核会很困难，因此许多厂家以linux内核版本为基础，开发了功能丰富的组件，<br>常见的linux发行版本:</p><ol><li><p>Red Hat Linux(免费版Fedora Core，用于测试新内核)官方网址: http: //<a href="http://www.redhat.com/">www.redhat.com/</a><br>官方网址:<a href="https://getfedora.org/">https://getfedora.org/</a></p></li><li><p>Debian Linux<br>官方网址: <a href="http://www.debian.org/">http://www.debian.org/</a></p></li><li><p>Ubuntu Linux(在Debian的基础上改良的桌面工作环境)<br>官方网址: <a href="http://www.ubuntulinux.org/%E3%80%82">http://www.ubuntulinux.org/。</a></p></li><li><p>Centos (Red Hat的收费版的社区版，功能接近一致，不收费)<br>官方网址:<a href="https://www.centos.org/">https://www.centos.org/</a><br><a href="http://mirrors.163.com/centos/7.7.1908/isos/x86_64/">http://mirrors.163.com/centos/7.7.1908/isos/x86_64/</a></p></li></ol><h4 id="Linux文件组织"><a href="#Linux文件组织" class="headerlink" title="Linux文件组织"></a>Linux文件组织</h4><p>liunx没有盘符的概念，所有目录，文件都在/根目录下</p><p>主要的文件夹介绍:<br>/bin系统命令</p><p>/boot系统启动命令</p><p>/etc配置文件<br>/home普通用户主目录</p><p>/root root用户目录</p><p>/usr用户安装程序</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux-ssh远程登录</title>
    <link href="/2021/04/15/Linux-ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
    <url>/2021/04/15/Linux-ssh%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h4 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h4><h5 id="内网ip地址"><a href="#内网ip地址" class="headerlink" title="内网ip地址"></a>内网ip地址</h5><p>lp代表了一台主机在网络中的位置<br>每一块网卡介入互联网的时候都会分配一个ip，在自己家里每台电脑通常分配一个内部ip，内网ip可以自己定</p><h5 id="外网ip地址"><a href="#外网ip地址" class="headerlink" title="外网ip地址"></a>外网ip地址</h5><p>如果你的电脑通过ISP服务商连接到互联网，就会被分配一个公网ip</p><h5 id="ip地址规则"><a href="#ip地址规则" class="headerlink" title="ip地址规则"></a>ip地址规则</h5><h5 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h5><h5 id="OSI网络模型"><a href="#OSI网络模型" class="headerlink" title="OSI网络模型"></a>OSI网络模型</h5><h5 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h5><p>OSI</p><ul><li>应用层</li><li>表示层</li><li>会话层</li><li>传输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><p>TCP/IP</p><ul><li>应用层</li><li>传输层</li><li>网络层</li><li>网络接口层</li></ul><h5 id="网络层与传输层"><a href="#网络层与传输层" class="headerlink" title="网络层与传输层"></a>网络层与传输层</h5><p>网络层负责将数据根据传输协议打包成数据包进行传输(主机到主机)传输层负责将数据在不同主机的应用进程之间进行传输。<br>有两个协议: tcp与udp协议<br>tcp协议称为可靠协议udp协议为非可靠协议</p><h5 id="应用层与端口"><a href="#应用层与端口" class="headerlink" title="应用层与端口"></a>应用层与端口</h5><p>主机接受到网络传来的数据，还需要对应的应用程序来将数据包重新还原为原来的数据格式。<br>ip只能定位主机，数据包到达主机后，交给哪个应用处理，需要依靠端口来分辨常用的一些网络协议端口</p><h4 id="ip命令"><a href="#ip命令" class="headerlink" title="ip命令"></a>ip命令</h4><h6 id="ip-addr命令"><a href="#ip-addr命令" class="headerlink" title="#ip addr命令"></a>#ip addr命令</h6><p>ip命令可以查看本机网络ip配置</p><p>命令格式： # ip addr</p><h6 id="修改网卡配置"><a href="#修改网卡配置" class="headerlink" title="修改网卡配置"></a>修改网卡配置</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs routeros">网卡配置:执行vi /etc/sysconfig/network-scripts/ifcfg-enp0s3<br><br>修改以下参数<br><br>将内网IP设为固定ip:<br><br><span class="hljs-attribute">BOOTPROTO</span>=static     静态分配 <br><br><span class="hljs-attribute">ONBOOT</span>=<span class="hljs-literal">yes</span><br><br><span class="hljs-attribute">NETMASK</span>=255.255.255.0    掩码<br><br><span class="hljs-comment">#下面两条需要根据实际情况修改</span><br><br><span class="hljs-attribute">IPADDR</span>=172.17.191.140<br><br><span class="hljs-attribute">GATEWAY</span>=172.17.191.254     网关<br><br><br></code></pre></td></tr></table></figure><h6 id="重启network服务（网络服务）"><a href="#重启network服务（网络服务）" class="headerlink" title="重启network服务（网络服务）"></a>重启network服务（网络服务）</h6><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#centos 8 的版本</span><br><span class="hljs-attribute">nmcli</span> c reload<br><span class="hljs-attribute">nmcli</span> c up enp<span class="hljs-number">0</span>s<span class="hljs-number">3</span>#enp<span class="hljs-number">0</span>s<span class="hljs-number">3</span>是网卡标识符<br><br><span class="hljs-comment">#centos 7 的版本</span><br><span class="hljs-attribute">service</span> network restart<br></code></pre></td></tr></table></figure><h4 id="ssh命令"><a href="#ssh命令" class="headerlink" title="ssh命令"></a>ssh命令</h4><p>1.SSH为Secure Shell的缩写<br>2.SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议3.几乎所有的linux都支持SSH，SSH由客户端与服务器组成<br>4.通过SSH可以安全的进行远程登录，远程拷贝，远程上传，默认端口是22</p><p>mac与linux自带ssh客户端<br>windows下如果你不能使用该命令可以安装putty</p><p>基本使用方式：</p><p>#ssh -l 用户名 主机名</p><p>举例:<br>以root身份远程登陆到192.168.1.100主机#ssh -l root 192.168.1.100<br>第一次登陆，会有一个询问窗口，</p><p>回复yes即可,密码 为root密码</p><p>安装httpd时出现以下错误（yum安装错误）</p><p>已加载插件：fastestmirror<br>Determining fastest mirrors<br>Could not retrieve mirrorlist <a href="http://mirrorlist.centos.org/?release=7&amp;arch=x86_64&amp;repo=os&amp;infra=stock">http://mirrorlist.centos.org/?release=7&amp;arch=x86_64&amp;repo=os&amp;infra=stock</a> error was<br>14: curl#6 - “Could not resolve host: mirrorlist.centos.org; 未知的错误”</p><p>需要在在网卡配置里添加DNS=114.114.114.114</p><p>错误：远程主机标识已更改，</p><p>执行下面语句，然后重新连接</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">ssh-keygen -R host<span class="hljs-meta">#host为主机名</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql-数据库管理</title>
    <link href="/2021/04/14/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"/>
    <url>/2021/04/14/mysql-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h4 id="用户授权（DCL）"><a href="#用户授权（DCL）" class="headerlink" title="用户授权（DCL）"></a>用户授权（DCL）</h4><p>对已存在用户授权：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">mysql&gt;&gt;&gt;grant privileges_type <span class="hljs-literal">on</span> dbname.tablename <span class="hljs-keyword">to</span> username@host<br></code></pre></td></tr></table></figure><p>创建新用户并授权：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">mysql&gt;&gt;&gt;grant privileges_type <span class="hljs-literal">on</span> dbname.tablename <span class="hljs-keyword">to</span> username@host identified <span class="hljs-keyword">by</span><span class="hljs-string">&#x27;password&#x27;</span><br></code></pre></td></tr></table></figure><p>权限类型</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">privileges_type:</span><br><span class="hljs-attr">all privileges:</span> <span class="hljs-string">所有权限</span><br><span class="hljs-attr">select:</span> <span class="hljs-string">读取权限</span><br><span class="hljs-attr">delete:</span> <span class="hljs-string">删除权限</span><br><span class="hljs-attr">update:</span> <span class="hljs-string">更新权限</span><br><span class="hljs-attr">create:</span> <span class="hljs-string">创建权限</span><br><span class="hljs-attr">drop:</span> <span class="hljs-string">删除数据库，数据表权限</span><br></code></pre></td></tr></table></figure><h4 id="日志类型与配置"><a href="#日志类型与配置" class="headerlink" title="日志类型与配置"></a>日志类型与配置</h4><h6 id="日志类型："><a href="#日志类型：" class="headerlink" title="日志类型："></a>日志类型：</h6><ul><li>错误日志 - 记录数据库启动与停止，以及运行过程中发生的错误</li><li>二进制日志 - 记录了所有ddl与dml的语句，不包括select语句，即数据发生变化的过程</li><li>通用日志 - 记录了客户端的所有语句，一般情况下不开启</li><li>慢查询日志 - 记录了数据库查询超过一定时间的语句</li></ul><h6 id="日志配置："><a href="#日志配置：" class="headerlink" title="日志配置："></a>日志配置：</h6><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># my.cnf</span><br><span class="hljs-comment">#开启通用日志</span><br><span class="hljs-attr">general_log</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#通用日志地址</span><br><span class="hljs-attr">general_log_file</span>=/usr/local/mysql/logs/general.log<br><span class="hljs-comment">#开启慢查询日志</span><br><span class="hljs-attr">slow_query_log</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">#慢查询日志地址</span><br><span class="hljs-attr">slow_query_log_file</span>=/usr/local/mysql/logs/slow.log<br><span class="hljs-comment">#慢查询阀值</span><br><span class="hljs-attr">long_query_time</span>=<span class="hljs-number">5</span><br><span class="hljs-attr">log_output</span>= FILE<br><span class="hljs-comment">#二进制</span><br><span class="hljs-attr">--log-bin</span>=<span class="hljs-string">&quot;server_1_bin&quot;</span><br><span class="hljs-attr">server_id</span>=<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><h4 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h4><h6 id="数据库备份使用mysqldump命令："><a href="#数据库备份使用mysqldump命令：" class="headerlink" title="数据库备份使用mysqldump命令："></a>数据库备份使用mysqldump命令：</h6><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment">#备份database库的tablename表</span><br><span class="hljs-attribute">shell</span>&gt;&gt;&gt;mysqldump -u accout -p database tablename<span class="hljs-number">1</span> tablename<span class="hljs-number">2</span> &gt;mycms.sql<br></code></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#示例：</span><br><span class="hljs-meta">#1.备份mycms库的users表到mycms.sql文件中</span><br>shell&gt;&gt;&gt;mysqldump -u root -p mycms users &gt; mycms.sql<br><br><span class="hljs-meta">#2.备份database库中的所有表</span><br>shell &gt;&gt;&gt;mysqldump -u root -p mycms &gt; mycms.sql<br></code></pre></td></tr></table></figure><h6 id="备份多个数据库"><a href="#备份多个数据库" class="headerlink" title="备份多个数据库"></a>备份多个数据库</h6><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">#备份database库的tablename表</span><br><span class="hljs-built_in">shell</span>&gt;&gt;&gt;mysqldump -u accout -p <span class="hljs-comment">--databases tablename1 tablename2 &gt;mycms.sql</span><br><br><span class="hljs-comment">#示例</span><br><span class="hljs-comment">#备份mycms，test数据库</span><br><span class="hljs-built_in">shell</span>&gt;&gt;&gt;mysqldump -u root -p <span class="hljs-comment">--databases mycms test &gt; my.sql</span><br><br><span class="hljs-comment">#备份database库中所有库</span><br><span class="hljs-built_in">shell</span>&gt;&gt;&gt;mysqldump -u root -p <span class="hljs-comment">--all-databases &gt; mycms.sql</span><br></code></pre></td></tr></table></figure><h6 id="备份注意："><a href="#备份注意：" class="headerlink" title="备份注意："></a>备份注意：</h6><p>备份期间，数据不应该发生变化，以保证数据的一致性</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">mysqldump <span class="hljs-literal">-u</span> <span class="hljs-literal">-p</span> <span class="hljs-literal">-l</span> <span class="hljs-operator">-f</span><br><br>在参数上加上 <span class="hljs-literal">-l</span> ,备份期间只能读不能写<br>在参数上加上 <span class="hljs-operator">-f</span> ,生成新的日志，这样在恢复数据时，可以已恢复备份后的数据<br></code></pre></td></tr></table></figure><h6 id="完全恢复备份"><a href="#完全恢复备份" class="headerlink" title="完全恢复备份"></a>完全恢复备份</h6><ol><li><p>将备份文件中的数据导入数据库(dbname:数据库名字，backupfile:备份的文件名，-u account -p :账户名)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql dbname &lt; backupfile -u account -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure></li><li><p>恢复备份之后到当前数据（二进制日志）</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">mysqlbinlog binlog文件 <span class="hljs-string">| mysql dbname -u root -p</span><br></code></pre></td></tr></table></figure></li></ol><p>日志时间点恢复</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql-索引与联合查询</title>
    <link href="/2021/04/11/mysql-%E7%B4%A2%E5%BC%95/"/>
    <url>/2021/04/11/mysql-%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><h6 id="什么是索引？"><a href="#什么是索引？" class="headerlink" title="什么是索引？"></a>什么是索引？</h6><p>MySQL中的索引是以B树（B-tree）结构为索引数据结构，各引擎使用的方式有所不同，innodb引擎以B+Tree结构构造索引</p><p>除了B树索引还有HASH索引</p><h6 id="索引策略"><a href="#索引策略" class="headerlink" title="索引策略"></a>索引策略</h6><p>分类：</p><ul><li>普通索引(INDEX)</li><li>唯一索引(UNIQUE)</li><li>独立列索引</li><li>多列索引</li><li>全文索引(FULL TEXT)</li><li>空间索引(SPATIAL)</li></ul><h6 id="创建与删除索引"><a href="#创建与删除索引" class="headerlink" title="创建与删除索引"></a>创建与删除索引</h6><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">#创建时指定索引：<br><span class="hljs-keyword">create</span> table <span class="hljs-symbol">`table_name`</span>(<br>id int <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>field1 int <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br>field2 char(<span class="hljs-number">25</span>) <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>,<br><span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span>(<span class="hljs-symbol">`id`</span>),<br><span class="hljs-keyword">key</span> <span class="hljs-symbol">`index_name`</span>(<span class="hljs-symbol">`field1`</span>)<br>);<br><br>#为已经存在的表添加索引 ：<br>#方法一：<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span><br><span class="hljs-keyword">index</span> name<br><span class="hljs-keyword">on</span> table(field)<br><br>#方法二：<br><span class="hljs-keyword">alter</span> table<span class="hljs-symbol">`table`</span><br>add <span class="hljs-keyword">index</span> <span class="hljs-symbol">`index_name`</span> (<span class="hljs-symbol">`field`</span>);<br><br>#删除索引<br>alter table `table`<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> <span class="hljs-symbol">`index_name`</span>;<br><br><br><br></code></pre></td></tr></table></figure><p>也可以用MySQLworkbench可视化创建于删除索引</p><h6 id="索引的设计原则"><a href="#索引的设计原则" class="headerlink" title="索引的设计原则"></a>索引的设计原则</h6><ol><li>使用在where条件中出现的列，而不是select中出现的列</li><li>索引列的数据分布。如果你有100万条件记录，然后根据性别索引，每个索引依然要扫描50万，没有太大意义，但是根据省份，城市这种多样化的字段做索引就比较有意义</li><li>索引列长度尽量短。如果一个列的前缀索引就可以完成索引，比如真实姓名的姓部分，就可以只用姓部分做索引，而不要姓名整列做索引</li><li>索引不是越多越好,索引影响插入性能</li></ol><h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><h6 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h6><p>关联表之间必须有相互匹配的记录</p><p>隐式语法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#user_id=1的用户的所有文章</span><br>select * <span class="hljs-keyword">from</span> users,articles<br>where users.<span class="hljs-attribute">user_id</span>=articles.author <span class="hljs-keyword">and</span> <span class="hljs-attribute">user_id</span>=1;<br></code></pre></td></tr></table></figure><p>显式语法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#user_id=1的用户的所有文章</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> articles <span class="hljs-keyword">on</span> users.user_id=articles.article_author <span class="hljs-keyword">where</span> user_id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h6 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h6><p>关联表之间不需要相互匹配，分左连接，右连接</p><p>左连接，就是包含左边的这张表的查询记录，不管右边的表有没有对应的记录</p><p>查询语法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#以用户表为基准，查询该用户的文章</span><br>select * <span class="hljs-keyword">from</span><span class="hljs-built_in"> users </span>left join articles<br>on users.<span class="hljs-attribute">user_id</span>=articles.article_author where <span class="hljs-attribute">user_id</span>=2<br></code></pre></td></tr></table></figure><h6 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h6><p>一条查询语句的结果作为另一条查询的条件</p><p>查询语法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span>)<br></code></pre></td></tr></table></figure><p>子查询除了可以用in之外，还可以not in , != , = , exits(结果存在) , not exits(结果不存在)</p><h6 id="记录联合"><a href="#记录联合" class="headerlink" title="记录联合"></a>记录联合</h6><p>union all（多个查询结果拼接，必须字段数量一致）</p><p>查询语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">condition</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">condition</span><br></code></pre></td></tr></table></figure><p>union （与union all 不同的是去重复）</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql-三大范式</title>
    <link href="/2021/04/09/mysql-%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/"/>
    <url>/2021/04/09/mysql-%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h6 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h6><p>在关系模型中，对数据列的一个规范要求，所有的列都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式(1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。</p><p><strong>简而言之，第一范式就是无重复的列。</strong></p><h6 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h6><p>满足第二范式(2NF）必须先满足第一范式(1NF)。第二范式(2NF）要求数据库表中的每个实例或记录必须可以被唯一的区分,即每一行代表一个不同的实体。</p><h6 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h6><p>第三范式(3NF）是第二范式(2NF)的一个子集，即满足第三范式(3NF）必须满足第二范式(2NF)。简而言之，第三范式(3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql-统计与排序</title>
    <link href="/2021/04/07/mysql-%E7%BB%9F%E8%AE%A1%E4%B8%8E%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/04/07/mysql-%E7%BB%9F%E8%AE%A1%E4%B8%8E%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h6 id="limit限制"><a href="#limit限制" class="headerlink" title="limit限制"></a>limit限制</h6><p>当数据很多的时候，往往需要添加限制，取出想要的结果</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">table</span> <span class="hljs-keyword">limit</span> offset_start,<span class="hljs-built_in">row_count</span><br><br>offset_start : 偏移起始位置，默认为<span class="hljs-number">0</span>，查询结果不包含起始位置<br><span class="hljs-built_in">row_count</span> : 记录数，需要查询并显示多少条记录<br><br>例：<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">10</span>  #取出前<span class="hljs-number">10</span>条记录<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>   #也是取出前<span class="hljs-number">10</span>条记录<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>,<span class="hljs-number">15</span>  #从<span class="hljs-number">10</span>的位置往后取出<span class="hljs-number">15</span>条记录<br></code></pre></td></tr></table></figure><h6 id="count统计"><a href="#count统计" class="headerlink" title="count统计"></a>count统计</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span>#<span class="hljs-keyword">table</span>中总共有多少条记录<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span>#全部列统计，相当于统计有多少条记录<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(field1) <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span>#<span class="hljs-keyword">table</span>中 field1 字段有多少个<br><br>例：统计上海（<span class="hljs-number">021</span>）的会员数量<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> city<span class="hljs-operator">=</span><span class="hljs-number">021</span><br></code></pre></td></tr></table></figure><h6 id="sum-求和-—-avg-求平均值—-max-min-最大值与最小值"><a href="#sum-求和-—-avg-求平均值—-max-min-最大值与最小值" class="headerlink" title="sum-求和 —-avg-求平均值—-max,min-最大值与最小值"></a>sum-求和 —-avg-求平均值—-max,min-最大值与最小值</h6><p>sum对某个列进行求和，count是统计有多少条记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(field) <span class="hljs-keyword">from</span> tables<br><br>例：统计上海会员money总额<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(money) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> city<span class="hljs-operator">=</span><span class="hljs-number">021</span><br><br>统计北京会员的age总和<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(age) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> city<span class="hljs-operator">=</span><span class="hljs-number">010</span><br><br>将<span class="hljs-built_in">sum</span>(age)替换成<span class="hljs-built_in">avg</span>(age)就可以了，其他同理<br></code></pre></td></tr></table></figure><h6 id="group-by-分组统计"><a href="#group-by-分组统计" class="headerlink" title="group by 分组统计"></a>group by 分组统计</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> func <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> field<br><br>例：<br>查询各个城市最有钱的<br><span class="hljs-keyword">select</span> max(<span class="hljs-type">money</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> city<br><br>统计各个城市的会员数量<br><span class="hljs-keyword">select</span> count(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> city<br><br><br>在count（<span class="hljs-number">1</span>）前加上city就可以分辨出是哪个城市有多少人<br><span class="hljs-keyword">select</span> city,count(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> city<br></code></pre></td></tr></table></figure><h6 id="sqlalchemy中如何查询"><a href="#sqlalchemy中如何查询" class="headerlink" title="sqlalchemy中如何查询"></a>sqlalchemy中如何查询</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># -*- coding=utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> select_sqlalchemy import session, Users<br><span class="hljs-keyword">from</span> sqlalchemy import func<br><br><br><span class="hljs-comment"># count方法不能用于分组统计</span><br><span class="hljs-comment"># res = session.query(Users).count()</span><br><br><span class="hljs-comment"># 使用func</span><br><span class="hljs-comment"># count</span><br>res = session.query(func.count(1),Users.city).group_by(Users.city).all()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;count:&quot;</span>,res)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;*&quot;</span><span class="hljs-number">*100</span>)<br><span class="hljs-comment"># avg</span><br>res = session.query(func.avg(Users.age),Users.city).group_by(Users.city).all()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;avg:&quot;</span>, res)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;*&quot;</span><span class="hljs-number">*100</span>)<br><br><span class="hljs-comment"># sum</span><br>res = session.query(func.sum(Users.age),Users.city).group_by(Users.city).all()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;sum:&quot;</span>, res)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;*&quot;</span><span class="hljs-number">*100</span>)<br><br><span class="hljs-comment">#max</span><br>res = session.query(func.max(Users.age),Users.city).group_by(Users.city).all()<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;max:&quot;</span>,res)<br></code></pre></td></tr></table></figure><h6 id="having-对查询结果过滤"><a href="#having-对查询结果过滤" class="headerlink" title="having 对查询结果过滤"></a>having 对查询结果过滤</h6><p>where 条件语句是对field字段的值进行过滤查询，有时候我们需要对查询结果字段进行过滤，比如count的结果中大于某个值进行过滤，这时候需要having。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> count(*) <span class="hljs-keyword">as</span> num <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> field <span class="hljs-keyword">having</span> num&gt;<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h6 id="order-by-排序"><a href="#order-by-排序" class="headerlink" title="order by  排序"></a>order by  排序</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">根据字段值排序<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> field <span class="hljs-keyword">desc</span>|<span class="hljs-keyword">asc</span><br><span class="hljs-keyword">desc</span>:降序<br><span class="hljs-keyword">asc</span>:升序<br><br>例：<br>根据用户ID降序排列<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span> oeder <span class="hljs-keyword">by</span> user_id <span class="hljs-keyword">desc</span><br><br>根据用户ID升序排列<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span> oeder <span class="hljs-keyword">by</span> user_id <span class="hljs-keyword">asc</span><br></code></pre></td></tr></table></figure><h6 id="sqlalchemy中如何查询-1"><a href="#sqlalchemy中如何查询-1" class="headerlink" title="sqlalchemy中如何查询"></a>sqlalchemy中如何查询</h6><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"># -*- coding=utf-<span class="hljs-number">8</span> -*-<br><br>from select_sqlalchemy import session, Users<br>from sqlalchemy import func<br><br><br><br>res = session.query(Users,<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Users</span>.</span></span>user_id,<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Users</span>.</span></span>username, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Users</span>.</span></span>city)\<br>             .order<span class="hljs-constructor">_by(Users.<span class="hljs-params">user_id</span>.<span class="hljs-params">desc</span>()</span>).limit(<span class="hljs-number">10000</span>).offset(<span class="hljs-number">10</span>).all<span class="hljs-literal">()</span><br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> res:<br>    print(item)<br></code></pre></td></tr></table></figure><h6 id="翻页实现"><a href="#翻页实现" class="headerlink" title="翻页实现"></a>翻页实现</h6><ol><li>更具条件，使用count（）获得记录总数total</li><li>设定每页显示记录数pagesize</li><li>总页数计算公式：total_page=ceil(total/pagesize)</li><li>根据当前页数查询偏移：start = (current_page-1)*pagesize</li><li>使用limit获得相应的记录：limit start,pagesize</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># -*- coding=utf-8 -*-</span><br><br><span class="hljs-keyword">from</span> select_sqlalchemy import session, Users<br><span class="hljs-keyword">from</span> math import ceil<br><br><span class="hljs-comment"># 每页显示条数</span><br>PAGE_SIZE = 10<br><br><span class="hljs-comment"># 查询获得总条数</span><br>total = session.query(Users).count()<br><span class="hljs-builtin-name">print</span>(total)<br><br><span class="hljs-comment"># 根据总条数计算总页数</span><br>total_page = ceil(total/PAGE_SIZE)<br><span class="hljs-builtin-name">print</span>(total_page)<br><br><span class="hljs-comment"># 根据当前页计算start位置</span><br><span class="hljs-comment"># 第一页</span><br><span class="hljs-attribute">CURRENT_PAGE</span>=10<br><span class="hljs-comment"># limit start, offset</span><br><span class="hljs-comment"># 第一页是limit 0,10</span><br><span class="hljs-comment"># 因此计算方法为：</span><br>start = (CURRENT_PAGE-1)*PAGE_SIZE<br><br>res = session.query(Users).offset(start).limit(PAGE_SIZE).all()<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> res:<br>    <span class="hljs-builtin-name">print</span>(item.user_id, item.username)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql-update与delete语句</title>
    <link href="/2021/04/06/mysql-update%E4%B8%8Edelete%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/04/06/mysql-update%E4%B8%8Edelete%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h6 id="delete语句"><a href="#delete语句" class="headerlink" title="delete语句"></a>delete语句</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">#将符合<span class="hljs-keyword">condition</span>的记录删除<br><br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">condition</span><br><br>例：<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users limit <span class="hljs-number">10</span>  #删除<span class="hljs-number">10</span>条会员记录<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">&gt;</span><span class="hljs-number">10</span> <span class="hljs-keyword">and</span> id<span class="hljs-operator">&lt;</span><span class="hljs-number">15</span>#删除id为<span class="hljs-number">10</span><span class="hljs-operator">~</span><span class="hljs-number">15</span>的记录<br></code></pre></td></tr></table></figure><h6 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#update用于更新数据表的记录</span><br><br>update table <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">field1</span>=new_val1,field2=new_val2 where condition<br><br>例：将<span class="hljs-attribute">ID</span>=3的会员名改为笑哈哈，性别改为女。<br>update<span class="hljs-built_in"> users </span><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">username</span>=<span class="hljs-string">&quot;笑哈哈&quot;</span>，sex=&quot;女&quot; where <span class="hljs-attribute">user_id</span>=3<br></code></pre></td></tr></table></figure><h6 id="delete-–-mysql实例"><a href="#delete-–-mysql实例" class="headerlink" title="delete – mysql实例"></a>delete – mysql实例</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> mysql.connector <span class="hljs-keyword">as</span> connector<br><br>cnx = connector.<span class="hljs-keyword">connect</span>(<span class="hljs-keyword">user</span>=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                        <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;tbz1548638666&#x27;</span>,<br>                        host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                        <span class="hljs-keyword">database</span>=<span class="hljs-string">&#x27;mydb&#x27;</span>)<br><br><span class="hljs-keyword">cursor</span> = cnx.<span class="hljs-keyword">cursor</span>()<br><br><span class="hljs-keyword">sql</span> = &quot;delete from users where realname like &#x27;%啦%&#x27;&quot;<br><span class="hljs-keyword">cursor</span>.<span class="hljs-keyword">execute</span>(<span class="hljs-keyword">sql</span>)<br>cnx.<span class="hljs-keyword">commit</span>()        #这句不能少<br>res = <span class="hljs-keyword">cursor</span>.rowcount<br>print(res)<br><br><span class="hljs-keyword">cursor</span>.<span class="hljs-keyword">close</span>()<br>cnx.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure><h6 id="delete-–-sqlalcheny实例"><a href="#delete-–-sqlalcheny实例" class="headerlink" title="delete – sqlalcheny实例"></a>delete – sqlalcheny实例</h6><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta"># 需要安装SQLAlchemy，pymysql模块</span><br><br><span class="hljs-title">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine, Column, Integer, String, Enum<br><span class="hljs-title">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> sessionmaker<br><span class="hljs-title">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base<br><br><span class="hljs-meta"># 创建数据库引擎</span><br><span class="hljs-title">engine</span> = create_engine(<span class="hljs-string">&quot;mysql+pymysql://root:tbz1548638666@localhost/mydb&quot;</span>)<br><br><span class="hljs-meta">#创建会话对象，根据不同数据库引擎创建对应的会话对象</span><br><span class="hljs-type">Session</span> = sessionmaker(bind=engine)<br><br><span class="hljs-meta">#创建会话对象实例</span><br><span class="hljs-title">session</span> = <span class="hljs-type">Session</span>()<br><br><span class="hljs-meta">#Base为映射基类</span><br><span class="hljs-type">Base</span> = declarative_base()<br><br><span class="hljs-meta">#数据表模型</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Users</span>(<span class="hljs-type">Base</span>):</span><br><span class="hljs-class">    __tablename__ = &quot;users&quot;</span><br><span class="hljs-class">    user_id = <span class="hljs-type">Column</span>(<span class="hljs-type">Integer</span>, <span class="hljs-title">primary_key</span>=<span class="hljs-type">True</span>)</span><br><span class="hljs-class">    username = <span class="hljs-type">Column</span>(<span class="hljs-type">String(25)</span>)</span><br><span class="hljs-class">    realname = <span class="hljs-type">Column</span>(<span class="hljs-type">String(25)</span>)</span><br><span class="hljs-class">    password = <span class="hljs-type">Column</span>(<span class="hljs-type">String(64)</span>)</span><br><span class="hljs-class"></span><br><span class="hljs-class"></span><br><span class="hljs-class">#以上都是准备</span><br><span class="hljs-class">#下面才是重点，删除的重点</span><br><span class="hljs-class"></span><br><span class="hljs-class">#获取用户</span><br><span class="hljs-class">def getUsers():</span><br><span class="hljs-class">objs = session.query(<span class="hljs-type">Users</span>).filter(<span class="hljs-type">Users</span>.<span class="hljs-title">user_id</span> &gt;= 2, <span class="hljs-type">Users</span>.<span class="hljs-title">user_id</span> &lt;= 8).all()</span><br><span class="hljs-class">return objs</span><br><span class="hljs-class"></span><br><span class="hljs-class">#删除得到的数据中的第一条</span><br><span class="hljs-class">session.delete(<span class="hljs-title">getUsers</span>()[0])</span><br><span class="hljs-class">session.commit()</span><br><span class="hljs-class"></span><br><span class="hljs-class">#修改数据</span><br><span class="hljs-class">#getUsers()[0].username=&quot;欢天喜地一家人&quot;#修改第一条数据，getUsers()[0] 是一个对象，修改前先找到对象</span><br><span class="hljs-class">#session.commit()</span><br></code></pre></td></tr></table></figure><h6 id="update-mysql-实例"><a href="#update-mysql-实例" class="headerlink" title="update - mysql 实例"></a>update - mysql 实例</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.connector <span class="hljs-keyword">as</span> connector<br><br>cnx = connector.connect(user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                        password=<span class="hljs-string">&#x27;tbz1548638666&#x27;</span>,<br>                        host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                        database=<span class="hljs-string">&#x27;mydb&#x27;</span>)<br><br>cursor = cnx.cursor()<br><br><span class="hljs-comment">#查询函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getUser</span>(<span class="hljs-params">user_id</span>):</span><br>    <span class="hljs-comment"># user_id = user_id</span><br>    sql = (<span class="hljs-string">&quot;select * from users where user_id=&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(user_id))<br>    cursor.execute(sql)<br>    res = cursor.fetchone()<br>    print(res)<br><br><span class="hljs-comment">#修改函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">updateUser</span>(<span class="hljs-params">user_id</span>):</span><br>    sql1 = <span class="hljs-string">&quot;update users set sex=&#x27;女&#x27; where user_id=&#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(user_id)<br>    <span class="hljs-keyword">try</span>:<br>        cursor.execute(sql1)<br>        cnx.commit()<br>        print(<span class="hljs-string">&quot;修改成功&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        cnx.rollback()<br>        print(<span class="hljs-string">&quot;修改失败:&quot;</span>,e)<br><br><br>userid = <span class="hljs-number">2</span><span class="hljs-comment">#修改id为2的用户信息</span><br>getUser(userid) <span class="hljs-comment">#修改前</span><br>updateUser(userid)<span class="hljs-comment">#修改</span><br>getUser(userid)<span class="hljs-comment">#修改后</span><br><br><span class="hljs-comment">#关闭连接资源</span><br>cursor.close()<br>cnx.close()<br></code></pre></td></tr></table></figure><h6 id="update-sqlalchemy实例"><a href="#update-sqlalchemy实例" class="headerlink" title="update - sqlalchemy实例"></a>update - sqlalchemy实例</h6><p>在delete – sqlalcheny实例的最后</p><h6 id="锁的概念（行锁）"><a href="#锁的概念（行锁）" class="headerlink" title="锁的概念（行锁）"></a>锁的概念（行锁）</h6><p>通常情况下，update的时候，innodb引擎会给这一行加锁，mysql会自动加锁</p><p>例：当多人同时修改一个数据时，如何只保留第一个人修改的内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">update<span class="hljs-built_in"> users </span><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">age</span>=10 where <span class="hljs-attribute">user_id</span>=2 <span class="hljs-keyword">and</span> age is <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>当age为空时可以修改，当age不为空时，不可修改，这个方法可以用作抽奖。</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql-查询语句</title>
    <link href="/2021/04/05/mysql-%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    <url>/2021/04/05/mysql-%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h4><h6 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h6><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span> <span class="hljs-number">10</span> * <span class="hljs-number">10</span>#计算<span class="hljs-number">10</span>*<span class="hljs-number">10</span><br><span class="hljs-attribute">select</span> <span class="hljs-number">10</span> * <span class="hljs-number">10</span> as num   #num=<span class="hljs-number">10</span>*<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h6 id="从表中检索数据"><a href="#从表中检索数据" class="headerlink" title="从表中检索数据"></a>从表中检索数据</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">检索所有字段：<br>select * from table<br><br>检索特定字段：<br>select field1, field2, field3 from table<br><br>select &#96;field1&#96; as un, &#96;field2&#96; as rn from table#将字段重命名，便于引用<br></code></pre></td></tr></table></figure><h6 id="where条件查询语句"><a href="#where条件查询语句" class="headerlink" title="where条件查询语句"></a>where条件查询语句</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from table where condition<br><br>&#x3D; , &gt; , &lt; , &gt;&#x3D; , &lt;&#x3D;<br>&lt;&gt; , !&#x3D;  #这两个都是不等于<br>&lt;&#x3D;&gt;      #null相等<br>is null#是NULL值<br>is not null#不是NULL值<br><br>例：<br>select * from users where user_id&gt;100;<br>select * from users where user_id&lt;&gt;100;<br><br></code></pre></td></tr></table></figure><h6 id="between-区间查询"><a href="#between-区间查询" class="headerlink" title="between-区间查询"></a>between-区间查询</h6><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> table <span class="hljs-keyword">where</span> field <span class="hljs-keyword">between</span> <span class="hljs-built_in">min</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">max</span>;<br><br>例：<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> age <span class="hljs-keyword">between</span> <span class="hljs-number">18</span> <span class="hljs-keyword">and</span> <span class="hljs-number">25</span>;<br></code></pre></td></tr></table></figure><h6 id="in-存在于指定集合"><a href="#in-存在于指定集合" class="headerlink" title="in -存在于指定集合"></a>in -存在于指定集合</h6><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-function"><span class="hljs-keyword">from</span> table <span class="hljs-keyword">where</span> field <span class="hljs-title">in</span> (<span class="hljs-params">x,y,z</span>)</span>;<br><br>例：<br><span class="hljs-keyword">select</span> * <span class="hljs-function"><span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_id <span class="hljs-title">in</span> (<span class="hljs-params"><span class="hljs-number">2</span>,<span class="hljs-number">4</span></span>)</span>;<br></code></pre></td></tr></table></figure><p>模糊查询</p><h6 id="like-通配符-匹配"><a href="#like-通配符-匹配" class="headerlink" title="like -通配符%匹配"></a>like -通配符%匹配</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">%表示任意一个字符，_表示一个字符<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> field <span class="hljs-keyword">like</span> &quot;%博%&quot;;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> &quot;%博%&quot;;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> &quot;_博%&quot;;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> username <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> &quot;_博%&quot;;<br></code></pre></td></tr></table></figure><h6 id="regexp-正则匹配"><a href="#regexp-正则匹配" class="headerlink" title="regexp - 正则匹配"></a>regexp - 正则匹配</h6><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">a-z</span>]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125; <span class="hljs-meta">#3个字母</span><br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> username regexp <span class="hljs-string">&quot;[a-z]+x&quot;</span><br></code></pre></td></tr></table></figure><h6 id="组合查询（and-，or）"><a href="#组合查询（and-，or）" class="headerlink" title="组合查询（and ，or）"></a>组合查询（and ，or）</h6><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> (username <span class="hljs-keyword">like</span> <span class="hljs-string">&quot;%博%&quot;</span>) and (user_id&gt;<span class="hljs-number">3</span>);<br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> (age&lt;<span class="hljs-number">18</span>) or (age&gt;<span class="hljs-number">60</span>)<br></code></pre></td></tr></table></figure><h4 id="查询实例"><a href="#查询实例" class="headerlink" title="查询实例"></a>查询实例</h4><h6 id="python中查询实例"><a href="#python中查询实例" class="headerlink" title="python中查询实例"></a>python中查询实例</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.connector <span class="hljs-keyword">as</span> connector<br><br><span class="hljs-comment">#连接数据库</span><br>cnx = connector.connect(user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                        password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>                        host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                        database=<span class="hljs-string">&#x27;mydb&#x27;</span>)<br><br><span class="hljs-comment">#创建游标对象</span><br>cursor = cnx.cursor()<br><br><span class="hljs-comment">#sql语句</span><br>sql = <span class="hljs-string">&quot;select * from mydb.users where realname like &#x27;%博%&#x27;&quot;</span><br><br><span class="hljs-comment">#将sql语句提交并执行</span><br>cursor.execute(sql)<br><br><span class="hljs-comment">#查询到的第一条结果</span><br>res = cursor.fetchone()<br>print(<span class="hljs-string">&quot;第一条&quot;</span>)<br>print(res)<br><br><span class="hljs-comment">#将查询到的前3条记录返回，括号里是几就返回几条</span><br><span class="hljs-comment"># res1 = cursor.fetchmany(3)</span><br><span class="hljs-comment"># print(&quot;前3条&quot;)</span><br><span class="hljs-comment"># print(res1)</span><br><br><span class="hljs-comment">#查询并返回所有记录</span><br><span class="hljs-comment"># res_all = cursor.fetchall()</span><br><span class="hljs-comment"># print(&quot;所有记录&quot;)</span><br><span class="hljs-comment"># print(res_all)</span><br></code></pre></td></tr></table></figure><h6 id="SQLAlchemy-查询实例"><a href="#SQLAlchemy-查询实例" class="headerlink" title="SQLAlchemy-查询实例"></a>SQLAlchemy-查询实例</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 需要安装SQLAlchemy，pymysql模块<br><br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine, <span class="hljs-keyword">Column</span>, <span class="hljs-type">Integer</span>, String, Enum<br><span class="hljs-keyword">from</span> sqlalchemy.orm <span class="hljs-keyword">import</span> sessionmaker<br><span class="hljs-keyword">from</span> sqlalchemy.ext.declarative <span class="hljs-keyword">import</span> declarative_base<br><br># 创建数据库引擎<br>engine = create_engine(&quot;mysql+pymysql://root:tbz1548638666@localhost/mydb&quot;)<br><br>#创建会话对象，根据不同数据库引擎创建对应的会话对象<br><span class="hljs-keyword">Session</span> = sessionmaker(bind=engine)<br><br>#创建会话对象实例<br><span class="hljs-keyword">session</span> = <span class="hljs-keyword">Session</span>()<br><br><span class="hljs-meta">#Base为映射基类</span><br>Base = declarative_base()<br><br>#数据表模型<br><span class="hljs-keyword">class</span> Users(Base):<br>    __tablename__ = &quot;users&quot;<br>    user_id = <span class="hljs-keyword">Column</span>(<span class="hljs-type">Integer</span>, primary_key=<span class="hljs-keyword">True</span>)<br>    username = <span class="hljs-keyword">Column</span>(String(<span class="hljs-number">25</span>))<br>    realname = <span class="hljs-keyword">Column</span>(String(<span class="hljs-number">25</span>))<br>    <span class="hljs-keyword">password</span> = <span class="hljs-keyword">Column</span>(String(<span class="hljs-number">64</span>))<br><br><br>#查询<br>res = <span class="hljs-keyword">session</span>.query(Users, Users.realname).<span class="hljs-keyword">filter</span>(Users.realname.<span class="hljs-keyword">like</span>(&quot;%啦%&quot;)).<span class="hljs-keyword">limit</span>(<span class="hljs-number">3</span>).<span class="hljs-keyword">all</span>()<br><br>print(res)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql-插入语句insert与SQLAlchemy原理</title>
    <link href="/2021/04/04/mysql-%E6%8F%92%E5%85%A5%E8%AF%AD%E5%8F%A5insert%E4%B8%8ESQLAlchemy%E5%8E%9F%E7%90%86/"/>
    <url>/2021/04/04/mysql-%E6%8F%92%E5%85%A5%E8%AF%AD%E5%8F%A5insert%E4%B8%8ESQLAlchemy%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h6 id="插入语句（DML）"><a href="#插入语句（DML）" class="headerlink" title="插入语句（DML）"></a>插入语句（DML）</h6><ol><li><p>第一种写法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> (field1,field2,field3 ......)<br><span class="hljs-keyword">values</span>(val1,val2,val3 .....)<br><br>注：<span class="hljs-keyword">table</span>是表名，field是字段名，<span class="hljs-keyword">values</span>是值，插入值的时候字符串要加引号<br>不用列出所有字段，只需要列出需要赋值的字段，赋上相应的值就行，没有列出的字段使用默认值<br></code></pre></td></tr></table></figure></li><li><p>第二种写法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span><br><span class="hljs-keyword">values</span> (val1,val2,val3 ......)<br><br>注：值与字段数量必须匹配，且一一对应。<br></code></pre></td></tr></table></figure></li><li><p>第三种写法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">insert into table <span class="hljs-builtin-name">set</span> <span class="hljs-attribute">field1</span>=val1 , <span class="hljs-attribute">field2</span>=val2 <span class="hljs-built_in">..</span>.<br><br>注：字段名与值一一对应写出来，不容易写错，明了。<br></code></pre></td></tr></table></figure></li></ol><h6 id="mysql连接服务器"><a href="#mysql连接服务器" class="headerlink" title="mysql连接服务器"></a>mysql连接服务器</h6><p>安装连接器</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> mysql-connector-python<br></code></pre></td></tr></table></figure><p>通过mysql驱动连接数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.connector<span class="hljs-comment">#导入模块</span><br><br><span class="hljs-comment">#连接数据库,其中user，passWord，host，database分别代表的是数据库的用户名，密码，IP，数据库名。</span><br>cnx = mysql.connector.connector(user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                               password=<span class="hljs-string">&#x27;123456&#x27;</span>,<br>                               host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                               database=<span class="hljs-string">&#x27;mydb&#x27;</span>)<br></code></pre></td></tr></table></figure><p>创建游标对象cursor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">cursor = cnx.cursor()<br><br><span class="hljs-comment">#通过cursor对象执行SQL语句</span><br><span class="hljs-comment">#比如： </span><br>cursor.execute()<span class="hljs-comment">#执行sql语句</span><br>cursor.fetchall()<span class="hljs-comment">#执行查询</span><br><br>cnx.commit()<span class="hljs-comment">#事务提交</span><br>cnx.rollback()<span class="hljs-comment">#事务回滚</span><br><br>cursor.close()<span class="hljs-comment">#关闭游标，重置所有结果</span><br><br>cnx.close()<span class="hljs-comment">#释放连接资源</span><br></code></pre></td></tr></table></figure><p>事务</p><p>事务通常是需要执行一组sql语句</p><p>innodb是一个事务型的存储引擎</p><p>事务特性（ACID）</p><p>A ：atomicity  – 原子性，操作不可分割</p><p>C ：consistency   – 一致性，操作前后数据的完整性保持一致</p><p>I：isolation  – 隔离性，不同事务之间不影响</p><p>D：durability  – 持久性，事务执行后，对数据的更改是永久保存的</p><h6 id="python创建数据表"><a href="#python创建数据表" class="headerlink" title="python创建数据表"></a>python创建数据表</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.connector <span class="hljs-keyword">as</span> connector<br><br>cnx = connector.connect(user=<span class="hljs-string">&#x27;root&#x27;</span>,<br>                                password=<span class="hljs-string">&#x27;tbz1548638666&#x27;</span>,<br>                                host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>                                database=<span class="hljs-string">&#x27;mydb&#x27;</span>)<br><br>cursor = cnx.cursor()<br><br>sql = <span class="hljs-string">&quot;create table books(&quot;</span>\<br>      <span class="hljs-string">&quot;`book_id` int not null,&quot;</span>\<br>      <span class="hljs-string">&quot;`book_name` char(25) not null,&quot;</span>\<br>      <span class="hljs-string">&quot;`book_autor` char(25) not null,&quot;</span>\<br>      <span class="hljs-string">&quot;`book_pubdate` datetime not null,&quot;</span>\<br>      <span class="hljs-string">&quot;primary key (`book_id`) )&quot;</span><br><span class="hljs-keyword">try</span>:<br>    cursor.execute(sql)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    print(sql)<br>    print(e)<br><span class="hljs-keyword">else</span>:<br>    print(<span class="hljs-string">&quot;数据表创建成功&quot;</span>)<br><br>cursor.close()<br>cnx.close()<br></code></pre></td></tr></table></figure><h6 id="执行插入"><a href="#执行插入" class="headerlink" title="执行插入"></a>执行插入</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> mysql.conmector <span class="hljs-keyword">as</span> connector<br>sql = <span class="hljs-string">&quot;INSERT INTO</span><br><span class="hljs-string">`mydb`.`users`&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql创建数据表</title>
    <link href="/2021/04/01/mysql%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E8%A1%A8/"/>
    <url>/2021/04/01/mysql%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h6 id="存储引擎（mysql）"><a href="#存储引擎（mysql）" class="headerlink" title="存储引擎（mysql）"></a>存储引擎（mysql）</h6><ul><li><strong>innodb引擎</strong>：mysql默认的引擎，支持事务，行锁（大多数情况下）</li><li><strong>myisam引擎</strong>：早期默认的引擎，查询速度快，不支持事务，只能锁表（经常读，写入少）</li><li><strong>memory引擎</strong>：内存引擎，用于需要快速访问的临时数据（临时性数据，需要快速读取写入，不常用）</li></ul><h6 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h6><p>不同的编码方式占用不同的字节，utf-8中文占用3个字节。</p><p>如果程序与数据库的编码不一致，可能导致乱码</p><p><strong>大多数情况下，网页，程序，数据库都选用utf-8，以保持一致</strong></p><h6 id="DDL建表语句"><a href="#DDL建表语句" class="headerlink" title="DDL建表语句"></a>DDL建表语句</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#建表格式<br>create table tablename(<br>fieldname1 filedtype constrains,<br>    fieldname1 filedtype constrains,<br> #   字段名      字段类型    约束，<br>    ............,<br>    primary key ( &#96;key_field&#96;)<br>);<br><br><br>#修改数据表<br>增加字段：<br>alter table &#96;table名&#96;<br>add column &#96;filedname&#96; fieldtype constrains;<br><br>add column &#96;filedname&#96; fieldtype constrains after &#96;username&#96;;#将此字段增加到username之后<br><br>删除字段：<br>alter table &#96;table名&#96;<br>drop column &#96;filed&#96;;<br></code></pre></td></tr></table></figure><p>字段类型：<a href="https://blog.csdn.net/weixin_31534091/article/details/113608053?utm_source=app&amp;app_version=4.5.5%EF%BC%88%E6%9D%A5%E8%87%AACSDN%E7%94%A8%E6%88%B7%EF%BC%89">https://blog.csdn.net/weixin_31534091/article/details/113608053?utm_source=app&amp;app_version=4.5.5（来自CSDN用户）</a></p><p>创建一个用户数据表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table users(<br>&#96;user_id&#96; int not null,<br>    &#96;username&#96; char(25) not null,<br>    &#96;realname&#96; char(25) not null,<br>    &#96;password&#96; char(64) not null,<br>    &#96;register_date&#96; datetime not null,<br>    primary key(&#96;user_id&#96;)<br>);<br></code></pre></td></tr></table></figure><h6 id="图形化管理工具（mysql-workbench）"><a href="#图形化管理工具（mysql-workbench）" class="headerlink" title="图形化管理工具（mysql workbench）"></a>图形化管理工具（mysql workbench）</h6><p>建表的可视化，可视化建表</p><p>下载mysql workbench并安装（在mysql下载页面可以找到它）</p><p>安装与使用教程：<a href="https://blog.csdn.net/zs1342084776/article/details/88701261?utm_source=app&amp;app_version=4.5.5%EF%BC%88%E8%BD%AC%E8%87%AACSDN%E7%94%A8%E6%88%B7%EF%BC%89">https://blog.csdn.net/zs1342084776/article/details/88701261?utm_source=app&amp;app_version=4.5.5（转自CSDN用户）</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">pk</span><span class="hljs-params">(主键)</span></span><br><span class="hljs-function"><span class="hljs-title">nn</span><span class="hljs-params">(不能为NULL)</span></span><br><span class="hljs-function"><span class="hljs-title">UQ</span><span class="hljs-params">(不能重复)</span></span><br>B或BIN()<br>UN<br>ZF<br><span class="hljs-function"><span class="hljs-title">AI</span><span class="hljs-params">(自增长，每插入一个数据，ID会增加)</span></span><br>G<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql安装与入门</title>
    <link href="/2021/03/31/mysql%E5%AE%89%E8%A3%85%E4%B8%8E%E5%85%A5%E9%97%A8/"/>
    <url>/2021/03/31/mysql%E5%AE%89%E8%A3%85%E4%B8%8E%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>MySQL与MariaDB可以互相替代，有一些兼容性问题</p><h3 id="MySQL下载与安装（windows）"><a href="#MySQL下载与安装（windows）" class="headerlink" title="MySQL下载与安装（windows）"></a>MySQL下载与安装（windows）</h3><ol><li>打开<a href="http://www.mysql.com网页,进行下载相关版本,选择zip/">www.mysql.com网页，进行下载相关版本,选择ZIP</a> Archive下载</li><li>将下载好的文件解压缩</li><li>打开文件夹bin目录，其中MySQL.exe 是 运行MySQL客户端，mysqld.exe是 运行mysql服务器</li></ol><p>运行mysql</p><ol><li><p>初始化数据库date目录</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">打开cmd进入到bin目录执行以下命令<br>initialize是初始化，<span class="hljs-built_in">console</span>是显示输出，用于查看初始密码（这两个不能少）<br><br>mysqld.exe --initialize --<span class="hljs-built_in">console</span><br><br>得到root@localhost:后面跟的密码（记住这个密码）<br></code></pre></td></tr></table></figure></li><li><p>运行服务器</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">mysqld.exe <span class="hljs-comment">--console</span><br></code></pre></td></tr></table></figure></li><li><p>连接mysql服务器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql<span class="hljs-selector-class">.exe</span> -u root -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><p>然后输入上面的密码，显示mysql &gt;就连接成功了</p><p>修改密码：在mysql&gt;后边输入：alter user user() identified by ‘123456’;  #123456就是密码</p></li><li><p>将mysql安装成服务（在bin目录下执行以下命令）（必须在管理员身份运行cmd）</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmake">mysqld.exe <span class="hljs-keyword">install</span><span class="hljs-comment">#安装服务</span><br><br>mysqld.exe --<span class="hljs-keyword">remove</span> mysql<span class="hljs-comment">#卸载服务（需要卸载时运行它）</span><br></code></pre></td></tr></table></figure><p>   在windows开始处搜索 服务 ，打开服务，找到mysql点击以下，选择启动服务。</p></li><li><p>配置文件</p><p>在mysql安装目录下创建my.ini文件，内容如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[client]</span><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">default-character-set</span>=utf8<br><br><span class="hljs-section">[mysqld]</span><br><br><span class="hljs-comment">#设置自己mysql的安装目录</span><br><span class="hljs-comment">#basedir=D:\mysql-5.7.28-winx64</span><br><span class="hljs-attr">basedir</span>=C:\Users\<span class="hljs-number">15486</span>\c-exe\mysql\mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">28</span>-winx64<br><br><span class="hljs-comment">#设置为mysql的数据目录（date就是数据目录）</span><br><span class="hljs-comment">#datadir=D:\mysql-5.7.28-winx64\data</span><br><span class="hljs-attr">datadir</span>=C:\Users\<span class="hljs-number">15486</span>\c-exe\mysql\mysql-<span class="hljs-number">5.7</span>.<span class="hljs-number">28</span>-winx64\data<br><br><span class="hljs-attr">port</span>=<span class="hljs-number">3306</span><br><span class="hljs-attr">character_set_server</span>=utf8<br><br><span class="hljs-comment">#服务器接收的数据包大小限制</span><br><span class="hljs-attr">max_allowed_packet</span>=<span class="hljs-number">8</span>M<br></code></pre></td></tr></table></figure></li></ol><h3 id="sql语句入门"><a href="#sql语句入门" class="headerlink" title="sql语句入门"></a>sql语句入门</h3><h6 id="SQL组成–DDL"><a href="#SQL组成–DDL" class="headerlink" title="SQL组成–DDL"></a>SQL组成–DDL</h6><p>​    数据定义语言，通过这些语句来创建数据库，数据表，字段，主键，索引等等，包含：create、drop、alter等</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">create</span> database dbname；<span class="hljs-meta">#创建数据库，dbname为数据库名</span><br><span class="hljs-keyword">show</span> databases；<span class="hljs-meta">#查看有哪些数据库</span><br><span class="hljs-keyword">use</span> dbname；<span class="hljs-meta">#选择数据库</span><br><span class="hljs-keyword">show</span> tables；<span class="hljs-meta">#查看数据表</span><br><span class="hljs-keyword">show</span> fields from users;<span class="hljs-meta">#查看数据表明细（users是数据表名）</span><br><span class="hljs-built_in">drop</span> database dbname；<span class="hljs-meta">#删除数据库</span><br><br><br><br>tips：每个语句后面记得加封号（；），不然会报错<br></code></pre></td></tr></table></figure><h6 id="SQL组成–DML"><a href="#SQL组成–DML" class="headerlink" title="SQL组成–DML"></a>SQL组成–DML</h6><p>​    数据库操作语言，通过这些语句来插入，更新，删除数据，包含： insert、update、delete等</p><h6 id="SQL组成–DQL"><a href="#SQL组成–DQL" class="headerlink" title="SQL组成–DQL"></a>SQL组成–DQL</h6><p>​    数据库查询语言，通过这些语句检索数据，包含： select、order by、group by等</p><h6 id="SQL组成–DCL"><a href="#SQL组成–DCL" class="headerlink" title="SQL组成–DCL"></a>SQL组成–DCL</h6><p>​    数据库控制语言，通过这些语句控制数据访问权限，包含：grant等</p>]]></content>
    
    
    <categories>
      
      <category>服务器运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask-一对多关系</title>
    <link href="/2021/03/24/Flask-%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB/"/>
    <url>/2021/03/24/Flask-%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h4 id="分类管理"><a href="#分类管理" class="headerlink" title="分类管理"></a>分类管理</h4><ol><li>创建分类模型（M）</li><li>创建分类模板（V）</li><li>创建分类视图（C）</li></ol><h6 id="分类模型"><a href="#分类模型" class="headerlink" title="分类模型"></a>分类模型</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span>(<span class="hljs-params">db.Model</span>):</span><br>    cate_id = db.Column(db.Integer, primary_key=<span class="hljs-literal">True</span>)<br>    cate_name = db.Column(db.String, unique=<span class="hljs-literal">True</span>)             <span class="hljs-comment">#unique=True 表示此字段不能重复</span><br>    cate_order = db.Column(db.Integer, default=<span class="hljs-number">0</span>)             <span class="hljs-comment">#排序</span><br></code></pre></td></tr></table></figure><h6 id="分类模板"><a href="#分类模板" class="headerlink" title="分类模板"></a>分类模板</h6><p>添加增删改查的模板</p><h6 id="分类视图"><a href="#分类视图" class="headerlink" title="分类视图"></a>分类视图</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 分类视图部分</span><br><span class="hljs-comment"># 添加分类</span><br><span class="hljs-meta">@article_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/add_cate&quot;</span>, methods=[<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addCate</span>():</span><br>    message = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        cate_name = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        cate_order    = request.form[<span class="hljs-string">&#x27;order&#x27;</span>]<br>        category = Category(<br>                    cate_name=cate_name,<br>                    cate_order=cate_order,<br>         )<br>        <span class="hljs-keyword">try</span>:<br>            db.session.add(category)<br>            db.session.commit()<br>            message = cate_name+<span class="hljs-string">&quot;添加成功&quot;</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            message = <span class="hljs-string">&quot;发生了错误:&quot;</span> + <span class="hljs-built_in">str</span>(e)<br>            <span class="hljs-comment"># 如果插入失败，进行回滚操作,就是撤销刚刚对数据库的操作</span><br>            db.session.rollback()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;category/add.html&quot;</span>, message=message)<br><br><br><span class="hljs-comment"># 获得分类列表</span><br><span class="hljs-meta">@article_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/cate_list&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cateList</span>():</span><br>    cates = Category.query.order_by(Category.cate_order.desc()).<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;category/list.html&quot;</span>, cates=cates )<br><br><br><span class="hljs-comment"># 删除分类</span><br><span class="hljs-meta">@article_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/cate_delete/&lt;int:cate_id&gt;&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deleteCate</span>(<span class="hljs-params">cate_id</span>):</span><br>    cate = Category.query.get(cate_id)<br>    db.session.delete(cate)<br>    db.session.commit()<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;.cateList&quot;</span>))<br><br><br><span class="hljs-comment"># 分类修改</span><br><span class="hljs-meta">@article_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/cate_edit/&lt;int:cate_id&gt;&quot;</span>, methods=[<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;post&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">editCate</span>(<span class="hljs-params">cate_id</span>):</span><br>    category = Category.query.get(cate_id)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        category.cate_name = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        category.cate_order = request.form[<span class="hljs-string">&#x27;order&#x27;</span>]<br>        db.session.commit()<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;.cateList&quot;</span>))<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;category/edit.html&quot;</span>, category=category)<br><br></code></pre></td></tr></table></figure><p>用上下文管理器使每个页面都执行下面这个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.context_processor</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getCatelist</span>():</span><br>    cates = Category.query.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span>&#123;<span class="hljs-string">&quot;cates&quot;</span>: cates&#125;<br></code></pre></td></tr></table></figure><h4 id="数据表关系"><a href="#数据表关系" class="headerlink" title="数据表关系"></a>数据表关系</h4><h6 id="模型关系"><a href="#模型关系" class="headerlink" title="模型关系"></a>模型关系</h6><p>我们已经建立了多个模型：用户模型，文章模型，分类模型。</p><p>我们该如何给他们建立起联系呢</p><p>联系：每个文章都有一个作者，每个文章都属于一个分类</p><h6 id="数据表的关系"><a href="#数据表的关系" class="headerlink" title="数据表的关系"></a>数据表的关系</h6><ul><li><p>主表：自己的主键或者唯一键是另一个表的外键</p></li><li><p>从表：自己的某一个字段值是另一个表的主键或者唯一键</p></li><li><p>外键：必须对应关联表中的主键或者具有唯一值得字段</p></li><li><p>关联关系</p><p>一对多关系：一个作者可以对应多条文章</p><p>多对一关系：多个文章属于一个作者</p></li></ul><h6 id="模型关系创建"><a href="#模型关系创建" class="headerlink" title="模型关系创建"></a>模型关系创建</h6><p>在从表定义外键： db.Foreignkey(“主表.主键名”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#例</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Article</span>(<span class="hljs-params">db.Model</span>):</span><br>    ......<br>    cate_id = db.Column(db.Integer,db.ForeignKey(<span class="hljs-string">&#x27;Category.cate_id&#x27;</span>))<br></code></pre></td></tr></table></figure><p>在主表中定义关系：db.relationship(“从表模型名”)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#例</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span>(<span class="hljs-params">db.Model</span>):</span><br>    ......<br>    articles = db.relationship(<span class="hljs-string">&quot;Article&quot;</span>)<br></code></pre></td></tr></table></figure><p>两个表关联后记得更新数据表</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span>. 创建迁移数据：flask <span class="hljs-built_in">db</span> migrate -m <span class="hljs-string">&quot;更新说明&quot;</span><br><span class="hljs-number">2</span>. 更新数据库：flask <span class="hljs-built_in">db</span> upgrade <br></code></pre></td></tr></table></figure><p>由于创建关系是，修改了字段，sqlite修改字段支持不在友好，需要修改一下app.py中的migrate对象。</p><p>在MySQL中就没有这个问题，不需要修改。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#修改migrate对象</span><br><span class="hljs-attr">migrate</span> = Migrate(app,db,render_as_batch=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>级联删除  还没有弄清楚</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask代码重构</title>
    <link href="/2021/03/21/Flask%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84/"/>
    <url>/2021/03/21/Flask%E4%BB%A3%E7%A0%81%E9%87%8D%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h4 id="本课目标"><a href="#本课目标" class="headerlink" title="本课目标"></a>本课目标</h4><p>​    重构代码</p><p>​    Blueprint类</p><p>​    增加发布文章功能</p><p>​    Flask-migrate扩展</p><h4 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h4><h6 id="文件分类："><a href="#文件分类：" class="headerlink" title="文件分类："></a>文件分类：</h6><p>​    扩展库–放置db对象一类的库对象</p><p>​    模型库–放置如User模型的代码</p><p>​    辅助库–放置开发辅助性工具</p><p>​    视图函数–放置视图函数定义</p><h6 id="扩展库文件："><a href="#扩展库文件：" class="headerlink" title="扩展库文件："></a>扩展库文件：</h6><p>​    创建libs.py文件（文件名可自定义）</p><p>​    在libs.py中创建db对象</p><p>​    导入SQLAlchemy模块   from flask_sqlalchemy import SQLAlchemy</p><p>​    实例化 db=SQLAlchemy()</p><p>​    当前实例化的时候，不用传入参数：app</p><p>​    可以在其他需要使用db对象的时候，从libs导入对象</p><p>​        举例：</p><p>​            在app.py中，导入db对象，对其进行初始化</p><p>​            init_app是SQLAlchemy扩展提供的一个接口方法</p><p>​            通过init_app可以在app初始化的时候。配置扩展的参数</p><p>​            通过init_app方法，将db对象绑定到app进行初始化，这样在APP中定义的数据库参数就可以被db接收</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">from libs import <span class="hljs-keyword">db</span><br><span class="hljs-keyword">db</span>.init_app(<span class="hljs-keyword">app</span>)<br></code></pre></td></tr></table></figure><h6 id="模型库"><a href="#模型库" class="headerlink" title="模型库"></a>模型库</h6><p>​    新增一个models.py文件，用来存放模型类代码。</p><p>​        创建models.py文件，并在其中创建User模型</p><p>​        模型文件需要导入libs中的db对象</p><h6 id="辅助库"><a href="#辅助库" class="headerlink" title="辅助库"></a>辅助库</h6><p>​    新增一个utils.py文件，专门用来存放工具类代码</p><p>​        创建utils.py文件</p><p>​        将批量创建用户函数迁移到该文件中</p><h6 id="视图函数库"><a href="#视图函数库" class="headerlink" title="视图函数库"></a>视图函数库</h6><p>​    创建view文件夹，并在下面创建article，users，admin等py文件</p><h6 id="Blueprint对象（蓝本对象）"><a href="#Blueprint对象（蓝本对象）" class="headerlink" title="Blueprint对象（蓝本对象）"></a>Blueprint对象（蓝本对象）</h6><p>路由定义是通过@app实例.route方法定义的</p><p>通过Blueprint对象，可以在app实例尚未创建的时候，就编写好路由，等待app实例创建好后，将这些路由添加到app实例中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#在user.py里编辑</span><br>记得将本文件里的@app.route改成user_app.route<br>     相关的url_for()也要修改 如将url_for(<span class="hljs-string">&#x27;userlist&#x27;</span>)改成url_for(<span class="hljs-string">&#x27;user_app.userlist&#x27;</span>)<br><span class="hljs-comment">#例：</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint<br><br>user_app = Blueprint(<span class="hljs-string">&quot;user_app&quot;</span>,__name__)<br><br><span class="hljs-meta">@user_app.route(<span class="hljs-params"><span class="hljs-string">&quot;/reg&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">register</span>():</span><br><span class="hljs-keyword">return</span>(<span class="hljs-string">&quot;小博来了&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="增加发布文章功能"><a href="#增加发布文章功能" class="headerlink" title="增加发布文章功能"></a>增加发布文章功能</h4><ol><li><p>创建模板</p></li><li><p>创建文章模型</p></li><li><p>更新数据库</p></li><li><p>（编写视图函数与路由）在views目录中创建articles.py文件，与文章相关的视图函数与路由放在此文件中</p></li><li><p>在app.py中注册articles蓝本对象实例</p></li></ol><h6 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h6><p>在templates目录下新建articles文件夹，放入需要的模板</p><h6 id="创建文章模型"><a href="#创建文章模型" class="headerlink" title="创建文章模型"></a>创建文章模型</h6><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta">#在models.py中</span><br><br><span class="hljs-title">from</span> datetime <span class="hljs-keyword">import</span> datetime#导入时间模块<br><span class="hljs-title">from</span> libs <span class="hljs-keyword">import</span> db#导入db模块<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Article</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Model</span>):</span><br><span class="hljs-class">    id = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Integer</span>, <span class="hljs-title">primary_key</span>=<span class="hljs-type">True</span>)                    #主键</span><br><span class="hljs-class">    title = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)                                    #文章标题</span><br><span class="hljs-class">    intro = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)                                    #文章简介</span><br><span class="hljs-class">    content = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Text</span>)                                    #文章内容</span><br><span class="hljs-class">    author = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)                                   #作者</span><br><span class="hljs-class">    pubdate = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">DateTime</span>, <span class="hljs-title">default</span>=<span class="hljs-title">datetime</span>.<span class="hljs-title">utcnow</span>)       #发布时间</span><br></code></pre></td></tr></table></figure><h6 id="更新数据库"><a href="#更新数据库" class="headerlink" title="更新数据库"></a>更新数据库</h6><p>模型添加后，必须要在数据库生成相应的表</p><p>开发环境可以删除数据库重建，生产环境下必须在不破坏现有的数据库下更新数据库</p><ol><li>安装数据库管理插件： pipenv install flask-migrate</li><li>安装后在app.py中创建实例：migrate = Migrate(app,db)       需要导入flask-migrate中的Migrate模块</li><li>初始化数据库迁移环境，在命令行执行：flask db init</li><li>创建迁移数据：flask db migrate -m “更新说明”</li><li>更新数据库：flask db upgrade </li></ol><h6 id="编写视图函数与路由"><a href="#编写视图函数与路由" class="headerlink" title="编写视图函数与路由"></a>编写视图函数与路由</h6><p>视图函数：</p><ol><li>文章详细显示</li><li>文章管理列表</li><li>添加文章</li><li>删除文章</li></ol><p>蓝本对象实例：相应的url_for也要修改</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">from views.articles import article_app<br><br>app.register<span class="hljs-constructor">_blueprint(<span class="hljs-params">article_app</span>, <span class="hljs-params">url_prefix</span>=<span class="hljs-string">&quot;/article&quot;</span>)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask-数据库与ORM</title>
    <link href="/2021/03/13/Flask-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8EORM/"/>
    <url>/2021/03/13/Flask-%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8EORM/</url>
    
    <content type="html"><![CDATA[<h4 id="数据库入门-sqlite"><a href="#数据库入门-sqlite" class="headerlink" title="数据库入门(sqlite)"></a>数据库入门(sqlite)</h4><h6 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h6><p>​    1.关系型数据库–以文件方式永久存储到磁盘</p><p>​    2.非关系型数据库–存储在内存,访问速度快,通常用来做队列,缓存类服务</p><h6 id="安装插件sqlalchemy"><a href="#安装插件sqlalchemy" class="headerlink" title="安装插件sqlalchemy"></a>安装插件sqlalchemy</h6><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pipenv <span class="hljs-keyword">install</span> flask-sqlalchemy<br></code></pre></td></tr></table></figure><p>sqlalchemy资料查询 : <a href="https://pypi.org/project/Flask-SQLAlchemy/">https://pypi.org/project/Flask-SQLAlchemy/</a></p><h6 id="创建数据库对象"><a href="#创建数据库对象" class="headerlink" title="创建数据库对象"></a>创建数据库对象</h6><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">#导入模块<br><span class="hljs-keyword">from</span> flask_sqlalchemy <span class="hljs-keyword">import</span> SQLAlchemy<br><br>app = Flask(__name__)<br><br>#配置数据库<br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="hljs-literal">True</span><br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_DATABASE_URL&#x27;</span>]=<span class="hljs-string">&quot;sqlite:///my.db&quot;</span><br>db = SQLAlchemy(app)<br></code></pre></td></tr></table></figure><h6 id="SQLite数据库管理软件"><a href="#SQLite数据库管理软件" class="headerlink" title="SQLite数据库管理软件"></a>SQLite数据库管理软件</h6><p>为了方便观察创建数据表的过程,可以安装sqlite管理模块</p><p>安装: pip install sqlite-web</p><p>这是一款通过web界面的方式管理数据库</p><p>使用: sqlite_web SQLite 数据库文件路径,就可以管理数据库</p><h6 id="定义数据表模型"><a href="#定义数据表模型" class="headerlink" title="定义数据表模型"></a>定义数据表模型</h6><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">User</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Model</span>):</span><br><span class="hljs-class">    id = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Integer</span>, <span class="hljs-title">primary_key</span>=<span class="hljs-type">True</span>)</span><br><span class="hljs-class">    username = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    password = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    realname = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    sex = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Integer</span>)</span><br><span class="hljs-class">    mylike = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    city = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br><span class="hljs-class">    intro = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String</span>)</span><br></code></pre></td></tr></table></figure><p>db.Column(字段类型,可选参数)</p><p>​        字段类型 : 整数型:Integer </p><p>​        字符串型 : String </p><p>​        文本型 : Text </p><p>​        期 : DateTime </p><p>​        primary_key : 是否为主键</p><h6 id="进入交互式环境创建数据表"><a href="#进入交互式环境创建数据表" class="headerlink" title="进入交互式环境创建数据表"></a>进入交互式环境创建数据表</h6><p>创建完模型后,只是创建了python对象,</p><p>但是并没有创建数据库,需要通过db.create_all()创建数据表</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs capnproto">flask shell<span class="hljs-comment">#进如交互式环境</span><br><span class="hljs-keyword">from</span> app <span class="hljs-keyword">import</span> db<span class="hljs-comment">#引入db对象</span><br>db.create_all()<span class="hljs-comment">#创建数据表</span><br></code></pre></td></tr></table></figure><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#新建一个终端,输入下面代码,my.db是自己创建的数据库名</span><br><span class="hljs-meta">#打开给的网址</span><br><span class="hljs-meta">#运行可视化数据库管理软件</span><br><br>sqlite_web my.db<br></code></pre></td></tr></table></figure><h6 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h6><p>通过是实例化对象创建模型</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#实例对象</span><br>user1 = User(<span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;王麻子&#x27;</span>, <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-attribute">realname</span>=<span class="hljs-string">&#x27;真.王麻子&#x27;</span>)<br>user2 = User(<span class="hljs-attribute">username</span>=<span class="hljs-string">&#x27;张二狗&#x27;</span> <span class="hljs-attribute">password</span>=<span class="hljs-string">&#x27;12345&#x27;</span>,realname=&#x27;真.张二狗&#x27;)<br><br><span class="hljs-comment">#提交到数据库</span><br><span class="hljs-comment">#db.session.add 添加到数据库  </span><br><span class="hljs-comment">#db.session.commit()将添加的数据保存</span><br>db.session.<span class="hljs-builtin-name">add</span>(user1)<br>db.session.<span class="hljs-builtin-name">add</span>(user2)<br>db.session.commit()<br></code></pre></td></tr></table></figure><p>例</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> flask import Flask,render_template,request<br><span class="hljs-keyword">from</span> flask_sqlalchemy import SQLAlchemy<br><br>@app.route(<span class="hljs-string">&quot;/reg&quot;</span>,methods=[<span class="hljs-string">&#x27;get&#x27;</span>,<span class="hljs-string">&#x27;post&#x27;</span>])<br>def register():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        realname = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br>        sex      = request.form[<span class="hljs-string">&#x27;sex&#x27;</span>]<br>        mylike   = <span class="hljs-string">&#x27; &#x27;</span>.join(request.form.getlist(<span class="hljs-string">&#x27;like&#x27;</span>))<br>        city     = request.form[<span class="hljs-string">&#x27;city&#x27;</span>]<br>        intro    = request.form[<span class="hljs-string">&#x27;intro&#x27;</span>]<br>       <span class="hljs-built_in"> user </span>= User(<span class="hljs-attribute">realname</span>=realname,<br>                    <span class="hljs-attribute">username</span>=username,<br>                    <span class="hljs-attribute">password</span>=password,<br>                    <span class="hljs-attribute">sex</span>=sex,<br>                    <span class="hljs-attribute">mylike</span>=mylike,<br>                    <span class="hljs-attribute">city</span>=city,<br>                    <span class="hljs-attribute">intro</span>=intro<br>                    )<br>        db.session.<span class="hljs-builtin-name">add</span>(user)<br>        db.session.commit()<br>        <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;用户创建成功&#x27;</span>)<br>    return render_template(<span class="hljs-string">&quot;register.html&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="增删改查-CURD"><a href="#增删改查-CURD" class="headerlink" title="增删改查(CURD)"></a>增删改查(CURD)</h4><p>​        1.用户列表</p><p>​        2.用户信息删除与修改</p><p>​        3.用户条件查询</p><p>​        4.页面跳转</p><h6 id="批量创建用户"><a href="#批量创建用户" class="headerlink" title="批量创建用户"></a>批量创建用户</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">def createBatchUsers():<br>    surname = list(&quot;爱的机会哈给大家哈市哈卡交安设施卡活动卡萨号打卡机年卡时间按当年无活动进行核查自己吃那么芜湖擦我能打梦三救护车&quot;)<br>    citys   = [<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-string">&#x27;福建&#x27;</span>,<span class="hljs-string">&#x27;重庆&#x27;</span>,<span class="hljs-string">&#x27;山西&#x27;</span>,<span class="hljs-string">&#x27;成都&#x27;</span>]<br>    mylikes  = [<span class="hljs-string">&#x27;睡觉&#x27;</span>, <span class="hljs-string">&#x27;跳绳&#x27;</span>, <span class="hljs-string">&#x27;跑步&#x27;</span>, <span class="hljs-string">&#x27;打篮球&#x27;</span>, <span class="hljs-string">&#x27;跳芭蕾&#x27;</span>, <span class="hljs-string">&#x27;乒乓球&#x27;</span>]<br>    <span class="hljs-keyword">import</span> random<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>        random.shuffle(surname)<br>        intro    = <span class="hljs-string">&#x27;该用户什么都没有留下&#x27;</span><br>        <span class="hljs-keyword">password</span> = <span class="hljs-string">&#x27;88888888&#x27;</span><br>        username = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(surname[:<span class="hljs-number">6</span>])<br>        sex      = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>        realname = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(surname[:<span class="hljs-number">3</span>])<br>        city     = citys[random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)]<br>        mylike   = <span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-keyword">join</span>(mylikes[random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)])<br>        <span class="hljs-keyword">user</span> = <span class="hljs-keyword">User</span>(username=username,<br>                    realname=realname,<br>                    sex     =sex,<br>                    city    =city,<br>                    mylike  =mylike,<br>                    <span class="hljs-keyword">password</span>=<span class="hljs-keyword">password</span>,<br>                    intro   =intro<br>                    )<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">user</span>)<br>    db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br>def createBatchUsers():<br>    surname = list(&quot;爱的机会哈给大家哈市哈卡交安设施卡活动卡萨号打卡机年卡时间按当年无活动进行核查自己吃那么芜湖擦我能打梦三救护车&quot;)<br>    citys   = [<span class="hljs-string">&#x27;北京&#x27;</span>,<span class="hljs-string">&#x27;上海&#x27;</span>,<span class="hljs-string">&#x27;福建&#x27;</span>,<span class="hljs-string">&#x27;重庆&#x27;</span>,<span class="hljs-string">&#x27;山西&#x27;</span>,<span class="hljs-string">&#x27;成都&#x27;</span>]<br>    mylikes  = [<span class="hljs-string">&#x27;睡觉&#x27;</span>, <span class="hljs-string">&#x27;跳绳&#x27;</span>, <span class="hljs-string">&#x27;跑步&#x27;</span>, <span class="hljs-string">&#x27;打篮球&#x27;</span>, <span class="hljs-string">&#x27;跳芭蕾&#x27;</span>, <span class="hljs-string">&#x27;乒乓球&#x27;</span>]<br>    <span class="hljs-keyword">import</span> random<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100</span>):<br>        random.shuffle(surname)<br>        intro    = <span class="hljs-string">&#x27;该用户什么都没有留下&#x27;</span><br>        <span class="hljs-keyword">password</span> = <span class="hljs-string">&#x27;88888888&#x27;</span><br>        username = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(surname[:<span class="hljs-number">6</span>])<br>        sex      = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>        realname = <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-keyword">join</span>(surname[:<span class="hljs-number">3</span>])<br>        city     = citys[random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)]<br>        mylike   = <span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-keyword">join</span>(mylikes[:random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)])<br>        <span class="hljs-keyword">user</span> = <span class="hljs-keyword">User</span>(username=username,<br>                    realname=realname,<br>                    sex     =sex,<br>                    city    =city,<br>                    mylike  =mylike,<br>                    <span class="hljs-keyword">password</span>=<span class="hljs-keyword">password</span>,<br>                    intro   =intro<br>                    )<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">user</span>)<br>    db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br></code></pre></td></tr></table></figure><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-comment">#进入flask shell 环境执行函数</span><br><br>flask shell<br><span class="hljs-keyword">from</span> app <span class="hljs-keyword">import</span> createBatchUsers<br>createBatchUsers()<br></code></pre></td></tr></table></figure><p>批量用户就创建好了</p><p>可以在数据库可视化网页里查看</p><p>#运行可视化数据库管理软件  sqlite_web my.db</p><h6 id="读取操作"><a href="#读取操作" class="headerlink" title="读取操作"></a>读取操作</h6><p>查询通过query对象方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql">User.query.查询方法    #<span class="hljs-keyword">User</span> 是函数名<br><br>查询方法<br><span class="hljs-keyword">all</span>()  获得所有记录<br><span class="hljs-keyword">first</span>()  获得第一条记录，找不到返回<span class="hljs-keyword">None</span><br><span class="hljs-keyword">one</span>()  返回唯一一条记录，没有或者有多条则报错<br><span class="hljs-keyword">get</span>(id)  传入主键ID，返回相匹配的记录，没有返回<span class="hljs-keyword">None</span> <br><span class="hljs-built_in">count</span>()  返回查询结果总数<br>one_or_none  与<span class="hljs-keyword">one</span>（）一样，如果结果不唯一，返回<span class="hljs-keyword">None</span><br><br><br>模板与视图准备<br><br>模板：提供一个用户列表显示模板（用<span class="hljs-keyword">for</span>循环出所有记录）<br>路由：提供访问路径<br>视图函数：通过模型对象查询结果，并将结果赋予模板变量<br>例：<br><span class="hljs-variable">@app</span>.route(&quot;/userlist&quot;, methods<span class="hljs-operator">=</span>[&quot;get&quot;] )<br>    def userlist():<br>        users <span class="hljs-operator">=</span> User.query.all()<br>        <span class="hljs-keyword">return</span> render_template(&quot;user/user_list.html&quot;, users<span class="hljs-operator">=</span>users)<br></code></pre></td></tr></table></figure><h6 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h6><p>删除记录通过db.session.delete(记录对象)删除</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">delete</span>(记录对象)#删除操作<br><br>#单个删除<br>user1 = <span class="hljs-keyword">User</span>.query.<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>)#查询ID为<span class="hljs-number">1</span>的记录<br>db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">delete</span>(user1)#删除ID为<span class="hljs-number">1</span>的记录<br>db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()#保存数据库<br><br>#批量删除<br>users = <span class="hljs-keyword">User</span>.query.<span class="hljs-keyword">all</span>()<br>[db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">delete</span>(<span class="hljs-keyword">user</span>) <span class="hljs-keyword">for</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">in</span> users]<br>db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br><br>模板与视图准备<br><br>模板：提供一个用户列表显示模板<br><br>路由：通常删除需要传递一个被删除对象的ID<br>@app route(&quot;/delete_user/&lt;int:user_id&gt;&quot;)<br><br>视图函数：<br>def deleteUser(user_id):<br>pass<br><span class="hljs-keyword">return</span> redirect(url_for(&quot;userlist&quot;))#这儿要引入flask里的 redirect(跳转函数)，url_for 模块<br><br>例：<br>@app.route(&quot;/user_delete/&lt;int:user_id&gt;&quot;)<br>    def deleteUser(user_id):<br>        <span class="hljs-keyword">user</span> = <span class="hljs-keyword">User</span>.query.<span class="hljs-keyword">get</span>(user_id)<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">delete</span>(<span class="hljs-keyword">user</span>)<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br>        <span class="hljs-keyword">return</span> redirect(url_for(&quot;userlist&quot;))# 这一句要理解，如果用render_template返回模板，刷新页面会报错<br><br></code></pre></td></tr></table></figure><h6 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h6><p>通过模型类查询对象更新记录</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">比如：<br>user1 =db.query.<span class="hljs-keyword">get</span>(<span class="hljs-number">1</span>)<br>user1.<span class="hljs-keyword">password</span> = &quot;12345&quot;<br>db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br>就可以将记录中的<span class="hljs-keyword">password</span>字段修改<br><br>例：<br>@app.route(&quot;/useredit/&lt;int:user_id&gt;&quot;,methods = [&quot;get&quot;,&quot;post&quot;])<br>def editUser(user_id):<br>    <span class="hljs-keyword">user</span> = <span class="hljs-keyword">User</span>.query.<span class="hljs-keyword">get</span>(user_id)<br>    <span class="hljs-keyword">if</span> request.<span class="hljs-keyword">method</span> == &quot;POST&quot;:<br>        <span class="hljs-keyword">user</span>.username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        <span class="hljs-keyword">user</span>.realname = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        <span class="hljs-keyword">user</span>.sex      = request.form[<span class="hljs-string">&#x27;sex&#x27;</span>]<br>        <span class="hljs-keyword">user</span>.city     = request.form[<span class="hljs-string">&#x27;city&#x27;</span>]<br>        <span class="hljs-keyword">user</span>.mylike   = <span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-keyword">join</span>(request.form.getlist(<span class="hljs-string">&#x27;like&#x27;</span>))<br>        <span class="hljs-keyword">user</span>.intro    = request.form[<span class="hljs-string">&#x27;intro&#x27;</span>]<br>        db.<span class="hljs-keyword">session</span>.<span class="hljs-keyword">commit</span>()<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;userlist&#x27;</span>))<br>    <span class="hljs-keyword">return</span> render_template(&quot;user/edit_user.html&quot;, <span class="hljs-keyword">user</span>=<span class="hljs-keyword">user</span>)<br></code></pre></td></tr></table></figure><h6 id="条件检索"><a href="#条件检索" class="headerlink" title="条件检索"></a>条件检索</h6><p>User.query.查询条件.查询方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python">查询条件方法<br><span class="hljs-built_in">filter</span>()  使用规则过滤<br>filter_by()比<span class="hljs-built_in">filter</span>更方便使用<br>order_by()结果排序<br>limit(limit)只查询limit条<br>group_by()查询分组<br>offset()在原查询基础上偏移记录数，返回新的记录<br><br><span class="hljs-built_in">filter</span>() 方法的使用<br><span class="hljs-built_in">filter</span>(User.username==<span class="hljs-string">&#x27;小博&#x27;</span>)查找User中username值为小博的用户<br><span class="hljs-built_in">filter</span>(User.age&gt;<span class="hljs-number">20</span>)查找User中age值大于<span class="hljs-number">20</span>的用户<br><span class="hljs-built_in">filter</span>(User.city != <span class="hljs-string">&#x27;010&#x27;</span>)查找city值不为010的用户<br><span class="hljs-built_in">filter</span>(User.city.in_[<span class="hljs-string">&#x27;010&#x27;</span>,<span class="hljs-string">&#x27;021&#x27;</span>])查找city中 010 021 的用户<br><span class="hljs-built_in">filter</span>(~User.city.in_([<span class="hljs-string">&#x27;010&#x27;</span>,<span class="hljs-string">&#x27;021&#x27;</span>]))查找city中不为 010 021 的用户<br><span class="hljs-built_in">filter</span>(User.mylike.like(<span class="hljs-string">&#x27;%钓鱼%&#x27;</span>))查找mylike包含钓鱼的用户<br><span class="hljs-built_in">filter</span>(User.username==<span class="hljs-string">&quot;小博&quot;</span>,User.age&gt;<span class="hljs-number">20</span>)  用户名为小博且 age 大于<span class="hljs-number">20</span>的用户<br><span class="hljs-built_in">filter</span>((条件<span class="hljs-number">1</span>)|(条件<span class="hljs-number">2</span>))满足条件<span class="hljs-number">1</span>或者条件<span class="hljs-number">2</span>的用户<br><br>filter_by()  方法<br>filter_by(username=<span class="hljs-string">&quot;小博&quot;</span>)查找username值为 小博 的用户<br>filter_by(username=<span class="hljs-string">&quot;小博&quot;</span>，sex=<span class="hljs-number">1</span>)查找username值为 小博 且sex值为 <span class="hljs-number">1</span> 的用户<br><br><br>模板：<br>提供一个搜索表单<br>路由：<br>如果是post提交，一定要在路由中添加POST方法<br>视图：<br>如果接收到POST数据，就要检查用户提交的数据，生成检索条件<br><br>例：<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/userlist&quot;</span>, methods=[<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;post&quot;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">userlist</span>():</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        q = request.form[<span class="hljs-string">&#x27;q&#x27;</span>]<br>        <span class="hljs-comment">#精确查找</span><br>        <span class="hljs-comment"># condition = &#123;request.form[&#x27;field&#x27;]:q&#125;</span><br>        <span class="hljs-comment"># users = User.query.filter_by(**condition).all()</span><br>        <span class="hljs-comment">#模糊查找</span><br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;field&#x27;</span>] == <span class="hljs-string">&quot;realname&quot;</span>:<br>            condition = User.realname.like(<span class="hljs-string">&#x27;%%%s%%&#x27;</span> %q)<br>        <span class="hljs-keyword">else</span>:<br>            condition = User.username.like(<span class="hljs-string">&#x27;%%%s%%&#x27;</span> %q)<br>        print(q)<br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;order&#x27;</span>] == <span class="hljs-string">&quot;1&quot;</span>:<br>            order = User.<span class="hljs-built_in">id</span>.asc()   <span class="hljs-comment">#升序</span><br>        <span class="hljs-keyword">else</span>:<br>            order = User.<span class="hljs-built_in">id</span>.desc()  <span class="hljs-comment">#降序</span><br>        sex = User.sex == request.form[<span class="hljs-string">&#x27;sex&#x27;</span>]   <span class="hljs-comment">#性别筛选</span><br>        users = User.query.<span class="hljs-built_in">filter</span>(condition,sex).order_by(order).<span class="hljs-built_in">all</span>()      <span class="hljs-comment">#获取经过筛选的列表</span><br>    <span class="hljs-keyword">else</span>:<br>        users = User.query.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;user/user_list.html&quot;</span>, users=users)<br><br></code></pre></td></tr></table></figure><h6 id="分页显示"><a href="#分页显示" class="headerlink" title="分页显示"></a>分页显示</h6><p>当记录很多的时候，一页显示不完就需要分页显示</p><p>result = User.query.查询条件.paginate(pagelndex,pageSize)</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs axapta">result包含下列信息<br><br>items<span class="hljs-meta">#当前记录查询</span><br>page<span class="hljs-meta">#当前页数</span><br>per_page<span class="hljs-meta">#每页显示多少条记录即pageSize</span><br>pages<span class="hljs-meta">#总页数</span><br>total<span class="hljs-meta">#记录总数量</span><br>iter_pages()<span class="hljs-meta">#生成翻页页码</span><br>prev()<span class="hljs-meta">#前一页对象</span><br><span class="hljs-keyword">next</span>()<span class="hljs-meta">#后一页对象</span><br>next_num<span class="hljs-meta">#下一页</span><br>prev_num<span class="hljs-meta">#上一页</span><br>has_prev<span class="hljs-meta">#是否存在上一页</span><br>has_next<span class="hljs-meta">#是否存在下一页</span><br><br>例：<br>@app.route(<span class="hljs-string">&quot;/userlist&quot;</span>, methods=[<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;post&quot;</span>])<br>def userlist():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        q = request.form[<span class="hljs-string">&#x27;q&#x27;</span>]<br>        <span class="hljs-meta">#精确查找</span><br>        <span class="hljs-meta"># condition = &#123;request.form[&#x27;field&#x27;]:q&#125;</span><br>        <span class="hljs-meta"># users = User.query.filter_by(**condition).all()</span><br>        <span class="hljs-meta">#模糊查找</span><br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;field&#x27;</span>] == <span class="hljs-string">&quot;realname&quot;</span>:<br>            condition = User.realname.<span class="hljs-keyword">like</span>(<span class="hljs-string">&#x27;%%%s%%&#x27;</span> %q)<br>        <span class="hljs-keyword">else</span>:<br>            condition = User.username.<span class="hljs-keyword">like</span>(<span class="hljs-string">&#x27;%%%s%%&#x27;</span> %q)<br>        <span class="hljs-keyword">print</span>(q)<br>        <span class="hljs-keyword">if</span> request.form[<span class="hljs-string">&#x27;order&#x27;</span>] == <span class="hljs-string">&quot;1&quot;</span>:<br>            <span class="hljs-keyword">order</span> = User.id.<span class="hljs-keyword">asc</span>()   <span class="hljs-meta">#升序</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">order</span> = User.id.<span class="hljs-keyword">desc</span>()  <span class="hljs-meta">#降序</span><br>        sex = User.sex == request.form[<span class="hljs-string">&#x27;sex&#x27;</span>]   <span class="hljs-meta">#性别筛选</span><br>        users = User.query.filter(condition,sex).order_by(<span class="hljs-keyword">order</span>).paginate(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)     <span class="hljs-meta">#获取经过筛选的列表</span><br>    <span class="hljs-keyword">else</span>:<br>        page = request.args.get(<span class="hljs-string">&#x27;page&#x27;</span>,<span class="hljs-number">1</span>)<br>        users = User.query.paginate(<span class="hljs-built_in">int</span>(page),<span class="hljs-number">10</span>)       <span class="hljs-meta">#paginate(页数，显示条数，是否显示错误信息)</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;user/user_list.html&quot;</span>,<br>                           users=users.items,<br>                           pages=users.pages,<br>                           total=users.total,<br>                           pageList=users.iter_pages(),         <span class="hljs-meta">#显示页码</span><br>                           prevpage=users.prev_num,             <span class="hljs-meta">#上一页</span><br>                           nextpage=users.next_num,             <span class="hljs-meta">#下一页</span><br>                           hasprev=users.has_prev,<br>                           hasnext=users.has_next<br>                           )<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask-GET与POST</title>
    <link href="/2021/03/12/Flask-GET%E4%B8%8EPOST/"/>
    <url>/2021/03/12/Flask-GET%E4%B8%8EPOST/</url>
    
    <content type="html"><![CDATA[<h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>get方式提交数据是通过URL地址传递数据</p><p>例: http:127.0.0.1:5000/?username=xiaobo&amp;password=123456</p><p>在服务器端通过request对象接收数据</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#获取username , password</span><br>request.args.<span class="hljs-builtin-name">get</span>(<span class="hljs-string">&#x27;username&#x27;</span>)<br>request.args.<span class="hljs-builtin-name">get</span>(<span class="hljs-string">&#x27;password&#x27;</span>)<br><br><span class="hljs-comment">#本次提交数据的方式</span><br>request.method<br></code></pre></td></tr></table></figure><h6 id="网址美化"><a href="#网址美化" class="headerlink" title="网址美化"></a>网址美化</h6><p>1.通过问号传递的网址最方便,但是不美观</p><p>​    例  :    http:127.0.0.1:5000/?username=xiaobo&amp;password=123456</p><p>2.传递参数像path路径一样的网址,更美观,爬虫更喜欢</p><p>​    http:127.0.0.1:5000/xiaobo/123456/</p><p>​    方法 : 制定相关路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.rote(<span class="hljs-params"><span class="hljs-string">&quot;/&lt;username&gt;/&lt;password&gt;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>(<span class="hljs-params">username,password</span>):</span><br>    print(username,password)<br></code></pre></td></tr></table></figure><h4 id="POST-安全"><a href="#POST-安全" class="headerlink" title="POST(安全)"></a>POST(安全)</h4><p>通过 form 表单提交数据</p><p>form表单属性</p><p>​    action:  数据提交到哪个网址</p><p>​    method:  数据提交方式  (get和post)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>post方式提交数据需要在路由配置中添加设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/login&quot;</span>,methods=[<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;post&quot;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>():</span><br>request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    request.values[<span class="hljs-string">&#x27;usename&#x27;</span>]    <span class="hljs-comment">#既可接受get也可接收post</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask-模板语法</title>
    <link href="/2021/03/09/Flask-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/03/09/Flask-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>MVC模式</p><p>M -model     数据模型</p><p>V -view    视图模板</p><p>C  -控制器     业务逻辑控制既视图函数</p><p>变量标记</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;  &#125;&#125;</span><br><span class="xml">变量输出以</span><span class="hljs-template-variable">&#123;&#123; &#125;&#125;</span><span class="xml">包裹</span><br><span class="xml">变量  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">变量名</span> &#125;&#125;</span><span class="xml">  比如</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">myname</span> &#125;&#125;</span><br><span class="xml">对象  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">obj.属性</span> &#125;&#125;</span><br><span class="xml">字典  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">dict</span>[&#x27;key&#x27;] &#125;&#125;</span><br><span class="xml">列表  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">list</span>[i] &#125;&#125;</span><br><span class="xml">函数  </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">func</span>() &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>语句执行</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">&#123;<span class="hljs-meta">%</span>  <span class="hljs-meta">%</span>&#125;<br></code></pre></td></tr></table></figure><p>注释标签</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">&#123;#  #&#125;<br></code></pre></td></tr></table></figure><p>条件语句</p><p>根据条件选择显示不同的html部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">if</span> condition %&#125;<br>html<br>&#123;% <span class="hljs-keyword">elif</span> condition %&#125;<br>html<br>&#123;% <span class="hljs-keyword">else</span> %&#125;<br>html<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><p>for循环语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> items %&#125;<br>html &#123;&#123; item &#125;&#125; html<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p>模板继承</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html">#父模板 base.html<br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>       <br>&#123;% block nav %&#125;<br>html<br>&#123;% endblock %&#125;<br><br>&#123;% block content %&#125;<br>&#123;% endblock %&#125;<br><br>&#123;% block footer %&#125;<br>html<br>&#123;% endfooter %&#125;<br>     <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml">#子模板</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">extends</span></span> &quot;base.html&quot; %&#125;</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content %&#125;</span><br><span class="xml">页面内容</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><p>模板全局变量</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#上下文处理函数</span><br><br><span class="hljs-variable">@app</span>.context_processor<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">account</span><span class="hljs-params">()</span></span><span class="hljs-symbol">:</span><br>username=<span class="hljs-string">&quot;小博&quot;</span><br><span class="hljs-keyword">return</span>&#123;<span class="hljs-string">&quot;username&quot;</span><span class="hljs-symbol">:username</span>&#125;<br><br><span class="hljs-comment">#每个视图函数执行的时候,会自动执行该函数,接收该变量并渲染模板</span><br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flask-模板输出</title>
    <link href="/2021/03/08/Flask-%E6%A8%A1%E6%9D%BF%E8%BE%93%E5%87%BA/"/>
    <url>/2021/03/08/Flask-%E6%A8%A1%E6%9D%BF%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h4 id="目标-模板输出"><a href="#目标-模板输出" class="headerlink" title="目标:    模板输出"></a>目标:    模板输出</h4><ol><li><h6 id="创建templates目录"><a href="#创建templates目录" class="headerlink" title="创建templates目录"></a>创建templates目录</h6><p>在myflask文件下创建templates文件夹</p><p>templates文件夹用于存放HTML文件</p></li><li><h6 id="创建html文件模板"><a href="#创建html文件模板" class="headerlink" title="创建html文件模板"></a>创建html文件模板</h6><p>将写好的模板放到templates目录下</p></li><li><h6 id="网页上输出模板"><a href="#网页上输出模板" class="headerlink" title="网页上输出模板"></a>网页上输出模板</h6><p>编写app.py</p><p>​    引入模块 render_templates</p><p>​    编写路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,render_template<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)  <span class="hljs-comment">#index.html需要自己写好</span><br></code></pre></td></tr></table></figure></li><li><h6 id="加载静态文件"><a href="#加载静态文件" class="headerlink" title="加载静态文件"></a>加载静态文件</h6><p>创建static目录(flask目录下)</p><p>static目录下放入js css  img fonts 等文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 通过static 可以引入css等</span><br>&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;static/css/bootstrap.css&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>url_for 可以根据视图函数生成URL</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">视图函数</span>,默认值) &#125;&#125;</span><br><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">&quot;static&quot;</span>,<span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;资源路径&quot;</span>) &#125;&#125;</span><br><br><span class="xml">#例子</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">&quot;static&quot;</span>,<span class="hljs-attr">filename</span>=<span class="hljs-string">&quot;css/bootstrap.css&quot;</span>) &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>/&gt;</span></span><br><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">#例子</span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">&quot;login&quot;</span>) &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">   <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">url_for</span>(<span class="hljs-name">&quot;register&quot;</span>) &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flask-起步</title>
    <link href="/2021/03/08/flask-%E8%B5%B7%E6%AD%A5/"/>
    <url>/2021/03/08/flask-%E8%B5%B7%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="创建flask工程目录"><a href="#创建flask工程目录" class="headerlink" title="创建flask工程目录"></a>创建flask工程目录</h4><ol><li><h6 id="创建目录-进入目录"><a href="#创建目录-进入目录" class="headerlink" title="创建目录,进入目录"></a>创建目录,进入目录</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir myflask <span class="hljs-comment">#创建文件夹</span><br><span class="hljs-built_in">cd</span> myflask<span class="hljs-comment">#进入目录</span><br></code></pre></td></tr></table></figure></li><li><h6 id="安装虚拟环境pipenv-配置pipenv-可以不用安装-这步可以省略"><a href="#安装虚拟环境pipenv-配置pipenv-可以不用安装-这步可以省略" class="headerlink" title="安装虚拟环境pipenv,配置pipenv(可以不用安装,这步可以省略)"></a>安装虚拟环境pipenv,配置pipenv(可以不用安装,这步可以省略)</h6><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> pipenv<span class="hljs-comment">#安装pipenv</span><br><br><span class="hljs-comment">#在myflask目录下执行下面代码</span><br>pipenv <span class="hljs-keyword">install</span><span class="hljs-comment">#创建虚拟环境</span><br><br><span class="hljs-keyword">set</span> PIPENV_VENV_IN_PROJECT=<span class="hljs-number">1</span><span class="hljs-comment">#配置虚拟环境,linux系统将set 改为export,Windows系统项目不能在C盘</span><br><br>pipenv <span class="hljs-keyword">install</span><span class="hljs-comment">#在执行一遍</span><br><br></code></pre></td></tr></table></figure></li><li><h6 id="激活虚拟环境"><a href="#激活虚拟环境" class="headerlink" title="激活虚拟环境"></a>激活虚拟环境</h6><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">pipenv <span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure><p>安装flask模块</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pipenv <span class="hljs-keyword">install</span> flask<br></code></pre></td></tr></table></figure><p>退出虚拟环境</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>进入flask运行环境</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">flask <span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure><p>#启动内置服务器,host(IP)和port(端口)可以不写</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">flask <span class="hljs-built_in">run</span>  <span class="hljs-comment">--host **** --port**   </span><br><br><span class="hljs-comment">#Ctrl+c  中断服务器</span><br></code></pre></td></tr></table></figure></li><li><h6 id="创建app-py入口文件"><a href="#创建app-py入口文件" class="headerlink" title="创建app.py入口文件"></a>创建app.py入口文件</h6><p>​    1.myflask目录下创建一个名为app.py的文件名</p><p>​    2.实例化flask对象</p><p>​    3.创建视图函数</p><p>​    4.创建路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-comment">#实例化flask对象</span><br>app = Flask(__name__)<br><br><span class="hljs-comment">#路由</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p>写好上面的代码后,执行flask run 运行</p></li><li><h6 id="进入开发模式"><a href="#进入开发模式" class="headerlink" title="进入开发模式"></a>进入开发模式</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#mac</span><br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">FLASK_ENV</span>=development<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">FLASK_DEBUG</span>=<span class="hljs-literal">True</span><br><br><span class="hljs-comment">#windows</span><br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">FLASK_ENV</span>=development<br><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">FLASK_DEBUG</span>=<span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django-图文编辑</title>
    <link href="/2021/03/02/Django-%E5%9B%BE%E6%96%87%E7%BC%96%E8%BE%91/"/>
    <url>/2021/03/02/Django-%E5%9B%BE%E6%96%87%E7%BC%96%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<p>目标</p><p>​    注册用户发布博客</p><p>​    使用Markdown编辑器实现图文编辑</p><p>开发流程</p><ol><li>创建模型类BlogArtucles   (已有)</li><li>创建blog应用的forms.py文件</li><li>编写视图函数,处理用户提交的表单</li><li>设置路由</li><li>编写前端模板</li><li>设置发布博客的入口链接</li></ol>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django-ajax</title>
    <link href="/2021/03/01/Django-ajax/"/>
    <url>/2021/03/01/Django-ajax/</url>
    
    <content type="html"><![CDATA[<p>AJAX: Asynchronous JavaScript and XML,异步JavaScript和XML.</p><p>​    用JavaScript向服务器发送必要数据</p><p>​        XML</p><p>​        JSON</p><p>​    接受服务器的反馈</p><p>​    优点:不更新整个页面的前提下维护数据</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django-注册</title>
    <link href="/2021/02/22/Django-%E6%B3%A8%E5%86%8C/"/>
    <url>/2021/02/22/Django-%E6%B3%A8%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/QQ%E6%88%AA%E5%9B%BE20210222115557.png"></p><p>模型类前面已经编写好了的</p><h3 id="编写表单类"><a href="#编写表单类" class="headerlink" title="编写表单类"></a>编写表单类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django <span class="hljs-keyword">import</span> forms<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User  <span class="hljs-comment">#引入模型类</span><br><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> fields<br><span class="hljs-keyword">from</span> django.forms.widgets <span class="hljs-keyword">import</span> PasswordInput<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginForm</span>(<span class="hljs-params">forms.Form</span>):</span><br>    username = forms.CharField()<br>    password = forms.CharField(widget=forms.PasswordInput)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegistrationForm</span>(<span class="hljs-params">forms.ModelForm</span>):</span><span class="hljs-comment">#ModelForm 这个类可以保存数据</span><br>    password = forms.CharField(widget=forms.PasswordInput)<br>    password1 = forms.CharField(widget=forms.PasswordInput)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = User<br>        fields = (<span class="hljs-string">&#x27;username&#x27;</span>,<span class="hljs-string">&#x27;email&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clean_password2</span>(<span class="hljs-params">self</span>):</span><span class="hljs-comment">#验证某个字段都是使用clean字段命名</span><br>        cd = self.cleaned_data<br>        <span class="hljs-keyword">if</span> cd[<span class="hljs-string">&#x27;password&#x27;</span>] != cd[<span class="hljs-string">&#x27;password2&#x27;</span>]:<br>            <span class="hljs-keyword">raise</span> forms.ValidationError(<span class="hljs-string">&#x27;password do not math.&#x27;</span>)<br>        <span class="hljs-keyword">return</span> cd[<span class="hljs-string">&#x27;password2&#x27;</span>]<br><br></code></pre></td></tr></table></figure><h3 id="编写注册的视图函数"><a href="#编写注册的视图函数" class="headerlink" title="编写注册的视图函数"></a>编写注册的视图函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">register</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        user_form = RegistrationForm()<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;account/register.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;form&#x27;</span>:user_form&#125;)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        user_form = RegistrationForm(request.POSt)<br>        <span class="hljs-keyword">if</span> user_form.is_valid():<br>            new_user = user_form.save(commit=<span class="hljs-literal">False</span>)<br>            new_user.set_password(user_form.cleaned_data[<span class="hljs-string">&#x27;password&#x27;</span>])<br>            new_user.save()<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;恭喜你,注册成功了~~~&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;注册失败&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="编写注册的模板"><a href="#编写注册的模板" class="headerlink" title="编写注册的模板"></a>编写注册的模板</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">extends</span></span> &#x27;base.html&#x27; %&#125;</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> title %&#125;</span><span class="xml">Register</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">block</span></span> content %&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;row text-center&#x27;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-horizontal&#x27;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&#x27;post&#x27;</span>&gt;</span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">csrf_token</span></span> %&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; form.username &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>邮箱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; form.email &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; form.password &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>确认密码<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; form.password2 &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;form-group&#x27;</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-5 control-label&#x27;</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;col-md-6 text-left&#x27;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; profile.phone &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;submit&#x27;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;btn btn-primary btn-lg&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#x27;注册&#x27;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endblock</span></span> %&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="配置URL"><a href="#配置URL" class="headerlink" title="配置URL"></a>配置URL</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">path</span><span class="hljs-params">(<span class="hljs-string">&#x27;register/&#x27;</span>,views.register,name=<span class="hljs-string">&#x27;user_register&#x27;</span>)</span></span>                 <span class="hljs-selector-id">#urls</span>.py里添加<br></code></pre></td></tr></table></figure><p>创建phone字段与用户表进行关联</p><p>创建模型</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> <span class="hljs-keyword">User</span><br><br><span class="hljs-keyword">class</span> UserProfile(models.Model):<br>    <span class="hljs-keyword">user</span> = models.OneToOneField(<span class="hljs-keyword">User</span>,on_delete=models.<span class="hljs-keyword">CASCADE</span>,<span class="hljs-keyword">unique</span>=<span class="hljs-keyword">True</span>)<br>    phone = models.CharField(max_length=<span class="hljs-number">20</span>,<span class="hljs-keyword">null</span>=<span class="hljs-keyword">True</span>)<br><br>    def __str__(self):<br>        <span class="hljs-keyword">return</span> &quot;user &#123;&#125;&quot;.format(self.<span class="hljs-keyword">user</span>.username)<br></code></pre></td></tr></table></figure><p>迁移数据</p><p>cmd 打开项目根目录,执行命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations account<br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate account<br></code></pre></td></tr></table></figure><p>在forms.py 添加</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">UserProfileForm</span>(<span class="hljs-title">forms</span>.<span class="hljs-type">ModelForm</span>):</span><br><span class="hljs-class">    <span class="hljs-keyword">class</span> <span class="hljs-type">Meta</span>:</span><br><span class="hljs-class">        model = <span class="hljs-type">UserProfile</span></span><br><span class="hljs-class">        fields = (&#x27;<span class="hljs-title">phone&#x27;</span>,)</span><br></code></pre></td></tr></table></figure><p>重写views.py</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs haxe">from django.shortcuts <span class="hljs-keyword">import</span> render<br>from django.http <span class="hljs-keyword">import</span> HttpResponse<br>from django.contrib.auth <span class="hljs-keyword">import</span> authenticate, login<br>from .forms <span class="hljs-keyword">import</span> LoginForm, RegistrationForm, UserProfileForm<br><br>def user_login(request):<span class="hljs-type"></span><br><span class="hljs-type">    if request</span>.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<span class="hljs-type"></span><br><span class="hljs-type">        login_form </span>= LoginForm()<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;account/login.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;form&#x27;</span>: <span class="hljs-type">login_form</span>&#125;)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<span class="hljs-type"></span><br><span class="hljs-type">        login_form </span>= LoginForm(request.POST)<br>        <span class="hljs-keyword">if</span> login_form.is_valid():<span class="hljs-type"></span><br><span class="hljs-type">            cd </span>= login_form.cleaned_data<br>            user = authenticate(username=cd[<span class="hljs-string">&#x27;username&#x27;</span>], password=cd[<span class="hljs-string">&#x27;password&#x27;</span>])<br>            <span class="hljs-keyword">if</span> user:<span class="hljs-type"></span><br><span class="hljs-type">                login</span>(request, user)<br>                <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;Wellcom You. You have logined the website.&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:<span class="hljs-type"></span><br><span class="hljs-type">                return HttpResponse</span>(<span class="hljs-string">&#x27;Sorry, Your username or password is not right.&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<span class="hljs-type"></span><br><span class="hljs-type">            return HttpResponse</span>(<span class="hljs-string">&#x27;Invalid login.&#x27;</span>)<br><br>def register(request):<span class="hljs-type"></span><br><span class="hljs-type">    if request</span>.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<span class="hljs-type"></span><br><span class="hljs-type">        user_form </span>= RegistrationForm()<br>        userprofile_form = UserProfileForm() <span class="hljs-meta">#new</span><br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;account/register.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;form&#x27;</span>:<span class="hljs-type">user_form</span>,<br>        <span class="hljs-string">&#x27;profile&#x27;</span>:<span class="hljs-type">userprofile_form</span>&#125;)<span class="hljs-meta"># new</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<span class="hljs-type"></span><br><span class="hljs-type">        user_form </span>= RegistrationForm(request.POST)<br>        userprofile_form = UserProfileForm(request.POST)<span class="hljs-meta">#new</span><br>        <span class="hljs-keyword">if</span> user_form.is_valid() * userprofile_form.is_valid():<span class="hljs-type"></span><br><span class="hljs-type">            new_user </span>= user_form.save(commit=False)<br>            <span class="hljs-keyword">new</span><span class="hljs-type">_user</span>.set_password(user_form.cleaned_data[<span class="hljs-string">&#x27;password&#x27;</span>])<br>            <span class="hljs-keyword">new</span><span class="hljs-type">_user</span>.save()<br>            <span class="hljs-meta">#new</span><br>            <span class="hljs-keyword">new</span><span class="hljs-type">_profile</span> = userprofile_form.save(commit=False)<br>            <span class="hljs-keyword">new</span><span class="hljs-type">_profile</span>.user = <span class="hljs-keyword">new</span><span class="hljs-type">_user</span><br><span class="hljs-type"></span>            <span class="hljs-keyword">new</span><span class="hljs-type">_profile</span>.save()<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;恭喜你,注册成功了~~~&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<span class="hljs-type"></span><br><span class="hljs-type">            return HttpResponse</span>(<span class="hljs-string">&#x27;注册失败&#x27;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django-内置登录退出</title>
    <link href="/2021/02/21/Django-%E5%86%85%E7%BD%AE%E7%99%BB%E5%BD%95%E9%80%80%E5%87%BA/"/>
    <url>/2021/02/21/Django-%E5%86%85%E7%BD%AE%E7%99%BB%E5%BD%95%E9%80%80%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<p>内置应用</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">INSTALLED_APPS</span><br></code></pre></td></tr></table></figure><p>认证逻辑封装在中间件csrf</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">MIDDLEWARE</span><br></code></pre></td></tr></table></figure><p>身份验证系统官方网站文档</p><p><a href="https://docs.djangoproject.com/en/3.0/topics/auth/default/#all-authentication-views">https://docs.djangoproject.com/en/3.0/topics/auth/default/#all-authentication-views</a> ·</p><p>显示用户登录状态</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">auth.<span class="hljs-built_in">views</span>.LoginView<br></code></pre></td></tr></table></figure><p>显示退出状态</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">auth.<span class="hljs-built_in">views</span>.LogoutView<br></code></pre></td></tr></table></figure><p>打开account目录下的urls ,添加代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> <span class="hljs-type">path</span><br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><span class="hljs-keyword">from</span> django.contrib.auth <span class="hljs-keyword">import</span> views <span class="hljs-keyword">as</span> auth_views#添加这一句<br><br>app_name = <span class="hljs-string">&#x27;account&#x27;</span><br><br>urlpatterns = [<br>   # path(<span class="hljs-string">&#x27;login/&#x27;</span>, views.user_login,<span class="hljs-type">name</span>=<span class="hljs-string">&#x27;user_login&#x27;</span>),#添加这下面的两句<br>    path(<span class="hljs-string">&#x27;login/&#x27;</span>,auth_views.LoginView.as_view(template_name=<span class="hljs-string">&#x27;account/login2.html&#x27;</span>),<span class="hljs-type">name</span>=<span class="hljs-string">&#x27;user_login&#x27;</span>),#登录<br>    path(<span class="hljs-string">&#x27;logout/&#x27;</span>, auth_views.LogoutView.as_view(template_name=<span class="hljs-string">&#x27;account/logout.html&#x27;</span>), <span class="hljs-type">name</span>=<span class="hljs-string">&#x27;user_logout&#x27;</span>),#退出<br>]<br></code></pre></td></tr></table></figure><p>强制登录后转到blog页面</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#settings.py末尾添加下面代码</span><br><br><span class="hljs-attr">LOGIN_REDIRECT_URL</span> = <span class="hljs-string">&#x27;/blog/&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django-表单</title>
    <link href="/2021/02/21/Django-%E8%A1%A8%E5%8D%95/"/>
    <url>/2021/02/21/Django-%E8%A1%A8%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<p>表单:用于收集不同类型的用户输入</p><p>​    是一个包含表单元素的区域。<br>​    表单元素是允许用户在表单中输入内容，比如:文本域(textarea)、下拉列表、单选框(radio-buttons)、复选框(checkboxes)等等。<br>​    表单使用表单标签( <form>)来设置</p><p>目标:实现登录</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Django"><span class="xml"># 配置setting.py</span><br><span class="xml">INSTALLED_APPS=[</span><br><span class="xml">&#x27;account&#x27;,          #在括号里加上account, 其他不修改</span><br><span class="xml">]</span><br><br><span class="xml">#配置根目录下的urls.py</span><br><span class="xml">urlpatterns = [ </span><br><span class="xml">path(&#x27;account/&#x27;,include(&#x27;account.urls&#x27;,namespace=&#x27;account&#x27;))#添加这一行</span><br><span class="xml">]</span><br><br><span class="xml">#在account目录下创建urls.py文件并写入以下代码</span><br><br><span class="xml">from django.urls import path</span><br><span class="xml">from . import views</span><br><br><span class="xml">app_name = &#x27;account&#x27;</span><br><br><span class="xml">urlpatterns = [</span><br><span class="xml">    path(&#x27;login/&#x27;, views.user_login,name=&#x27;user_login&#x27;),</span><br><span class="xml">]</span><br><br><span class="xml"># account目录下创建forms.py并写入以下代码</span><br><br><span class="xml">from django import forms</span><br><br><span class="xml">class LoginForm(forms.Form):</span><br><span class="xml">    username = forms.CharField()</span><br><span class="xml">    password = forms.CharField(widget=forms.PasswordInput)</span><br><br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs clean">代码意思<br>login_form = LoginForm#创建实例<br>login_form#待填写的表单<br>login_form.as_p()#以p标签包裹的表单<br>login_form.as_table()#以表格形式的表单<br>login_form.is_bound#返回<span class="hljs-literal">False</span>则表单为空,返回<span class="hljs-literal">True</span>则不为空<br><br>user1 =  &#123;<span class="hljs-string">&#x27;username&#x27;</span>:<span class="hljs-string">&#x27;admin&#x27;</span> ,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;12456&#x27;</span>&#125;<br>user1_form = LoginForm(user1)<br>user1_form.is_bound<br>user1_form.is_valid()#提供的数据是否完整,完整返回<span class="hljs-literal">True</span><br>user1_form.cleaned_date#获取表单的值<br><br>user.is_authenticated#用户已登录返回true,没登录返回false<br><br><br>函数意思<br>authenticate#检查用户是不是我们网站的用户,以及用户名是否正确<br><br></code></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml">点击登录就会跳转到登录页面</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">url</span></span> &#x27;account:user_login&#x27; %&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django-MVC模式</title>
    <link href="/2021/02/20/Django-MVC%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/02/20/Django-MVC%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h3><p>动态的程序设计,使后续对程序的修改和扩展简化,并使程序某一部分的重复利用成为可能</p><p>M: Model,代表数据存取层</p><p>V: View,系统中显示什么,怎么显示</p><p>C: Controller,根据用户输入和需要访问的类型</p><h3 id="MTV模式"><a href="#MTV模式" class="headerlink" title="MTV模式"></a>MTV模式</h3><p>MTV模式是以Django为框架的网站模式</p><p>M: Model,数据存取层</p><p>T : Template,表现层</p><p>V: View,业务逻辑层</p><p>请求响应流程</p><p><img src="/img/QQ%E6%88%AA%E5%9B%BE20210220092928.png"></p><p>自定义模板位置</p><p>目的:模板目录位置不在应用内部</p><p>​        便于统一维护模板</p><p>编辑: 设置settings.py文件中的templates的值</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml">TEMPLATES = [</span><br><span class="xml">    &#123;</span><br><span class="xml">        &#x27;BACKEND&#x27;: &#x27;django.template.backends.django.DjangoTemplates&#x27;,</span><br><span class="xml">        &#x27;DIRS&#x27;: [os.path.join(BASE_DIR,&#x27;templates&#x27;)],   #将模板目录指定为根目录里的templates</span><br><span class="xml">        &#x27;APP_DIRS&#x27;: False,  #每个项目里面不在配置模板目录</span><br><span class="xml">        &#x27;OPTIONS&#x27;: &#123;</span><br><span class="xml">            &#x27;context_processors&#x27;: [</span><br><span class="xml">                &#x27;django.template.context_processors.debug&#x27;,</span><br><span class="xml">                &#x27;django.template.context_processors.request&#x27;,</span><br><span class="xml">                &#x27;django.contrib.auth.context_processors.auth&#x27;,</span><br><span class="xml">                &#x27;django.contrib.messages.context_processors.messages&#x27;,</span><br><span class="xml">            ],</span><br><span class="xml">        &#125;,</span><br><span class="xml">    &#125;,</span><br><span class="xml">]</span><br></code></pre></td></tr></table></figure><p>静态文件</p><p>下载botstrap解压后将里面的fonts,js,css文件夹放入static文件夹里</p><p>点击跳转跳转配置</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml">#<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">url</span></span> &#x27;blog:blog_title&#x27; %&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>小博丨博客<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><br><span class="xml">#修改mysite下的urls.py文件</span><br><span class="xml">urlpatterns = [</span><br><span class="xml">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="xml">    path(&#x27;blog/&#x27;,include(&#x27;blog.urls&#x27;,namespace=&#x27;blog&#x27;)),     #在这儿加上namespace=&#x27;blog&#x27;</span><br><span class="xml">]</span><br><br><span class="xml">#修改blog下的urls.py文件</span><br><span class="xml">app_name = &#x27;blog&#x27;#增加这一行</span><br><br><span class="xml">urlpatterns = [</span><br><span class="xml">    path(&#x27;&#x27;, views.blog_title,name=&#x27;blog_title&#x27;),   #这儿加上name=&#x27;blog_title&#x27;</span><br><span class="xml">    path(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">int:article_id</span>&gt;</span>&#x27;, views.blog_article,name=&#x27;blog_article&#x27;)#这儿加上name=&#x27;blog_article&#x27;</span><br><span class="xml">]</span><br></code></pre></td></tr></table></figure><p>点击 小博丨博客  会跳转到 blog_title页面</p><p>引入html文件</p><p>base.html 如何引入刚刚写好的header与footer</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;header.html&#x27; %&#125;</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">include</span></span> &#x27;footer.html&#x27; %&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板语法</title>
    <link href="/2021/02/18/Django-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/02/18/Django-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">var_name</span>&#125;&#125;</span><span class="xml">       变量样式</span><br></code></pre></td></tr></table></figure><p>当模板引擎遇到一个变量,他将从context中获取这个变量的值,然后用值替换他本身</p><h3 id="2-标签"><a href="#2-标签" class="headerlink" title="2.标签"></a>2.标签</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">&#123;% <span class="hljs-keyword">tag</span> <span class="hljs-title">%&#125;        标签样式</span><br></code></pre></td></tr></table></figure><p>django自带了很多内置标签</p><h5 id="for循环标签"><a href="#for循环标签" class="headerlink" title="for循环标签"></a>for循环标签</h5><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> blog <span class="hljs-keyword">in</span> blogs %&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; blog.title &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="xml">  </span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="条件标签"><a href="#条件标签" class="headerlink" title="条件标签"></a>条件标签</h5><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> blog %&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> blog <span class="hljs-keyword">in</span> blogs %&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; blog.title &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">else</span></span> %&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这儿什么都没有<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3-模板继承"><a href="#3-模板继承" class="headerlink" title="3.模板继承"></a>3.模板继承</h3><p>建立一个包含网站所有公共元素的基本骨架,在里面可以定义一些区块,模板的字模板可以重写这些区块.</p><h6 id="base-html-创建基本骨架模板"><a href="#base-html-创建基本骨架模板" class="headerlink" title="base.html      创建基本骨架模板"></a>base.html      创建基本骨架模板</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>blog titles<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   &#123;% block content %&#125;<br>    <br>   &#123;% endblock %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>muban1.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% extends &quot;base.html&quot; %&#125;<br>&#123;% block content %&#125;<br>&#123;% for blog in blogs %&#125;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;blog.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <br>    &#123;% endfor %&#125;<br>&#123;% endblock %&#125;<br></code></pre></td></tr></table></figure><p>这样base.html中的     地方就会被模板1取代.</p><h6 id="优化blog应用"><a href="#优化blog应用" class="headerlink" title="优化blog应用"></a>优化blog应用</h6><p>在templates文件下创建base.html</p><p>在settings.py末尾加入以下代码,并在myproject文件下创建static/images  ,该文件夹放入需要的图片</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">STATICFILES_DIRS</span> = [<br>    os.path.join(BASE_DIR,<span class="hljs-string">&quot;static&quot;</span>)<br>]<br></code></pre></td></tr></table></figure><p>引入图片</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">load</span></span> static %&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">static</span></span> &#x27;./images/图片名.png&#x27; %&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>响应详细内容</p><p>​    添上超链接</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> blog <span class="hljs-keyword">in</span> blogs %&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;&#123; blog.id &#125;&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; blog.title &#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>#这个地方加上a标签</span><br><span class="xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="xml">  </span><br></code></pre></td></tr></table></figure><p>​    响应内容请求的视图函数</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">blog_article</span><span class="hljs-params">(request,article_id)</span></span><span class="hljs-symbol">:</span><br>    article = BlogArticles.objects.get(id=article_id)<br>    pub = article.publish<br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;blog/content.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;article&#x27;</span><span class="hljs-symbol">:article</span>,<span class="hljs-string">&#x27;publish&#x27;</span><span class="hljs-symbol">:pub</span>&#125;)<br></code></pre></td></tr></table></figure><p>​    编写前端模板页面</p><p>​    对应的URL配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">urlpatterns</span> = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.blog_title),<br>    path(<span class="hljs-string">&#x27;&lt;int:article_id&gt;&#x27;</span>, views.blog_article)     <span class="hljs-comment">#写上这一行</span><br>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django-视图函数和模板</title>
    <link href="/2021/02/17/Django-%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E6%9D%BF/"/>
    <url>/2021/02/17/Django-%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h3 id="本章目标"><a href="#本章目标" class="headerlink" title="本章目标"></a>本章目标</h3><p>​    1.编写视图函数 </p><p>​    2.编写前端模板 </p><p>​    3.设置应用内的路由</p><h3 id="1-视图函数"><a href="#1-视图函数" class="headerlink" title="1.视图函数"></a>1.视图函数</h3><p>​        概念:当用户向服务器发起一个请求时,接收用户请求的应用程序,并根据请求响应,返回一些信息.</p><p>​        分类:—基于函数的视图 —基于类的视图</p><p>​        放置位置: views.py</p><p>编写基于函数的视图</p><p>在views.py文件下写入以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> BlogArticles<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">blog_title</span>(<span class="hljs-params">request</span>):</span><span class="hljs-comment"># request 是 用户请求所有信息的对象</span><br>    blogs = BlogArticles.objects.<span class="hljs-built_in">all</span>()   <span class="hljs-comment">#读出BlogArticles模型类中的所有信息</span><br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;blog/titles.html&#x27;</span>,&#123;<span class="hljs-string">&#x27;blogs&#x27;</span>:blogs&#125;)<br></code></pre></td></tr></table></figure><p><img src="/img/QQ%E6%88%AA%E5%9B%BE20210218111255.png"></p><p><img src="/img/render-20210218112456.png"></p><h3 id="2-模板"><a href="#2-模板" class="headerlink" title="2.模板"></a>2.模板</h3><p>模板规定:使用默认规定</p><p>默认规定位置:setting.py文件中,55行左右的TEMPLATES里</p><p>在blog文件夹下创建一个templates文件夹,在templates文件夹下创建blog文件夹并放入titles.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-cn&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>blog titles<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            &#123;% for blog in blogs %&#125;    #在网页中循环出blog标题<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;blog.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <br>            &#123;% endfor %&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在blog应用下的urls中写入路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.blog_title),<br>]<br></code></pre></td></tr></table></figure><p>启动应用  python manage.py runserver</p><p>打开返回的网址,在网址后面加上blog就行了(127.0.0.1:8000/blog/) </p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django-ORM语法</title>
    <link href="/2021/02/16/Django-ORM%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/02/16/Django-ORM%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Django-ORM基本语法"><a href="#Django-ORM基本语法" class="headerlink" title="Django-ORM基本语法"></a>Django-ORM基本语法</h1><p>在cmd中进入根目录(myproject),进入交互交互模式</p><h5 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> <span class="hljs-keyword">shell</span>    #进入交互模式<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 引入模块</span><br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br><span class="hljs-keyword">from</span> blog.models <span class="hljs-keyword">import</span> BlogArticles<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"># 获得User中的用户名为damin的对象<br>admin = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">User</span>.</span></span>objects.get(username=&#x27;admin&#x27;)   #username = &#x27;用户名&#x27; 这个用户名必须在数据库里存在<br><br>#创建一篇博客文章<br>bolg = <span class="hljs-constructor">BlogArticles(<span class="hljs-params">title</span>=&#x27;<span class="hljs-params">hello</span> <span class="hljs-params">world</span>&#x27;,<span class="hljs-params">author</span>=<span class="hljs-params">admin</span>,<span class="hljs-params">body</span>=&#x27;<span class="hljs-params">hello</span>,<span class="hljs-params">i</span> <span class="hljs-params">am</span> <span class="hljs-params">coming</span>&#x27;)</span><br><br>#保存,不要忘记,不能省略,保存后数据表中就有这篇文章了<br>blog.save<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h5 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">Blogs = BlogArticles.objects.<span class="hljs-built_in">all</span>()   <span class="hljs-comment">#查询所有文章</span><br>Blogs      <span class="hljs-comment">#执行这个就可以获得所有文章的title</span><br><br><span class="hljs-comment"># 循环出所有文章</span><br><span class="hljs-keyword">for</span> blog <span class="hljs-keyword">in</span> blogs:<br>    print(blog.<span class="hljs-built_in">id</span>,blog.publish,blog.title,blog.author)<br>    <br>    <br><span class="hljs-comment">#查询ID为1的文章</span><br>b = BlogArticles.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>)<br>b<br><br><span class="hljs-comment">#查询作者admin写的文章</span><br>BlogArticles.objects.<span class="hljs-built_in">filter</span>(author=admin)<br><br><span class="hljs-comment"># 反向查询,根据用户名查询用户发布的文章</span><br>admin.blog_posts.<span class="hljs-built_in">all</span>()<br></code></pre></td></tr></table></figure><h5 id="修改保存操作"><a href="#修改保存操作" class="headerlink" title="修改保存操作"></a>修改保存操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改操作</span><br>b = BlogArticles.objects.get(<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>)<br>b<br>b.title=<span class="hljs-string">&#x27;新的文章名&#x27;</span><br>b.save()    <span class="hljs-comment">#保存</span><br><br><span class="hljs-comment">#删除操作</span><br>b.delete()<br></code></pre></td></tr></table></figure><h5 id="官方文档查询操作链接"><a href="#官方文档查询操作链接" class="headerlink" title="官方文档查询操作链接"></a>官方文档查询操作链接</h5><p><a href="https://docs.djangoproject.com/zh-hans/3.0/topics/db/queries/">https://docs.djangoproject.com/zh-hans/3.0/topics/db/queries/</a></p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django-模型与超管</title>
    <link href="/2021/02/16/Django-%E6%A8%A1%E5%9E%8B%E4%B8%8E%E8%B6%85%E7%AE%A1/"/>
    <url>/2021/02/16/Django-%E6%A8%A1%E5%9E%8B%E4%B8%8E%E8%B6%85%E7%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="1-模型"><a href="#1-模型" class="headerlink" title="1.模型"></a>1.模型</h3><h5 id="1-1网页内容来源"><a href="#1-1网页内容来源" class="headerlink" title="1.1网页内容来源"></a>1.1网页内容来源</h5><ul><li><p>​    静态: 直接写到HTML文件中</p></li><li><p>​    动态: 来自数据库</p><p>​            使用sql语句读取数据库</p><p>​            Django通过ORM实现对数据库的读写</p><p>​            </p></li></ul><h5 id="1-2-ORM"><a href="#1-2-ORM" class="headerlink" title="1.2  ORM"></a>1.2  ORM</h5><p>​    ORM优点: 可移植性强,安全性好,查询语法简单</p><p>​    ORM实现方法</p><ul><li><p>编写数据类型</p></li><li><p>位置:models.py(也可以是其他文件)</p></li><li><p>继承:django.db.models.Model</p></li><li><p>对应的数据表: appname_modelname,     (都是小写字母)</p></li><li><p>创建数据表库: 迁移操作</p><p>​    Python manage.py makemigrations</p><p>​    python manage.py  migrate</p></li></ul><p>在models.py文件下写入以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone    <span class="hljs-comment">#引入时间模块</span><br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlogArticles</span>(<span class="hljs-params">models.Model</span>):</span>    <span class="hljs-comment"># 定义模型类名称BlogArticles,继承models.Model类</span><br>    title = models.CharField(max_length=<span class="hljs-number">300</span>)    <span class="hljs-comment"># 字段 每一个字段后面都有一个field类的实例</span><br>    author = models.ForeignKey(User, on_delete=models.CASCADE,related_name=<span class="hljs-string">&#x27;blog_posts&#x27;</span>)<br>    body = models.TextField()       <br>    <span class="hljs-comment">#字段类型查看网址 https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#model-field-types</span><br><br>    publish = models.DateTimeField(default=timezone.now)     <span class="hljs-comment"># 字段</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mata</span>:</span>                            <span class="hljs-comment"># 内部类</span><br>        orderby = (<span class="hljs-string">&#x27;-publish&#x27;</span>,)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.title<br></code></pre></td></tr></table></figure><p><img src="/img/QQ%E6%88%AA%E5%9B%BE20210216144907.png"></p><p> author = models.ForeignKey(User, on_delete=models.CASCADE,<br>        related_name=’blog_posts’)        </p><p>​         ForeignKey:外键,—对多(多对一)关系</p><p>​        User:被关联的类</p><p>​        on_delete=models.CASCADE:联级删除</p><p>​        related_name=‘blog _posts’: User的实例以blog _posts属性反向查询到BlogArticles的实例</p><h5 id="1-3-迁移数据"><a href="#1-3-迁移数据" class="headerlink" title="1.3 迁移数据"></a>1.3 迁移数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py mekemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure><p>查看数据表结构</p><p>​        可视化方法   :<a href="https://sqlitestudio.pl/index.rvt">https://sqlitestudio.pl/index.rvt</a></p><p>​        sqlite操作界面</p><h3 id="2-超管"><a href="#2-超管" class="headerlink" title="2.超管"></a>2.超管</h3><h5 id="2-1创建超管并登录界面"><a href="#2-1创建超管并登录界面" class="headerlink" title="2.1创建超管并登录界面"></a>2.1创建超管并登录界面</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> createsuperuser  #创建超管 并按照提示设置用户名,邮箱,密码<br><br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> runserver   #运行项目<br></code></pre></td></tr></table></figure><p>运行项目并用浏览器打开这个网址   <a href="http://localhost:8000/admin/">http://localhost:8000/admin/</a></p><h5 id="2-2将blog模型增加到管理应用里面"><a href="#2-2将blog模型增加到管理应用里面" class="headerlink" title="2.2将blog模型增加到管理应用里面"></a>2.2将blog模型增加到管理应用里面</h5><p>编辑blog下面的admin.py文件,编辑如下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> <span class="hljs-keyword">admin</span><br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> BlogArticles<br><br><span class="hljs-keyword">admin</span>.site.register(BlogArticles)<br></code></pre></td></tr></table></figure><p>保存后刷新上面的网页,就可以发布博客了</p><p>如果想要博客列表展示更多信息可以修改admin.py下的代码,例如</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> <span class="hljs-keyword">admin</span><br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> BlogArticles<br><br><span class="hljs-keyword">class</span> BlogArticlesAdmin(<span class="hljs-keyword">admin</span>.ModelAdmin):<br>    list_display = (<span class="hljs-string">&#x27;title&#x27;</span>,<span class="hljs-string">&#x27;author&#x27;</span>,<span class="hljs-string">&#x27;publish&#x27;</span>)<br>    list_filter = (<span class="hljs-string">&#x27;publish&#x27;</span>,<span class="hljs-string">&#x27;author&#x27;</span>)<br>    search_fields = (<span class="hljs-string">&#x27;title&#x27;</span>,<span class="hljs-string">&#x27;body&#x27;</span>)<br>    raw_id_fields = (<span class="hljs-string">&#x27;author&#x27;</span>,)<br>    date_hierarchy = <span class="hljs-string">&#x27;publish&#x27;</span><br>    ordering = [<span class="hljs-string">&#x27;-publish&#x27;</span>,<span class="hljs-string">&#x27;author&#x27;</span>]<br><br><span class="hljs-keyword">admin</span>.site.register(BlogArticles,BlogArticlesAdmin)<br></code></pre></td></tr></table></figure><p>保存,刷新网页</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django-应用与路由</title>
    <link href="/2021/02/15/Django-%E5%BA%94%E7%94%A8%E4%B8%8E%E8%B7%AF%E7%94%B1/"/>
    <url>/2021/02/15/Django-%E5%BA%94%E7%94%A8%E4%B8%8E%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h3 id="1-项目与应用"><a href="#1-项目与应用" class="headerlink" title="1.项目与应用"></a>1.项目与应用</h3><h5 id="1-1创建应用"><a href="#1-1创建应用" class="headerlink" title="1.1创建应用"></a>1.1创建应用</h5><p>​     django-admin 可以查看Django命令</p><p>​    一个项目可以对应多个应用</p><p>​    在项目根目录(myproject)下创建应用:blog</p><p>​    执行以下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py startapp blog<br></code></pre></td></tr></table></figure><p>​    用 编辑器(vscode,pycharm) 打开myproject文件夹</p><p>​    在blog目录下会有以下已经自动生成的py文件,这就体现出了Django框    架的意义了</p><h5 id="1-2-文件说明"><a href="#1-2-文件说明" class="headerlink" title="1.2 文件说明"></a>1.2 文件说明</h5><p>settings.py    主要是对项目做一些初始化的设置,针对整个项目进行有关参数的配置,在settings文件的INSTALLED_APPS里面末尾添加应用名字  ‘blog’  不要忘记 逗号.</p><p>​                        在77行有一个DATABASE,这个是设置数据库的,我们这边使用默认设置.</p><p>​                        26行的DEBUG 在开发模式下需要改成 DEBUG=True,在生产环境下DEBUG=False</p><p>​                        107 行    LANGUAGE_CODE = ‘zh-hans’   显示中文</p><p>​                                        TIME_ZONE = ‘Asia/Shanghai’   设置时区(东八区)</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml">INSTALLED_APPS = [</span><br><span class="xml">    &#x27;django.contrib.admin&#x27;,</span><br><span class="xml">    &#x27;django.contrib.auth&#x27;,</span><br><span class="xml">    &#x27;django.contrib.contenttypes&#x27;,</span><br><span class="xml">    &#x27;django.contrib.sessions&#x27;,</span><br><span class="xml">    &#x27;django.contrib.messages&#x27;,</span><br><span class="xml">    &#x27;django.contrib.staticfiles&#x27;,</span><br><span class="xml">    &#x27;blog&#x27;,     #在这儿添加,这个在settings.py文件的33行</span><br><span class="xml">]</span><br></code></pre></td></tr></table></figure><p>urls.py    这个文件是用来配置URL的,将里面末尾代码修改成以下这样</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="xml">from django.contrib import admin</span><br><span class="xml">from django.urls import path,include</span><br><br><span class="xml">urlpatterns = [</span><br><span class="xml">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="xml">    path(&#x27;blog/&#x27;,include(&#x27;blog.urls&#x27;)),</span><br><span class="xml">]</span><br></code></pre></td></tr></table></figure><p>admin.py    可以自定义Django管理工具</p><p>app.py       对应用的一些配置</p><p>models.py    数据模型文件</p><p>tests.py       测试文档</p><p>views.py    用于保存响应各种请求的函数或者类</p><h3 id="2-编辑应用"><a href="#2-编辑应用" class="headerlink" title="2.编辑应用"></a>2.编辑应用</h3><p>在views.py 文件中简单写一个视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">home</span>(<span class="hljs-params">request</span>):</span>   <span class="hljs-comment"># request 必不可少</span><br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在urls.py文件中配置一下路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;&#x27;</span>,views.home),<br>]<br></code></pre></td></tr></table></figure><p>保存上面所有修改的文件</p><h3 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h3><p>​    执行 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Python manage runserver</span><br></code></pre></td></tr></table></figure><p>打开返回的网址 <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> </p><p>需要在网址后面加上 blog    <a href="http://127.0.0.1:8000/blog">http://127.0.0.1:8000/blog</a>   </p><p>这样就成功的创建了一个项目</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装-Django</title>
    <link href="/2021/02/15/Django-%E5%AE%89%E8%A3%85/"/>
    <url>/2021/02/15/Django-%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="1-安装Django"><a href="#1-安装Django" class="headerlink" title="1.安装Django"></a>1.安装Django</h3><h5 id="1-1安装Django"><a href="#1-1安装Django" class="headerlink" title="1.1安装Django"></a>1.1安装Django</h5><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> Django<br></code></pre></td></tr></table></figure><h5 id="1-2指定安装Django版本"><a href="#1-2指定安装Django版本" class="headerlink" title="1.2指定安装Django版本"></a>1.2指定安装Django版本</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install Django==<span class="hljs-number">2.2</span>        <span class="hljs-comment">#指定2.2的版本</span><br></code></pre></td></tr></table></figure><h5 id="1-3查验版本"><a href="#1-3查验版本" class="headerlink" title="1.3查验版本"></a>1.3查验版本</h5><p>进入Python交互模式后输入以下指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> django<br>django.get_version()<br></code></pre></td></tr></table></figure><h3 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h3><h5 id="2-1创建项目目录"><a href="#2-1创建项目目录" class="headerlink" title="2.1创建项目目录"></a>2.1创建项目目录</h5><p>​    进入目录</p><p>​    执行创建项目命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">mkdir myproject       <span class="hljs-comment"># 创建目录</span><br>cd myproject    <span class="hljs-comment">#进入目录</span><br><br>django-admin startproject mysite .   <span class="hljs-comment"># mysite 是项目名称 可以自己修改,mysite后面的那个点不要忽略了,意思是在当前文件夹下创建项目</span><br></code></pre></td></tr></table></figure><p>此刻 myproject 文件夹下应该有以下文件或文件夹</p><p>manage.py       mysite</p><h5 id="2-2执行运行项目指令"><a href="#2-2执行运行项目指令" class="headerlink" title="2.2执行运行项目指令"></a>2.2执行运行项目指令</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Python manage.py runserver<br></code></pre></td></tr></table></figure><p>​    执行成功后打开返回的网址</p><p>​    一般是这个网址( <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> )</p><p>​    打开后能看见一个绿色的小火箭就说明成功了</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-快速搭建静态博客</title>
    <link href="/2021/02/13/hexo-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/02/13/hexo-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>第一步 </p><p>​    1.注册一个github账号   github.com</p><p>​    2.创建公开代码仓库</p><p>第二步</p><p>​    1.安装 nodejs 与 npm</p><p>​        到node官方网站下载安装包,直接安装就行,node安装好后npm也就安装好了</p><p>​        官方网站: <a href="https://nodejs.org/">https://nodejs.org</a></p><p>​    2.安装hexo</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><p>​    3.本地创建目录:github-blog</p><p>​    4.进入目录并初始化目录,执行以下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> github-blog<br>hexo init<br>npm install<br></code></pre></td></tr></table></figure><p> 5.启动服务         执行以下代码</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p> 6.在浏览器中打开cmd返回的网址,这就是初始博客网页</p><p>第三步  上传第一篇文章</p><p>​    1.在github-blog目录中  执行以下代码</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm i <span class="hljs-comment">--save hexo-deployer-git</span><br></code></pre></td></tr></table></figure><p>​    2.编辑: _config.yml</p><p>​        在github-blog目录下找到 _config.yml 文件并打开</p><p>​        在这个文件末尾添加</p><p>​            </p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">    type:</span> git<br><span class="hljs-symbol">    repo:</span> https: <span class="hljs-comment">//github.com/username/username.github.io</span><br><span class="hljs-symbol">    branch:</span> master<br></code></pre></td></tr></table></figure><p>​        注意:  上面repo后面的网址填写github上自己创建个人公开仓库的网址</p><p>​    3.在github-blog目录中   </p><p>​                     执行:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d-g</span><br></code></pre></td></tr></table></figure><p>​        进入隐藏目录:  执行以下代码</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-string">.deploy_git</span><br></code></pre></td></tr></table></figure><p>​        声明github账号:  执行以下代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.email“youremail@github”<br>git config <span class="hljs-keyword">user</span>.name“yourname”<br></code></pre></td></tr></table></figure><p>​            注意: 上面yourname 和 youremail@github  填自己的用户名与邮箱</p><p>​        返回github-blog目录:</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">cd</span></span> ..<br>hexo d<br></code></pre></td></tr></table></figure><ol start="4"><li><p>还是在github-blog目录中</p><p>   执行: hexo new “my-first-git”       # 引号里的是文章名</p><p>执行上面一步后,会得到一个路径</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">hexo new <span class="hljs-string">&quot;my-first-git&quot;</span>               # 执行这一句,得到下面两句<br><span class="hljs-builtin-name">INFO</span>  Validating config<br><span class="hljs-builtin-name">INFO</span>  Created: D:\python--start\github-blog\source\_posts\my-first-git.md<br></code></pre></td></tr></table></figure><p>到D:\python–start\github-blog\source_posts中打开  my-first-git.md文件 在这个文件中就可以写上自己的文章</p><p>5.git到远程仓库里</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d -g</span><br></code></pre></td></tr></table></figure><p>喝杯茶什么的就可以到远程仓库里看看了,这样就完成了上传文章.</p></li></ol><p>第四步  更换主题</p><p>​    1.到   <a href="https://hexo.io/themes/">https://hexo.io/themes/</a>   网站中找到自己需要的主题</p><p>​    2.按照文档说明操作就可以更换主题了</p><p>​        </p><p>hexo命令</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">hexo <span class="hljs-built_in">clean</span>  清除缓存<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/02/12/hello-world/"/>
    <url>/2021/02/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hello world</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

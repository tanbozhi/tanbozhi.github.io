<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Django-视图函数和模板</title>
    <link href="/2021/02/17/Django-%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E6%9D%BF/"/>
    <url>/2021/02/17/Django-%E8%A7%86%E5%9B%BE%E5%87%BD%E6%95%B0%E5%92%8C%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django-ORM语法</title>
    <link href="/2021/02/16/Django-ORM%E8%AF%AD%E6%B3%95/"/>
    <url>/2021/02/16/Django-ORM%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>[TOC]</p><h1 id="Django-ORM基本语法"><a href="#Django-ORM基本语法" class="headerlink" title="Django-ORM基本语法"></a>Django-ORM基本语法</h1><p>在cmd中进入根目录(myproject),进入交互交互模式</p><h5 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell    #进入交互模式</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入模块</span></span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> blog.models <span class="keyword">import</span> BlogArticles</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 获得User中的用户名为damin的对象</span><br><span class="line">admin &#x3D; User.objects.get(username&#x3D;&#39;admin&#39;)   #username &#x3D; &#39;用户名&#39; 这个用户名必须在数据库里存在</span><br><span class="line"></span><br><span class="line">#创建一篇博客文章</span><br><span class="line">bolg &#x3D; BlogArticles(title&#x3D;&#39;hello world&#39;,author&#x3D;admin,body&#x3D;&#39;hello,i am coming&#39;)</span><br><span class="line"></span><br><span class="line">#保存,不要忘记,不能省略,保存后数据表中就有这篇文章了</span><br><span class="line">blog.save()</span><br></pre></td></tr></table></figure><h5 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Blogs = BlogArticles.objects.<span class="built_in">all</span>()   <span class="comment">#查询所有文章</span></span><br><span class="line">Blogs      <span class="comment">#执行这个就可以获得所有文章的title</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环出所有文章</span></span><br><span class="line"><span class="keyword">for</span> blog <span class="keyword">in</span> blogs:</span><br><span class="line">    print(blog.<span class="built_in">id</span>,blog.publish,blog.title,blog.author)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#查询ID为1的文章</span></span><br><span class="line">b = BlogArticles.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">b</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询作者admin写的文章</span></span><br><span class="line">BlogArticles.objects.<span class="built_in">filter</span>(author=admin)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反向查询,根据用户名查询用户发布的文章</span></span><br><span class="line">admin.blog_posts.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure><h5 id="修改保存操作"><a href="#修改保存操作" class="headerlink" title="修改保存操作"></a>修改保存操作</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改操作</span></span><br><span class="line">b = BlogArticles.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">b</span><br><span class="line">b.title=<span class="string">&#x27;新的文章名&#x27;</span></span><br><span class="line">b.save()    <span class="comment">#保存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除操作</span></span><br><span class="line">b.delete()</span><br></pre></td></tr></table></figure><h5 id="官方文档查询操作链接"><a href="#官方文档查询操作链接" class="headerlink" title="官方文档查询操作链接"></a>官方文档查询操作链接</h5><p><a href="https://docs.djangoproject.com/zh-hans/3.0/topics/db/queries/">https://docs.djangoproject.com/zh-hans/3.0/topics/db/queries/</a></p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django-模型与超管</title>
    <link href="/2021/02/16/Django-%E6%A8%A1%E5%9E%8B%E4%B8%8E%E8%B6%85%E7%AE%A1/"/>
    <url>/2021/02/16/Django-%E6%A8%A1%E5%9E%8B%E4%B8%8E%E8%B6%85%E7%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="1-模型"><a href="#1-模型" class="headerlink" title="1.模型"></a>1.模型</h3><h5 id="1-1网页内容来源"><a href="#1-1网页内容来源" class="headerlink" title="1.1网页内容来源"></a>1.1网页内容来源</h5><ul><li><p>​    静态: 直接写到HTML文件中</p></li><li><p>​    动态: 来自数据库</p><p>​            使用sql语句读取数据库</p><p>​            Django通过ORM实现对数据库的读写</p><p>​            </p></li></ul><h5 id="1-2-ORM"><a href="#1-2-ORM" class="headerlink" title="1.2  ORM"></a>1.2  ORM</h5><p>​    ORM优点: 可移植性强,安全性好,查询语法简单</p><p>​    ORM实现方法</p><ul><li><p>编写数据类型</p></li><li><p>位置:models.py(也可以是其他文件)</p></li><li><p>继承:django.db.models.Model</p></li><li><p>对应的数据表: appname_modelname,     (都是小写字母)</p></li><li><p>创建数据表库: 迁移操作</p><p>​    Python manage.py makemigrations</p><p>​    python manage.py  migrate</p></li></ul><p>在models.py文件下写入以下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone    <span class="hljs-comment">#引入时间模块</span><br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> User<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BlogArticles</span>(<span class="hljs-params">models.Model</span>):</span>    <span class="hljs-comment"># 定义模型类名称BlogArticles,继承models.Model类</span><br>    title = models.CharField(max_length=<span class="hljs-number">300</span>)    <span class="hljs-comment"># 字段 每一个字段后面都有一个field类的实例</span><br>    author = models.ForeignKey(User, on_delete=models.CASCADE,related_name=<span class="hljs-string">&#x27;blog_posts&#x27;</span>)<br>    body = models.TextField()       <br>    <span class="hljs-comment">#字段类型查看网址 https://docs.djangoproject.com/zh-hans/3.0/ref/models/fields/#model-field-types</span><br><br>    publish = models.DateTimeField(default=timezone.now)     <span class="hljs-comment"># 字段</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mata</span>:</span>                            <span class="hljs-comment"># 内部类</span><br>        orderby = (<span class="hljs-string">&#x27;-publish&#x27;</span>,)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.title<br></code></pre></td></tr></table></figure><p><img src=".deploy_git%5Cimg-blog%5CQQ%E6%88%AA%E5%9B%BE20210216144907.png"></p><p> author = models.ForeignKey(User, on_delete=models.CASCADE,<br>        related_name=’blog_posts’)        </p><p>​         ForeignKey:外键,—对多(多对一)关系</p><p>​        User:被关联的类</p><p>​        on_delete=models.CASCADE:联级删除</p><p>​        related_name=‘blog _posts’: User的实例以blog _posts属性反向查询到BlogArticles的实例</p><h5 id="1-3-迁移数据"><a href="#1-3-迁移数据" class="headerlink" title="1.3 迁移数据"></a>1.3 迁移数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">python manage.py mekemigrations<br>python manage.py migrate<br></code></pre></td></tr></table></figure><p>查看数据表结构</p><p>​        可视化方法   :<a href="https://sqlitestudio.pl/index.rvt">https://sqlitestudio.pl/index.rvt</a></p><p>​        sqlite操作界面</p><h3 id="2-超管"><a href="#2-超管" class="headerlink" title="2.超管"></a>2.超管</h3><h5 id="2-1创建超管并登录界面"><a href="#2-1创建超管并登录界面" class="headerlink" title="2.1创建超管并登录界面"></a>2.1创建超管并登录界面</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> createsuperuser  #创建超管 并按照提示设置用户名,邮箱,密码<br><br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> runserver   #运行项目<br></code></pre></td></tr></table></figure><p>运行项目并用浏览器打开这个网址   <a href="http://localhost:8000/admin/">http://localhost:8000/admin/</a></p><h5 id="2-2将blog模型增加到管理应用里面"><a href="#2-2将blog模型增加到管理应用里面" class="headerlink" title="2.2将blog模型增加到管理应用里面"></a>2.2将blog模型增加到管理应用里面</h5><p>编辑blog下面的admin.py文件,编辑如下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> <span class="hljs-keyword">admin</span><br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> BlogArticles<br><br><span class="hljs-keyword">admin</span>.site.register(BlogArticles)<br></code></pre></td></tr></table></figure><p>保存后刷新上面的网页,就可以发布博客了</p><p>如果想要博客列表展示更多信息可以修改admin.py下的代码,例如</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> <span class="hljs-keyword">admin</span><br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> BlogArticles<br><br><span class="hljs-keyword">class</span> BlogArticlesAdmin(<span class="hljs-keyword">admin</span>.ModelAdmin):<br>    list_display = (<span class="hljs-string">&#x27;title&#x27;</span>,<span class="hljs-string">&#x27;author&#x27;</span>,<span class="hljs-string">&#x27;publish&#x27;</span>)<br>    list_filter = (<span class="hljs-string">&#x27;publish&#x27;</span>,<span class="hljs-string">&#x27;author&#x27;</span>)<br>    search_fields = (<span class="hljs-string">&#x27;title&#x27;</span>,<span class="hljs-string">&#x27;body&#x27;</span>)<br>    raw_id_fields = (<span class="hljs-string">&#x27;author&#x27;</span>,)<br>    date_hierarchy = <span class="hljs-string">&#x27;publish&#x27;</span><br>    ordering = [<span class="hljs-string">&#x27;-publish&#x27;</span>,<span class="hljs-string">&#x27;author&#x27;</span>]<br><br><span class="hljs-keyword">admin</span>.site.register(BlogArticles,BlogArticlesAdmin)<br></code></pre></td></tr></table></figure><p>保存,刷新网页</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django-应用与路由</title>
    <link href="/2021/02/15/Django-%E5%BA%94%E7%94%A8%E4%B8%8E%E8%B7%AF%E7%94%B1/"/>
    <url>/2021/02/15/Django-%E5%BA%94%E7%94%A8%E4%B8%8E%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<h3 id="1-项目与应用"><a href="#1-项目与应用" class="headerlink" title="1.项目与应用"></a>1.项目与应用</h3><h5 id="1-1创建应用"><a href="#1-1创建应用" class="headerlink" title="1.1创建应用"></a>1.1创建应用</h5><p>​     django-admin 可以查看Django命令</p><p>​    一个项目可以对应多个应用</p><p>​    在项目根目录(myproject)下创建应用:blog</p><p>​    执行以下命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp blog</span><br></pre></td></tr></table></figure><p>​    用 编辑器(vscode,pycharm) 打开myproject文件夹</p><p>​    在blog目录下会有以下已经自动生成的py文件,这就体现出了Django框    架的意义了</p><h5 id="1-2-文件说明"><a href="#1-2-文件说明" class="headerlink" title="1.2 文件说明"></a>1.2 文件说明</h5><p>settings.py    主要是对项目做一些初始化的设置,针对整个项目进行有关参数的配置,在settings文件的INSTALLED_APPS里面末尾添加应用名字  ‘blog’  不要忘记 逗号.</p><p>​                        在77行有一个DATABASE,这个是设置数据库的,我们这边使用默认设置.</p><p>​                        26行的DEBUG 在开发模式下需要改成 DEBUG=True,在生产环境下DEBUG=False</p><p>​                        107 行    LANGUAGE_CODE = ‘zh-hans’   显示中文</p><p>​                                        TIME_ZONE = ‘Asia/Shanghai’   设置时区(东八区)</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">INSTALLED_APPS = [</span></span><br><span class="line"><span class="xml">    &#x27;django.contrib.admin&#x27;,</span></span><br><span class="line"><span class="xml">    &#x27;django.contrib.auth&#x27;,</span></span><br><span class="line"><span class="xml">    &#x27;django.contrib.contenttypes&#x27;,</span></span><br><span class="line"><span class="xml">    &#x27;django.contrib.sessions&#x27;,</span></span><br><span class="line"><span class="xml">    &#x27;django.contrib.messages&#x27;,</span></span><br><span class="line"><span class="xml">    &#x27;django.contrib.staticfiles&#x27;,</span></span><br><span class="line"><span class="xml">    &#x27;blog&#x27;,     #在这儿添加,这个在settings.py文件的33行</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure><p>urls.py    这个文件是用来配置URL的,将里面末尾代码修改成以下这样</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">from django.contrib import admin</span></span><br><span class="line"><span class="xml">from django.urls import path,include</span></span><br><span class="line"></span><br><span class="line"><span class="xml">urlpatterns = [</span></span><br><span class="line"><span class="xml">    path(&#x27;admin/&#x27;, admin.site.urls),</span></span><br><span class="line"><span class="xml">    path(&#x27;blog/&#x27;,include(&#x27;blog.urls&#x27;)),</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure><p>admin.py    可以自定义Django管理工具</p><p>app.py       对应用的一些配置</p><p>models.py    数据模型文件</p><p>tests.py       测试文档</p><p>views.py    用于保存响应各种请求的函数或者类</p><h3 id="2-编辑应用"><a href="#2-编辑应用" class="headerlink" title="2.编辑应用"></a>2.编辑应用</h3><p>在views.py 文件中简单写一个视图函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">request</span>):</span>   <span class="comment"># request 必不可少</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在urls.py文件中配置一下路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>,views.home),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>保存上面所有修改的文件</p><h3 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h3><p>​    执行 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python manage runserver</span><br></pre></td></tr></table></figure><p>打开返回的网址 <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> </p><p>需要在网址后面加上 blog    <a href="http://127.0.0.1:8000/blog">http://127.0.0.1:8000/blog</a>   </p><p>这样就成功的创建了一个项目</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安装-Django</title>
    <link href="/2021/02/15/Django-%E5%AE%89%E8%A3%85/"/>
    <url>/2021/02/15/Django-%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="1-安装Django"><a href="#1-安装Django" class="headerlink" title="1.安装Django"></a>1.安装Django</h3><h5 id="1-1安装Django"><a href="#1-1安装Django" class="headerlink" title="1.1安装Django"></a>1.1安装Django</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django</span><br></pre></td></tr></table></figure><h5 id="1-2指定安装Django版本"><a href="#1-2指定安装Django版本" class="headerlink" title="1.2指定安装Django版本"></a>1.2指定安装Django版本</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Django==<span class="number">2.2</span>        <span class="comment">#指定2.2的版本</span></span><br></pre></td></tr></table></figure><h5 id="1-3查验版本"><a href="#1-3查验版本" class="headerlink" title="1.3查验版本"></a>1.3查验版本</h5><p>进入Python交互模式后输入以下指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> django</span><br><span class="line">django.get_version()</span><br></pre></td></tr></table></figure><h3 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h3><h5 id="2-1创建项目目录"><a href="#2-1创建项目目录" class="headerlink" title="2.1创建项目目录"></a>2.1创建项目目录</h5><p>​    进入目录</p><p>​    执行创建项目命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir myproject       <span class="comment"># 创建目录</span></span><br><span class="line">cd myproject    <span class="comment">#进入目录</span></span><br><span class="line"></span><br><span class="line">django-admin startproject mysite .   <span class="comment"># mysite 是项目名称 可以自己修改,mysite后面的那个点不要忽略了,意思是在当前文件夹下创建项目</span></span><br></pre></td></tr></table></figure><p>此刻 myproject 文件夹下应该有以下文件或文件夹</p><p>manage.py       mysite</p><h5 id="2-2执行运行项目指令"><a href="#2-2执行运行项目指令" class="headerlink" title="2.2执行运行项目指令"></a>2.2执行运行项目指令</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python manage.py runserver</span><br></pre></td></tr></table></figure><p>​    执行成功后打开返回的网址</p><p>​    一般是这个网址( <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> )</p><p>​    打开后能看见一个绿色的小火箭就说明成功了</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-快速搭建静态博客</title>
    <link href="/2021/02/13/hexo-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/02/13/hexo-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>Windows系统搭建静态博客</p><p>第一步 </p><p>​    1.注册一个github账号   github.com</p><p>​    2.创建公开代码仓库</p><p>第二步</p><p>​    1.安装 nodejs 与 npm</p><p>​        到node官方网站下载安装包,直接安装就行,node安装好后npm也就安装好了</p><p>​        官方网站: <a href="https://nodejs.org/">https://nodejs.org</a></p><p>​    2.安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>​    3.本地创建目录:github-blog</p><p>​    4.进入目录并初始化目录,执行以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd github-blog</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p> 5.启动服务         执行以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p> 6.在浏览器中打开cmd返回的网址,这就是初始博客网页</p><p>第三步  上传第一篇文章</p><p>​    1.在github-blog目录中  执行以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>​    2.编辑: _config.yml</p><p>​        在github-blog目录下找到 _config.yml 文件并打开</p><p>​        在这个文件末尾添加</p><p>​            </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: https: &#x2F;&#x2F;github.com&#x2F;username&#x2F;username.github.io</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>​        注意:  上面repo后面的网址填写github上自己创建个人公开仓库的网址</p><p>​    3.在github-blog目录中   </p><p>​                     执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d-g</span><br></pre></td></tr></table></figure><p>​        进入隐藏目录:  执行以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd .deploy_git</span><br></pre></td></tr></table></figure><p>​        声明github账号:  执行以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.email“youremail@github”</span><br><span class="line">git config user.name“yourname”</span><br></pre></td></tr></table></figure><p>​            注意: 上面yourname 和 youremail@github  填自己的用户名与邮箱</p><p>​        返回github-blog目录:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ..</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><ol start="4"><li><p>还是在github-blog目录中</p><p>   执行: hexo new “my-first-git”       # 引号里的是文章名</p><p>执行上面一步后,会得到一个路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;my-first-git&quot;               # 执行这一句,得到下面两句</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: D:\python--start\github-blog\source\_posts\my-first-git.md</span><br></pre></td></tr></table></figure><p>到D:\python–start\github-blog\source_posts中打开  my-first-git.md文件 在这个文件中就可以写上自己的文章</p><p>5.git到远程仓库里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>喝杯茶什么的就可以到远程仓库里看看了,这样就完成了上传文章.</p></li></ol><p>第四步  更换主题</p><p>​    1.到   <a href="https://hexo.io/themes/">https://hexo.io/themes/</a>   网站中找到自己需要的主题</p><p>​    2.按照文档说明操作就可以更换主题了</p><p>​        </p>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/02/12/hello-world/"/>
    <url>/2021/02/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>hello world</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
